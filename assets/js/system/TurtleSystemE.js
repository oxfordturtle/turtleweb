!function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=68)}([function(n,e,t){"use strict";e.a=(n,e)=>{const t=e?new Error(n.replace("{lex}",`"${e.content}"`)):new Error(n);return t.lexeme=e,t.type="Compiler",t}},function(n,e,t){"use strict";e.a=[{index:1,names:{BASIC:"GREEN",Pascal:"green",Python:"green"},type:"integer",value:2263842,hex:"228B22",text:"white"},{index:2,names:{BASIC:"RED",Pascal:"red",Python:"red"},type:"integer",value:16711680,hex:"FF0000",text:"white"},{index:3,names:{BASIC:"BLUE",Pascal:"blue",Python:"blue"},type:"integer",value:255,hex:"0000FF",text:"white"},{index:4,names:{BASIC:"YELLOW",Pascal:"yellow",Python:"yellow"},type:"integer",value:16776960,hex:"FFFF00",text:"black"},{index:5,names:{BASIC:"VIOLET",Pascal:"violet",Python:"violet"},type:"integer",value:9055202,hex:"8A2BE2",text:"white"},{index:6,names:{BASIC:"LIME",Pascal:"lime",Python:"lime"},type:"integer",value:65280,hex:"00FF00",text:"black"},{index:7,names:{BASIC:"ORANGE",Pascal:"orange",Python:"orange"},type:"integer",value:16755200,hex:"FFAA00",text:"black"},{index:8,names:{BASIC:"SKYBLUE",Pascal:"skyblue",Python:"skyblue"},type:"integer",value:45311,hex:"00B0FF",text:"white"},{index:9,names:{BASIC:"BROWN",Pascal:"brown",Python:"brown"},type:"integer",value:9849600,hex:"964B00",text:"white"},{index:10,names:{BASIC:"PINK",Pascal:"pink",Python:"pink"},type:"integer",value:15602313,hex:"EE1289",text:"white"},{index:11,names:{BASIC:"DARKGREEN",Pascal:"darkgreen",Python:"darkgreen"},type:"integer",value:25600,hex:"006400",text:"white"},{index:12,names:{BASIC:"DARKRED",Pascal:"darkred",Python:"darkred"},type:"integer",value:11674146,hex:"B22222",text:"white"},{index:13,names:{BASIC:"DARKBLUE",Pascal:"darkblue",Python:"darkblue"},type:"integer",value:128,hex:"000080",text:"white"},{index:14,names:{BASIC:"OCHRE",Pascal:"ochre",Python:"ochre"},type:"integer",value:12628016,hex:"C0B030",text:"white"},{index:15,names:{BASIC:"INDIGO",Pascal:"indigo",Python:"indigo"},type:"integer",value:4915330,hex:"4B0082",text:"white"},{index:16,names:{BASIC:"OLIVE",Pascal:"olive",Python:"olive"},type:"integer",value:8421376,hex:"808000",text:"white"},{index:17,names:{BASIC:"ORANGERED",Pascal:"orangered",Python:"orangered"},type:"integer",value:16737792,hex:"FF6600",text:"white"},{index:18,names:{BASIC:"TEAL",Pascal:"teal",Python:"teal"},type:"integer",value:32896,hex:"008080",text:"white"},{index:19,names:{BASIC:"DARKBROWN",Pascal:"darkbrown",Python:"darkbrown"},type:"integer",value:6045747,hex:"5C4033",text:"white"},{index:20,names:{BASIC:"MAGENTA",Pascal:"magenta",Python:"magenta"},type:"integer",value:16711935,hex:"FF00FF",text:"white"},{index:21,names:{BASIC:"LIGHTGREEN",Pascal:"lightgreen",Python:"lightgreen"},type:"integer",value:10025880,hex:"98FB98",text:"black"},{index:22,names:{BASIC:"LIGHTRED",Pascal:"lightred",Python:"lightred"},type:"integer",value:13458524,hex:"CD5C5C",text:"white"},{index:23,names:{BASIC:"LIGHTBLUE",Pascal:"lightblue",Python:"lightblue"},type:"integer",value:10075135,hex:"99BBFF",text:"black"},{index:24,names:{BASIC:"CREAM",Pascal:"cream",Python:"cream"},type:"integer",value:16777147,hex:"FFFFBB",text:"black"},{index:25,names:{BASIC:"LILAC",Pascal:"lilac",Python:"lilac"},type:"integer",value:11572223,hex:"B093FF",text:"white"},{index:26,names:{BASIC:"YELLOWGREEN",Pascal:"yellowgreen",Python:"yellowgreen"},type:"integer",value:11193395,hex:"AACC33",text:"black"},{index:27,names:{BASIC:"PEACH",Pascal:"peach",Python:"peach"},type:"integer",value:16764080,hex:"FFCCB0",text:"black"},{index:28,names:{BASIC:"CYAN",Pascal:"cyan",Python:"cyan"},type:"integer",value:65535,hex:"00FFFF",text:"black"},{index:29,names:{BASIC:"LIGHTBROWN",Pascal:"lightbrown",Python:"lightbrown"},type:"integer",value:11567184,hex:"B08050",text:"white"},{index:30,names:{BASIC:"LIGHTPINK",Pascal:"lightpink",Python:"lightpink"},type:"integer",value:16758465,hex:"FFB6C1",text:"black"},{index:31,names:{BASIC:"SEAGREEN",Pascal:"seagreen",Python:"seagreen"},type:"integer",value:3978097,hex:"3CB371",text:"white"},{index:32,names:{BASIC:"MAROON",Pascal:"maroon",Python:"maroon"},type:"integer",value:8388608,hex:"800000",text:"white"},{index:33,names:{BASIC:"ROYAL",Pascal:"royal",Python:"royal"},type:"integer",value:4286945,hex:"4169E1",text:"white"},{index:34,names:{BASIC:"GOLD",Pascal:"gold",Python:"gold"},type:"integer",value:16762880,hex:"FFC800",text:"black"},{index:35,names:{BASIC:"PURPLE",Pascal:"purple",Python:"purple"},type:"integer",value:8388736,hex:"800080",text:"white"},{index:36,names:{BASIC:"EMERALD",Pascal:"emerald",Python:"emerald"},type:"integer",value:51543,hex:"00C957",text:"white"},{index:37,names:{BASIC:"SALMON",Pascal:"salmon",Python:"salmon"},type:"integer",value:16416882,hex:"FA8072",text:"white"},{index:38,names:{BASIC:"TURQUOISE",Pascal:"turquoise",Python:"turquoise"},type:"integer",value:48833,hex:"00BEC1",text:"white"},{index:39,names:{BASIC:"COFFEE",Pascal:"coffee",Python:"coffee"},type:"integer",value:9596735,hex:"926F3F",text:"white"},{index:40,names:{BASIC:"ROSE",Pascal:"rose",Python:"rose"},type:"integer",value:16746666,hex:"FF88AA",text:"white"},{index:41,names:{BASIC:"GREENGREY",Pascal:"greengrey",Python:"greengrey"},type:"integer",value:7377008,hex:"709070",text:"white"},{index:42,names:{BASIC:"REDGREY",Pascal:"redgrey",Python:"redgrey"},type:"integer",value:11567232,hex:"B08080",text:"white"},{index:43,names:{BASIC:"BLUEGREY",Pascal:"bluegrey",Python:"bluegrey"},type:"integer",value:8421536,hex:"8080A0",text:"white"},{index:44,names:{BASIC:"YELLOWGREY",Pascal:"yellowgrey",Python:"yellowgrey"},type:"integer",value:9474160,hex:"909070",text:"white"},{index:45,names:{BASIC:"DARKGREY",Pascal:"darkgrey",Python:"darkgrey"},type:"integer",value:4210752,hex:"404040",text:"white"},{index:46,names:{BASIC:"MIDGREY",Pascal:"midgrey",Python:"midgrey"},type:"integer",value:8421504,hex:"808080",text:"white"},{index:47,names:{BASIC:"LIGHTGREY",Pascal:"lightgrey",Python:"lightgrey"},type:"integer",value:10526880,hex:"A0A0A0",text:"white"},{index:48,names:{BASIC:"SILVER",Pascal:"silver",Python:"silver"},type:"integer",value:12632256,hex:"C0C0C0",text:"black"},{index:49,names:{BASIC:"WHITE",Pascal:"white",Python:"white"},type:"integer",value:16777215,hex:"FFFFFF",text:"black"},{index:50,names:{BASIC:"BLACK",Pascal:"black",Python:"black"},type:"integer",value:0,hex:"000000",text:"white"}]},function(module,__webpack_exports__,__webpack_require__){"use strict";var _error_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),common_constants_colours__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1);__webpack_exports__.a=(identifier,lexemes,program)=>{try{const code=lexemes.map(toJsString).join(""),constants={};common_constants_colours__WEBPACK_IMPORTED_MODULE_1__.a.forEach(n=>{constants[n.names[program.language]]=n.value}),program.constants.forEach(n=>{constants[n.name]=n.value});const value=eval(code);switch(typeof value){case"boolean":return value?-1:0;case"number":return value>=0?Math.floor(value):Math.ceil(value);case"string":return value;default:throw Object(_error_js__WEBPACK_IMPORTED_MODULE_0__.a)()}}catch(n){throw Object(_error_js__WEBPACK_IMPORTED_MODULE_0__.a)("Could not parse expression for constant value.",identifier)}};const toJsString=n=>{switch(n.type){case"boolean":return n.content.toLowerCase();case"integer":return n.content.replace(/^[$&]/,"0x");case"string":return n.content;case"identifier":return`constants['${n.content}']`;case"operator":switch(n.value){case"plus":return"+";case"subt":return"-";case"mult":return"*";case"divr":case"div":return"/";case"mod":return"%";case"eqal":return"===";case"noeq":return"!==";case"lseq":return"<=";case"mreq":return">=";case"less":return"<";case"more":return">";case"bnot":return"!";case"not":return"~";case"band":return"&&";case"and":return"&";case"bor":return"||";case"or":return"|";case"xor":return"^"}break;case"punctuation":if("("===n.content||")"===n.content)return n.content;throw Object(_error_js__WEBPACK_IMPORTED_MODULE_0__.a)();default:throw Object(_error_js__WEBPACK_IMPORTED_MODULE_0__.a)()}}},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,36,115,80,49,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,26,97,20],[128,26],[140,1],[144,10,2],[85,10,1,80,2,115,98,10,2],[82,10,2,80,1,64,82,10,2,80,2,64,10,129,12],[80,1,97,48],[128,15],[82,10,2,80,1,25,136,6],[82,12,1,82,10,2,80,2,25,136,6],[82,12,1,24,97,48],[81,48,98,10,1],[81,10,97,12,145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115,98,11,2],[82,11,2,80,1,64,82,11,2,80,2,64,10,129,23],[81,19,82,11,2,2,120,24,4,80,1,2,113],[128,24],[81,19,82,11,2,2,120,24,4,81,19,82,11,2,80,1,25,2,120,24,4,112,81,19,82,11,2,80,2,25,2,120,24,4,112,24,2,113],[81,19,82,11,2,2,120,24,4,112,98,11,1],[81,11,97,12,145,11,141,137],[80,-1,80,16777147,80,-1,166],[87,20,70,105,114,115,116,44,32,98,121,32,114,101,99,117,114,115,105,111,110,58,190,191],[80,0,177],[80,1],[97,47,80,25],[81,47,69,129,35],[87,4,102,105,98,40,81,47,49,54,87,4,41,32,61,32,54,81,47,136,6],[82,12,1,49,54,190,191,147],[81,47,4,128,30],[87,12,84,105,109,101,32,116,97,107,101,110,58,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,190,191,147],[87,0,190,191],[87,19,84,104,101,110,44,32,98,121,32,105,116,101,114,97,116,105,111,110,58,190,191],[80,0,177],[80,1],[97,47,80,25],[81,47,69,129,45],[87,4,102,105,98,40,81,47,49,54,87,4,41,32,61,32,54,81,47,136,17],[82,12,1,49,54,190,191,147],[81,47,4,128,40],[87,12,84,105,109,101,32,116,97,107,101,110,58,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,190,191,147],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,34,115,80,47,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,22,97,21],[80,25,97,22],[128,25],[140,1],[144,10,2],[85,10,1,80,2,115,98,10,2],[82,10,2,80,1,64,82,10,2,80,2,64,10,129,12],[80,1,98,10,1],[128,15],[82,10,2,80,1,25,136,6],[82,12,1,82,10,2,80,2,25,136,6],[82,12,1,24,98,10,1],[81,10,97,12,145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115,98,11,2],[82,11,2,80,1,64,82,11,2,80,2,64,10,129,22],[81,21,82,11,2,80,1,25,2,120,24,4,80,1,2,113],[128,23],[81,21,82,11,2,80,1,25,2,120,24,4,81,21,82,11,2,80,1,25,80,1,25,2,120,24,4,112,81,21,82,11,2,80,2,25,80,1,25,2,120,24,4,112,24,2,113],[81,21,82,11,2,80,1,25,2,120,24,4,112,98,11,1],[81,11,97,12,145,11,141,137],[80,-1,80,16777147,80,-1,166],[87,20,70,105,114,115,116,44,32,98,121,32,114,101,99,117,114,115,105,111,110,58,190,191],[80,0,177],[80,1],[97,20,80,25],[81,20,69,129,34],[87,4,102,105,98,40,81,20,49,54,87,4,41,32,61,32,54,81,20,136,6],[82,12,1,49,54,190,191],[81,20,4,147,128,29],[87,12,84,105,109,101,32,116,97,107,101,110,58,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,190,191,147],[87,0,190,191],[87,19,84,104,101,110,44,32,98,121,32,105,116,101,114,97,116,105,111,110,58,190,191],[80,0,177],[80,1],[97,20,80,25],[81,20,69,129,44],[87,4,102,105,98,40,81,20,49,54,87,4,41,32,61,32,54,81,20,136,16],[82,12,1,49,54,190,191],[81,20,4,147,128,39],[87,12,84,105,109,101,32,116,97,107,101,110,58,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,190,191,147],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,85,115,80,95,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,11,97,17],[84,30,97,29],[80,11,97,30],[84,43,97,42],[80,11,97,43],[84,56,97,55],[80,11,97,56],[84,69,97,68],[80,11,97,69],[84,82,97,81],[80,11,97,82],[80,1],[97,94,80,10],[81,94,69,129,25],[81,68,81,94,2,120,24,4,80,70,80,130,80,70,25,19,4,24,2,113],[81,81,81,94,2,120,24,4,81,94,222,2,113],[81,16,81,94,2,120,24,4,80,1000,80,2,81,68,81,94,2,120,24,4,112,26,25,19,4,81,68,81,94,2,120,24,4,112,24,2,113],[81,29,81,94,2,120,24,4,80,1000,80,2,81,68,81,94,2,120,24,4,112,26,25,19,4,81,68,81,94,2,120,24,4,112,24,2,113],[81,42,81,94,2,120,24,4,80,15,19,4,80,7,25,2,113],[81,55,81,94,2,120,24,4,80,15,19,4,80,7,25,2,113],[81,94,4,128,16],[163],[80,16777215,248],[80,1],[97,94,80,10],[81,94,69,129,40],[81,16,81,94,2,120,24,4,81,16,81,94,2,120,24,4,112,81,42,81,94,2,120,24,4,112,24,2,113],[81,29,81,94,2,120,24,4,81,29,81,94,2,120,24,4,112,81,55,81,94,2,120,24,4,112,24,2,113],[81,16,81,94,2,120,24,4,112,81,29,81,94,2,120,24,4,112,224],[81,81,81,94,2,120,24,4,112,221],[81,68,81,94,2,120,24,4,112,243],[81,16,81,94,2,120,24,4,112,81,68,81,94,2,120,24,4,112,66,81,16,81,94,2,120,24,4,112,80,1000,81,68,81,94,2,120,24,4,112,25,67,10,129,37],[81,42,81,94,2,120,24,4,81,42,81,94,2,120,24,4,112,16,2,113],[81,29,81,94,2,120,24,4,112,81,68,81,94,2,120,24,4,112,66,81,29,81,94,2,120,24,4,112,80,1000,81,68,81,94,2,120,24,4,112,25,67,10,129,39],[81,55,81,94,2,120,24,4,81,55,81,94,2,120,24,4,112,16,2,113],[81,94,4,128,28],[162],[80,5,178],[80,1,80,0,64,129,25],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,79,115,80,89,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,6,97,17,84,24,97,18],[80,6,97,24,84,31,97,19],[80,6,97,31,84,38,97,20],[80,6,97,38,84,45,97,21],[80,6,97,45,84,52,97,22],[80,6,97,52,84,59,97,23],[80,6,97,59],[84,18,97,17],[80,10,97,18],[84,30,97,29],[80,10,97,30],[84,42,97,41],[80,10,97,42],[84,54,97,53],[80,10,97,54],[84,66,97,65],[80,10,97,66],[84,78,97,77],[80,10,97,78],[80,1],[97,89,80,10],[81,89,69,129,33],[81,65,81,89,80,1,25,2,120,24,4,80,70,80,130,80,70,25,19,24,2,113],[81,77,81,89,80,1,25,2,120,24,4,81,89,222,2,113],[81,17,81,89,80,1,25,2,120,24,4,80,1000,80,2,81,65,81,89,80,1,25,2,120,24,4,112,26,25,19,81,65,81,89,80,1,25,2,120,24,4,112,24,2,113],[81,29,81,89,80,1,25,2,120,24,4,80,1000,80,2,81,65,81,89,80,1,25,2,120,24,4,112,26,25,19,81,65,81,89,80,1,25,2,120,24,4,112,24,2,113],[81,41,81,89,80,1,25,2,120,24,4,80,15,19,80,7,25,2,113],[81,53,81,89,80,1,25,2,120,24,4,80,15,19,80,7,25,2,113],[81,89,4,128,24],[163],[80,16777215,248],[80,1],[97,89,80,10],[81,89,69,129,48],[81,17,81,89,80,1,25,2,120,24,4,81,17,81,89,80,1,25,2,120,24,4,112,81,41,81,89,80,1,25,2,120,24,4,112,24,2,113],[81,29,81,89,80,1,25,2,120,24,4,81,29,81,89,80,1,25,2,120,24,4,112,81,53,81,89,80,1,25,2,120,24,4,112,24,2,113],[81,17,81,89,80,1,25,2,120,24,4,112,81,29,81,89,80,1,25,2,120,24,4,112,224],[81,77,81,89,80,1,25,2,120,24,4,112,221],[81,65,81,89,80,1,25,2,120,24,4,112,243],[81,17,81,89,80,1,25,2,120,24,4,112,81,65,81,89,80,1,25,2,120,24,4,112,66,81,17,81,89,80,1,25,2,120,24,4,112,80,1000,81,65,81,89,80,1,25,2,120,24,4,112,25,67,10,129,45],[81,41,81,89,80,1,25,2,120,24,4,81,41,81,89,80,1,25,2,120,24,4,112,16,2,113],[81,29,81,89,80,1,25,2,120,24,4,112,81,65,81,89,80,1,25,2,120,24,4,112,66,81,29,81,89,80,1,25,2,120,24,4,112,80,1000,81,65,81,89,80,1,25,2,120,24,4,112,25,67,10,129,47],[81,53,81,89,80,1,25,2,120,24,4,81,53,81,89,80,1,25,2,120,24,4,112,16,2,113],[81,89,4,128,36],[162],[80,5,178],[80,1,80,0,64,129,33],[130]]")},function(n){n.exports=JSON.parse("[[80,11,1,1,80,0,113,80,6,2,113,4,80,90,115,80,101,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,18,97,17],[80,7,97,18],[84,27,97,26],[80,7,97,27],[84,36,97,35],[80,7,97,36],[84,45,97,44],[80,7,97,45],[84,54,97,53],[80,7,97,54],[84,63,97,62],[80,7,97,63],[84,72,97,71],[80,7,97,72],[84,81,97,80],[80,7,97,81],[84,90,97,89],[80,7,97,90],[128,42],[140,1],[144,10,4],[85,10,1,80,4,115,98,10,3,98,10,2,98,10,1],[80,0,97,99],[80,0,97,100],[82,10,3,221],[80,1],[98,10,4,82,10,1],[82,10,4,69,129,40],[82,10,2,227],[81,12,80,500,25,17,80,495,67,129,34],[80,-1,97,99],[81,13,80,500,25,17,80,495,67,129,36],[80,-1,97,100],[82,10,2,228],[80,1,237],[80,360,82,10,1,27,230],[82,10,4,4,128,29],[82,10,1,241],[145,10,141,137],[80,1],[97,98,80,6],[81,98,69,129,55],[81,71,81,98,2,120,24,4,81,98,80,2,24,2,113],[81,80,81,98,2,120,24,4,80,70,80,130,80,70,25,19,4,24,2,113],[81,89,81,98,2,120,24,4,81,98,222,2,113],[81,17,81,98,2,120,24,4,80,1000,80,2,81,80,81,98,2,120,24,4,112,26,25,19,4,81,80,81,98,2,120,24,4,112,24,2,113],[81,26,81,98,2,120,24,4,80,1000,80,2,81,80,81,98,2,120,24,4,112,26,25,19,4,81,80,81,98,2,120,24,4,112,24,2,113],[81,35,81,98,2,120,24,4,80,360,19,4,2,113],[81,44,81,98,2,120,24,4,80,15,19,4,80,7,25,2,113],[81,53,81,98,2,120,24,4,80,15,19,4,80,7,25,2,113],[81,62,81,98,2,120,24,4,80,4,19,4,80,3,24,2,113],[81,98,4,128,43],[80,0,80,1,66,129,77],[163],[80,16777215,248],[80,1],[97,98,80,6],[81,98,69,129,74],[81,17,81,98,2,120,24,4,81,17,81,98,2,120,24,4,112,81,44,81,98,2,120,24,4,112,24,2,113],[81,26,81,98,2,120,24,4,81,26,81,98,2,120,24,4,112,81,53,81,98,2,120,24,4,112,24,2,113],[81,35,81,98,2,120,24,4,81,35,81,98,2,120,24,4,112,81,62,81,98,2,120,24,4,112,24,80,360,29,2,113],[81,17,81,98,2,120,24,4,112,81,26,81,98,2,120,24,4,112,224],[81,35,81,98,2,120,24,4,112,219],[81,71,81,98,2,120,24,4,112,81,80,81,98,2,120,24,4,112,81,89,81,98,2,120,24,4,112,136,22],[81,99,129,70],[81,44,81,98,2,120,24,4,81,44,81,98,2,120,24,4,112,16,2,113],[81,62,81,98,2,120,24,4,81,62,81,98,2,120,24,4,112,16,2,113],[81,100,129,73],[81,53,81,98,2,120,24,4,81,53,81,98,2,120,24,4,112,16,2,113],[81,62,81,98,2,120,24,4,81,62,81,98,2,120,24,4,112,16,2,113],[81,98,4,128,59],[162],[80,5,178],[128,55],[130]]")},function(n){n.exports=JSON.parse("[[80,11,1,1,80,0,113,80,6,2,113,4,80,81,115,80,92,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,19,97,18],[80,6,97,19],[84,27,97,26],[80,6,97,27],[84,35,97,34],[80,6,97,35],[84,43,97,42],[80,6,97,43],[84,51,97,50],[80,6,97,51],[84,59,97,58],[80,6,97,59],[84,67,97,66],[80,6,97,67],[84,75,97,74],[80,6,97,75],[84,83,97,82],[80,6,97,83],[128,42],[140,1],[144,10,4],[85,10,1,80,4,115,98,10,3,98,10,2,98,10,1],[80,0,97,90],[80,0,97,91],[82,10,3,221],[80,1],[98,10,4,82,10,1],[82,10,4,69,129,40],[82,10,2,227],[81,12,80,500,25,17,80,495,67,129,34],[80,-1,97,90],[81,13,80,500,25,17,80,495,67,129,36],[80,-1,97,91],[82,10,2,228],[80,1,237],[80,360,82,10,1,27,230],[82,10,4,4,128,29],[82,10,1,241],[145,10,141,137],[80,1],[97,92,80,6],[81,92,69,129,55],[81,66,81,92,80,1,25,2,120,24,4,81,92,80,2,24,2,113],[81,74,81,92,80,1,25,2,120,24,4,80,70,80,130,80,70,25,19,24,2,113],[81,82,81,92,80,1,25,2,120,24,4,81,92,222,2,113],[81,18,81,92,80,1,25,2,120,24,4,80,1000,80,2,81,74,81,92,80,1,25,2,120,24,4,112,26,25,19,81,74,81,92,80,1,25,2,120,24,4,112,24,2,113],[81,26,81,92,80,1,25,2,120,24,4,80,1000,80,2,81,74,81,92,80,1,25,2,120,24,4,112,26,25,19,81,74,81,92,80,1,25,2,120,24,4,112,24,2,113],[81,34,81,92,80,1,25,2,120,24,4,80,360,19,2,113],[81,42,81,92,80,1,25,2,120,24,4,80,15,19,80,7,25,2,113],[81,50,81,92,80,1,25,2,120,24,4,80,15,19,80,7,25,2,113],[81,58,81,92,80,1,25,2,120,24,4,80,4,19,80,3,24,2,113],[81,92,4,128,43],[80,0,80,1,66,129,77],[163],[80,16777215,248],[80,1],[97,92,80,6],[81,92,69,129,74],[81,18,81,92,80,1,25,2,120,24,4,81,18,81,92,80,1,25,2,120,24,4,112,81,42,81,92,80,1,25,2,120,24,4,112,24,2,113],[81,26,81,92,80,1,25,2,120,24,4,81,26,81,92,80,1,25,2,120,24,4,112,81,50,81,92,80,1,25,2,120,24,4,112,24,2,113],[81,34,81,92,80,1,25,2,120,24,4,81,34,81,92,80,1,25,2,120,24,4,112,81,58,81,92,80,1,25,2,120,24,4,112,24,80,360,29,2,113],[81,18,81,92,80,1,25,2,120,24,4,112,81,26,81,92,80,1,25,2,120,24,4,112,224],[81,34,81,92,80,1,25,2,120,24,4,112,219],[81,66,81,92,80,1,25,2,120,24,4,112,81,74,81,92,80,1,25,2,120,24,4,112,81,82,81,92,80,1,25,2,120,24,4,112,136,22],[81,90,129,70],[81,42,81,92,80,1,25,2,120,24,4,81,42,81,92,80,1,25,2,120,24,4,112,16,2,113],[81,58,81,92,80,1,25,2,120,24,4,81,58,81,92,80,1,25,2,120,24,4,112,16,2,113],[81,91,129,73],[81,50,81,92,80,1,25,2,120,24,4,81,50,81,92,80,1,25,2,120,24,4,112,16,2,113],[81,58,81,92,80,1,25,2,120,24,4,81,58,81,92,80,1,25,2,120,24,4,112,16,2,113],[81,92,4,128,59],[162],[80,5,178],[128,55],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,57,115,80,67,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,8,97,17],[84,27,97,26],[80,8,97,27],[84,37,97,36],[80,8,97,37],[84,47,97,46],[80,8,97,47],[84,57,97,56],[80,8,97,57],[81,16,80,0,2,120,24,4,80,2433,2,113],[81,26,80,0,2,120,24,4,80,5795,2,113],[81,56,80,0,2,120,24,4,80,1607,2,113],[81,36,80,0,2,120,24,4,80,16777215,2,113],[81,16,80,1,2,120,24,4,80,6053,2,113],[81,26,80,1,2,120,24,4,80,10811,2,113],[81,56,80,1,2,120,24,4,80,1174,2,113],[81,36,80,1,2,120,24,4,80,12628016,2,113],[81,16,80,2,2,120,24,4,80,6371,2,113],[81,26,80,2,2,120,24,4,80,14957,2,113],[81,56,80,2,2,120,24,4,80,1000,2,113],[81,36,80,2,2,120,24,4,80,255,2,113],[81,16,80,3,2,120,24,4,80,3380,2,113],[81,26,80,3,2,120,24,4,80,22784,2,113],[81,56,80,3,2,120,24,4,80,802,2,113],[81,36,80,3,2,120,24,4,80,16737792,2,113],[81,16,80,4,2,120,24,4,80,71492,2,113],[81,26,80,4,2,120,24,4,80,77814,2,113],[81,56,80,4,2,120,24,4,80,434,2,113],[81,36,80,4,2,120,24,4,80,13458524,2,113],[81,16,80,5,2,120,24,4,80,58219,2,113],[81,26,80,5,2,120,24,4,80,142700,2,113],[81,56,80,5,2,120,24,4,80,323,2,113],[81,36,80,5,2,120,24,4,80,16777147,2,113],[81,16,80,6,2,120,24,4,80,23470,2,113],[81,26,80,6,2,120,24,4,80,287030,2,113],[81,56,80,6,2,120,24,4,80,182,2,113],[81,36,80,6,2,120,24,4,80,65535,2,113],[81,16,80,7,2,120,24,4,80,23716,2,113],[81,26,80,7,2,120,24,4,80,449990,2,113],[81,56,80,7,2,120,24,4,80,159,2,113],[81,36,80,7,2,120,24,4,80,4286945,2,113],[80,360000,212],[80,0,80,0,80,1000000,80,1000000,208],[80,500,80,500,209],[80,1,220],[160],[80,-1,129,73],[80,0,248],[216],[80,16776960,221],[80,50000,243],[80,0],[97,66,80,7],[81,66,69,129,70],[216],[80,16777215,221],[81,26,81,66,2,120,24,4,112,80,50000,24,242],[81,46,81,66,2,120,24,4,112,230],[81,26,81,66,2,120,24,4,112,80,50000,24,227],[81,46,81,66,2,120,24,4,81,46,81,66,2,120,24,4,112,81,56,81,66,2,120,24,4,112,24,80,360000,29,2,113],[81,36,81,66,2,120,24,4,112,221],[81,66,80,4,66,129,68],[81,16,81,66,2,120,24,4,112,80,2,26,243],[128,69],[81,16,81,66,2,120,24,4,112,80,2,28,243],[81,66,4,128,56],[162],[163],[128,50],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,57,115,80,67,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,6,97,17,84,24,97,18],[80,6,97,24,84,31,97,19],[80,6,97,31,84,38,97,20],[80,6,97,38,84,45,97,21],[80,6,97,45,84,52,97,22],[80,6,97,52,84,59,97,23],[80,6,97,59],[84,18,97,17],[80,8,97,18],[84,28,97,27],[80,8,97,28],[84,38,97,37],[80,8,97,38],[84,48,97,47],[80,8,97,48],[84,58,97,57],[80,8,97,58],[81,17,80,1,80,1,25,2,120,24,4,80,2433,2,113],[81,27,80,1,80,1,25,2,120,24,4,80,5795,2,113],[81,57,80,1,80,1,25,2,120,24,4,80,1607,2,113],[81,37,80,1,80,1,25,2,120,24,4,80,16777215,2,113],[81,17,80,2,80,1,25,2,120,24,4,80,6053,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,10811,2,113],[81,57,80,2,80,1,25,2,120,24,4,80,1174,2,113],[81,37,80,2,80,1,25,2,120,24,4,80,12628016,2,113],[81,17,80,3,80,1,25,2,120,24,4,80,6371,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,14957,2,113],[81,57,80,3,80,1,25,2,120,24,4,80,1000,2,113],[81,37,80,3,80,1,25,2,120,24,4,80,255,2,113],[81,17,80,4,80,1,25,2,120,24,4,80,3380,2,113],[81,27,80,4,80,1,25,2,120,24,4,80,22784,2,113],[81,57,80,4,80,1,25,2,120,24,4,80,802,2,113],[81,37,80,4,80,1,25,2,120,24,4,80,16737792,2,113],[81,17,80,5,80,1,25,2,120,24,4,80,71492,2,113],[81,27,80,5,80,1,25,2,120,24,4,80,77814,2,113],[81,57,80,5,80,1,25,2,120,24,4,80,434,2,113],[81,37,80,5,80,1,25,2,120,24,4,80,13458524,2,113],[81,17,80,6,80,1,25,2,120,24,4,80,58219,2,113],[81,27,80,6,80,1,25,2,120,24,4,80,142700,2,113],[81,57,80,6,80,1,25,2,120,24,4,80,323,2,113],[81,37,80,6,80,1,25,2,120,24,4,80,16777147,2,113],[81,17,80,7,80,1,25,2,120,24,4,80,23470,2,113],[81,27,80,7,80,1,25,2,120,24,4,80,287030,2,113],[81,57,80,7,80,1,25,2,120,24,4,80,182,2,113],[81,37,80,7,80,1,25,2,120,24,4,80,65535,2,113],[81,17,80,8,80,1,25,2,120,24,4,80,23716,2,113],[81,27,80,8,80,1,25,2,120,24,4,80,449990,2,113],[81,57,80,8,80,1,25,2,120,24,4,80,159,2,113],[81,37,80,8,80,1,25,2,120,24,4,80,4286945,2,113],[80,360000,212],[80,0,80,0,80,1000000,80,1000000,208],[80,500,80,500,209],[80,1,220],[160],[80,-1,129,81],[80,0,248],[216],[80,16776960,221],[80,50000,243],[80,1],[97,67,80,8],[81,67,69,129,78],[216],[80,16777215,221],[81,27,81,67,80,1,25,2,120,24,4,112,80,50000,24,242],[81,47,81,67,80,1,25,2,120,24,4,112,230],[81,27,81,67,80,1,25,2,120,24,4,112,80,50000,24,227],[81,47,81,67,80,1,25,2,120,24,4,81,47,81,67,80,1,25,2,120,24,4,112,81,57,81,67,80,1,25,2,120,24,4,112,24,80,360000,29,2,113],[81,37,81,67,80,1,25,2,120,24,4,112,221],[81,67,80,4,68,129,76],[81,17,81,67,80,1,25,2,120,24,4,112,80,2,26,243],[128,77],[81,17,81,67,80,1,25,2,120,24,4,112,80,2,27,243],[81,67,4,128,64],[162],[163],[128,58],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,39,115,80,49,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,27,97,17],[80,16777147,248],[80,15,80,200,224],[87,42,73,110,32,116,104,105,115,32,116,121,112,105,110,103,32,116,101,115,116,44,32,121,111,117,32,119,105,108,108,32,98,101,32,115,104,111,119,110,32,116,104,101,80,4,80,36,189],[80,20,80,270,224],[87,42,108,101,116,116,101,114,115,32,111,102,32,116,104,101,32,97,108,112,104,97,98,101,116,32,105,110,32,97,32,114,97,110,100,111,109,32,111,114,100,101,114,44,80,4,80,36,189],[80,20,80,340,224],[87,42,97,110,100,32,105,110,32,97,32,109,105,120,116,117,114,101,32,111,102,32,117,112,112,101,114,45,32,97,110,100,32,108,111,119,101,114,45,99,97,115,101,46,80,4,80,36,189],[80,20,80,410,224],[87,41,84,121,112,101,32,116,104,101,109,32,97,115,32,102,97,115,116,32,97,115,32,121,111,117,32,99,97,110,44,32,97,110,100,32,115,101,101,32,104,111,119,80,4,80,36,189],[80,20,80,480,224],[87,43,113,117,105,99,107,108,121,32,121,111,117,32,99,97,110,32,102,105,110,105,115,104,32,116,104,101,32,101,110,116,105,114,101,32,97,108,112,104,97,98,101,116,46,80,4,80,36,189],[80,100,80,620,224],[87,36,78,111,119,32,112,114,101,115,115,32,116,104,101,32,34,69,115,99,34,32,107,101,121,32,116,111,32,115,116,97,114,116,32,46,46,46,80,4,80,36,189],[80,0,164],[80,-9,184,17,80,27,64,129,19],[80,1],[97,45,80,26],[81,45,69,129,28],[80,2,19,4,80,1,64,129,26],[81,16,81,45,2,120,24,4,81,45,80,64,24,2,113],[128,27],[81,16,81,45,2,120,24,4,81,45,80,96,24,2,113],[81,45,4,128,21],[80,1],[97,45,80,50],[81,45,69,129,38],[80,26,19,4,97,46],[80,26,19,4,97,47],[81,46,81,47,65,129,37],[81,16,81,46,2,120,24,4,112,97,48],[81,16,81,46,2,120,24,4,81,16,81,47,2,120,24,4,112,2,113],[81,16,81,47,2,120,24,4,81,48,2,113],[81,45,4,128,29],[80,0,177],[80,1],[97,45,80,26],[81,45,69,129,48],[80,0,248],[80,100,80,300,19,4,24,80,250,19,4,224],[80,16776960,221],[81,16,81,45,2,120,24,4,112,48,80,3,80,450,189,147],[80,1,187,81,16,81,45,2,120,24,4,112,48,72,147,129,46],[81,45,4,128,40],[80,10075135,248],[80,60,80,460,224],[80,13458524,221],[87,14,89,111,117,114,32,116,105,109,101,32,119,97,115,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,80,4,80,50,189,147],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,48,115,80,58,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,6,97,17,84,24,97,18],[80,6,97,24,84,31,97,19],[80,6,97,31,84,38,97,20],[80,6,97,38,84,45,97,21],[80,6,97,45,84,52,97,22],[80,6,97,52,84,59,97,23],[80,6,97,59],[84,20,97,18],[80,33,97,19],[80,16777147,248],[80,15,80,200,224],[87,43,73,110,32,116,104,105,115,32,116,121,112,105,110,103,32,116,101,115,116,44,32,32,121,111,117,32,119,105,108,108,32,98,101,32,115,104,111,119,110,32,116,104,101,80,4,80,36,189],[80,20,80,270,224],[87,42,108,101,116,116,101,114,115,32,111,102,32,116,104,101,32,97,108,112,104,97,98,101,116,32,105,110,32,97,32,114,97,110,100,111,109,32,111,114,100,101,114,44,80,4,80,36,189],[80,20,80,340,224],[87,42,97,110,100,32,105,110,32,97,32,109,105,120,116,117,114,101,32,111,102,32,117,112,112,101,114,45,32,97,110,100,32,108,111,119,101,114,45,99,97,115,101,46,80,4,80,36,189],[80,20,80,410,224],[87,41,84,121,112,101,32,116,104,101,109,32,97,115,32,102,97,115,116,32,97,115,32,121,111,117,32,99,97,110,44,32,97,110,100,32,115,101,101,32,104,111,119,80,4,80,36,189],[80,20,80,480,224],[87,43,113,117,105,99,107,108,121,32,121,111,117,32,99,97,110,32,102,105,110,105,115,104,32,116,104,101,32,101,110,116,105,114,101,32,97,108,112,104,97,98,101,116,46,80,4,80,36,189],[80,100,80,620,224],[87,36,78,111,119,32,112,114,101,115,115,32,116,104,101,32,34,69,115,99,34,32,107,101,121,32,116,111,32,115,116,97,114,116,32,46,46,46,80,4,80,36,189],[80,0,164],[80,-9,184,17,80,27,64,129,27],[81,18,87,0,2,121],[80,65],[97,53,80,90],[81,53,69,129,37],[80,2,19,80,0,64,129,35],[81,18,81,18,81,53,48,54,2,121,147],[128,36],[81,18,81,18,81,53,80,32,24,48,54,2,121,147],[81,53,4,128,30],[80,1],[97,17,80,50],[81,17,69,129,47],[80,26,19,80,1,24,97,54],[80,26,19,80,1,24,97,55],[81,54,81,55,65,129,46],[81,18,81,54,80,1,25,2,120,24,4,112,97,56],[81,18,81,54,80,1,25,2,120,24,4,81,18,81,55,80,1,25,2,120,24,4,112,2,113],[81,18,81,55,80,1,25,2,120,24,4,81,56,2,113],[81,17,4,128,38],[80,0,177],[80,1],[97,17,80,26],[81,17,69,129,57],[80,0,248],[80,100,80,300,19,24,80,250,19,224],[80,16776960,221],[81,18,81,17,80,1,25,2,120,24,4,112,48,80,3,80,450,189,147],[80,1,187,81,18,81,17,80,1,25,2,120,24,4,112,48,72,147,129,55],[81,17,4,128,49],[80,10075135,248],[80,60,80,460,224],[80,13458524,221],[87,14,89,111,117,114,32,116,105,109,101,32,119,97,115,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,80,4,80,50,189,147],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,42,115,80,52,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,27,97,17],[80,16777147,248],[80,15,80,200,224],[87,42,73,110,32,116,104,105,115,32,116,121,112,105,110,103,32,116,101,115,116,44,32,121,111,117,32,119,105,108,108,32,98,101,32,115,104,111,119,110,32,116,104,101,80,4,80,36,189],[80,20,80,270,224],[87,42,108,101,116,116,101,114,115,32,111,102,32,116,104,101,32,97,108,112,104,97,98,101,116,32,105,110,32,97,32,114,97,110,100,111,109,32,111,114,100,101,114,44,80,4,80,36,189],[80,20,80,340,224],[87,42,97,110,100,32,105,110,32,97,32,109,105,120,116,117,114,101,32,111,102,32,117,112,112,101,114,45,32,97,110,100,32,108,111,119,101,114,45,99,97,115,101,46,80,4,80,36,189],[80,20,80,410,224],[87,41,84,121,112,101,32,116,104,101,109,32,97,115,32,102,97,115,116,32,97,115,32,121,111,117,32,99,97,110,44,32,97,110,100,32,115,101,101,32,104,111,119,80,4,80,36,189],[80,20,80,480,224],[87,43,113,117,105,99,107,108,121,32,121,111,117,32,99,97,110,32,102,105,110,105,115,104,32,116,104,101,32,101,110,116,105,114,101,32,97,108,112,104,97,98,101,116,46,80,4,80,36,189],[80,100,80,620,224],[87,36,78,111,119,32,112,114,101,115,115,32,116,104,101,32,34,69,115,99,34,32,107,101,121,32,116,111,32,115,116,97,114,116,32,46,46,46,80,4,80,36,189],[80,0,164],[80,-9,184,17,80,27,64,129,19],[80,1],[97,45,80,26],[81,45,69,129,25],[81,16,81,45,2,120,24,4,81,45,80,64,24,2,113],[81,45,4,128,21],[80,1],[97,45,80,50],[81,45,69,129,35],[80,26,19,4,97,46],[80,26,19,4,97,47],[81,46,81,47,65,129,34],[81,16,81,46,2,120,24,4,112,97,48],[81,16,81,46,2,120,24,4,81,16,81,47,2,120,24,4,112,2,113],[81,16,81,47,2,120,24,4,81,48,2,113],[81,45,4,128,26],[80,0,177],[80,1],[97,45,80,26],[81,45,69,129,52],[81,16,81,45,2,120,24,4,112,97,49],[80,2,19,4,80,1,64,97,50],[80,0,248],[80,100,80,300,19,4,24,80,250,19,4,224],[80,16776960,221],[81,50,129,47],[81,49,80,32,24,48,80,3,80,450,189,147],[128,48],[81,49,48,80,3,80,450,189,147],[80,-10,184,17,80,8,9,80,0,67,81,50,11,97,51],[80,-9,184,17,81,49,64,81,51,9,129,48],[80,-10,185],[81,45,4,128,37],[80,10075135,248],[80,60,80,460,224],[80,13458524,221],[87,14,89,111,117,114,32,116,105,109,101,32,119,97,115,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,80,4,80,50,189,147],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,50,115,80,60,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,6,97,17,84,24,97,18],[80,6,97,24,84,31,97,19],[80,6,97,31,84,38,97,20],[80,6,97,38,84,45,97,21],[80,6,97,45,84,52,97,22],[80,6,97,52,84,59,97,23],[80,6,97,59],[84,20,97,18],[80,33,97,19],[80,16777147,248],[80,15,80,200,224],[87,42,73,110,32,116,104,105,115,32,116,121,112,105,110,103,32,116,101,115,116,44,32,121,111,117,32,119,105,108,108,32,98,101,32,115,104,111,119,110,32,116,104,101,80,4,80,36,189],[80,20,80,270,224],[87,42,108,101,116,116,101,114,115,32,111,102,32,116,104,101,32,97,108,112,104,97,98,101,116,32,105,110,32,97,32,114,97,110,100,111,109,32,111,114,100,101,114,44,80,4,80,36,189],[80,20,80,340,224],[87,42,97,110,100,32,105,110,32,97,32,109,105,120,116,117,114,101,32,111,102,32,117,112,112,101,114,45,32,97,110,100,32,108,111,119,101,114,45,99,97,115,101,46,80,4,80,36,189],[80,20,80,410,224],[87,41,84,121,112,101,32,116,104,101,109,32,97,115,32,102,97,115,116,32,97,115,32,121,111,117,32,99,97,110,44,32,97,110,100,32,115,101,101,32,104,111,119,80,4,80,36,189],[80,20,80,480,224],[87,43,113,117,105,99,107,108,121,32,121,111,117,32,99,97,110,32,102,105,110,105,115,104,32,116,104,101,32,101,110,116,105,114,101,32,97,108,112,104,97,98,101,116,46,80,4,80,36,189],[80,100,80,620,224],[87,36,78,111,119,32,112,114,101,115,115,32,116,104,101,32,34,69,115,99,34,32,107,101,121,32,116,111,32,115,116,97,114,116,32,46,46,46,80,4,80,36,189],[80,0,164],[80,-9,184,17,80,27,64,129,27],[81,18,87,0,2,121],[80,65],[97,53,80,90],[81,53,69,129,34],[81,18,81,18,81,53,48,54,2,121,147],[81,53,4,128,30],[80,1],[97,17,80,50],[81,17,69,129,44],[80,26,19,80,1,24,97,54],[80,26,19,80,1,24,97,55],[81,54,81,55,65,129,43],[81,18,81,54,80,1,25,2,120,24,4,112,97,56],[81,18,81,54,80,1,25,2,120,24,4,81,18,81,55,80,1,25,2,120,24,4,112,2,113],[81,18,81,55,80,1,25,2,120,24,4,81,56,2,113],[81,17,4,128,35],[80,0,177],[80,1],[97,17,80,26],[81,17,69,129,61],[81,18,81,17,80,1,25,2,120,24,4,112,97,53],[80,2,19,80,0,64,97,57],[80,0,248],[80,100,80,300,19,24,80,250,19,224],[80,16776960,221],[81,57,129,56],[81,53,80,32,24,48,80,3,80,450,189],[128,57],[81,53,48,80,3,80,450,189,147],[80,-10,184,17,80,8,9,80,0,67,81,57,11,97,58],[80,-9,184,17,81,53,64,81,58,9,129,57],[80,-10,185],[81,17,4,128,46],[80,10075135,248],[80,60,80,460,224],[80,13458524,221],[87,14,89,111,117,114,32,116,105,109,101,32,119,97,115,32,176,80,1000,80,2,52,54,87,8,32,115,101,99,111,110,100,115,54,80,4,80,50,189,147],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,167,115,80,180,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,12,97,20],[84,34,97,33],[80,10,97,34,84,45,97,35],[80,12,97,45,84,58,97,36],[80,12,97,58,84,71,97,37],[80,12,97,71,84,84,97,38],[80,12,97,84,84,97,97,39],[80,12,97,97,84,110,97,40],[80,12,97,110,84,123,97,41],[80,12,97,123,84,136,97,42],[80,12,97,136,84,149,97,43],[80,12,97,149,84,162,97,44],[80,12,97,162],[128,73],[140,1],[144,10,3],[85,10,1,80,3,115,98,10,3,98,10,2,98,10,1],[82,10,1,80,250,26,80,250,24,82,10,2,80,250,26,80,175,24,224],[82,10,3,222,221],[80,70,243],[145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115,98,11,2,98,11,1],[80,0],[97,177,80,11],[81,177,69,129,33],[82,11,2,81,177,2,120,24,4,82,11,1,81,177,2,120,24,4,112,2,113],[81,177,4,128,29],[145,11,141,137],[140,3],[144,12,6],[85,12,1,80,6,115,98,12,3,98,12,2,98,12,1],[80,33,80,2,24,82,12,2,25,98,12,4],[80,2,16,98,12,5],[82,12,1,80,9,2,120,24,4,80,0,2,113],[82,12,1,80,10,2,120,24,4,80,1,16,2,113],[82,12,1,80,11,2,120,24,4,82,12,3,2,113],[82,12,1,80,0,2,120,24,4,112,82,12,2,64,82,12,1,80,1,2,120,24,4,112,82,12,2,64,9,82,12,1,80,2,2,120,24,4,112,82,12,2,64,9,129,44],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,3,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,5,2,120,24,4,112,82,12,2,64,9,129,46],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,6,2,120,24,4,112,82,12,2,64,82,12,1,80,7,2,120,24,4,112,82,12,2,64,9,82,12,1,80,8,2,120,24,4,112,82,12,2,64,9,129,48],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,0,2,120,24,4,112,82,12,2,64,82,12,1,80,3,2,120,24,4,112,82,12,2,64,9,82,12,1,80,6,2,120,24,4,112,82,12,2,64,9,129,50],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,1,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,7,2,120,24,4,112,82,12,2,64,9,129,52],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,2,2,120,24,4,112,82,12,2,64,82,12,1,80,5,2,120,24,4,112,82,12,2,64,9,82,12,1,80,8,2,120,24,4,112,82,12,2,64,9,129,54],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,0,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,8,2,120,24,4,112,82,12,2,64,9,129,56],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,2,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,6,2,120,24,4,112,82,12,2,64,9,129,58],[82,12,1,80,9,2,120,24,4,80,1,2,113],[82,12,1,80,9,2,120,24,4,112,80,0,64,129,72],[80,0,98,12,6],[82,12,1,82,12,6,2,120,24,4,112,80,0,64,129,68],[82,12,1,81,33,82,12,3,2,120,24,4,112,136,25],[81,33,82,12,3,2,120,24,4,112,82,12,6,2,120,24,4,82,12,4,2,113],[81,33,82,12,3,2,120,24,4,112,82,12,4,82,12,3,80,1,24,136,34],[81,33,82,12,3,2,120,24,4,112,80,9,2,120,24,4,112,82,12,5,67,129,68],[81,33,82,12,3,2,120,24,4,112,80,9,2,120,24,4,112,98,12,5],[82,12,1,80,10,2,120,24,4,82,12,6,2,113],[82,12,1,80,11,2,120,24,4,81,33,82,12,3,2,120,24,4,112,80,11,2,120,24,4,112,2,113],[82,12,6,80,1,24,98,12,6],[82,12,6,80,8,67,82,12,5,80,0,67,10,129,60],[82,12,5,80,2,16,65,129,72],[82,12,1,80,9,2,120,24,4,82,12,5,16,2,113],[145,12,141,137],[80,0,97,175],[81,175,80,1,24,97,175],[81,175,80,2,29,80,1,64,97,176],[80,10025880,248],[80,10,220],[80,0,221],[80,375,80,50,224],[80,0,80,750,226],[80,625,80,50,224],[80,0,80,750,226],[80,125,80,300,224],[80,750,80,0,226],[80,125,80,550,224],[80,750,80,0,226],[80,0],[97,177,80,10],[81,177,69,129,92],[81,19,81,177,2,120,24,4,80,0,2,113],[81,177,4,128,88],[81,19,80,11,2,120,24,4,80,8,2,113],[81,176,129,97],[81,19,80,10,2,120,24,4,80,8,19,4,2,113],[80,0,97,176],[128,108],[80,2,213],[80,-1,184,80,0,67,129,98],[80,200,178],[80,-5,184,80,125,69,80,-5,184,80,875,68,9,80,-6,184,80,50,69,9,80,-6,184,80,800,68,9,129,98],[80,-5,184,80,125,25,80,250,28,97,178],[80,-6,184,80,50,25,80,250,28,97,179],[81,19,81,178,81,179,80,3,26,24,2,120,24,4,112,80,0,64,129,98],[81,178,81,179,80,33,136,18],[81,19,81,178,81,179,80,3,26,24,2,120,24,4,80,33,2,113],[80,11,213],[81,19,80,33,80,0,136,34],[81,19,80,10,2,120,24,4,112,80,1,16,65,129,111],[81,19,80,10,2,120,24,4,112,80,3,29,81,19,80,10,2,120,24,4,112,80,3,28,80,2,136,18],[81,19,81,19,80,10,2,120,24,4,112,2,120,24,4,80,2,2,113],[81,19,80,11,2,120,24,4,112,80,1,68,129,93],[80,350,80,850,224],[80,0,221],[81,19,80,9,2,120,24,4,112,80,0,64,129,117],[87,9,32,32,68,114,97,119,33,32,32,80,4,80,60,189],[128,118],[87,10,32,32,73,32,119,105,110,33,32,32,80,4,80,60,189],[80,2500,178],[80,1,80,1,65,129,74],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,25,115,80,38,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,6,97,20,84,27,97,21],[80,6,97,27,84,34,97,22],[80,6,97,34,84,41,97,23],[80,6,97,41,84,48,97,24],[80,6,97,48,84,55,97,25],[80,6,97,55,84,62,97,26],[80,6,97,62],[84,21,97,20],[80,12,97,21],[128,56],[140,1],[144,10,3],[85,10,1,80,3,115,98,10,3,98,10,2,98,10,1],[82,10,1,80,250,26,80,250,24,82,10,2,80,250,26,80,175,24,224],[82,10,3,222,221],[80,70,243],[145,10,141,137],[140,2],[144,11,3],[85,11,1,80,3,115,98,11,2,98,11,1],[80,0],[98,11,3,82,11,1,112,80,1,25],[82,11,3,69,129,29],[82,11,2,82,11,3,2,120,24,4,82,11,1,82,11,3,2,120,24,4,112,2,113],[82,11,3,4,128,25],[145,11,141,137],[140,3],[144,12,20],[85,12,1,80,20,115,98,12,3,98,12,2,98,12,1],[85,12,7,98,12,6,80,12,98,12,7],[80,33,80,2,24,82,12,2,25,98,12,4],[80,2,16,98,12,5],[82,12,1,80,9,2,120,24,4,80,0,2,113],[82,12,1,80,10,2,120,24,4,80,1,16,2,113],[82,12,1,80,11,2,120,24,4,82,12,3,2,113],[82,12,1,80,0,2,120,24,4,112,82,12,2,64,82,12,1,80,1,2,120,24,4,112,82,12,2,64,9,82,12,1,80,2,2,120,24,4,112,82,12,2,64,9,82,12,1,80,3,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,5,2,120,24,4,112,82,12,2,64,9,10,82,12,1,80,6,2,120,24,4,112,82,12,2,64,82,12,1,80,7,2,120,24,4,112,82,12,2,64,9,82,12,1,80,8,2,120,24,4,112,82,12,2,64,9,10,82,12,1,80,0,2,120,24,4,112,82,12,2,64,82,12,1,80,3,2,120,24,4,112,82,12,2,64,9,82,12,1,80,6,2,120,24,4,112,82,12,2,64,9,10,82,12,1,80,1,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,7,2,120,24,4,112,82,12,2,64,9,10,82,12,1,80,2,2,120,24,4,112,82,12,2,64,82,12,1,80,5,2,120,24,4,112,82,12,2,64,9,82,12,1,80,8,2,120,24,4,112,82,12,2,64,9,10,82,12,1,80,0,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,8,2,120,24,4,112,82,12,2,64,9,10,82,12,1,80,2,2,120,24,4,112,82,12,2,64,82,12,1,80,4,2,120,24,4,112,82,12,2,64,9,82,12,1,80,6,2,120,24,4,112,82,12,2,64,9,10,129,42],[82,12,1,80,9,2,120,24,4,80,1,2,113],[128,55],[80,0,98,12,20],[82,12,1,82,12,20,2,120,24,4,112,80,0,64,129,51],[82,12,1,82,12,6,136,21],[82,12,6,82,12,20,2,120,24,4,82,12,4,2,113],[82,12,6,82,12,4,82,12,3,80,1,24,136,30],[82,12,6,80,9,2,120,24,4,112,82,12,5,67,129,51],[82,12,6,80,9,2,120,24,4,112,98,12,5],[82,12,1,80,10,2,120,24,4,82,12,20,2,113],[82,12,1,80,11,2,120,24,4,82,12,6,80,11,2,120,24,4,112,2,113],[82,12,20,80,1,24,98,12,20],[82,12,20,80,8,67,82,12,5,80,0,67,10,129,43],[82,12,5,80,2,16,65,129,55],[82,12,1,80,9,2,120,24,4,82,12,5,16,2,113],[145,12,141,137],[80,0,97,34],[81,34,80,1,24,97,34],[81,34,80,2,29,80,1,64,97,35],[80,10025880,248],[80,10,220],[80,0,221],[80,375,80,50,224],[80,0,80,750,226],[80,625,80,50,224],[80,0,80,750,226],[80,125,80,300,224],[80,750,80,0,226],[80,125,80,550,224],[80,750,80,0,226],[80,0],[97,36,80,10],[81,36,69,129,75],[81,20,81,36,2,120,24,4,80,0,2,113],[81,36,4,128,71],[81,20,80,11,2,120,24,4,80,8,2,113],[81,35,129,80],[81,20,80,10,2,120,24,4,80,9,19,2,113],[80,0,97,35],[128,91],[80,2,213],[80,-1,184,80,0,67,129,81],[80,200,178],[80,-5,184,80,125,69,80,-5,184,80,875,68,9,80,-6,184,80,50,69,9,80,-6,184,80,800,68,9,129,81],[80,-5,184,80,125,25,80,250,28,97,37],[80,-6,184,80,50,25,80,250,28,97,38],[81,20,81,37,81,38,80,3,26,24,2,120,24,4,112,80,0,64,129,81],[81,37,81,38,80,33,136,14],[81,20,81,37,81,38,80,3,26,24,2,120,24,4,80,33,2,113],[80,11,213],[81,20,80,33,80,0,136,30],[81,20,80,10,2,120,24,4,112,80,1,16,65,129,94],[81,20,80,10,2,120,24,4,112,80,3,29,81,20,80,10,2,120,24,4,112,80,3,28,80,2,136,14],[81,20,81,20,80,10,2,120,24,4,112,2,120,24,4,80,2,2,113],[81,20,80,11,2,120,24,4,112,80,1,68,129,76],[80,350,80,850,224],[80,0,221],[81,20,80,9,2,120,24,4,112,80,0,64,129,100],[87,9,32,32,68,114,97,119,33,32,32,80,4,80,60,189],[128,101],[87,10,32,32,73,32,119,105,110,33,32,32,80,4,80,60,189],[80,2500,178],[80,1,80,1,65,129,57],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,57,115,80,70,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,21,97,20],[80,6,97,21,84,28,97,22],[80,6,97,28,84,35,97,23],[80,6,97,35,84,42,97,24],[80,6,97,42,84,49,97,25],[80,6,97,49,84,56,97,26],[80,6,97,56,84,63,97,27],[80,6,97,63],[128,56],[140,1],[144,10,1],[85,10,1,80,1,115],[80,1],[98,10,1,80,5],[82,10,1,69,129,25],[81,20,82,10,1,2,120,24,4,112,80,0,2,120,24,4,80,10000,2,113],[81,20,82,10,1,2,120,24,4,112,80,1,2,120,24,4,80,70000,2,113],[81,20,82,10,1,2,120,24,4,112,80,2,2,120,24,4,80,35,82,10,1,80,10,26,24,2,113],[81,20,82,10,1,2,120,24,4,112,80,3,2,120,24,4,80,360,2,113],[81,20,82,10,1,2,120,24,4,112,80,4,2,120,24,4,80,5,82,10,1,24,2,113],[81,20,82,10,1,2,120,24,4,112,80,5,2,120,24,4,82,10,1,222,2,113],[82,10,1,4,128,16],[145,10,141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,1],[98,11,1,80,5],[82,11,1,69,129,36],[80,5000,82,11,1,80,10000,26,224],[82,11,1,222,221],[80,5000,243],[82,11,1,4,128,30],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115],[80,-7,184,80,-8,184,210,98,12,1],[80,0,98,12,3],[80,1],[98,12,2,80,5],[82,12,2,69,129,48],[82,12,1,82,12,2,222,64,129,47],[82,12,2,98,12,3],[82,12,2,4,128,43],[82,12,3,80,0,67,129,55],[81,20,82,12,3,2,120,24,4,112,80,0,113],[87,7,84,117,114,116,108,101,32,82,12,3,49,54,87,20,32,99,104,97,110,103,105,110,103,32,100,105,114,101,99,116,105,111,110,44,54,190,147],[87,7,32,32,102,114,111,109,32,81,20,82,12,3,2,120,24,4,112,80,2,2,120,24,4,112,49,54,87,1,47,54,81,20,82,12,3,2,120,24,4,112,80,3,2,120,24,4,112,49,54,190,147],[80,46,19,4,80,46,24,212],[87,5,32,32,116,111,32,81,20,82,12,3,2,120,24,4,112,80,2,2,120,24,4,112,49,54,87,1,47,54,81,20,82,12,3,2,120,24,4,112,80,3,2,120,24,4,112,49,54,190,191,147],[80,200,178],[145,12,141,137],[80,0,80,0,80,100000,80,100000,208],[80,2500,80,80000,224],[87,45,67,108,105,99,107,32,111,110,32,97,32,99,105,114,99,108,101,32,116,111,32,97,108,116,101,114,32,116,104,101,32,65,78,71,76,69,83,32,115,101,116,116,105,110,103,80,0,80,36,189],[80,2500,80,86000,224],[87,47,111,102,32,116,104,101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,117,114,116,108,101,46,32,73,116,115,32,100,105,114,101,99,116,105,111,110,32,119,105,108,108,80,0,80,36,189],[80,2500,80,92000,224],[87,42,116,104,101,110,32,99,104,97,110,103,101,32,116,111,32,116,104,101,32,99,108,111,115,101,115,116,32,112,111,115,115,105,98,108,101,32,97,110,103,108,101,46,80,0,80,36,189],[80,1],[97,70,80,5],[81,70,69,129,70],[80,10000,80,70000,224],[80,35,81,70,80,10,26,24,219],[80,110000,227],[81,70,4,128,64],[136,26],[136,12],[80,1],[97,70,80,5],[81,70,69,129,78],[81,20,81,70,2,120,24,4,112,80,0,113],[80,100,227],[81,70,4,128,73],[80,50,178],[80,-4,184,80,128,67,129,81],[136,37],[80,-9,184,80,27,64,129,72],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,49,115,80,62,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,21,97,20],[80,5,97,21,84,27,97,22],[80,6,97,27,84,34,97,23],[80,6,97,34,84,41,97,24],[80,6,97,41,84,48,97,25],[80,6,97,48,84,55,97,26],[80,6,97,55],[128,55],[140,1],[144,10,1],[85,10,1,80,1,115],[80,1],[98,10,1,80,5],[82,10,1,69,129,24],[81,20,82,10,1,80,1,25,2,120,24,4,112,80,1,80,1,25,2,120,24,4,80,10000,2,113],[81,20,82,10,1,80,1,25,2,120,24,4,112,80,2,80,1,25,2,120,24,4,80,70000,2,113],[81,20,82,10,1,80,1,25,2,120,24,4,112,80,3,80,1,25,2,120,24,4,80,35,82,10,1,80,10,26,24,2,113],[81,20,82,10,1,80,1,25,2,120,24,4,112,80,4,80,1,25,2,120,24,4,80,360,2,113],[81,20,82,10,1,80,1,25,2,120,24,4,112,80,5,80,1,25,2,120,24,4,80,5,82,10,1,24,2,113],[81,20,82,10,1,80,1,25,2,120,24,4,112,80,6,80,1,25,2,120,24,4,82,10,1,222,2,113],[82,10,1,4,128,15],[145,10,141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,1],[98,11,1,80,5],[82,11,1,69,129,35],[80,5000,82,11,1,80,10000,26,224],[82,11,1,222,221],[80,5000,243],[82,11,1,4,128,29],[145,11,141,137],[140,3],[144,12,7],[85,12,1,80,7,115],[80,-7,184,80,-8,184,210,98,12,1],[80,0,98,12,3],[80,1],[98,12,2,80,5],[82,12,2,69,129,47],[82,12,1,82,12,2,222,64,129,46],[82,12,2,98,12,3],[82,12,2,4,128,42],[82,12,3,80,0,67,129,54],[81,20,82,12,3,80,1,25,2,120,24,4,112,80,0,113],[87,7,84,117,114,116,108,101,32,82,12,3,49,54,87,20,32,99,104,97,110,103,105,110,103,32,100,105,114,101,99,116,105,111,110,44,54,190,147],[87,7,32,32,102,114,111,109,32,81,20,82,12,3,80,1,25,2,120,24,4,112,80,3,80,1,25,2,120,24,4,112,49,54,80,47,48,54,81,20,82,12,3,80,1,25,2,120,24,4,112,80,4,80,1,25,2,120,24,4,112,49,54,190,147],[80,46,19,80,45,24,212],[87,5,32,32,116,111,32,81,20,82,12,3,80,1,25,2,120,24,4,112,80,3,80,1,25,2,120,24,4,112,49,54,80,47,48,54,81,20,82,12,3,80,1,25,2,120,24,4,112,80,4,80,1,25,2,120,24,4,112,49,54,190,191,147],[80,200,178],[145,12,141,137],[80,0,80,0,80,100000,80,100000,208],[80,2500,80,80000,224],[87,45,67,108,105,99,107,32,111,110,32,97,32,99,105,114,99,108,101,32,116,111,32,97,108,116,101,114,32,116,104,101,32,65,78,71,76,69,83,32,115,101,116,116,105,110,103,80,0,80,36,189],[80,2500,80,86000,224],[87,47,111,102,32,116,104,101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,117,114,116,108,101,46,32,73,116,115,32,100,105,114,101,99,116,105,111,110,32,119,105,108,108,80,0,80,36,189],[80,2500,80,92000,224],[87,42,116,104,101,110,32,99,104,97,110,103,101,32,116,111,32,116,104,101,32,99,108,111,115,101,115,116,32,112,111,115,115,105,98,108,101,32,97,110,103,108,101,46,80,0,80,36,189],[80,1],[97,62,80,5],[81,62,69,129,69],[80,10000,80,70000,224],[80,35,81,62,80,10,26,24,219],[80,110000,227],[81,62,4,128,63],[136,25],[136,11],[80,1],[97,62,80,5],[81,62,69,129,77],[81,20,81,62,80,1,25,2,120,24,4,112,80,0,113],[80,100,227],[81,62,4,128,72],[80,50,178],[80,-4,184,80,128,67,129,80],[136,36],[80,-9,184,80,27,64,129,71],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,2325,115,80,2335,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,33,97,17,84,51,97,18],[80,33,97,51,84,85,97,19],[80,33,97,85,84,119,97,20],[80,33,97,119,84,153,97,21],[80,33,97,153,84,187,97,22],[80,33,97,187,84,221,97,23],[80,33,97,221,84,255,97,24],[80,33,97,255,84,289,97,25],[80,33,97,289,84,323,97,26],[80,33,97,323,84,357,97,27],[80,33,97,357,84,391,97,28],[80,33,97,391,84,425,97,29],[80,33,97,425,84,459,97,30],[80,33,97,459,84,493,97,31],[80,33,97,493,84,527,97,32],[80,33,97,527,84,561,97,33],[80,33,97,561,84,595,97,34],[80,33,97,595,84,629,97,35],[80,33,97,629,84,663,97,36],[80,33,97,663,84,697,97,37],[80,33,97,697,84,731,97,38],[80,33,97,731,84,765,97,39],[80,33,97,765,84,799,97,40],[80,33,97,799,84,833,97,41],[80,33,97,833,84,867,97,42],[80,33,97,867,84,901,97,43],[80,33,97,901,84,935,97,44],[80,33,97,935,84,969,97,45],[80,33,97,969,84,1003,97,46],[80,33,97,1003,84,1037,97,47],[80,33,97,1037,84,1071,97,48],[80,33,97,1071,84,1105,97,49],[80,33,97,1105,84,1139,97,50],[80,33,97,1139],[84,1174,97,1173],[80,33,97,1174,84,1208,97,1175],[80,33,97,1208,84,1242,97,1176],[80,33,97,1242,84,1276,97,1177],[80,33,97,1276,84,1310,97,1178],[80,33,97,1310,84,1344,97,1179],[80,33,97,1344,84,1378,97,1180],[80,33,97,1378,84,1412,97,1181],[80,33,97,1412,84,1446,97,1182],[80,33,97,1446,84,1480,97,1183],[80,33,97,1480,84,1514,97,1184],[80,33,97,1514,84,1548,97,1185],[80,33,97,1548,84,1582,97,1186],[80,33,97,1582,84,1616,97,1187],[80,33,97,1616,84,1650,97,1188],[80,33,97,1650,84,1684,97,1189],[80,33,97,1684,84,1718,97,1190],[80,33,97,1718,84,1752,97,1191],[80,33,97,1752,84,1786,97,1192],[80,33,97,1786,84,1820,97,1193],[80,33,97,1820,84,1854,97,1194],[80,33,97,1854,84,1888,97,1195],[80,33,97,1888,84,1922,97,1196],[80,33,97,1922,84,1956,97,1197],[80,33,97,1956,84,1990,97,1198],[80,33,97,1990,84,2024,97,1199],[80,33,97,2024,84,2058,97,1200],[80,33,97,2058,84,2092,97,1201],[80,33,97,2092,84,2126,97,1202],[80,33,97,2126,84,2160,97,1203],[80,33,97,2160,84,2194,97,1204],[80,33,97,2194,84,2228,97,1205],[80,33,97,2228,84,2262,97,1206],[80,33,97,2262,84,2296,97,1207],[80,33,97,2296],[80,0,80,0,80,32,80,32,208],[80,32,80,32,209],[80,0],[97,2330,80,32,80,1,25],[81,2330,69,129,84],[80,0],[97,2331,80,32,80,1,25],[81,2331,69,129,83],[81,1173,81,2330,2,120,24,4,112,81,2331,2,120,24,4,80,7,19,4,80,1,64,2,113],[81,2331,4,128,79],[81,2330,4,128,76],[80,-9,184,80,27,65,129,124],[163],[80,0],[97,2330,80,32,80,1,25],[81,2330,69,129,99],[80,0],[97,2331,80,32,80,1,25],[81,2331,69,129,98],[81,16,81,2330,2,120,24,4,112,81,2331,2,120,24,4,81,1173,81,2330,2,120,24,4,112,81,2331,2,120,24,4,112,2,113],[81,16,81,2330,2,120,24,4,112,81,2331,2,120,24,4,112,129,96],[81,2330,81,2331,80,8388608,211],[128,97],[81,2330,81,2331,80,10025880,211],[81,2331,4,128,90],[81,2330,4,128,87],[162],[80,0],[97,2330,80,32,80,1,25],[81,2330,69,129,123],[80,0],[97,2331,80,32,80,1,25],[81,2331,69,129,122],[80,0,97,2332],[80,1,16],[97,2333,80,1],[81,2333,69,129,117],[80,1,16],[97,2334,80,1],[81,2334,69,129,116],[81,16,81,2330,81,2333,24,80,32,24,80,32,29,2,120,24,4,112,81,2331,81,2334,24,80,32,24,80,32,29,2,120,24,4,112,129,115],[84,2332,1,112,4,2,113],[81,2334,4,128,111],[81,2333,4,128,108],[81,16,81,2330,2,120,24,4,112,81,2331,2,120,24,4,112,129,120],[81,1173,81,2330,2,120,24,4,112,81,2331,2,120,24,4,81,2332,80,3,64,81,2332,80,4,64,10,2,113],[128,121],[81,1173,81,2330,2,120,24,4,112,81,2331,2,120,24,4,81,2332,80,3,64,2,113],[81,2331,4,128,104],[81,2330,4,128,101],[128,84],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,2325,115,80,2335,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,6,97,17,84,24,97,18],[80,6,97,24,84,31,97,19],[80,6,97,31,84,38,97,20],[80,6,97,38,84,45,97,21],[80,6,97,45,84,52,97,22],[80,6,97,52,84,59,97,23],[80,6,97,59],[84,23,97,22],[80,33,97,23,84,57,97,24],[80,33,97,57,84,91,97,25],[80,33,97,91,84,125,97,26],[80,33,97,125,84,159,97,27],[80,33,97,159,84,193,97,28],[80,33,97,193,84,227,97,29],[80,33,97,227,84,261,97,30],[80,33,97,261,84,295,97,31],[80,33,97,295,84,329,97,32],[80,33,97,329,84,363,97,33],[80,33,97,363,84,397,97,34],[80,33,97,397,84,431,97,35],[80,33,97,431,84,465,97,36],[80,33,97,465,84,499,97,37],[80,33,97,499,84,533,97,38],[80,33,97,533,84,567,97,39],[80,33,97,567,84,601,97,40],[80,33,97,601,84,635,97,41],[80,33,97,635,84,669,97,42],[80,33,97,669,84,703,97,43],[80,33,97,703,84,737,97,44],[80,33,97,737,84,771,97,45],[80,33,97,771,84,805,97,46],[80,33,97,805,84,839,97,47],[80,33,97,839,84,873,97,48],[80,33,97,873,84,907,97,49],[80,33,97,907,84,941,97,50],[80,33,97,941,84,975,97,51],[80,33,97,975,84,1009,97,52],[80,33,97,1009,84,1043,97,53],[80,33,97,1043,84,1077,97,54],[80,33,97,1077,84,1111,97,55],[80,33,97,1111,84,1145,97,56],[80,33,97,1145],[84,1180,97,1179],[80,33,97,1180,84,1214,97,1181],[80,33,97,1214,84,1248,97,1182],[80,33,97,1248,84,1282,97,1183],[80,33,97,1282,84,1316,97,1184],[80,33,97,1316,84,1350,97,1185],[80,33,97,1350,84,1384,97,1186],[80,33,97,1384,84,1418,97,1187],[80,33,97,1418,84,1452,97,1188],[80,33,97,1452,84,1486,97,1189],[80,33,97,1486,84,1520,97,1190],[80,33,97,1520,84,1554,97,1191],[80,33,97,1554,84,1588,97,1192],[80,33,97,1588,84,1622,97,1193],[80,33,97,1622,84,1656,97,1194],[80,33,97,1656,84,1690,97,1195],[80,33,97,1690,84,1724,97,1196],[80,33,97,1724,84,1758,97,1197],[80,33,97,1758,84,1792,97,1198],[80,33,97,1792,84,1826,97,1199],[80,33,97,1826,84,1860,97,1200],[80,33,97,1860,84,1894,97,1201],[80,33,97,1894,84,1928,97,1202],[80,33,97,1928,84,1962,97,1203],[80,33,97,1962,84,1996,97,1204],[80,33,97,1996,84,2030,97,1205],[80,33,97,2030,84,2064,97,1206],[80,33,97,2064,84,2098,97,1207],[80,33,97,2098,84,2132,97,1208],[80,33,97,2132,84,2166,97,1209],[80,33,97,2166,84,2200,97,1210],[80,33,97,2200,84,2234,97,1211],[80,33,97,2234,84,2268,97,1212],[80,33,97,2268,84,2302,97,1213],[80,33,97,2302],[80,0,80,0,80,32,80,32,208],[80,32,80,32,209],[80,0],[97,17,80,32,80,1,25],[81,17,69,129,92],[80,0],[97,18,80,32,80,1,25],[81,18,69,129,91],[81,1179,81,17,2,120,24,4,112,81,18,2,120,24,4,80,7,19,80,0,64,2,113],[81,18,4,128,87],[81,17,4,128,84],[80,-9,184,80,27,65,129,132],[163],[80,0],[97,17,80,32,80,1,25],[81,17,69,129,107],[80,0],[97,18,80,32,80,1,25],[81,18,69,129,106],[81,22,81,17,2,120,24,4,112,81,18,2,120,24,4,81,1179,81,17,2,120,24,4,112,81,18,2,120,24,4,112,2,113],[81,22,81,17,2,120,24,4,112,81,18,2,120,24,4,112,129,104],[81,17,81,18,80,8388608,211],[128,105],[81,17,81,18,80,10025880,211],[81,18,4,128,98],[81,17,4,128,95],[162],[80,0],[97,17,80,32,80,1,25],[81,17,69,129,131],[80,0],[97,18,80,32,80,1,25],[81,18,69,129,130],[80,0,97,21],[80,1,16],[97,19,80,1],[81,19,69,129,125],[80,1,16],[97,20,80,1],[81,20,69,129,124],[81,22,81,17,81,19,24,80,32,24,80,32,29,2,120,24,4,112,81,18,81,20,24,80,32,24,80,32,29,2,120,24,4,112,129,123],[84,21,1,112,4,2,113],[81,20,4,128,119],[81,19,4,128,116],[81,22,81,17,2,120,24,4,112,81,18,2,120,24,4,112,129,128],[81,1179,81,17,2,120,24,4,112,81,18,2,120,24,4,81,21,80,3,64,81,21,80,4,64,10,2,113],[128,129],[81,1179,81,17,2,120,24,4,112,81,18,2,120,24,4,81,21,80,3,64,2,113],[81,18,4,128,112],[81,17,4,128,109],[128,92],[130]]")},function(n){n.exports=JSON.parse("[[80,12,1,1,80,0,113,80,6,2,113,4,80,24,115,80,36,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,19,97,18],[80,2,97,19],[84,23,97,22],[80,8,97,23],[128,33],[140,1],[144,10,2],[85,10,1,80,2,115,98,10,1],[80,0],[98,10,2,80,7],[82,10,2,69,129,17],[81,22,82,10,2,2,120,24,4,82,10,1,80,2,29,2,113],[82,10,1,80,2,28,98,10,1],[82,10,2,4,128,12],[145,10,141,137],[140,2],[144,11,7],[85,11,1,80,7,115,98,11,1],[80,1,16],[98,11,2,80,100],[82,11,2,69,129,32],[82,11,2,80,100,24,80,100,29,98,11,3],[82,11,3,82,11,1,80,1,25,210,80,1,9,98,11,4],[82,11,6,80,2,26,82,11,4,24,98,11,7],[82,11,5,80,2,26,82,11,4,24,98,11,6],[82,11,4,98,11,5],[82,11,2,80,0,67,129,31],[82,11,2,80,1,25,82,11,1,81,18,81,22,82,11,7,2,120,24,4,112,2,120,24,4,112,211],[82,11,2,4,128,22],[145,11,141,137],[80,0,80,0,80,100,80,100,208],[80,100,80,100,209],[81,18,80,0,2,120,24,4,80,16777214,2,113],[81,18,80,1,2,120,24,4,80,1,2,113],[80,4],[97,32,80,45],[81,32,69,129,60],[81,32,80,4,26,80,2,24,97,33],[81,33,136,8],[163],[80,16777215,248],[80,0],[97,34,80,100,80,1,25],[81,34,69,129,49],[81,34,80,0,81,18,80,2,19,4,80,1,25,2,120,24,4,112,211],[81,34,4,128,45],[80,1],[97,35,80,100,80,1,25],[81,35,69,129,54],[81,35,136,18],[81,35,4,128,50],[80,0,80,100,80,15,25,224],[80,25,81,33,49,55,80,7,26,24,80,14,80,16777147,80,0,246,147],[87,5,82,117,108,101,32,81,33,49,54,80,4,80,8,189,147],[162],[80,500,178],[81,32,4,128,38],[130]]")},function(n){n.exports=JSON.parse("[[80,12,1,1,80,0,113,80,6,2,113,4,80,24,115,80,36,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,24,97,23],[80,2,97,24],[84,28,97,27],[80,8,97,28],[128,33],[140,1],[144,10,2],[85,10,1,80,2,115,98,10,1],[80,0],[98,10,2,80,7],[82,10,2,69,129,17],[81,27,82,10,2,2,120,24,4,82,10,1,80,2,29,2,113],[82,10,1,80,2,28,98,10,1],[82,10,2,4,128,12],[145,10,141,137],[140,2],[144,11,7],[85,11,1,80,7,115,98,11,1],[80,1,16],[98,11,2,80,100],[82,11,2,69,129,32],[82,11,2,80,100,24,80,100,29,98,11,3],[82,11,3,82,11,1,80,1,25,210,80,1,9,98,11,4],[82,11,6,80,2,26,82,11,4,24,98,11,7],[82,11,5,80,2,26,82,11,4,24,98,11,6],[82,11,4,98,11,5],[82,11,2,80,0,67,129,31],[82,11,2,80,1,25,82,11,1,81,23,81,27,82,11,7,2,120,24,4,112,2,120,24,4,112,211],[82,11,2,4,128,22],[145,11,141,137],[80,0,80,0,80,100,80,100,208],[80,100,80,100,209],[81,23,80,0,2,120,24,4,80,16777214,2,113],[81,23,80,1,2,120,24,4,80,1,2,113],[80,4],[97,19,80,45],[81,19,69,129,60],[81,19,80,4,26,80,2,24,97,20],[81,20,136,8],[163],[80,16777215,248],[80,0],[97,21,80,100,80,1,25],[81,21,69,129,49],[81,21,80,0,81,23,80,2,19,2,120,24,4,112,211],[81,21,4,128,45],[80,1],[97,22,80,100,80,1,25],[81,22,69,129,54],[81,22,136,18],[81,22,4,128,50],[80,0,80,100,80,15,25,224],[80,25,81,20,49,55,80,7,26,24,80,14,80,16777147,80,0,246,147],[87,5,82,117,108,101,32,81,20,49,54,80,4,80,8,189,147],[162],[80,500,178],[81,19,4,128,38],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,1624,115,80,1637,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,401,97,20],[84,423,97,422],[80,401,97,423],[84,826,97,825],[80,401,97,826],[84,1229,97,1228],[80,401,97,1229],[128,76],[140,1],[144,10,1],[85,10,1,80,1,115],[160],[80,500,97,1632],[80,500,97,1633],[80,0,97,1634],[80,0,97,1635],[81,1632,81,1633,224],[80,16777214,221],[80,90,243],[80,0],[98,10,1,80,400],[82,10,1,69,129,34],[81,19,82,10,1,2,120,24,4,80,1000,80,1,80,10,26,25,19,4,80,10,24,2,113],[81,422,82,10,1,2,120,24,4,80,1000,80,1,80,10,26,25,19,4,80,10,24,2,113],[81,19,82,10,1,2,120,24,4,112,81,422,82,10,1,2,120,24,4,112,210,80,16777215,64,129,26],[81,825,82,10,1,2,120,24,4,80,50,80,30,25,19,4,80,30,24,2,113],[81,1228,82,10,1,2,120,24,4,80,360,19,4,80,1,25,2,113],[81,19,82,10,1,2,120,24,4,112,81,422,82,10,1,2,120,24,4,112,224],[80,2,80,10,26,243],[82,10,1,4,128,24],[145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115,98,11,1],[82,11,1,129,42],[80,16711680,221],[80,10,97,1636],[128,44],[80,16777215,221],[80,10,80,1,24,97,1636],[80,0],[98,11,2,80,400],[82,11,2,69,129,50],[81,19,82,11,2,2,120,24,4,112,81,422,82,11,2,2,120,24,4,112,224],[81,1636,243],[82,11,2,4,128,45],[81,1632,81,1633,224],[82,11,1,129,55],[80,255,221],[80,80,243],[128,56],[80,80,80,1,24,243],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,1],[81,19,82,12,1,2,120,24,4,112,81,422,82,12,1,2,120,24,4,112,224],[81,1228,82,12,1,2,120,24,4,112,219],[81,825,82,12,1,2,120,24,4,112,227],[81,14,81,1632,25,81,15,81,1633,25,80,1,34,80,90,68,129,73],[81,14,81,1632,25,81,15,81,1633,25,80,1,34,80,90,66,129,67],[80,1,228],[128,64],[81,1632,81,14,25,81,1633,81,15,25,231],[81,16,81,1228,82,12,1,2,120,24,4,112,25,98,12,2],[81,1228,82,12,1,2,120,24,4,80,180,81,16,82,12,2,24,24,80,360,29,2,113],[82,12,2,80,1,81,825,82,12,1,2,120,24,4,112,42,98,12,3],[81,1634,81,16,80,1,82,12,3,41,24,97,1634],[81,1635,81,16,80,1,82,12,3,42,25,97,1635],[81,19,82,12,1,2,120,24,4,81,14,80,1000,24,80,1000,29,2,113],[81,422,82,12,1,2,120,24,4,81,15,80,1000,24,80,1000,29,2,113],[145,12,141,137],[163],[136,12],[80,16777215,248],[80,-1,136,35],[163],[80,0,136,35],[80,0],[97,1631,80,400],[81,1631,69,129,87],[81,1631,136,57],[81,1631,4,128,83],[81,1632,81,1634,80,10,27,24,97,1632],[81,1633,81,1635,80,10,27,24,97,1633],[80,-1,136,35],[162],[80,50,178],[81,1632,80,500,25,17,80,490,67,81,1633,80,500,25,17,80,480,67,10,129,80],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,1619,115,80,1632,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,25,97,24],[80,400,97,25],[84,427,97,426],[80,400,97,427],[84,829,97,828],[80,400,97,829],[84,1231,97,1230],[80,400,97,1231],[128,76],[140,1],[144,10,1],[85,10,1,80,1,115],[160],[80,500,97,20],[80,500,97,21],[80,0,97,22],[80,0,97,23],[81,20,81,21,224],[80,16777214,221],[80,90,243],[80,1],[98,10,1,80,400],[82,10,1,69,129,34],[81,24,82,10,1,80,1,25,2,120,24,4,80,1000,80,2,80,10,26,25,19,80,10,24,2,113],[81,426,82,10,1,80,1,25,2,120,24,4,80,1000,80,2,80,10,26,25,19,80,10,24,2,113],[81,24,82,10,1,80,1,25,2,120,24,4,112,81,426,82,10,1,80,1,25,2,120,24,4,112,210,80,16777215,64,129,26],[81,828,82,10,1,80,1,25,2,120,24,4,80,50,80,30,25,80,1,24,19,80,30,24,2,113],[81,1230,82,10,1,80,1,25,2,120,24,4,80,360,19,2,113],[81,24,82,10,1,80,1,25,2,120,24,4,112,81,426,82,10,1,80,1,25,2,120,24,4,112,224],[80,2,80,10,26,243],[82,10,1,4,128,24],[145,10,141,137],[140,2],[144,11,3],[85,11,1,80,3,115,98,11,1],[82,11,1,129,42],[80,16711680,221],[80,10,98,11,3],[128,44],[80,16777215,221],[80,10,80,1,24,98,11,3],[80,1],[98,11,2,80,400],[82,11,2,69,129,50],[81,24,82,11,2,80,1,25,2,120,24,4,112,81,426,82,11,2,80,1,25,2,120,24,4,112,224],[82,11,3,243],[82,11,2,4,128,45],[81,20,81,21,224],[82,11,1,129,55],[80,255,221],[80,80,243],[128,56],[80,80,80,1,24,243],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,1],[81,24,82,12,1,80,1,25,2,120,24,4,112,81,426,82,12,1,80,1,25,2,120,24,4,112,224],[81,1230,82,12,1,80,1,25,2,120,24,4,112,219],[81,828,82,12,1,80,1,25,2,120,24,4,112,227],[81,14,81,20,25,81,15,81,21,25,80,1,34,80,90,68,129,73],[81,14,81,20,25,81,15,81,21,25,80,1,34,80,90,66,129,67],[80,1,228],[128,64],[81,20,81,14,25,81,21,81,15,25,231],[81,16,81,1230,82,12,1,80,1,25,2,120,24,4,112,25,98,12,2],[81,1230,82,12,1,80,1,25,2,120,24,4,80,180,81,16,82,12,2,24,24,80,360,29,2,113],[82,12,2,80,1,81,828,82,12,1,80,1,25,2,120,24,4,112,42,98,12,3],[81,22,81,16,80,1,82,12,3,41,24,97,22],[81,23,81,16,80,1,82,12,3,42,25,97,23],[81,24,82,12,1,80,1,25,2,120,24,4,81,14,80,1000,24,80,1000,29,2,113],[81,426,82,12,1,80,1,25,2,120,24,4,81,15,80,1000,24,80,1000,29,2,113],[145,12,141,137],[163],[136,12],[80,16777215,248],[80,-1,136,35],[163],[80,0,136,35],[80,1],[97,1632,80,400],[81,1632,69,129,87],[81,1632,136,57],[81,1632,4,128,83],[81,20,81,22,80,10,27,24,97,20],[81,21,81,23,80,10,27,24,97,21],[80,-1,136,35],[162],[80,50,178],[81,20,80,500,25,17,80,490,67,81,21,80,500,25,17,80,480,67,10,129,80],[130]]")},function(n){n.exports=JSON.parse("[[80,18,1,1,80,0,113,80,6,2,113,4,80,5536,115,80,5554,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,25,97,24],[80,501,97,25],[84,528,97,527],[80,501,97,528],[84,1031,97,1030],[80,501,97,1031],[84,1534,97,1533],[80,501,97,1534],[84,2037,97,2036],[80,501,97,2037],[84,2540,97,2539],[80,501,97,2540],[84,3043,97,3042],[80,501,97,3043],[84,3546,97,3545],[80,1001,97,3546],[84,4549,97,4548],[80,1001,97,4549],[128,236],[140,1],[144,10,1],[85,10,1,80,1,115],[80,0],[98,10,1,80,1000],[82,10,1,69,129,31],[81,3545,82,10,1,2,120,24,4,80,0,2,113],[81,4548,82,10,1,2,120,24,4,80,0,2,113],[82,10,1,4,128,26],[80,50,80,1,25,97,5552],[80,50,80,1,25,97,5553],[80,0],[98,10,1,81,5552],[82,10,1,69,129,42],[81,1030,82,10,1,2,120,24,4,80,70,80,30,25,19,4,80,30,24,2,113],[81,24,82,10,1,2,120,24,4,81,1030,82,10,1,2,120,24,4,112,2,113],[81,2036,82,10,1,2,120,24,4,80,100,19,4,80,1,25,2,113],[81,3042,82,10,1,2,120,24,4,80,40,19,4,2,113],[81,3545,81,24,82,10,1,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[82,10,1,4,128,34],[81,5552],[98,10,1,80,500],[82,10,1,69,129,47],[81,24,82,10,1,2,120,24,4,80,0,2,113],[82,10,1,4,128,43],[80,0],[98,10,1,81,5553],[82,10,1,69,129,55],[81,1533,82,10,1,2,120,24,4,80,70,80,30,25,19,4,80,30,24,2,113],[81,527,82,10,1,2,120,24,4,81,1533,82,10,1,2,120,24,4,112,2,113],[81,2539,82,10,1,2,120,24,4,80,100,19,4,80,1,25,2,113],[81,4548,81,527,82,10,1,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[82,10,1,4,128,48],[81,5553],[98,10,1,80,500],[82,10,1,69,129,60],[81,527,82,10,1,2,120,24,4,80,0,2,113],[82,10,1,4,128,56],[145,10,141,137],[140,2],[144,11,3],[85,11,1,80,3,115,98,11,1],[80,0,221],[80,60,82,11,1,80,400,25,224],[80,0,80,400,226],[80,900,80,0,226],[80,0],[98,11,2,80,10],[82,11,2,69,129,74],[80,20,82,11,1,82,11,2,80,400,26,80,10,27,25,80,19,25,224],[82,11,2,80,20,26,80,10,27,49,80,0,80,20,189,147],[82,11,2,4,128,69],[80,1],[98,11,2,80,10],[82,11,2,69,129,80],[80,60,82,11,2,80,900,26,80,10,27,24,80,20,25,82,11,1,224],[82,11,2,80,1000,26,80,10,27,49,80,0,80,20,189,147],[82,11,2,4,128,75],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115],[163],[80,16777215,248],[80,450,136,61],[80,950,136,61],[80,200,80,20,224],[80,16711680,221],[87,30,83,112,101,101,100,32,68,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,67,104,101,101,116,97,104,115,80,4,80,25,189],[80,750,80,20,224],[81,5552,49,80,4,80,25,189,147],[80,0,98,12,2],[80,1],[98,12,1,80,1000],[82,12,1,69,129,101],[80,60,82,12,1,80,900,26,80,1000,27,24,80,450,224],[80,0,80,400,16,81,3545,82,12,1,2,120,24,4,112,26,80,20,27,226],[82,12,2,82,12,1,81,3545,82,12,1,2,120,24,4,112,26,24,98,12,2],[82,12,1,4,128,95],[80,200,80,520,224],[80,2263842,221],[87,30,83,112,101,101,100,32,68,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,71,97,122,101,108,108,101,115,80,4,80,25,189],[80,750,80,520,224],[81,5553,49,80,4,80,25,189,147],[80,0,98,12,3],[80,1],[98,12,1,80,1000],[82,12,1,69,129,114],[80,60,82,12,1,80,900,26,80,1000,27,24,80,950,224],[80,0,80,400,16,81,4548,82,12,1,2,120,24,4,112,26,80,20,27,226],[82,12,3,82,12,1,81,4548,82,12,1,2,120,24,4,112,26,24,98,12,3],[82,12,1,4,128,108],[80,850,80,20,224],[81,5552,80,1,66,129,120],[80,150,80,200,224],[80,16711935,221],[87,22,65,108,108,32,67,104,101,101,116,97,104,115,32,72,97,118,101,32,68,105,101,100,80,4,80,50,189],[130],[82,12,2,81,5552,80,2,52,80,4,80,25,189,147],[80,850,80,520,224],[82,12,3,81,5553,80,2,52,80,4,80,25,189,147],[162],[81,5551,49,190,147],[87,5,32,45,32,99,61,190],[81,5552,49,190,147],[87,5,32,40,97,118,61,190],[82,12,2,81,5552,80,2,52,190,147],[87,1,41,190,191],[162],[163],[87,7,32,32,32,32,32,103,61,190],[81,5553,49,190,147],[87,5,32,40,97,118,61,190],[82,12,3,81,5553,80,2,52,190,147],[87,1,41,190,191],[145,12,141,137],[140,4],[144,13,1],[85,13,1,80,1,115,98,13,1],[81,3545,81,24,82,13,1,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,24,82,13,1,2,120,24,4,80,0,2,113],[84,5552,1,112,5,2,113],[145,13,141,137],[140,5],[144,14,1],[85,14,1,80,1,115,98,14,1],[81,4548,81,527,82,14,1,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,527,82,14,1,2,120,24,4,80,0,2,113],[84,5553,1,112,5,2,113],[145,14,141,137],[140,6],[144,15,2],[85,15,1,80,2,115,98,15,1],[80,0,98,15,2],[85,15,2,1,112,4,2,113],[81,24,82,15,2,2,120,24,4,112,80,0,64,82,15,2,80,500,64,10,129,156],[81,24,82,15,2,2,120,24,4,112,80,0,64,129,166],[84,5552,1,112,4,2,113],[81,1030,82,15,2,2,120,24,4,82,15,1,80,2,80,10,26,19,4,24,80,10,25,2,113],[81,1030,82,15,2,2,120,24,4,80,1,80,1000,81,1030,82,15,2,2,120,24,4,112,71,70,2,113],[81,24,82,15,2,2,120,24,4,81,1030,82,15,2,2,120,24,4,112,2,113],[81,2036,82,15,2,2,120,24,4,80,0,2,113],[81,3042,82,15,2,2,120,24,4,80,40,2,113],[81,3545,81,24,82,15,2,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[145,15,141,137],[140,7],[144,16,2],[85,16,1,80,2,115,98,16,1],[80,0,98,16,2],[85,16,2,1,112,4,2,113],[81,527,82,16,2,2,120,24,4,112,80,0,64,82,16,2,80,500,64,10,129,171],[81,527,82,16,2,2,120,24,4,112,80,0,64,129,180],[84,5553,1,112,4,2,113],[81,1533,82,16,2,2,120,24,4,82,16,1,80,2,80,10,26,19,4,24,80,10,25,2,113],[81,1533,82,16,2,2,120,24,4,80,1,80,1000,81,1533,82,16,2,2,120,24,4,112,71,70,2,113],[81,527,82,16,2,2,120,24,4,81,1533,82,16,2,2,120,24,4,112,2,113],[81,2539,82,16,2,2,120,24,4,80,0,2,113],[81,4548,81,527,82,16,2,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[145,16,141,137],[140,8],[144,17,6],[85,17,1,80,6,115],[80,0],[98,17,3,81,5552,80,1,27],[82,17,3,69,129,197],[80,500,19,4,98,17,3],[81,24,82,17,3,2,120,24,4,112,80,0,67,81,5553,80,10,67,9,129,196],[80,0,98,17,2],[85,17,2,1,112,4,2,113],[80,500,19,4,98,17,4],[81,527,82,17,4,2,120,24,4,112,80,0,67,82,17,2,80,100,64,10,129,190],[81,527,82,17,4,2,120,24,4,112,80,0,67,81,24,82,17,3,2,120,24,4,112,81,527,82,17,4,2,120,24,4,112,80,5,24,69,9,129,196],[82,17,4,136,145],[81,3042,82,17,3,2,120,24,4,81,3042,82,17,3,2,120,24,4,112,80,40,24,2,113],[82,17,3,4,128,185],[80,0],[98,17,1,81,5552,80,2,27],[82,17,1,69,129,205],[80,500,19,4,98,17,3],[81,5552,80,500,66,81,24,82,17,3,2,120,24,4,112,80,0,67,9,81,3042,82,17,3,2,120,24,4,112,80,10,69,9,129,204],[81,1030,82,17,3,2,120,24,4,112,136,152],[81,3042,82,17,3,2,120,24,4,81,3042,82,17,3,2,120,24,4,112,80,10,25,2,113],[82,17,1,4,128,198],[80,0],[98,17,1,81,5553,80,1,27],[82,17,1,69,129,212],[80,500,19,4,98,17,4],[81,5553,80,500,66,81,527,82,17,4,2,120,24,4,112,80,0,67,9,129,211],[81,1533,82,17,4,2,120,24,4,112,136,167],[82,17,1,4,128,206],[80,0],[98,17,1,80,500],[82,17,1,69,129,235],[81,24,82,17,1,2,120,24,4,112,80,0,67,129,226],[81,2036,82,17,1,2,120,24,4,1,112,4,2,113],[81,2036,82,17,1,2,120,24,4,112,80,100,67,129,223],[81,3545,81,24,82,17,1,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,24,82,17,1,2,120,24,4,81,24,82,17,1,2,120,24,4,112,80,0,26,80,100,27,2,113],[81,3545,81,24,82,17,1,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[81,24,82,17,1,2,120,24,4,112,80,0,64,129,223],[82,17,1,136,138],[81,3042,82,17,1,2,120,24,4,1,112,5,2,113],[81,3042,82,17,1,2,120,24,4,112,80,0,66,129,226],[82,17,1,136,138],[81,527,82,17,1,2,120,24,4,112,80,0,67,129,234],[81,2539,82,17,1,2,120,24,4,1,112,4,2,113],[81,2539,82,17,1,2,120,24,4,112,80,100,67,129,234],[81,4548,81,527,82,17,1,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,527,82,17,1,2,120,24,4,81,527,82,17,1,2,120,24,4,112,80,0,26,80,100,27,2,113],[81,4548,81,527,82,17,1,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[81,527,82,17,1,2,120,24,4,112,80,0,64,129,234],[82,17,1,136,145],[82,17,1,4,128,213],[145,17,141,137],[136,22],[136,81],[80,0,97,5551],[84,5551,1,112,4,2,113],[136,181],[136,81],[80,0,80,1,64,129,239],[130]]")},function(n){n.exports=JSON.parse("[[80,18,1,1,80,0,113,80,6,2,113,4,80,5529,115,80,5547,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,29,97,28],[80,500,97,29],[84,531,97,530],[80,500,97,531],[84,1033,97,1032],[80,500,97,1033],[84,1535,97,1534],[80,500,97,1535],[84,2037,97,2036],[80,500,97,2037],[84,2539,97,2538],[80,500,97,2539],[84,3041,97,3040],[80,500,97,3041],[84,3543,97,3542],[80,1001,97,3543],[84,4546,97,4545],[80,1001,97,4546],[128,236],[140,1],[144,10,1],[85,10,1,80,1,115],[80,0],[98,10,1,80,1000],[82,10,1,69,129,31],[81,3542,82,10,1,2,120,24,4,80,0,2,113],[81,4545,82,10,1,2,120,24,4,80,0,2,113],[82,10,1,4,128,26],[80,50,97,26],[80,50,97,27],[80,1],[98,10,1,81,26],[82,10,1,69,129,42],[81,1032,82,10,1,80,1,25,2,120,24,4,80,70,80,1,24,80,30,25,19,80,30,24,2,113],[81,28,82,10,1,80,1,25,2,120,24,4,81,1032,82,10,1,80,1,25,2,120,24,4,112,2,113],[81,2036,82,10,1,80,1,25,2,120,24,4,80,100,19,2,113],[81,3040,82,10,1,80,1,25,2,120,24,4,80,40,19,80,1,24,2,113],[81,3542,81,28,82,10,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[82,10,1,4,128,34],[81,26,80,1,24],[98,10,1,80,500],[82,10,1,69,129,47],[81,28,82,10,1,80,1,25,2,120,24,4,80,0,2,113],[82,10,1,4,128,43],[80,1],[98,10,1,81,27],[82,10,1,69,129,55],[81,1534,82,10,1,80,1,25,2,120,24,4,80,70,80,1,24,80,30,25,19,80,30,24,2,113],[81,530,82,10,1,80,1,25,2,120,24,4,81,1534,82,10,1,80,1,25,2,120,24,4,112,2,113],[81,2538,82,10,1,80,1,25,2,120,24,4,80,100,19,2,113],[81,4545,81,530,82,10,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[82,10,1,4,128,48],[81,27,80,1,24],[98,10,1,80,500],[82,10,1,69,129,60],[81,530,82,10,1,80,1,25,2,120,24,4,80,0,2,113],[82,10,1,4,128,56],[145,10,141,137],[140,2],[144,11,3],[85,11,1,80,3,115,98,11,1],[80,0,221],[80,60,82,11,1,80,400,25,224],[80,0,80,400,226],[80,900,80,0,226],[80,0],[98,11,2,80,10],[82,11,2,69,129,74],[80,20,82,11,1,82,11,2,80,400,26,80,10,27,25,80,19,25,224],[82,11,2,80,20,26,80,10,27,49,80,0,80,20,189,147],[82,11,2,4,128,69],[80,1],[98,11,2,80,10],[82,11,2,69,129,80],[80,60,82,11,2,80,900,26,80,10,27,24,80,20,25,82,11,1,224],[82,11,2,80,1000,26,80,10,27,49,80,0,80,20,189,147],[82,11,2,4,128,75],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115],[163],[80,16777215,248],[80,450,136,61],[80,950,136,61],[80,200,80,20,224],[80,16711680,221],[87,30,83,112,101,101,100,32,68,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,67,104,101,101,116,97,104,115,80,4,80,25,189],[80,750,80,20,224],[81,26,49,80,4,80,25,189,147],[80,0,98,12,2],[80,1],[98,12,1,80,1000],[82,12,1,69,129,101],[80,60,82,12,1,80,900,26,80,1000,27,24,80,450,224],[80,0,80,400,16,81,3542,82,12,1,2,120,24,4,112,26,80,20,27,226],[82,12,2,82,12,1,81,3542,82,12,1,2,120,24,4,112,26,24,98,12,2],[82,12,1,4,128,95],[80,200,80,520,224],[80,2263842,221],[87,30,83,112,101,101,100,32,68,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,71,97,122,101,108,108,101,115,80,4,80,25,189],[80,750,80,520,224],[81,27,49,80,4,80,25,189,147],[80,0,98,12,3],[80,1],[98,12,1,80,1000],[82,12,1,69,129,114],[80,60,82,12,1,80,900,26,80,1000,27,24,80,950,224],[80,0,80,400,16,81,4545,82,12,1,2,120,24,4,112,26,80,20,27,226],[82,12,3,82,12,1,81,4545,82,12,1,2,120,24,4,112,26,24,98,12,3],[82,12,1,4,128,108],[80,850,80,20,224],[81,26,80,1,66,129,120],[80,150,80,200,224],[80,16711935,221],[87,22,65,108,108,32,67,104,101,101,116,97,104,115,32,72,97,118,101,32,68,105,101,100,80,4,80,50,189],[130],[82,12,2,81,26,80,2,52,80,4,80,25,189,147],[80,850,80,520,224],[82,12,3,81,27,80,2,52,80,4,80,25,189,147],[162],[81,25,49,190,147],[87,5,32,45,32,99,61,190],[81,26,49,190,147],[87,5,32,40,97,118,61,190],[82,12,2,81,26,80,2,52,190,147],[80,41,48,190,191,147],[162],[163],[87,7,32,32,32,32,32,103,61,190],[81,27,49,190,147],[87,5,32,40,97,118,61,190],[82,12,3,81,27,80,2,52,190,147],[80,41,48,190,191,147],[145,12,141,137],[140,4],[144,13,1],[85,13,1,80,1,115,98,13,1],[81,3542,81,28,82,13,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,28,82,13,1,80,1,25,2,120,24,4,80,0,2,113],[84,26,1,112,5,2,113],[145,13,141,137],[140,5],[144,14,1],[85,14,1,80,1,115,98,14,1],[81,4545,81,530,82,14,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,530,82,14,1,80,1,25,2,120,24,4,80,0,2,113],[84,27,1,112,5,2,113],[145,14,141,137],[140,6],[144,15,2],[85,15,1,80,2,115,98,15,1],[80,0,98,15,2],[85,15,2,1,112,4,2,113],[81,28,82,15,2,80,1,25,2,120,24,4,112,80,0,64,82,15,2,80,500,64,10,129,156],[81,28,82,15,2,80,1,25,2,120,24,4,112,80,0,64,129,166],[84,26,1,112,4,2,113],[81,1032,82,15,2,80,1,25,2,120,24,4,82,15,1,80,2,80,10,26,80,1,24,19,24,80,10,25,2,113],[81,1032,82,15,2,80,1,25,2,120,24,4,80,1,80,1000,81,1032,82,15,2,80,1,25,2,120,24,4,112,71,70,2,113],[81,28,82,15,2,80,1,25,2,120,24,4,81,1032,82,15,2,80,1,25,2,120,24,4,112,2,113],[81,2036,82,15,2,80,1,25,2,120,24,4,80,0,2,113],[81,3040,82,15,2,80,1,25,2,120,24,4,80,40,2,113],[81,3542,81,28,82,15,2,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[145,15,141,137],[140,7],[144,16,2],[85,16,1,80,2,115,98,16,1],[80,0,98,16,2],[85,16,2,1,112,4,2,113],[81,530,82,16,2,80,1,25,2,120,24,4,112,80,0,64,82,16,2,80,500,64,10,129,171],[81,530,82,16,2,80,1,25,2,120,24,4,112,80,0,64,129,180],[84,27,1,112,4,2,113],[81,1534,82,16,2,80,1,25,2,120,24,4,82,16,1,80,2,80,10,26,80,1,24,19,24,80,10,25,2,113],[81,1534,82,16,2,80,1,25,2,120,24,4,80,1,80,1000,81,1534,82,16,2,80,1,25,2,120,24,4,112,71,70,2,113],[81,530,82,16,2,80,1,25,2,120,24,4,81,1534,82,16,2,80,1,25,2,120,24,4,112,2,113],[81,2538,82,16,2,80,1,25,2,120,24,4,80,0,2,113],[81,4545,81,530,82,16,2,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[145,16,141,137],[140,8],[144,17,6],[85,17,1,80,6,115],[80,1],[98,17,2,81,26,80,1,27],[82,17,2,69,129,197],[80,500,19,80,1,24,98,17,2],[81,28,82,17,2,80,1,25,2,120,24,4,112,80,0,67,81,27,80,10,67,9,129,196],[80,0,98,17,6],[85,17,6,1,112,4,2,113],[80,500,19,80,1,24,98,17,3],[81,530,82,17,3,80,1,25,2,120,24,4,112,80,0,67,82,17,6,80,100,64,10,129,190],[81,530,82,17,3,80,1,25,2,120,24,4,112,80,0,67,81,28,82,17,2,80,1,25,2,120,24,4,112,81,530,82,17,3,80,1,25,2,120,24,4,112,80,5,24,69,9,129,196],[82,17,3,136,145],[81,3040,82,17,2,80,1,25,2,120,24,4,81,3040,82,17,2,80,1,25,2,120,24,4,112,80,40,24,2,113],[82,17,2,4,128,185],[80,1],[98,17,1,81,26,80,2,27],[82,17,1,69,129,205],[80,500,19,80,1,24,98,17,2],[81,26,80,500,66,81,28,82,17,2,80,1,25,2,120,24,4,112,80,0,67,9,81,3040,82,17,2,80,1,25,2,120,24,4,112,80,10,69,9,129,204],[81,1032,82,17,2,80,1,25,2,120,24,4,112,136,152],[81,3040,82,17,2,80,1,25,2,120,24,4,81,3040,82,17,2,80,1,25,2,120,24,4,112,80,10,25,2,113],[82,17,1,4,128,198],[80,1],[98,17,1,81,27,80,1,27],[82,17,1,69,129,212],[80,500,19,80,1,24,98,17,3],[81,27,80,500,66,81,530,82,17,3,80,1,25,2,120,24,4,112,80,0,67,9,129,211],[81,1534,82,17,3,80,1,25,2,120,24,4,112,136,167],[82,17,1,4,128,206],[80,1],[98,17,1,80,500],[82,17,1,69,129,235],[81,28,82,17,1,80,1,25,2,120,24,4,112,80,0,67,129,226],[81,2036,82,17,1,80,1,25,2,120,24,4,1,112,4,2,113],[81,2036,82,17,1,80,1,25,2,120,24,4,112,80,100,67,129,223],[81,3542,81,28,82,17,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,28,82,17,1,80,1,25,2,120,24,4,81,28,82,17,1,80,1,25,2,120,24,4,112,80,0,26,80,100,27,2,113],[81,3542,81,28,82,17,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[81,28,82,17,1,80,1,25,2,120,24,4,112,80,0,64,129,223],[82,17,1,136,138],[81,3040,82,17,1,80,1,25,2,120,24,4,1,112,5,2,113],[81,3040,82,17,1,80,1,25,2,120,24,4,112,80,0,66,129,226],[82,17,1,136,138],[81,530,82,17,1,80,1,25,2,120,24,4,112,80,0,67,129,234],[81,2538,82,17,1,80,1,25,2,120,24,4,1,112,4,2,113],[81,2538,82,17,1,80,1,25,2,120,24,4,112,80,100,67,129,234],[81,4545,81,530,82,17,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,530,82,17,1,80,1,25,2,120,24,4,81,530,82,17,1,80,1,25,2,120,24,4,112,80,0,26,80,100,27,2,113],[81,4545,81,530,82,17,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[81,530,82,17,1,80,1,25,2,120,24,4,112,80,0,64,129,234],[82,17,1,136,145],[82,17,1,4,128,213],[145,17,141,137],[136,22],[136,81],[80,0,97,25],[84,25,1,112,4,2,113],[136,181],[136,81],[80,0,80,1,64,129,239],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,2014,115,80,2027,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,1001,97,20],[84,1023,97,1022],[80,1001,97,1023],[128,68],[140,1],[144,10,1],[85,10,1,80,1,115],[80,1],[98,10,1,80,9],[82,10,1,69,129,17],[80,70,82,10,1,80,100,26,24,80,25,25,80,20,80,800,24,224],[82,10,1,80,100,26,49,80,4,80,20,189,147],[82,10,1,4,128,12],[80,2],[98,10,1,80,10],[82,10,1,69,129,27],[80,0,80,1000,82,10,1,80,100,26,25,224],[80,0,221],[82,10,1,80,10,26,49,87,1,37,54,80,4,80,20,189,147],[80,70,80,20,225],[80,10526880,221],[80,1000,80,70,25,80,0,226],[82,10,1,4,128,18],[80,70,80,20,224],[80,0,221],[80,0,80,800,226],[80,1000,80,70,25,80,0,226],[80,16711680,221],[80,50,80,880,224],[87,57,80,114,111,112,111,114,116,105,111,110,32,111,102,32,70,101,109,97,108,101,115,32,105,110,32,80,111,112,117,108,97,116,105,111,110,44,32,111,118,101,114,32,57,48,48,32,71,101,110,101,114,97,116,105,111,110,115,80,4,80,25,189],[80,50,80,930,224],[87,58,119,105,116,104,32,70,101,109,97,108,101,32,79,102,102,115,112,114,105,110,103,32,80,114,111,98,97,98,105,108,105,116,121,32,103,101,110,101,115,32,105,110,105,116,105,97,108,108,121,32,115,101,116,32,57,48,37,43,80,4,80,25,189],[145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115],[80,0,98,11,1],[80,0],[98,11,2,80,1000],[82,11,2,69,129,47],[81,19,82,11,2,2,120,24,4,112,129,46],[85,11,1,1,112,4,2,113],[82,11,2,4,128,42],[80,16711680,221],[80,70,81,2026,24,80,20,80,1000,24,82,11,1,25,224],[81,2026,80,0,67,129,51],[80,2,240],[145,11,141,137],[140,3],[144,12,4],[85,12,1,80,4,115],[80,1000,19,4,98,12,1],[80,1000,19,4,98,12,2],[81,19,82,12,1,2,120,24,4,112,81,19,82,12,2,2,120,24,4,112,65,129,55],[80,2,19,4,80,1,64,98,12,4],[80,1000,19,4,98,12,3],[82,12,4,129,63],[81,1022,82,12,3,2,120,24,4,81,1022,82,12,1,2,120,24,4,112,2,113],[128,64],[81,1022,82,12,3,2,120,24,4,81,1022,82,12,2,2,120,24,4,112,2,113],[81,19,82,12,3,2,120,24,4,81,1022,82,12,3,2,120,24,4,112,80,1000,19,4,80,1,25,67,2,113],[81,1022,82,12,3,2,120,24,4,81,1022,82,12,3,2,120,24,4,112,80,1,80,20,26,19,4,24,80,1,80,10,26,25,2,113],[81,1022,82,12,3,2,120,24,4,80,0,80,1000,81,1022,82,12,3,2,120,24,4,112,71,70,2,113],[145,12,141,137],[136,8],[80,0],[97,2025,80,1000],[81,2025,69,129,75],[81,19,81,2025,2,120,24,4,80,2,19,4,80,1,64,2,113],[81,1022,81,2025,2,120,24,4,80,900,80,100,19,4,24,2,113],[81,2025,4,128,70],[80,0,97,2026],[136,37],[84,2026,1,112,4,2,113],[80,0],[97,2025,80,400],[81,2025,69,129,83],[136,52],[81,2025,4,128,79],[81,2026,80,900,64,129,76],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,2012,115,80,2025,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,6,97,20,84,27,97,21],[80,6,97,27,84,34,97,22],[80,6,97,34,84,41,97,23],[80,6,97,41,84,48,97,24],[80,6,97,48,84,55,97,25],[80,6,97,55,84,62,97,26],[80,6,97,62],[84,21,97,20],[80,1000,97,21],[84,1023,97,1022],[80,1000,97,1023],[128,76],[140,1],[144,10,1],[85,10,1,80,1,115],[80,1],[98,10,1,80,9],[82,10,1,69,129,25],[80,70,82,10,1,80,100,26,24,80,25,25,80,20,80,800,24,224],[82,10,1,80,100,26,49,80,4,80,20,189,147],[82,10,1,4,128,20],[80,2],[98,10,1,80,10],[82,10,1,69,129,35],[80,0,80,1000,82,10,1,80,100,26,25,224],[80,0,221],[82,10,1,80,10,26,49,80,37,48,54,80,4,80,20,189,147],[80,70,80,20,225],[80,10526880,221],[80,1000,80,70,25,80,0,226],[82,10,1,4,128,26],[80,70,80,20,224],[80,0,221],[80,0,80,800,226],[80,1000,80,70,25,80,0,226],[80,16711680,221],[80,50,80,880,224],[87,57,80,114,111,112,111,114,116,105,111,110,32,111,102,32,70,101,109,97,108,101,115,32,105,110,32,80,111,112,117,108,97,116,105,111,110,44,32,111,118,101,114,32,57,48,48,32,71,101,110,101,114,97,116,105,111,110,115,80,4,80,25,189],[80,50,80,930,224],[87,58,119,105,116,104,32,70,101,109,97,108,101,32,79,102,102,115,112,114,105,110,103,32,80,114,111,98,97,98,105,108,105,116,121,32,103,101,110,101,115,32,105,110,105,116,105,97,108,108,121,32,115,101,116,32,57,48,37,43,80,4,80,25,189],[145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115],[80,0,98,11,1],[80,1],[98,11,2,80,1000],[82,11,2,69,129,55],[81,20,82,11,2,80,1,25,2,120,24,4,112,129,54],[85,11,1,1,112,4,2,113],[82,11,2,4,128,50],[80,16711680,221],[80,70,81,2024,24,80,20,80,1000,24,82,11,1,25,224],[81,2024,80,0,67,129,59],[80,2,240],[145,11,141,137],[140,3],[144,12,4],[85,12,1,80,4,115],[80,1000,19,80,1,24,98,12,1],[80,1000,19,80,1,24,98,12,2],[81,20,82,12,1,80,1,25,2,120,24,4,112,81,20,82,12,2,80,1,25,2,120,24,4,112,65,129,63],[80,2,19,80,0,64,98,12,4],[80,1000,19,80,1,24,98,12,3],[82,12,4,129,71],[81,1022,82,12,3,80,1,25,2,120,24,4,81,1022,82,12,1,80,1,25,2,120,24,4,112,2,113],[128,72],[81,1022,82,12,3,80,1,25,2,120,24,4,81,1022,82,12,2,80,1,25,2,120,24,4,112,2,113],[81,20,82,12,3,80,1,25,2,120,24,4,81,1022,82,12,3,80,1,25,2,120,24,4,112,80,1000,19,67,2,113],[81,1022,82,12,3,80,1,25,2,120,24,4,81,1022,82,12,3,80,1,25,2,120,24,4,112,80,1,80,20,26,80,1,24,19,24,80,1,80,10,26,25,2,113],[81,1022,82,12,3,80,1,25,2,120,24,4,80,0,80,1000,81,1022,82,12,3,80,1,25,2,120,24,4,112,71,70,2,113],[145,12,141,137],[136,16],[80,1],[97,2025,80,1000],[81,2025,69,129,83],[81,20,81,2025,80,1,25,2,120,24,4,80,2,19,80,0,64,2,113],[81,1022,81,2025,80,1,25,2,120,24,4,80,900,80,101,19,24,2,113],[81,2025,4,128,78],[80,0,97,2024],[136,45],[84,2024,1,112,4,2,113],[80,1],[97,2025,80,400],[81,2025,69,129,91],[136,60],[81,2025,4,128,87],[81,2024,80,900,64,129,84],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,150,115,80,165,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,22,97,21],[80,31,97,22],[84,55,97,54],[80,31,97,55],[84,88,97,87],[80,31,97,88],[84,121,97,120],[80,31,97,121],[128,97],[140,1],[144,10,1],[85,10,1,80,1,115],[160],[80,16777214,221],[80,0],[98,10,1,80,30],[82,10,1,69,129,28],[81,21,82,10,1,2,120,24,4,80,5000,80,2,80,20,26,25,19,4,80,20,24,80,1,25,2,113],[81,54,82,10,1,2,120,24,4,80,5000,80,2,80,20,26,25,19,4,80,20,24,80,1,25,2,113],[81,21,82,10,1,2,120,24,4,112,81,54,82,10,1,2,120,24,4,112,210,80,16777215,64,129,20],[81,87,82,10,1,2,120,24,4,80,50,80,2,26,80,1,24,19,4,80,50,25,80,1,25,2,113],[81,120,82,10,1,2,120,24,4,80,50,80,2,26,80,1,24,19,4,80,50,25,80,1,25,2,113],[81,21,82,10,1,2,120,24,4,112,81,54,82,10,1,2,120,24,4,112,224],[80,2,80,20,26,243],[82,10,1,4,128,18],[145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115,98,11,1],[82,11,1,129,36],[80,11567184,221],[80,20,97,155],[128,38],[80,16777215,221],[80,20,80,10,24,97,155],[80,0],[98,11,2,80,30],[82,11,2,69,129,44],[81,21,82,11,2,2,120,24,4,112,81,54,82,11,2,2,120,24,4,112,224],[81,155,243],[82,11,2,4,128,39],[145,11,141,137],[140,3],[144,12,5],[85,12,1,80,5,115],[80,0,98,12,1],[80,0,98,12,2],[80,0,97,156],[80,0,97,157],[80,0],[98,12,5,80,30],[82,12,5,69,129,60],[82,12,1,81,21,82,12,5,2,120,24,4,112,24,98,12,1],[82,12,2,81,54,82,12,5,2,120,24,4,112,24,98,12,2],[81,156,81,87,82,12,5,2,120,24,4,112,24,97,156],[81,157,81,120,82,12,5,2,120,24,4,112,24,97,157],[82,12,5,4,128,53],[82,12,1,80,30,27,97,158],[82,12,2,80,30,27,97,159],[81,156,80,30,27,97,160],[81,157,80,30,27,97,161],[145,12,141,137],[140,4],[81,153,80,100,29,80,0,64,129,68],[80,7,19,4,80,2,25,97,162],[81,153,81,162,26,80,1,80,1000,41,80,1000,80,2000,32,97,163],[81,153,81,162,26,80,1,80,1000,42,80,1000,80,2000,32,16,97,164],[84,153,1,112,4,2,113],[141,137],[140,5],[144,14,5],[85,14,1,80,5,115,98,14,1],[81,87,82,14,1,2,120,24,4,81,87,82,14,1,2,120,24,4,112,81,158,81,21,82,14,1,2,120,24,4,112,25,80,50,27,24,81,160,81,87,82,14,1,2,120,24,4,112,25,80,50,27,24,2,113],[81,120,82,14,1,2,120,24,4,81,120,82,14,1,2,120,24,4,112,81,159,81,54,82,14,1,2,120,24,4,112,25,80,50,27,24,81,161,81,120,82,14,1,2,120,24,4,112,25,80,50,27,24,2,113],[80,0],[98,14,2,80,30],[82,14,2,69,129,87],[82,14,2,82,14,1,65,129,86],[81,21,82,14,2,2,120,24,4,112,81,21,82,14,1,2,120,24,4,112,25,98,14,3],[81,54,82,14,2,2,120,24,4,112,81,54,82,14,1,2,120,24,4,112,25,98,14,4],[82,14,3,82,14,4,80,1,34,80,200,66,129,86],[81,87,82,14,1,2,120,24,4,81,87,82,14,1,2,120,24,4,112,82,14,3,18,80,200,82,14,3,17,25,26,80,10,27,25,2,113],[81,120,82,14,1,2,120,24,4,81,120,82,14,1,2,120,24,4,112,82,14,4,18,80,200,82,14,4,17,25,26,80,10,27,25,2,113],[82,14,2,4,128,78],[80,10,19,4,80,1,64,129,90],[81,87,82,14,1,2,120,24,4,81,163,81,21,82,14,1,2,120,24,4,112,25,2,113],[81,120,82,14,1,2,120,24,4,81,164,81,54,82,14,1,2,120,24,4,112,25,2,113],[81,87,82,14,1,2,120,24,4,112,81,120,82,14,1,2,120,24,4,112,80,1,34,98,14,5],[82,14,5,80,50,67,129,94],[81,87,82,14,1,2,120,24,4,81,87,82,14,1,2,120,24,4,112,82,14,5,80,50,32,2,113],[81,120,82,14,1,2,120,24,4,81,120,82,14,1,2,120,24,4,112,82,14,5,80,50,32,2,113],[81,21,82,14,1,2,120,24,4,81,21,82,14,1,2,120,24,4,112,81,87,82,14,1,2,120,24,4,112,24,2,113],[81,54,82,14,1,2,120,24,4,81,54,82,14,1,2,120,24,4,112,81,120,82,14,1,2,120,24,4,112,24,2,113],[145,14,141,137],[80,2500,16,80,2500,16,80,5000,80,5000,208],[163],[136,12],[80,16777215,248],[80,-1,136,29],[80,0,97,153],[136,45],[136,65],[163],[80,0,136,29],[80,0],[97,154,80,30],[81,154,69,129,112],[81,154,136,72],[81,154,4,128,108],[80,-1,136,29],[162],[80,50,178],[80,0,80,1,64,129,103],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,143,115,80,158,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,22,97,21],[80,6,97,22,84,29,97,23],[80,6,97,29,84,36,97,24],[80,6,97,36,84,43,97,25],[80,6,97,43,84,50,97,26],[80,6,97,50,84,57,97,27],[80,6,97,57,84,64,97,28],[80,6,97,64],[84,23,97,22],[80,30,97,23],[84,55,97,54],[80,30,97,55],[84,87,97,86],[80,30,97,87],[84,119,97,118],[80,30,97,119],[128,105],[140,1],[144,10,1],[85,10,1,80,1,115],[160],[80,16777214,221],[80,1],[98,10,1,80,30],[82,10,1,69,129,36],[81,22,82,10,1,80,1,25,2,120,24,4,80,5000,80,2,80,20,26,25,19,80,20,24,2,113],[81,54,82,10,1,80,1,25,2,120,24,4,80,5000,80,2,80,20,26,25,19,80,20,24,2,113],[81,22,82,10,1,80,1,25,2,120,24,4,112,81,54,82,10,1,80,1,25,2,120,24,4,112,210,80,16777215,64,129,28],[81,86,82,10,1,80,1,25,2,120,24,4,80,50,80,2,26,80,1,24,19,80,50,25,2,113],[81,118,82,10,1,80,1,25,2,120,24,4,80,50,80,2,26,80,1,24,19,80,50,25,2,113],[81,22,82,10,1,80,1,25,2,120,24,4,112,81,54,82,10,1,80,1,25,2,120,24,4,112,224],[80,2,80,20,26,243],[82,10,1,4,128,26],[145,10,141,137],[140,2],[144,11,3],[85,11,1,80,3,115,98,11,1],[82,11,1,129,44],[80,11567184,221],[80,20,98,11,3],[128,46],[80,16777215,221],[80,20,80,10,24,98,11,3],[80,1],[98,11,2,80,30],[82,11,2,69,129,52],[81,22,82,11,2,80,1,25,2,120,24,4,112,81,54,82,11,2,80,1,25,2,120,24,4,112,224],[82,11,3,243],[82,11,2,4,128,47],[145,11,141,137],[140,3],[144,12,5],[85,12,1,80,5,115],[80,0,98,12,1],[80,0,98,12,2],[80,0,98,12,3],[80,0,98,12,4],[80,1],[98,12,5,80,30],[82,12,5,69,129,68],[82,12,1,81,22,82,12,5,80,1,25,2,120,24,4,112,24,98,12,1],[82,12,2,81,54,82,12,5,80,1,25,2,120,24,4,112,24,98,12,2],[82,12,3,81,86,82,12,5,80,1,25,2,120,24,4,112,24,98,12,3],[82,12,4,81,118,82,12,5,80,1,25,2,120,24,4,112,24,98,12,4],[82,12,5,4,128,61],[82,12,1,80,30,27,97,150],[82,12,2,80,30,27,97,151],[82,12,3,80,30,27,97,152],[82,12,4,80,30,27,97,153],[145,12,141,137],[140,4],[81,158,80,100,29,80,0,64,129,76],[80,7,19,80,3,25,97,156],[81,158,81,156,26,80,1,80,1000,41,80,1000,80,2000,32,97,154],[81,158,81,156,26,80,1,80,1000,42,80,1000,80,2000,32,16,97,155],[84,158,1,112,4,2,113],[141,137],[140,5],[144,14,5],[85,14,1,80,5,115,98,14,1],[81,86,82,14,1,80,1,25,2,120,24,4,81,86,82,14,1,80,1,25,2,120,24,4,112,81,150,81,22,82,14,1,80,1,25,2,120,24,4,112,25,80,50,27,24,81,152,81,86,82,14,1,80,1,25,2,120,24,4,112,25,80,50,27,24,2,113],[81,118,82,14,1,80,1,25,2,120,24,4,81,118,82,14,1,80,1,25,2,120,24,4,112,81,151,81,54,82,14,1,80,1,25,2,120,24,4,112,25,80,50,27,24,81,153,81,118,82,14,1,80,1,25,2,120,24,4,112,25,80,50,27,24,2,113],[80,1],[98,14,2,80,30],[82,14,2,69,129,95],[82,14,2,82,14,1,65,129,94],[81,22,82,14,2,80,1,25,2,120,24,4,112,81,22,82,14,1,80,1,25,2,120,24,4,112,25,98,14,3],[81,54,82,14,2,80,1,25,2,120,24,4,112,81,54,82,14,1,80,1,25,2,120,24,4,112,25,98,14,4],[82,14,3,82,14,4,80,1,34,80,200,66,129,94],[81,86,82,14,1,80,1,25,2,120,24,4,81,86,82,14,1,80,1,25,2,120,24,4,112,82,14,3,18,80,200,82,14,3,17,25,26,80,10,27,25,2,113],[81,118,82,14,1,80,1,25,2,120,24,4,81,118,82,14,1,80,1,25,2,120,24,4,112,82,14,4,18,80,200,82,14,4,17,25,26,80,10,27,25,2,113],[82,14,2,4,128,86],[80,10,19,80,0,64,129,98],[81,86,82,14,1,80,1,25,2,120,24,4,81,154,81,22,82,14,1,80,1,25,2,120,24,4,112,25,2,113],[81,118,82,14,1,80,1,25,2,120,24,4,81,155,81,54,82,14,1,80,1,25,2,120,24,4,112,25,2,113],[81,86,82,14,1,80,1,25,2,120,24,4,112,81,118,82,14,1,80,1,25,2,120,24,4,112,80,1,34,98,14,5],[82,14,5,80,50,67,129,102],[81,86,82,14,1,80,1,25,2,120,24,4,81,86,82,14,1,80,1,25,2,120,24,4,112,82,14,5,80,50,32,2,113],[81,118,82,14,1,80,1,25,2,120,24,4,81,118,82,14,1,80,1,25,2,120,24,4,112,82,14,5,80,50,32,2,113],[81,22,82,14,1,80,1,25,2,120,24,4,81,22,82,14,1,80,1,25,2,120,24,4,112,81,86,82,14,1,80,1,25,2,120,24,4,112,24,2,113],[81,54,82,14,1,80,1,25,2,120,24,4,81,54,82,14,1,80,1,25,2,120,24,4,112,81,118,82,14,1,80,1,25,2,120,24,4,112,24,2,113],[145,14,141,137],[80,2500,16,80,2500,16,80,5000,80,5000,208],[163],[136,20],[80,16777215,248],[80,-1,136,37],[80,0,97,158],[136,53],[136,73],[163],[80,0,136,37],[80,1],[97,157,80,30],[81,157,69,129,120],[81,157,136,80],[81,157,4,128,116],[80,-1,136,37],[162],[80,50,178],[80,0,80,1,64,129,111],[130]]")},function(n){n.exports=JSON.parse("[[80,16,1,1,80,0,113,80,6,2,113,4,80,4528,115,80,4544,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,23,97,22],[80,501,97,23],[84,526,97,525],[80,501,97,526],[84,1029,97,1028],[80,501,97,1029],[84,1532,97,1531],[80,1001,97,1532],[84,2535,97,2534],[80,1001,97,2535],[84,3538,97,3537],[80,1001,97,3538],[128,101],[140,1],[144,10,5],[85,10,1,80,5,115,98,10,2],[80,0,97,4543],[255,98,10,4],[80,1],[98,10,3,81,4540],[82,10,3,69,129,30],[82,10,3,82,10,2,65,129,29],[81,22,82,10,2,2,120,24,4,112,81,22,82,10,3,2,120,24,4,112,25,81,525,82,10,2,2,120,24,4,112,81,525,82,10,3,2,120,24,4,112,25,80,1,34,98,10,5],[82,10,5,82,10,4,66,129,29],[82,10,5,98,10,4],[82,10,3,97,4543],[82,10,3,4,128,22],[82,10,4,80,40,66,129,32],[80,1,16,97,4543],[81,4543,98,10,1],[81,10,97,15,145,10,141,137],[140,2],[144,11,3],[85,11,1,80,3,115,98,11,3,98,11,2,98,11,1],[81,22,82,11,1,2,120,24,4,112,81,525,82,11,1,2,120,24,4,112,224],[82,11,2,221],[82,11,3,243],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,3,98,12,2,98,12,1],[84,4541,1,112,4,2,113],[81,1531,81,4541,2,120,24,4,82,12,1,2,113],[81,2534,81,4541,2,120,24,4,82,12,2,2,113],[81,3537,81,4541,2,120,24,4,81,22,82,12,1,2,120,24,4,112,81,22,82,12,2,2,120,24,4,112,25,81,525,82,12,1,2,120,24,4,112,81,525,82,12,2,2,120,24,4,112,25,80,1,34,2,113],[81,22,82,12,1,2,120,24,4,112,81,525,82,12,1,2,120,24,4,112,224],[82,12,3,221],[81,22,82,12,2,2,120,24,4,112,81,525,82,12,2,2,120,24,4,112,224],[80,2,240],[145,12,141,137],[140,4],[144,13,2],[85,13,1,80,2,115,98,13,2,98,13,1],[81,22,82,13,1,2,120,24,4,112,81,22,82,13,2,2,120,24,4,112,25,81,525,82,13,1,2,120,24,4,112,81,525,82,13,2,2,120,24,4,112,25,80,1,34,80,40,80,2,26,66,129,59],[82,13,1,82,13,2,80,0,136,41],[128,65],[84,4540,1,112,4,2,113],[81,22,81,4540,2,120,24,4,81,22,82,13,1,2,120,24,4,112,81,22,82,13,2,2,120,24,4,112,24,80,2,27,2,113],[81,525,81,4540,2,120,24,4,81,525,82,13,1,2,120,24,4,112,81,525,82,13,2,2,120,24,4,112,24,80,2,27,2,113],[81,4540,80,65535,80,4,136,34],[82,13,1,81,4540,136,53],[81,4540,82,13,2,136,53],[145,13,141,137],[140,5],[144,14,5],[85,14,1,80,5,115,98,14,1],[80,1],[98,14,2,81,4540],[82,14,2,69,129,74],[81,1028,82,14,2,2,120,24,4,255,2,113],[82,14,2,4,128,70],[81,1028,82,14,1,2,120,24,4,80,0,2,113],[80,-1,98,14,5],[82,14,5,129,91],[80,0,98,14,5],[80,1],[98,14,2,81,4541],[82,14,2,69,129,90],[81,1028,81,1531,82,14,2,2,120,24,4,112,2,120,24,4,112,255,66,129,85],[81,1028,81,1531,82,14,2,2,120,24,4,112,2,120,24,4,112,81,3537,82,14,2,2,120,24,4,112,24,81,1028,81,2534,82,14,2,2,120,24,4,112,2,120,24,4,112,66,129,85],[81,1028,81,2534,82,14,2,2,120,24,4,112,2,120,24,4,81,1028,81,1531,82,14,2,2,120,24,4,112,2,120,24,4,112,81,3537,82,14,2,2,120,24,4,112,24,2,113],[80,-1,98,14,5],[81,1028,81,2534,82,14,2,2,120,24,4,112,2,120,24,4,112,255,66,129,89],[81,1028,81,2534,82,14,2,2,120,24,4,112,2,120,24,4,112,81,3537,82,14,2,2,120,24,4,112,24,81,1028,81,1531,82,14,2,2,120,24,4,112,2,120,24,4,112,66,129,89],[81,1028,81,1531,82,14,2,2,120,24,4,112,2,120,24,4,81,1028,81,2534,82,14,2,2,120,24,4,112,2,120,24,4,112,81,3537,82,14,2,2,120,24,4,112,24,2,113],[80,-1,98,14,5],[82,14,2,4,128,79],[128,76],[80,0,98,14,2],[80,-1,98,14,5],[82,14,2,81,4540,66,82,14,5,9,129,100],[85,14,2,1,112,4,2,113],[81,22,82,14,2,2,120,24,4,112,81,22,82,14,1,2,120,24,4,112,25,81,525,82,14,2,2,120,24,4,112,81,525,82,14,1,2,120,24,4,112,25,80,1,34,98,14,4],[82,14,2,82,14,1,65,81,1028,82,14,2,2,120,24,4,112,80,1000,67,9,82,14,4,80,40,80,2,26,66,9,129,99],[82,14,1,82,14,2,80,255,136,41],[80,0,98,14,5],[128,93],[145,14,141,137],[80,6,220],[80,0,97,4540],[80,0,97,4541],[81,4540,80,400,66,129,115],[84,4540,1,112,4,2,113],[81,22,81,4540,2,120,24,4,80,1000,19,4,2,113],[81,525,81,4540,2,120,24,4,80,1000,19,4,2,113],[81,4540,136,16],[82,15,1,97,4542],[81,4542,80,0,69,129,106],[81,4540,80,16711680,80,6,136,34],[81,4542,80,0,67,129,114],[81,4542,81,4540,136,53],[128,104],[80,1],[97,4542,81,4540],[81,4542,69,129,120],[81,4542,136,66],[81,4542,4,128,116],[130]]")},function(n){n.exports=JSON.parse("[[80,16,1,1,80,0,113,80,6,2,113,4,80,4521,115,80,4537,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,23,97,22],[80,6,97,23,84,30,97,24],[80,6,97,30,84,37,97,25],[80,6,97,37,84,44,97,26],[80,6,97,44,84,51,97,27],[80,6,97,51,84,58,97,28],[80,6,97,58,84,65,97,29],[80,6,97,65],[84,24,97,23],[80,500,97,24],[84,526,97,525],[80,500,97,526],[84,1028,97,1027],[80,500,97,1028],[84,1531,97,1530],[80,1000,97,1531],[84,2533,97,2532],[80,1000,97,2533],[84,3535,97,3534],[80,1000,97,3535],[128,108],[140,1],[144,10,5],[85,10,1,80,5,115,98,10,2],[80,0,98,10,1],[255,98,10,4],[80,1],[98,10,3,81,1529],[82,10,3,69,129,38],[82,10,3,82,10,2,65,129,37],[81,23,82,10,2,80,1,25,2,120,24,4,112,81,23,82,10,3,80,1,25,2,120,24,4,112,25,81,525,82,10,2,80,1,25,2,120,24,4,112,81,525,82,10,3,80,1,25,2,120,24,4,112,25,80,1,34,98,10,5],[82,10,5,82,10,4,66,129,37],[82,10,5,98,10,4],[82,10,3,98,10,1],[82,10,3,4,128,30],[82,10,4,80,40,66,129,40],[80,1,16,98,10,1],[81,10,97,15,145,10,141,137],[140,2],[144,11,3],[85,11,1,80,3,115,98,11,3,98,11,2,98,11,1],[81,23,82,11,1,80,1,25,2,120,24,4,112,81,525,82,11,1,80,1,25,2,120,24,4,112,224],[82,11,2,221],[82,11,3,243],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,3,98,12,2,98,12,1],[84,4536,1,112,4,2,113],[81,1530,81,4536,80,1,25,2,120,24,4,82,12,1,2,113],[81,2532,81,4536,80,1,25,2,120,24,4,82,12,2,2,113],[81,3534,81,4536,80,1,25,2,120,24,4,81,23,82,12,1,80,1,25,2,120,24,4,112,81,23,82,12,2,80,1,25,2,120,24,4,112,25,81,525,82,12,1,80,1,25,2,120,24,4,112,81,525,82,12,2,80,1,25,2,120,24,4,112,25,80,1,34,2,113],[81,23,82,12,1,80,1,25,2,120,24,4,112,81,525,82,12,1,80,1,25,2,120,24,4,112,224],[82,12,3,221],[81,23,82,12,2,80,1,25,2,120,24,4,112,81,525,82,12,2,80,1,25,2,120,24,4,112,224],[80,2,240],[145,12,141,137],[140,4],[144,13,2],[85,13,1,80,2,115,98,13,2,98,13,1],[81,23,82,13,1,80,1,25,2,120,24,4,112,81,23,82,13,2,80,1,25,2,120,24,4,112,25,81,525,82,13,1,80,1,25,2,120,24,4,112,81,525,82,13,2,80,1,25,2,120,24,4,112,25,80,1,34,80,40,80,2,26,66,129,66],[82,13,1,82,13,2,80,0,136,48],[128,72],[84,1529,1,112,4,2,113],[81,23,81,1529,80,1,25,2,120,24,4,81,23,82,13,1,80,1,25,2,120,24,4,112,81,23,82,13,2,80,1,25,2,120,24,4,112,24,80,2,27,2,113],[81,525,81,1529,80,1,25,2,120,24,4,81,525,82,13,1,80,1,25,2,120,24,4,112,81,525,82,13,2,80,1,25,2,120,24,4,112,24,80,2,27,2,113],[81,1529,80,65535,80,4,136,41],[82,13,1,81,1529,136,60],[81,1529,82,13,2,136,60],[145,13,141,137],[140,5],[144,14,5],[85,14,1,80,5,115,98,14,1],[80,1],[98,14,2,81,1529],[82,14,2,69,129,81],[81,1027,82,14,2,80,1,25,2,120,24,4,255,2,113],[82,14,2,4,128,77],[81,1027,82,14,1,80,1,25,2,120,24,4,80,0,2,113],[80,-1,98,14,5],[82,14,5,129,98],[80,0,98,14,5],[80,1],[98,14,2,81,4536],[82,14,2,69,129,97],[81,1027,81,1530,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,255,66,129,92],[81,1027,81,1530,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,81,3534,82,14,2,80,1,25,2,120,24,4,112,24,81,1027,81,2532,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,66,129,92],[81,1027,81,2532,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,81,1027,81,1530,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,81,3534,82,14,2,80,1,25,2,120,24,4,112,24,2,113],[80,-1,98,14,5],[81,1027,81,2532,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,255,66,129,96],[81,1027,81,2532,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,81,3534,82,14,2,80,1,25,2,120,24,4,112,24,81,1027,81,1530,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,66,129,96],[81,1027,81,1530,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,81,1027,81,2532,82,14,2,80,1,25,2,120,24,4,112,80,1,25,2,120,24,4,112,81,3534,82,14,2,80,1,25,2,120,24,4,112,24,2,113],[80,-1,98,14,5],[82,14,2,4,128,86],[128,83],[80,0,98,14,2],[80,-1,98,14,5],[82,14,2,81,1529,66,82,14,5,9,129,107],[85,14,2,1,112,4,2,113],[81,23,82,14,2,80,1,25,2,120,24,4,112,81,23,82,14,1,80,1,25,2,120,24,4,112,25,81,525,82,14,2,80,1,25,2,120,24,4,112,81,525,82,14,1,80,1,25,2,120,24,4,112,25,80,1,34,98,14,4],[82,14,2,82,14,1,65,81,1027,82,14,2,80,1,25,2,120,24,4,112,80,1000,67,9,82,14,4,80,40,80,2,26,66,9,129,106],[82,14,1,82,14,2,80,255,136,48],[80,0,98,14,5],[128,100],[145,14,141,137],[80,6,220],[80,0,97,1529],[80,0,97,4536],[81,1529,80,400,66,129,122],[84,1529,1,112,4,2,113],[81,23,81,1529,80,1,25,2,120,24,4,80,1000,19,2,113],[81,525,81,1529,80,1,25,2,120,24,4,80,1000,19,2,113],[81,1529,136,24],[82,15,1,97,4537],[81,4537,80,0,69,129,113],[81,1529,80,16711680,80,6,136,41],[81,4537,80,0,67,129,121],[81,4537,81,1529,136,60],[128,111],[80,1],[97,4537,81,1529],[81,4537,69,129,127],[81,4537,136,73],[81,4537,4,128,123],[130]]")},function(n){n.exports=JSON.parse("[[80,14,1,1,80,0,113,80,6,2,113,4,80,25,115,80,39,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,21,97,20],[80,14,97,21],[128,63],[140,1],[144,10,7],[85,10,1,80,7,115,98,10,2,98,10,1],[82,10,1,82,10,2,210,80,7,9,98,10,3],[80,0,98,10,4],[80,1,16],[98,10,5,80,1],[82,10,5,69,129,22],[80,1,16],[98,10,6,80,1],[82,10,6,69,129,21],[82,10,5,80,0,65,82,10,6,80,0,65,10,129,20],[82,10,3,82,10,1,80,50,24,82,10,5,24,80,50,29,82,10,2,80,50,24,82,10,6,24,80,50,29,210,80,15,9,10,98,10,7],[82,10,4,81,20,82,10,7,80,1,25,2,120,24,4,112,24,98,10,4],[82,10,6,4,128,15],[82,10,5,4,128,12],[82,10,1,82,10,2,82,10,4,80,256,26,82,10,1,82,10,2,210,80,15,9,24,211],[145,10,141,137],[140,2],[144,11,5],[85,11,1,80,5,115,98,11,2,98,11,1],[82,11,1,82,11,2,210,98,11,5],[80,5,19,4,80,0,69,129,40],[80,1,16],[98,11,3,80,1],[82,11,3,69,129,40],[80,1,16],[98,11,4,80,1],[82,11,4,69,129,39],[82,11,1,80,50,24,82,11,3,24,80,50,29,82,11,2,80,50,24,82,11,4,24,80,50,29,210,97,38],[81,38,80,16776960,9,82,11,5,80,16776960,9,67,129,38],[81,38,98,11,5],[82,11,4,4,128,33],[82,11,3,4,128,30],[82,11,1,82,11,2,82,11,1,82,11,2,210,80,16776975,9,82,11,5,80,15,9,80,16,26,24,211],[145,11,141,137],[140,3],[144,12,2],[85,12,1,80,2,115,98,12,2,98,12,1],[82,12,1,82,12,2,210,80,16,9,80,0,67,129,48],[82,12,1,82,12,2,80,16711681,211],[128,52],[82,12,1,82,12,2,210,80,32,9,80,0,67,129,51],[82,12,1,82,12,2,80,65282,211],[128,52],[82,12,1,82,12,2,80,252,211],[145,12,141,137],[140,4],[81,20,80,0,2,120,24,4,80,3,80,10,26,2,113],[81,20,80,1,2,120,24,4,80,3,80,10,26,2,113],[81,20,80,2,2,120,24,4,80,3,80,10,26,2,113],[81,20,80,4,2,120,24,4,80,5,80,10,26,2,113],[81,20,80,5,2,120,24,4,80,10,80,4,24,2,113],[81,20,80,11,2,120,24,4,80,10,2,113],[81,20,80,12,2,120,24,4,80,0,2,113],[81,20,80,13,2,120,24,4,80,10,80,1,25,2,113],[141,137],[80,0,80,0,80,50,80,50,208],[80,50,80,50,209],[136,53],[163],[80,0],[97,36,80,50,80,1,25],[81,36,69,129,82],[80,0],[97,37,80,50,80,1,25],[81,37,69,129,81],[80,50,19,4,80,1,64,129,76],[81,36,81,37,80,252,211],[128,80],[80,7,19,4,80,1,64,129,79],[81,36,81,37,80,65282,211],[128,80],[81,36,81,37,80,16711681,211],[81,37,4,128,71],[81,36,4,128,68],[80,1000,178],[80,-9,184,80,27,65,129,116],[80,0,177],[163],[80,0],[97,36,80,50,80,1,25],[81,36,69,129,95],[80,0],[97,37,80,50,80,1,25],[81,37,69,129,94],[81,36,81,37,136,6],[81,37,4,128,90],[81,36,4,128,87],[80,0],[97,36,80,50,80,1,25],[81,36,69,129,104],[80,0],[97,37,80,50,80,1,25],[81,37,69,129,103],[81,36,81,37,136,24],[81,37,4,128,99],[81,36,4,128,96],[80,0],[97,36,80,50,80,1,25],[81,36,69,129,113],[80,0],[97,37,80,50,80,1,25],[81,37,69,129,112],[81,36,81,37,136,42],[81,37,4,128,108],[81,36,4,128,105],[162],[163],[128,83],[130]]")},function(n){n.exports=JSON.parse("[[80,14,1,1,80,0,113,80,6,2,113,4,80,24,115,80,38,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,21,97,20],[80,6,97,21,84,28,97,22],[80,6,97,28,84,35,97,23],[80,6,97,35,84,42,97,24],[80,6,97,42,84,49,97,25],[80,6,97,49,84,56,97,26],[80,6,97,56,84,63,97,27],[80,6,97,63],[84,24,97,23],[80,14,97,24],[128,70],[140,1],[144,10,7],[85,10,1,80,7,115,98,10,2,98,10,1],[82,10,1,82,10,2,210,80,7,9,98,10,3],[80,0,98,10,4],[80,1,16],[98,10,5,80,1],[82,10,5,69,129,30],[80,1,16],[98,10,6,80,1],[82,10,6,69,129,29],[82,10,5,80,0,65,82,10,6,80,0,65,10,129,28],[82,10,3,82,10,1,80,50,24,82,10,5,24,80,50,29,82,10,2,80,50,24,82,10,6,24,80,50,29,210,80,15,9,10,98,10,7],[82,10,4,81,23,82,10,7,80,1,25,2,120,24,4,112,24,98,10,4],[82,10,6,4,128,23],[82,10,5,4,128,20],[82,10,1,82,10,2,82,10,4,80,256,26,82,10,1,82,10,2,210,80,15,9,24,211],[145,10,141,137],[140,2],[144,11,5],[85,11,1,80,5,115,98,11,2,98,11,1],[82,11,1,82,11,2,210,98,11,5],[80,5,19,80,0,67,129,47],[80,1,16],[98,11,3,80,1],[82,11,3,69,129,47],[80,1,16],[98,11,4,80,1],[82,11,4,69,129,46],[82,11,1,80,50,24,82,11,3,24,80,50,29,82,11,2,80,50,24,82,11,4,24,80,50,29,210,80,16776960,9,82,11,5,80,16776960,9,67,129,45],[82,11,1,80,50,24,82,11,3,24,80,50,29,82,11,2,80,50,24,82,11,4,24,80,50,29,210,98,11,5],[82,11,4,4,128,41],[82,11,3,4,128,38],[82,11,1,82,11,2,82,11,1,82,11,2,210,80,16776975,9,82,11,5,80,15,9,80,16,26,24,211],[145,11,141,137],[140,3],[144,12,2],[85,12,1,80,2,115,98,12,2,98,12,1],[82,12,1,82,12,2,210,80,16,9,80,0,67,129,55],[82,12,1,82,12,2,80,16711681,211],[128,59],[82,12,1,82,12,2,210,80,32,9,80,0,67,129,58],[82,12,1,82,12,2,80,65282,211],[128,59],[82,12,1,82,12,2,80,252,211],[145,12,141,137],[140,4],[81,23,80,1,80,1,25,2,120,24,4,80,3,80,10,26,2,113],[81,23,80,2,80,1,25,2,120,24,4,80,3,80,10,26,2,113],[81,23,80,3,80,1,25,2,120,24,4,80,3,80,10,26,2,113],[81,23,80,5,80,1,25,2,120,24,4,80,5,80,10,26,2,113],[81,23,80,6,80,1,25,2,120,24,4,80,10,80,4,24,2,113],[81,23,80,12,80,1,25,2,120,24,4,80,10,2,113],[81,23,80,13,80,1,25,2,120,24,4,80,0,2,113],[81,23,80,14,80,1,25,2,120,24,4,80,10,80,1,25,2,113],[141,137],[80,0,80,0,80,50,80,50,208],[80,50,80,50,209],[136,60],[163],[80,0],[97,21,80,50,80,1,25],[81,21,69,129,89],[80,0],[97,22,80,50,80,1,25],[81,22,69,129,88],[80,50,19,80,0,64,129,83],[81,21,81,22,80,252,211],[128,87],[80,7,19,80,0,64,129,86],[81,21,81,22,80,65282,211],[128,87],[81,21,81,22,80,16711681,211],[81,22,4,128,78],[81,21,4,128,75],[80,1000,178],[80,-9,184,80,27,65,129,123],[80,0,177],[163],[80,0],[97,21,80,50,80,1,25],[81,21,69,129,102],[80,0],[97,22,80,50,80,1,25],[81,22,69,129,101],[81,21,81,22,136,14],[81,22,4,128,97],[81,21,4,128,94],[80,0],[97,21,80,50,80,1,25],[81,21,69,129,111],[80,0],[97,22,80,50,80,1,25],[81,22,69,129,110],[81,21,81,22,136,32],[81,22,4,128,106],[81,21,4,128,103],[80,0],[97,21,80,50,80,1,25],[81,21,69,129,120],[80,0],[97,22,80,50,80,1,25],[81,22,69,129,119],[81,21,81,22,136,49],[81,22,4,128,115],[81,21,4,128,112],[162],[163],[128,90],[130]]")},function(n){n.exports=JSON.parse("[[80,18,1,1,80,0,113,80,6,2,113,4,80,53,115,80,71,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,25,97,24],[80,6,97,25,84,32,97,26],[80,6,97,32,84,39,97,27],[80,6,97,39,84,46,97,28],[80,6,97,46,84,53,97,29],[80,6,97,53,84,60,97,30],[80,6,97,60,84,67,97,31],[80,6,97,67],[84,28,97,27],[80,8,97,28],[84,38,97,37],[80,8,97,38],[84,48,97,47],[80,16,97,48],[128,169],[140,1],[144,10,1],[85,10,1,80,1,115],[81,27,80,0,2,120,24,4,80,9055202,2,113],[81,27,80,1,2,120,24,4,80,255,2,113],[81,27,80,2,2,120,24,4,80,65535,2,113],[81,27,80,3,2,120,24,4,80,65280,2,113],[81,27,80,4,2,120,24,4,80,16776960,2,113],[81,27,80,5,2,120,24,4,80,16755200,2,113],[81,27,80,6,2,120,24,4,80,16711680,2,113],[81,27,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,10,1,80,7],[82,10,1,69,129,34],[81,37,82,10,1,2,120,24,4,80,360,80,7,82,10,1,32,2,113],[82,10,1,4,128,30],[145,10,141,137],[140,2],[144,11,6],[85,11,1,80,6,115,98,11,2],[80,0,98,11,4],[85,11,4,1,112,4,2,113],[81,37,82,11,4,2,120,24,4,112,82,11,2,69,129,39],[82,11,4,80,1,25,98,11,3],[81,27,82,11,3,2,120,24,4,112,81,27,82,11,4,2,120,24,4,112,81,37,82,11,4,2,120,24,4,112,82,11,2,25,82,11,2,81,37,82,11,3,2,120,24,4,112,25,223,98,11,1],[81,11,97,17,145,11,141,137],[140,3],[144,12,1],[85,12,1,80,1,115],[80,1],[98,12,1,80,16],[82,12,1,69,129,52],[81,47,82,12,1,80,1,25,2,120,24,4,80,1000,80,16,80,2,26,80,2,24,82,12,1,80,2,26,32,2,113],[82,12,1,4,128,48],[81,47,80,1,80,1,25,2,120,24,4,112,97,67],[81,47,80,16,80,1,25,2,120,24,4,112,97,68],[81,68,81,67,25,80,16,27,80,2,27,97,65],[81,65,80,6,26,80,7,27,97,66],[145,12,141,137],[140,4],[144,13,40],[85,13,1,80,40,115,98,13,38,98,13,37,98,13,36,85,13,2,1,1,4,98,13,1,80,33,2,113,4,121],[81,69,80,1,64,129,66],[81,67,82,13,36,80,25,24,224],[80,0,221],[81,68,81,67,25,80,0,226],[81,67,82,13,36,224],[82,13,38,221],[80,0],[98,13,39,81,68,81,67,25],[82,13,39,69,129,78],[81,69,80,1,64,129,73],[81,67,82,13,39,24,82,13,36,80,25,24,82,13,39,82,13,37,29,82,13,37,80,360,32,80,1,80,25,42,25,224],[80,2,240],[128,77],[81,67,82,13,39,24,82,13,36,224],[82,13,39,82,13,37,29,82,13,37,80,360,32,136,35],[82,17,1,221],[80,0,80,50,226],[82,13,39,4,128,67],[80,1],[98,13,39,80,16],[82,13,39,69,129,92],[81,47,82,13,39,80,1,25,2,120,24,4,112,82,13,36,80,70,24,81,65,24,224],[80,0,221],[81,65,242],[80,5,243],[81,47,82,13,39,80,1,25,2,120,24,4,112,81,67,25,82,13,37,29,82,13,37,80,360,32,98,13,40],[80,0,129,88],[82,13,1,87,8,44,32,99,108,111,99,107,32,54,82,13,39,49,54,87,7,58,32,100,105,115,116,61,54,81,47,82,13,39,80,1,25,2,120,24,4,112,49,54,87,7,59,32,116,117,114,110,61,54,82,13,40,49,54,190,191,147],[82,13,40,80,1,80,1000,41,82,13,40,80,1,80,1000,42,16,231],[82,13,38,221],[81,66,227],[82,13,39,4,128,79],[145,13,141,137],[140,5],[144,14,7],[85,14,1,80,7,115,98,14,1],[81,69,80,1,64,129,102],[81,67,82,14,1,80,50,24,224],[80,0,221],[81,68,81,67,25,80,0,226],[81,67,82,14,1,224],[80,4915330,221],[80,0],[98,14,2,81,68,81,67,25],[82,14,2,69,129,123],[82,14,2,81,70,29,81,70,80,360,32,98,14,3],[82,14,2,81,71,29,81,71,80,360,32,98,14,4],[82,14,3,80,1,80,500,41,82,14,4,80,1,80,500,41,24,98,14,5],[82,14,3,80,1,80,500,42,82,14,4,80,1,80,500,42,24,98,14,6],[82,14,5,82,14,6,80,1,34,98,14,7],[81,69,80,1,64,129,114],[81,67,82,14,2,24,82,14,1,80,50,24,82,14,6,80,1000,80,50,32,25,224],[80,2,240],[128,122],[81,67,82,14,2,24,82,14,1,224],[82,14,5,82,14,6,16,231],[81,21,136,35],[82,17,1,80,0,82,14,7,80,1000,82,14,7,25,223,221],[81,21,136,35],[82,17,1,80,0,82,14,7,80,1000,82,14,7,25,223,80,51,66,129,121],[80,0,221],[80,0,80,100,226],[82,14,2,4,128,103],[80,1],[98,14,2,80,16],[82,14,2,69,129,149],[81,47,82,14,2,80,1,25,2,120,24,4,112,82,14,1,80,280,24,80,2,81,65,26,24,80,150,82,14,2,80,2,29,26,25,224],[80,0,221],[81,65,80,2,26,242],[80,5,243],[81,47,82,14,2,80,1,25,2,120,24,4,112,81,67,25,81,70,29,81,70,80,360,32,98,14,3],[81,47,82,14,2,80,1,25,2,120,24,4,112,81,67,25,81,71,29,81,71,80,360,32,98,14,4],[82,14,3,80,1,80,500,41,82,14,4,80,1,80,500,41,24,98,14,5],[82,14,3,80,1,80,500,42,82,14,4,80,1,80,500,42,24,98,14,6],[82,14,5,82,14,6,80,1,34,98,14,7],[82,14,5,82,14,6,16,231],[80,6,220],[80,4915330,221],[82,14,7,80,1000,81,66,80,2,26,32,227],[81,47,82,14,2,80,1,25,2,120,24,4,112,82,14,1,80,280,24,80,2,81,65,26,24,80,150,82,14,2,80,2,29,26,25,224],[80,4,220],[82,14,3,219],[80,16711680,221],[81,66,227],[82,14,4,219],[80,45311,221],[81,66,227],[80,2,220],[82,14,2,4,128,124],[145,14,141,137],[140,6],[80,30,19,80,10,26,80,200,24,97,70],[80,30,19,80,10,26,80,200,24,97,71],[141,137],[140,7],[80,-1,80,16777215,167],[87,49,80,114,101,115,115,32,34,49,34,32,111,114,32,34,50,34,32,102,111,114,32,116,104,101,32,100,105,109,101,110,115,105,111,110,97,108,105,116,121,32,114,101,113,117,105,114,101,100,44,190,191],[87,45,111,114,32,112,114,101,115,115,32,34,82,34,32,116,111,32,112,105,99,107,32,114,97,110,100,111,109,32,110,101,119,32,119,97,118,101,108,101,110,103,116,104,115,58,32,190],[80,-9,184,17,80,49,64,80,-9,184,17,80,50,64,10,80,-9,184,17,80,82,64,10,129,158],[80,-9,184,17,80,49,64,129,162],[80,1,97,69],[128,166],[80,-9,184,17,80,50,64,129,165],[80,2,97,69],[128,166],[136,150],[80,-9,185],[80,0,185],[141,137],[136,18],[136,44],[80,1,97,69],[80,300,97,70],[80,420,97,71],[80,16777215,248],[163],[81,67,80,25,224],[80,0,221],[87,29,67,111,109,112,111,110,101,110,116,32,119,97,118,101,115,32,40,119,97,118,101,108,101,110,103,116,104,115,32,81,70,49,54,87,2,44,32,54,81,71,49,54,80,41,48,54,80,4,80,30,189,147],[87,6,87,97,118,101,32,49,80,100,81,70,80,16711680,136,57],[87,6,87,97,118,101,32,50,80,300,81,71,80,45311,136,57],[81,67,80,505,224],[80,0,221],[87,14,82,101,115,117,108,116,97,110,116,32,119,97,118,101,80,4,80,30,189],[80,580,136,93],[136,154],[80,0,80,1,64,129,174],[130]]")},function(n){n.exports=JSON.parse("[[80,14,1,1,80,0,113,80,6,2,113,4,80,38,115,80,52,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,21,97,20],[80,6,97,21,84,28,97,22],[80,6,97,28,84,35,97,23],[80,6,97,35,84,42,97,24],[80,6,97,42,84,49,97,25],[80,6,97,49,84,56,97,26],[80,6,97,56,84,63,97,27],[80,6,97,63],[84,34,97,33],[80,8,97,34],[84,44,97,43],[80,8,97,44],[128,93],[140,1],[144,10,1],[85,10,1,80,1,115],[81,33,80,0,2,120,24,4,80,9055202,2,113],[81,33,80,1,2,120,24,4,80,255,2,113],[81,33,80,2,2,120,24,4,80,65535,2,113],[81,33,80,3,2,120,24,4,80,65280,2,113],[81,33,80,4,2,120,24,4,80,16776960,2,113],[81,33,80,5,2,120,24,4,80,16755200,2,113],[81,33,80,6,2,120,24,4,80,16711680,2,113],[81,33,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,10,1,80,7],[82,10,1,69,129,32],[81,43,82,10,1,2,120,24,4,80,360,80,7,82,10,1,32,2,113],[82,10,1,4,128,28],[145,10,141,137],[140,2],[144,11,6],[85,11,1,80,6,115,98,11,2],[80,0,98,11,4],[85,11,4,1,112,4,2,113],[81,43,82,11,4,2,120,24,4,112,82,11,2,69,129,37],[82,11,4,80,1,25,98,11,3],[81,33,82,11,3,2,120,24,4,112,81,33,82,11,4,2,120,24,4,112,81,43,82,11,4,2,120,24,4,112,82,11,2,25,82,11,2,81,43,82,11,3,2,120,24,4,112,25,223,98,11,1],[81,11,97,13,145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115],[80,275,80,725,24,80,2,27,97,21],[80,0,248],[80,16777215,221],[80,5,220],[80,0,80,733,224],[80,1000,80,0,226],[80,275,80,732,224],[80,1],[97,25,80,4],[81,25,69,129,59],[80,100,81,25,25,136,33],[82,13,1,221],[80,0,80,1,226],[81,25,4,128,53],[81,21,80,275,25,98,12,2],[82,12,2,80,250,80,1,34,98,12,3],[80,1],[98,12,1,80,250],[82,12,1,69,129,70],[82,12,3,80,250,82,12,1,32,97,25],[80,100,81,25,80,5,24,80,100,29,25,97,27],[81,27,80,100,80,360,32,136,33],[82,13,1,221],[80,275,82,12,2,80,250,82,12,1,32,24,81,15,25,80,1,226],[82,12,1,4,128,62],[80,725,80,732,224],[80,1],[97,26,80,4],[81,26,69,129,78],[80,100,81,26,25,136,33],[82,13,1,221],[80,0,80,1,226],[81,26,4,128,72],[80,725,81,21,25,98,12,2],[82,12,2,80,250,80,1,34,98,12,3],[80,1],[98,12,1,80,250],[82,12,1,69,129,89],[82,12,3,80,250,82,12,1,32,97,26],[80,100,81,26,80,5,24,80,100,29,25,97,28],[81,28,80,100,80,360,32,136,33],[82,13,1,221],[80,725,82,12,2,80,250,82,12,1,32,25,81,15,25,80,1,226],[82,12,1,4,128,81],[80,16776960,221],[81,21,80,984,224],[80,10,243],[145,12,141,137],[136,16],[136,42],[163],[80,0],[97,23,80,730],[81,23,69,129,115],[80,730,81,23,25,97,24],[80,0],[97,22,80,999],[81,22,69,129,114],[81,22,80,275,25,81,24,80,1,34,97,25],[81,22,80,725,25,81,24,80,1,34,97,26],[81,25,80,100,29,97,27],[81,26,80,100,29,97,28],[81,27,80,360,26,80,100,80,500,41,81,28,80,360,26,80,100,80,500,41,24,97,29],[81,27,80,360,26,80,100,80,500,42,81,28,80,360,26,80,100,80,500,42,24,97,30],[81,29,81,30,80,1,34,97,31],[81,29,81,30,80,1,46,80,360,24,80,360,29,97,32],[81,22,81,23,81,32,136,33],[82,13,1,80,0,81,31,80,1000,81,31,25,223,211],[81,22,4,128,101],[81,23,4,128,97],[130]]")},function(n){n.exports=JSON.parse("[[80,60,1,1,80,0,113,80,6,2,113,4,80,368,115,80,428,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,67,97,66],[80,6,97,67,84,74,97,68],[80,6,97,74,84,81,97,69],[80,6,97,81,84,88,97,70],[80,6,97,88,84,95,97,71],[80,6,97,95,84,102,97,72],[80,6,97,102,84,109,97,73],[80,6,97,109],[84,78,97,76],[80,33,97,77],[84,113,97,111],[80,33,97,112],[84,148,97,146],[80,33,97,147],[84,182,97,181],[80,60,97,182],[84,244,97,243],[80,60,97,244],[84,306,97,305],[80,60,97,306],[84,368,97,367],[80,60,97,368],[128,1062],[140,1],[144,10,3],[85,10,1,80,3,115,98,10,2],[82,10,2,17,98,10,2],[82,10,2,80,0,64,129,33],[80,1,98,10,3],[128,38],[80,0,98,10,3],[82,10,2,80,0,67,129,38],[82,10,2,80,10,27,98,10,2],[85,10,3,1,112,4,2,113],[128,34],[82,10,3,98,10,1],[81,10,97,59,145,10,141,137],[140,2],[144,11,40],[85,11,1,80,40,115,85,11,6,1,1,4,98,11,5,80,33,2,113,4,121,98,11,4,98,11,3,98,11,2,98,11,1],[82,11,3,80,1,64,129,46],[82,11,2,80,3,25,98,11,2],[128,47],[82,11,2,80,1,25,98,11,2],[82,11,1,80,5,24,82,11,2,224],[82,11,4,221],[82,11,3,80,1,64,129,52],[82,11,5,80,16,80,18,189],[128,53],[82,11,5,80,0,80,18,189],[145,11,141,137],[140,3],[144,12,44],[85,12,1,80,44,115,98,12,5,98,12,4,98,12,3,98,12,2,98,12,1],[85,12,12,98,12,10,80,33,98,12,11],[80,13,98,12,9],[80,8,98,12,8],[80,12,82,12,9,82,12,3,26,24,98,12,6],[80,24,98,12,7],[161],[82,12,1,82,12,6,24,82,12,2,224],[80,8421504,221],[80,0,82,12,7,226],[82,12,6,16,80,0,226],[80,4210752,221],[80,0,82,12,7,16,80,1,25,226],[82,12,6,80,0,226],[82,12,1,80,1,24,82,12,2,80,1,24,224],[82,12,1,82,12,6,24,80,2,25,82,12,2,80,1,24,224],[82,12,1,82,12,6,24,80,2,25,82,12,2,82,12,7,24,80,2,25,224],[82,12,1,80,1,24,82,12,2,82,12,7,24,80,2,25,224],[80,0,221],[80,4,241],[82,12,4,80,0,66,129,80],[82,12,1,80,5,24,82,12,9,82,12,3,82,12,4,136,26],[82,59,1,25,26,24,82,12,8,25,82,12,2,80,2,25,224],[128,82],[82,12,1,80,5,24,82,12,9,82,12,3,82,12,4,136,26],[82,59,1,25,26,24,82,12,2,80,2,25,224],[82,12,5,221],[82,12,10,82,12,4,49,2,121,147],[82,12,10,80,0,80,18,189],[145,12,141,137],[140,4],[144,13,6],[85,13,1,80,6,115,98,13,4,98,13,3,98,13,2,98,13,1],[80,24,98,13,5],[80,24,98,13,6],[161],[82,13,1,82,13,5,24,82,13,2,224],[80,4210752,221],[80,0,82,13,6,226],[82,13,5,16,80,0,226],[80,10526880,221],[80,0,82,13,6,16,80,1,25,226],[82,13,5,80,0,226],[82,13,1,80,1,24,82,13,2,80,1,24,82,13,4,252],[82,13,1,80,6,24,82,13,2,80,14,25,224],[80,0,221],[82,13,3,48,80,4,80,24,189,147],[145,13,141,137],[140,5],[144,14,42],[85,14,1,80,42,115,98,14,40,98,14,39,85,14,5,1,1,4,98,14,4,80,33,2,113,4,121,98,14,3,98,14,2,98,14,1],[80,8,80,13,82,14,3,26,24,98,14,41],[80,30,98,14,42],[82,14,2,80,2,25,98,14,2],[161],[82,14,1,82,14,41,24,82,14,2,224],[80,4210752,221],[80,0,82,14,42,226],[82,14,41,16,80,0,226],[80,10526880,221],[80,0,82,14,42,16,80,1,25,226],[82,14,41,80,0,226],[82,14,1,80,1,24,82,14,2,80,1,24,82,14,39,252],[82,14,1,80,8,24,82,14,2,80,2,25,224],[82,14,40,221],[82,14,4,80,0,80,22,189],[145,14,141,137],[140,6],[144,15,42],[85,15,1,80,42,115,98,15,40,98,15,39,85,15,5,1,1,4,98,15,4,80,33,2,113,4,121,98,15,3,98,15,2,98,15,1],[80,8,80,13,82,15,3,26,24,98,15,41],[80,24,98,15,42],[161],[82,15,1,82,15,41,24,82,15,2,224],[80,4210752,221],[80,0,82,15,42,226],[82,15,41,16,80,0,226],[80,10526880,221],[80,0,82,15,42,16,80,1,25,226],[82,15,41,80,0,226],[82,15,1,80,1,24,82,15,2,80,1,24,82,15,39,252],[82,15,1,80,4,24,82,15,2,80,1,25,224],[82,15,40,221],[82,15,4,80,0,80,18,189],[145,15,141,137],[140,7],[144,16,8],[85,16,1,80,8,115,98,16,8,98,16,7,98,16,6,98,16,5,98,16,4,98,16,3,98,16,2,98,16,1],[161],[82,16,8,80,1,64,129,152],[82,16,1,80,1,24,82,16,2,80,1,24,224],[82,16,1,80,2,25,82,16,3,24,82,16,2,80,1,24,224],[82,16,1,80,2,25,82,16,3,24,82,16,2,80,2,25,82,16,4,24,224],[82,16,1,80,1,24,82,16,2,80,2,25,82,16,4,24,224],[82,16,7,221],[80,4,241],[82,16,1,82,16,3,24,82,16,2,224],[82,16,6,221],[80,0,82,16,4,226],[82,16,3,16,80,0,226],[82,16,5,221],[80,0,82,16,4,16,80,1,25,226],[82,16,3,80,0,226],[145,16,141,137],[140,8],[144,17,13],[85,17,1,80,13,115,98,17,10,98,17,9,98,17,8,98,17,7,98,17,6,98,17,5,98,17,4,98,17,3,98,17,2,98,17,1],[80,34,98,17,13],[80,8,82,17,5,82,17,13,26,24,98,17,12],[80,8,82,17,3,82,17,4,24,80,6,24,80,13,26,24,98,17,11],[82,17,9,80,1,64,129,169],[82,17,1,82,17,2,82,17,11,82,17,12,82,17,6,82,17,7,80,12632256,80,0,136,141],[82,17,1,80,2,24,82,17,2,80,2,24,82,17,11,80,4,25,82,17,12,80,4,25,82,17,7,82,17,6,80,12632256,80,0,136,141],[82,17,10,80,1,64,129,182],[82,17,9,80,0,64,129,174],[82,17,1,80,2,25,98,17,1],[82,17,2,80,8,25,98,17,2],[128,176],[82,17,1,80,2,24,98,17,1],[82,17,2,80,2,24,98,17,2],[82,17,1,82,17,2,224],[82,17,1,80,6,25,82,17,11,24,82,17,2,224],[82,17,1,80,6,25,82,17,11,24,82,17,2,80,6,25,82,17,12,24,224],[82,17,1,82,17,2,80,6,25,82,17,12,24,224],[82,17,8,221],[80,4,241],[145,17,141,137],[140,9],[144,18,51],[85,18,1,80,51,115,98,18,46,98,18,45,98,18,44,98,18,43,85,18,9,1,1,4,98,18,8,80,33,2,113,4,121,98,18,7,98,18,6,98,18,5,98,18,4,98,18,3,98,18,2,98,18,1],[80,34,98,18,51],[80,13,98,18,47],[80,30,98,18,49],[82,18,47,82,18,6,26,98,18,48],[80,18,82,18,47,82,18,7,26,24,98,18,50],[82,18,5,82,18,1,80,1,25,82,18,51,26,24,98,18,5],[82,18,4,82,18,5,82,18,3,82,18,44,82,18,8,136,40],[82,18,2,80,2,64,129,195],[82,18,4,82,18,48,24,82,18,5,80,60,82,18,46,136,86],[82,18,2,80,0,65,129,197],[82,18,4,82,18,48,24,82,18,49,24,82,18,5,82,18,7,82,18,43,82,18,45,136,54],[82,18,2,80,2,64,129,199],[82,18,4,82,18,48,24,82,18,49,24,82,18,50,24,82,18,5,80,62,82,18,46,136,86],[145,18,141,137],[140,10],[144,19,14],[85,19,1,80,14,115,98,19,9,98,19,8,98,19,7,98,19,6,98,19,5,98,19,4,98,19,3,98,19,2,98,19,1],[80,34,98,19,14],[80,13,98,19,10],[80,30,98,19,12],[82,19,10,82,19,4,26,98,19,11],[80,18,82,19,10,82,19,5,26,24,98,19,13],[82,19,3,82,19,1,80,1,25,82,19,14,26,24,98,19,3],[80,-7,184,82,19,2,82,19,11,24,67,80,-7,184,82,19,2,82,19,11,24,82,19,12,24,66,9,80,-8,184,82,19,3,67,9,80,-8,184,82,19,3,82,19,14,24,66,9,129,212],[83,19,6,82,19,7,82,19,9,24,69,129,212],[83,19,6,82,19,9,25,99,19,6],[80,-7,184,82,19,2,82,19,11,24,82,19,12,24,82,19,13,24,67,80,-7,184,82,19,2,82,19,11,24,80,2,82,19,12,26,24,82,19,13,24,66,9,80,-8,184,82,19,3,67,9,80,-8,184,82,19,3,82,19,14,24,66,9,129,215],[83,19,6,82,19,8,82,19,9,25,68,129,215],[83,19,6,82,19,9,24,99,19,6],[145,19,141,137],[140,11],[144,20,3],[85,20,1,80,3,115,98,20,1],[80,1],[98,20,2,80,60],[82,20,2,69,129,224],[81,367,82,20,2,80,1,25,2,120,24,4,80,100,2,113],[82,20,2,4,128,220],[80,2],[98,20,2,80,60],[82,20,2,69,129,233],[82,20,2],[98,20,3,80,60],[82,20,3,69,129,232],[81,367,82,20,3,80,1,25,2,120,24,4,80,100,82,20,1,25,81,367,82,20,3,80,1,25,2,120,24,4,112,26,80,100,27,2,113],[82,20,3,4,128,228],[82,20,2,4,128,225],[145,20,141,137],[140,12],[144,21,16],[85,21,1,80,16,115,98,21,9,98,21,8,98,21,7,98,21,6,98,21,5,98,21,4,98,21,3,98,21,2,98,21,1],[80,34,98,21,14],[80,13,98,21,10],[80,30,98,21,12],[82,21,10,82,21,4,26,98,21,11],[80,18,82,21,10,82,21,5,26,24,98,21,13],[82,21,3,82,21,1,80,1,25,82,21,14,26,24,98,21,3],[80,-7,184,82,21,2,82,21,11,24,67,80,-7,184,82,21,2,82,21,11,24,82,21,12,24,66,9,80,-8,184,82,21,3,67,9,80,-8,184,82,21,3,82,21,14,24,66,9,129,246],[83,21,6,82,21,7,82,21,9,24,69,129,246],[83,21,6,82,21,9,25,99,21,6],[80,-7,184,82,21,2,82,21,11,24,82,21,12,24,82,21,13,24,67,80,-7,184,82,21,2,82,21,11,24,80,2,82,21,12,26,24,82,21,13,24,66,9,80,-8,184,82,21,3,67,9,80,-8,184,82,21,3,82,21,14,24,66,9,129,249],[83,21,6,82,21,8,82,21,9,25,68,129,249],[83,21,6,82,21,9,24,99,21,6],[81,72,136,216],[145,21,141,137],[140,13],[144,22,16],[85,22,1,80,16,115,98,22,9,98,22,8,98,22,7,98,22,6,98,22,5,98,22,4,98,22,3,98,22,2,98,22,1],[80,34,98,22,14],[80,13,98,22,10],[80,30,98,22,12],[82,22,10,82,22,4,26,98,22,11],[80,18,82,22,10,82,22,5,26,24,98,22,13],[82,22,3,82,22,1,80,1,25,82,22,14,26,24,98,22,3],[80,-7,184,82,22,2,82,22,11,24,67,80,-7,184,82,22,2,82,22,11,24,82,22,12,24,66,9,80,-8,184,82,22,3,67,9,80,-8,184,82,22,3,82,22,14,24,66,9,129,272],[83,22,6,82,22,7,82,22,9,24,69,129,272],[83,22,6,82,22,9,25,99,22,6],[81,111,87,9,68,105,118,105,100,101,32,98,121,2,121],[80,1],[98,22,15,80,60],[82,22,15,69,129,272],[82,22,15,81,74,29,80,0,64,129,270],[81,305,82,22,15,80,1,25,2,120,24,4,80,1,2,113],[128,271],[81,305,82,22,15,80,1,25,2,120,24,4,80,0,2,113],[82,22,15,4,128,265],[80,-7,184,82,22,2,82,22,11,24,82,22,12,24,82,22,13,24,67,80,-7,184,82,22,2,82,22,11,24,80,2,82,22,12,26,24,82,22,13,24,66,9,80,-8,184,82,22,3,67,9,80,-8,184,82,22,3,82,22,14,24,66,9,129,284],[83,22,6,82,22,8,82,22,9,25,68,129,284],[83,22,6,82,22,9,24,99,22,6],[81,111,87,9,68,105,118,105,100,101,32,98,121,2,121],[80,1],[98,22,15,80,60],[82,22,15,69,129,284],[82,22,15,81,74,29,80,0,64,129,282],[81,305,82,22,15,80,1,25,2,120,24,4,80,1,2,113],[128,283],[81,305,82,22,15,80,1,25,2,120,24,4,80,0,2,113],[82,22,15,4,128,277],[81,72,136,216],[145,22,141,137],[140,14],[144,23,8],[85,23,1,80,8,115,98,23,6,98,23,5,98,23,4,98,23,3,98,23,2,98,23,1],[80,8,80,13,82,23,3,26,24,98,23,7],[82,23,6,80,1,64,129,293],[80,30,98,23,8],[128,294],[80,22,98,23,8],[80,-7,184,82,23,1,67,80,-7,184,82,23,1,82,23,7,24,66,9,80,-8,184,82,23,2,67,9,80,-8,184,82,23,2,82,23,8,24,66,9,129,296],[82,23,5,99,23,4],[145,23,141,137],[140,15],[144,24,7],[85,24,1,80,7,115,98,24,5,98,24,4,98,24,3,98,24,2,98,24,1],[80,8,80,13,82,24,3,26,24,98,24,6],[82,24,5,80,1,64,129,304],[80,30,98,24,7],[128,305],[80,22,98,24,7],[80,-7,184,82,24,1,67,80,-7,184,82,24,1,82,24,6,24,66,9,80,-8,184,82,24,2,67,9,80,-8,184,82,24,2,82,24,7,24,66,9,129,310],[83,24,4,80,0,64,129,309],[80,1,99,24,4],[128,310],[80,0,99,24,4],[145,24,141,137],[140,16],[144,25,6],[85,25,1,80,6,115,98,25,4,98,25,3,98,25,2,98,25,1],[80,8,80,13,82,25,3,26,24,98,25,5],[82,25,4,80,1,64,129,318],[80,30,98,25,6],[128,319],[80,34,98,25,6],[80,-7,184,82,25,1,67,80,-7,184,82,25,1,82,25,5,24,66,9,80,-8,184,82,25,2,67,9,80,-8,184,82,25,2,82,25,6,24,66,9,129,322],[81,181,81,70,80,1,25,2,120,24,4,80,100,2,113],[81,243,81,70,80,1,25,2,120,24,4,80,0,2,113],[145,25,141,137],[140,17],[144,26,1],[85,26,1,80,1,115],[80,1],[98,26,1,80,60],[82,26,1,69,129,333],[81,181,82,26,1,80,1,25,2,120,24,4,80,100,2,113],[81,243,82,26,1,80,1,25,2,120,24,4,80,0,2,113],[81,305,82,26,1,80,1,25,2,120,24,4,80,1,2,113],[82,26,1,4,128,327],[80,10,97,72],[81,72,136,216],[80,1,97,71],[145,26,141,137],[140,18],[144,27,6],[85,27,1,80,6,115,98,27,4,98,27,3,98,27,2,98,27,1],[80,8,80,13,82,27,3,26,24,98,27,5],[82,27,4,80,1,64,129,344],[80,30,98,27,6],[128,345],[80,34,98,27,6],[80,-7,184,82,27,1,67,80,-7,184,82,27,1,82,27,5,24,66,9,80,-8,184,82,27,2,67,9,80,-8,184,82,27,2,82,27,6,24,66,9,129,348],[136,323],[81,111,87,9,65,108,108,32,119,97,118,101,115,2,121],[145,27,141,137],[140,19],[144,28,10],[85,28,1,80,10,115,98,28,5,98,28,4,98,28,3,98,28,2,98,28,1],[80,8,80,13,82,28,4,26,24,98,28,6],[82,28,5,80,1,64,129,356],[80,30,98,28,7],[128,357],[80,22,98,28,7],[80,-7,184,82,28,2,67,80,-7,184,82,28,2,82,28,6,24,66,9,80,-8,184,82,28,3,67,9,80,-8,184,82,28,3,82,28,7,24,66,9,129,407],[82,28,1,80,1,64,129,365],[81,111,87,9,65,108,108,32,119,97,118,101,115,2,121],[80,1],[98,28,8,80,60],[82,28,8,69,129,365],[81,305,82,28,8,80,1,25,2,120,24,4,80,1,2,113],[82,28,8,4,128,361],[82,28,1,80,2,64,129,375],[81,111,87,5,69,118,101,110,115,2,121],[80,1],[98,28,8,80,60],[82,28,8,69,129,375],[82,28,8,80,2,29,80,0,64,129,373],[81,305,82,28,8,80,1,25,2,120,24,4,80,1,2,113],[128,374],[81,305,82,28,8,80,1,25,2,120,24,4,80,0,2,113],[82,28,8,4,128,368],[82,28,1,80,3,64,129,385],[81,111,87,4,79,100,100,115,2,121],[80,1],[98,28,8,80,60],[82,28,8,69,129,385],[82,28,8,80,2,29,80,0,64,129,383],[81,305,82,28,8,80,1,25,2,120,24,4,80,0,2,113],[128,384],[81,305,82,28,8,80,1,25,2,120,24,4,80,1,2,113],[82,28,8,4,128,378],[82,28,1,80,4,64,129,400],[81,111,87,9,70,105,98,111,110,97,99,99,105,2,121],[80,1],[98,28,8,80,60],[82,28,8,69,129,392],[81,305,82,28,8,80,1,25,2,120,24,4,80,0,2,113],[82,28,8,4,128,388],[81,305,80,1,80,1,25,2,120,24,4,80,1,2,113],[80,2,98,28,8],[80,1,98,28,9],[81,305,82,28,8,80,1,25,2,120,24,4,80,1,2,113],[82,28,8,98,28,10],[82,28,8,82,28,9,24,98,28,8],[82,28,10,98,28,9],[82,28,8,80,60,67,129,395],[82,28,1,80,5,64,129,407],[81,111,87,4,78,111,110,101,2,121],[80,1],[98,28,8,80,60],[82,28,8,69,129,407],[81,305,82,28,8,80,1,25,2,120,24,4,80,0,2,113],[82,28,8,4,128,403],[145,28,141,137],[140,20],[144,29,3],[85,29,1,80,3,115],[80,1],[98,29,1,80,60],[82,29,1,69,129,416],[81,305,82,29,1,80,1,25,2,120,24,4,80,0,2,113],[82,29,1,4,128,412],[81,305,80,1,80,1,25,2,120,24,4,80,1,2,113],[80,2,98,29,1],[80,1,98,29,2],[81,305,82,29,1,80,1,25,2,120,24,4,80,1,2,113],[82,29,1,98,29,3],[82,29,1,82,29,2,24,98,29,1],[82,29,3,98,29,2],[82,29,1,80,60,67,129,419],[145,29,141,137],[140,21],[144,30,10],[85,30,1,80,10,115,98,30,5,98,30,4,98,30,3,98,30,2,98,30,1],[80,8,80,13,82,30,4,26,24,98,30,6],[82,30,5,80,1,64,129,432],[80,30,98,30,7],[128,433],[80,26,98,30,7],[80,-7,184,82,30,2,67,80,-7,184,82,30,2,82,30,6,24,66,9,80,-8,184,82,30,3,67,9,80,-8,184,82,30,3,82,30,7,24,66,9,129,583],[136,323],[82,30,1,80,0,64,129,453],[80,1],[98,30,8,81,70,80,1,25],[82,30,8,69,129,441],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[82,30,8,4,128,437],[81,305,81,70,80,1,25,2,120,24,4,80,1,2,113],[81,70,80,1,24],[98,30,8,80,60],[82,30,8,69,129,450],[82,30,8,81,70,25,81,74,29,80,0,64,129,448],[81,305,82,30,8,80,1,25,2,120,24,4,80,1,2,113],[128,449],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[82,30,8,4,128,443],[81,111,87,10,76,105,109,32,68,105,118,105,100,101,2,121],[81,72,136,216],[80,1,97,71],[82,30,1,80,1,64,129,469],[136,323],[80,1],[98,30,8,80,60],[82,30,8,69,129,464],[82,30,8,80,2,29,80,0,64,129,461],[81,305,82,30,8,80,1,25,2,120,24,4,80,1,2,113],[128,462],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[81,181,82,30,8,80,1,25,2,120,24,4,80,200,2,113],[82,30,8,4,128,456],[81,111,87,8,83,97,119,116,111,111,116,104,2,121],[80,30,97,72],[81,72,136,216],[80,12,97,69],[80,1,97,71],[82,30,1,80,2,64,129,489],[136,323],[80,1],[98,30,8,80,60],[82,30,8,69,129,480],[82,30,8,80,2,29,80,0,64,129,477],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[128,478],[81,305,82,30,8,80,1,25,2,120,24,4,80,1,2,113],[81,181,82,30,8,80,1,25,2,120,24,4,80,150,2,113],[82,30,8,4,128,472],[81,111,87,6,83,113,117,97,114,101,2,121],[80,40,97,72],[81,72,136,216],[80,11,97,69],[81,181,80,3,80,1,25,2,120,24,4,80,115,2,113],[81,181,80,5,80,1,25,2,120,24,4,80,130,2,113],[81,181,80,7,80,1,25,2,120,24,4,80,130,2,113],[81,181,80,9,80,1,25,2,120,24,4,80,190,2,113],[80,1,97,71],[82,30,1,80,3,64,129,498],[136,323],[136,408],[81,111,87,10,83,104,111,114,116,115,116,111,99,107,2,121],[80,3,97,72],[81,72,136,216],[80,40,97,69],[80,1,97,71],[80,1,97,75],[82,30,1,80,4,64,129,511],[136,323],[136,408],[81,111,87,9,76,111,110,103,115,116,111,99,107,2,121],[80,3,97,72],[81,72,136,216],[80,60,97,69],[80,1,97,71],[80,1,97,75],[81,305,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,305,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,305,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,305,80,5,80,1,25,2,120,24,4,80,0,2,113],[82,30,1,80,5,64,129,528],[136,323],[80,1],[98,30,8,80,60],[82,30,8,69,129,522],[82,30,8,80,2,29,80,0,64,129,519],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[128,520],[81,305,82,30,8,80,1,25,2,120,24,4,80,1,2,113],[81,181,82,30,8,80,1,25,2,120,24,4,80,100,2,113],[82,30,8,4,128,514],[81,111,87,5,80,117,108,115,101,2,121],[80,3,97,72],[81,72,136,216],[80,60,97,69],[81,305,80,3,80,1,25,2,120,24,4,80,0,2,113],[80,3,97,71],[82,30,1,80,6,64,129,550],[136,323],[80,1],[98,30,8,80,60],[82,30,8,69,129,539],[82,30,8,80,2,29,80,0,64,129,536],[81,305,82,30,8,80,1,25,2,120,24,4,80,1,2,113],[128,537],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[81,181,82,30,8,80,1,25,2,120,24,4,80,100,2,113],[82,30,8,4,128,531],[81,111,87,7,82,101,108,97,120,101,100,2,121],[80,2,97,72],[81,72,136,216],[80,60,97,69],[81,305,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,305,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,305,80,5,80,1,25,2,120,24,4,80,0,2,113],[81,305,80,7,80,1,25,2,120,24,4,80,0,2,113],[81,305,80,9,80,1,25,2,120,24,4,80,0,2,113],[81,243,80,2,80,1,25,2,120,24,4,80,90,2,113],[80,4,97,71],[82,30,1,80,7,64,129,566],[136,323],[80,1],[98,30,8,80,60],[82,30,8,69,129,558],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[81,181,82,30,8,80,1,25,2,120,24,4,80,100,2,113],[82,30,8,4,128,553],[81,111,87,8,79,110,101,32,98,101,97,116,2,121],[80,1,97,72],[81,72,136,216],[80,40,97,69],[81,305,80,28,80,1,25,2,120,24,4,80,1,2,113],[81,305,80,30,80,1,25,2,120,24,4,80,1,2,113],[80,1,97,75],[80,1,97,71],[82,30,1,80,8,64,129,583],[136,323],[80,1],[98,30,8,80,60],[82,30,8,69,129,574],[81,305,82,30,8,80,1,25,2,120,24,4,80,0,2,113],[81,181,82,30,8,80,1,25,2,120,24,4,80,100,2,113],[82,30,8,4,128,569],[81,111,87,9,84,119,111,32,98,101,97,116,115,2,121],[80,1,97,72],[81,72,136,216],[80,40,97,69],[81,305,80,34,80,1,25,2,120,24,4,80,1,2,113],[81,305,80,36,80,1,25,2,120,24,4,80,1,2,113],[81,305,80,38,80,1,25,2,120,24,4,80,1,2,113],[80,1,97,75],[80,1,97,71],[145,30,141,137],[140,22],[144,31,77],[85,31,1,80,77,115,98,31,7,98,31,6,98,31,5,98,31,4,98,31,3,98,31,2,98,31,1],[85,31,10,98,31,8,80,33,98,31,9],[85,31,45,98,31,43,80,33,98,31,44],[82,31,1,82,31,2,82,31,3,82,31,4,82,31,5,80,16762880,80,6045747,80,12628016,82,31,6,82,31,7,136,160],[82,31,6,80,1,64,129,593],[82,31,1,80,4,24,98,31,1],[82,31,2,80,8,24,98,31,2],[82,31,8,87,9,78,111,46,32,87,97,118,101,115,2,121],[80,1,80,2,80,1,82,31,1,82,31,2,82,31,3,82,31,4,82,31,8,81,69,80,0,80,16777215,80,16711680,136,183],[82,31,43,87,2,32,50,2,121],[82,31,1,80,10,24,82,31,2,80,34,24,80,2,82,31,43,80,16711680,80,0,136,123],[82,31,43,87,2,49,48,2,121],[82,31,1,80,54,24,82,31,2,80,34,24,80,2,82,31,43,80,16711680,80,0,136,123],[82,31,43,87,2,50,48,2,121],[82,31,1,80,98,24,82,31,2,80,34,24,80,2,82,31,43,80,16711680,80,0,136,123],[82,31,43,87,2,52,48,2,121],[82,31,1,80,142,24,82,31,2,80,34,24,80,2,82,31,43,80,16711680,80,0,136,123],[82,31,43,87,2,54,48,2,121],[82,31,1,80,186,24,82,31,2,80,34,24,80,2,82,31,43,80,16711680,80,0,136,123],[82,31,43,87,20,73,110,105,116,105,97,108,105,115,101,32,97,108,108,32,119,97,118,101,115,2,121],[82,31,1,80,8,24,82,31,2,80,68,24,80,16,82,31,43,80,10025880,80,0,136,123],[145,31,141,137],[140,23],[144,32,77],[85,32,1,80,77,115,98,32,7,98,32,6,98,32,5,98,32,4,98,32,3,98,32,2,98,32,1],[85,32,10,98,32,8,80,33,98,32,9],[85,32,45,98,32,43,80,33,98,32,44],[82,32,1,82,32,2,82,32,3,82,32,4,82,32,5,80,16762880,80,6045747,80,12628016,82,32,6,82,32,7,136,160],[82,32,6,80,1,64,129,617],[82,32,1,80,4,24,98,32,1],[82,32,2,80,8,24,98,32,2],[82,32,8,87,11,83,101,108,101,99,116,32,87,97,118,101,2,121],[82,32,43,87,0,2,121],[80,1,80,2,80,1,82,32,1,82,32,2,82,32,3,82,32,4,82,32,8,81,70,80,0,80,16777215,80,65280,136,183],[80,2,80,1,80,0,82,32,1,82,32,2,82,32,3,82,32,4,82,32,43,81,305,81,70,80,1,25,2,120,24,4,112,80,0,80,16777215,80,51543,136,183],[82,32,43,87,11,87,97,118,101,32,79,110,47,79,102,102,2,121],[82,32,1,80,28,24,82,32,2,80,34,24,80,11,82,32,43,80,51543,80,0,136,123],[145,32,141,137],[140,24],[144,33,77],[85,33,1,80,77,115,98,33,7,98,33,6,98,33,5,98,33,4,98,33,3,98,33,2,98,33,1],[85,33,10,98,33,8,80,33,98,33,9],[85,33,45,98,33,43,80,33,98,33,44],[82,33,1,82,33,2,82,33,3,82,33,4,82,33,5,80,16762880,80,6045747,80,12628016,82,33,6,82,33,7,136,160],[82,33,6,80,1,64,129,633],[82,33,1,80,4,24,98,33,1],[82,33,2,80,8,24,98,33,2],[82,33,8,87,10,32,65,109,112,108,105,116,117,100,101,2,121],[82,33,43,87,12,32,32,32,32,32,32,32,80,104,97,115,101,2,121],[80,1,80,2,80,0,82,33,1,82,33,2,82,33,3,82,33,4,82,33,8,81,181,81,70,80,1,25,2,120,24,4,112,80,0,80,16777215,80,10025880,136,183],[80,2,80,2,80,0,82,33,1,82,33,2,82,33,3,82,33,4,82,33,43,81,243,81,70,80,1,25,2,120,24,4,112,80,0,80,16777215,80,10025880,136,183],[82,33,43,80,88,48,2,121,147],[82,33,1,80,14,24,82,33,2,80,34,24,80,1,82,33,43,80,10025880,80,0,136,123],[145,33,141,137],[140,25],[144,34,43],[85,34,1,80,43,115,98,34,7,98,34,6,98,34,5,98,34,4,98,34,3,98,34,2,98,34,1],[85,34,10,98,34,8,80,33,98,34,9],[82,34,1,82,34,2,82,34,3,82,34,4,82,34,5,80,16762880,80,6045747,80,12628016,82,34,6,82,34,7,136,160],[82,34,6,80,1,64,129,648],[82,34,1,80,4,24,98,34,1],[82,34,2,80,8,24,98,34,2],[80,32,98,34,43],[82,34,8,87,3,65,108,108,2,121],[82,34,1,82,34,43,24,82,34,2,80,2,82,34,8,80,51543,80,0,136,123],[82,34,8,87,5,69,118,101,110,115,2,121],[82,34,1,82,34,43,24,80,55,24,82,34,2,80,5,82,34,8,80,51543,80,0,136,123],[82,34,8,87,4,79,100,100,115,2,121],[82,34,1,82,34,43,24,80,150,24,82,34,2,80,5,82,34,8,80,51543,80,0,136,123],[82,34,8,87,9,70,105,98,111,110,97,99,99,105,2,121],[82,34,1,82,34,43,24,80,245,24,82,34,2,80,8,82,34,8,80,51543,80,0,136,123],[82,34,8,87,4,78,111,110,101,2,121],[82,34,1,82,34,43,24,80,380,24,82,34,2,80,5,82,34,8,80,51543,80,0,136,123],[145,34,141,137],[140,26],[144,35,78],[85,35,1,80,78,115,98,35,7,98,35,6,98,35,5,98,35,4,98,35,3,98,35,2,98,35,1],[85,35,11,98,35,9,80,33,98,35,10],[85,35,46,98,35,44,80,33,98,35,45],[82,35,1,82,35,2,82,35,3,82,35,4,82,35,5,80,16762880,80,6045747,80,12628016,82,35,6,82,35,7,136,160],[82,35,6,80,1,64,129,669],[82,35,1,80,4,24,98,35,1],[82,35,2,80,8,24,98,35,2],[82,35,9,87,10,68,101,99,97,121,32,82,97,116,101,2,121],[82,35,44,80,37,48,2,121,147],[80,1,80,0,80,1,82,35,1,82,35,2,82,35,3,82,35,4,82,35,9,82,35,8,80,0,80,16777215,80,128,136,183],[80,2,80,2,80,1,82,35,1,82,35,2,82,35,3,82,35,4,82,35,44,81,72,80,0,80,16777215,80,45311,136,183],[145,35,141,137],[140,27],[144,36,43],[85,36,1,80,43,115,98,36,7,98,36,6,98,36,5,98,36,4,98,36,3,98,36,2,98,36,1],[85,36,11,98,36,9,80,33,98,36,10],[82,36,1,82,36,2,82,36,3,82,36,4,82,36,5,80,12628016,80,6045747,80,12628016,82,36,6,82,36,7,136,160],[82,36,6,80,1,64,129,682],[82,36,1,80,4,24,98,36,1],[82,36,2,80,8,24,98,36,2],[82,36,9,87,8,83,104,114,105,110,107,32,89,2,121],[80,1,80,2,80,0,82,36,1,82,36,2,82,36,3,82,36,4,82,36,9,81,71,80,0,80,16777215,80,12628016,136,183],[145,36,141,137],[140,28],[144,37,43],[85,37,1,80,43,115,98,37,7,98,37,6,98,37,5,98,37,4,98,37,3,98,37,2,98,37,1],[85,37,11,98,37,9,80,33,98,37,10],[82,37,1,82,37,2,82,37,3,82,37,4,82,37,5,80,12628016,80,6045747,80,16762880,82,37,6,82,37,7,136,160],[82,37,6,80,1,64,129,693],[82,37,1,80,4,24,98,37,1],[82,37,2,80,8,24,98,37,2],[82,37,9,87,17,32,32,83,117,112,101,114,112,111,115,101,100,32,87,97,118,101,2,121],[80,1,80,0,80,1,82,37,1,82,37,2,82,37,3,82,37,4,82,37,9,82,37,8,80,0,80,16777215,80,12628016,136,183],[145,37,141,137],[140,29],[144,38,43],[85,38,1,80,43,115,98,38,7,98,38,6,98,38,5,98,38,4,98,38,3,98,38,2,98,38,1],[85,38,11,98,38,9,80,33,98,38,10],[82,38,1,82,38,2,82,38,3,82,38,4,82,38,5,80,12628016,80,6045747,80,16762880,82,38,6,82,38,7,136,160],[82,38,6,80,1,64,129,704],[82,38,1,80,4,24,98,38,1],[82,38,2,80,8,24,98,38,2],[82,38,9,87,16,32,67,111,109,112,111,110,101,110,116,32,87,97,118,101,115,2,121],[80,1,80,0,80,1,82,38,1,82,38,2,82,38,3,82,38,4,82,38,9,82,38,8,80,0,80,16777215,80,12628016,136,183],[145,38,141,137],[140,30],[144,39,42],[85,39,1,80,42,115,98,39,7,98,39,6,98,39,5,98,39,4,98,39,3,98,39,2,98,39,1],[85,39,10,98,39,8,80,33,98,39,9],[82,39,1,82,39,2,82,39,3,82,39,4,82,39,5,80,16762880,80,6045747,80,12628016,82,39,6,82,39,7,136,160],[82,39,6,80,1,64,129,715],[82,39,1,80,4,24,98,39,1],[82,39,2,80,8,24,98,39,2],[82,39,8,87,6,67,111,97,114,115,101,2,121],[82,39,1,80,22,24,82,39,2,80,2,24,80,6,82,39,8,80,12628016,80,0,136,123],[82,39,8,87,4,70,105,110,101,2,121],[82,39,1,80,130,24,82,39,2,80,2,24,80,4,82,39,8,80,12628016,80,0,136,123],[145,39,141,137],[140,31],[144,40,78],[85,40,1,80,78,115,98,40,7,98,40,6,98,40,5,98,40,4,98,40,3,98,40,2,98,40,1],[85,40,11,98,40,9,80,33,98,40,10],[85,40,46,98,40,44,80,33,98,40,45],[82,40,1,82,40,2,82,40,3,82,40,4,82,40,5,80,16762880,80,255,80,12628016,82,40,6,82,40,7,136,160],[82,40,6,80,1,64,129,729],[82,40,1,80,4,24,98,40,1],[82,40,2,80,8,24,98,40,2],[82,40,9,87,10,83,104,111,119,105,110,103,58,32,32,81,111,54,2,121,147],[82,40,44,87,17,32,32,32,32,32,32,32,32,68,105,118,105,100,101,32,98,121,2,121],[80,1,80,0,80,1,82,40,1,82,40,2,82,40,3,82,40,4,82,40,9,82,40,8,80,0,80,16777215,80,51543,136,183],[80,2,80,2,80,0,82,40,1,82,40,2,82,40,3,82,40,4,82,40,44,81,74,80,0,80,16777215,80,51543,136,183],[82,40,44,87,3,76,105,109,2,121],[82,40,1,80,8,24,82,40,2,80,1,80,34,26,24,80,3,82,40,44,80,51543,80,0,136,123],[82,40,44,87,8,32,32,83,113,117,97,114,101,2,121],[82,40,1,80,8,24,82,40,2,80,2,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[82,40,44,87,9,32,32,32,32,80,117,108,115,101,2,121],[82,40,1,80,8,24,82,40,2,80,3,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[82,40,44,87,8,79,110,101,32,98,101,97,116,2,121],[82,40,1,80,8,24,82,40,2,80,4,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[82,40,44,87,10,83,104,111,114,116,115,116,111,99,107,2,121],[82,40,1,80,8,24,82,40,2,80,5,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[82,40,44,87,9,32,83,97,119,116,111,111,116,104,2,121],[82,40,1,80,142,24,82,40,2,80,2,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[82,40,44,87,9,32,32,82,101,108,97,120,101,100,2,121],[82,40,1,80,142,24,82,40,2,80,3,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[82,40,44,87,9,84,119,111,32,98,101,97,116,115,2,121],[82,40,1,80,142,24,82,40,2,80,4,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[82,40,44,87,9,76,111,110,103,115,116,111,99,107,2,121],[82,40,1,80,142,24,82,40,2,80,5,80,34,26,24,80,9,82,40,44,80,51543,80,0,136,123],[145,40,141,137],[140,32],[144,41,42],[85,41,1,80,42,115,98,41,7,98,41,6,98,41,5,98,41,4,98,41,3,98,41,2,98,41,1],[85,41,10,98,41,8,80,33,98,41,9],[82,41,1,82,41,2,82,41,3,82,41,4,82,41,5,80,16762880,80,6045747,80,12628016,82,41,6,82,41,7,136,160],[82,41,6,80,1,64,129,760],[82,41,1,80,4,24,98,41,1],[82,41,2,80,8,24,98,41,2],[82,41,8,87,5,32,77,101,110,117,2,121],[82,41,1,80,3,24,82,41,2,80,5,82,41,8,80,255,80,16777147,136,123],[82,41,8,87,5,32,69,120,105,116,2,121],[82,41,1,80,81,24,82,41,2,80,4,82,41,8,80,16711680,80,16777215,136,123],[145,41,141,137],[140,33],[144,42,5],[85,42,1,80,5,115,98,42,5,98,42,4,98,42,3,98,42,2,98,42,1],[82,42,5,80,0,64,129,771],[82,42,1,80,4,25,98,42,1],[82,42,2,80,8,25,98,42,2],[80,1,82,42,1,82,42,2,82,42,3,82,42,4,84,69,80,1,80,60,80,1,136,200],[82,42,1,80,10,24,82,42,2,80,40,24,80,2,84,69,80,2,80,0,136,286],[82,42,1,80,54,24,82,42,2,80,40,24,80,2,84,69,80,10,80,0,136,286],[82,42,1,80,98,24,82,42,2,80,40,24,80,2,84,69,80,20,80,0,136,286],[82,42,1,80,142,24,82,42,2,80,40,24,80,2,84,69,80,40,80,0,136,286],[82,42,1,80,186,24,82,42,2,80,40,24,80,2,84,69,80,60,80,0,136,286],[82,42,1,80,8,24,82,42,2,80,68,24,80,16,80,0,136,337],[145,42,141,137],[140,34],[144,43,5],[85,43,1,80,5,115,98,43,5,98,43,4,98,43,3,98,43,2,98,43,1],[82,43,5,80,0,64,129,785],[82,43,1,80,4,25,98,43,1],[82,43,2,80,8,25,98,43,2],[80,1,82,43,1,82,43,2,82,43,3,82,43,4,84,70,80,1,80,60,80,1,136,200],[82,43,1,80,28,24,82,43,2,80,34,24,80,11,81,305,81,70,80,1,25,2,120,24,4,80,0,136,297],[145,43,141,137],[140,35],[144,44,5],[85,44,1,80,5,115,98,44,5,98,44,4,98,44,3,98,44,2,98,44,1],[82,44,5,80,0,64,129,794],[82,44,1,80,4,25,98,44,1],[82,44,2,80,8,25,98,44,2],[80,1,82,44,1,82,44,2,82,44,3,82,44,4,81,181,81,70,80,1,25,2,120,24,4,80,500,16,80,500,80,5,136,200],[80,2,82,44,1,82,44,2,82,44,3,82,44,4,81,243,81,70,80,1,25,2,120,24,4,80,360,16,80,360,80,2,136,200],[82,44,1,80,14,24,82,44,2,80,34,24,80,1,80,0,136,311],[145,44,141,137],[140,36],[144,45,6],[85,45,1,80,6,115,98,45,5,98,45,4,98,45,3,98,45,2,98,45,1],[82,45,5,80,0,64,129,804],[82,45,1,80,4,25,98,45,1],[82,45,2,80,8,25,98,45,2],[80,32,98,45,6],[80,1,82,45,1,82,45,6,24,82,45,2,80,2,80,0,136,349],[80,2,82,45,1,82,45,6,24,80,55,24,82,45,2,80,5,80,0,136,349],[80,3,82,45,1,82,45,6,24,80,150,24,82,45,2,80,5,80,0,136,349],[80,4,82,45,1,82,45,6,24,80,245,24,82,45,2,80,8,80,0,136,349],[80,5,82,45,1,82,45,6,24,80,380,24,82,45,2,80,5,80,0,136,349],[145,45,141,137],[140,37],[144,46,6],[85,46,1,80,6,115,98,46,5,98,46,4,98,46,3,98,46,2,98,46,1],[82,46,5,80,0,64,129,817],[82,46,1,80,4,25,98,46,1],[82,46,2,80,8,25,98,46,2],[80,2,82,46,1,82,46,2,82,46,3,82,46,4,84,72,80,0,80,100,80,1,25,80,1,136,234],[145,46,141,137],[140,38],[144,47,5],[85,47,1,80,5,115,98,47,5,98,47,4,98,47,3,98,47,2,98,47,1],[82,47,5,80,0,64,129,825],[82,47,1,80,4,25,98,47,1],[82,47,2,80,8,25,98,47,2],[80,1,82,47,1,82,47,2,82,47,3,82,47,4,84,71,80,1,80,20,80,1,136,200],[145,47,141,137],[140,39],[144,48,5],[85,48,1,80,5,115,98,48,5,98,48,4,98,48,3,98,48,2,98,48,1],[82,48,5,80,0,64,129,833],[82,48,1,80,4,25,98,48,1],[82,48,2,80,8,25,98,48,2],[82,48,1,80,22,24,82,48,2,80,8,24,80,6,84,75,80,0,80,0,136,286],[82,48,1,80,130,24,82,48,2,80,8,24,80,4,84,75,80,1,80,0,136,286],[145,48,141,137],[140,40],[144,49,6],[85,49,1,80,6,115,98,49,5,98,49,4,98,49,3,98,49,2,98,49,1],[82,49,5,80,0,64,129,842],[82,49,1,80,4,25,98,49,1],[82,49,2,80,8,25,98,49,2],[80,2,82,49,1,82,49,2,82,49,3,82,49,4,84,74,80,1,80,20,80,1,136,251],[80,0,82,49,1,80,8,24,82,49,2,80,1,80,36,26,24,80,3,80,0,136,425],[80,2,82,49,1,80,8,24,82,49,2,80,2,80,36,26,24,80,9,80,0,136,425],[80,5,82,49,1,80,8,24,82,49,2,80,3,80,36,26,24,80,9,80,0,136,425],[80,7,82,49,1,80,8,24,82,49,2,80,4,80,36,26,24,80,9,80,0,136,425],[80,3,82,49,1,80,8,24,82,49,2,80,5,80,36,26,24,80,9,80,0,136,425],[80,1,82,49,1,80,142,24,82,49,2,80,2,80,36,26,24,80,9,80,0,136,425],[80,6,82,49,1,80,142,24,82,49,2,80,3,80,36,26,24,80,9,80,0,136,425],[80,8,82,49,1,80,142,24,82,49,2,80,4,80,36,26,24,80,9,80,0,136,425],[80,4,82,49,1,80,142,24,82,49,2,80,5,80,36,26,24,80,9,80,0,136,425],[145,49,141,137],[140,41],[144,50,6],[85,50,1,80,6,115,98,50,5,98,50,4,98,50,3,98,50,2,98,50,1],[82,50,5,80,0,64,129,859],[82,50,1,80,4,25,98,50,1],[82,50,2,80,8,25,98,50,2],[82,50,1,80,8,24,82,50,2,80,4,84,73,80,0,136,297],[82,50,1,80,76,24,82,50,2,80,4,84,67,80,1,80,0,136,286],[145,50,141,137],[140,42],[80,36,80,6,80,10,80,2,80,3,80,1,80,1,136,584],[80,280,80,2,80,34,80,0,80,2,80,16762880,80,6045747,80,12628016,80,1,80,1,136,160],[80,286,80,10,80,12,80,2,80,3,80,0,80,0,136,608],[80,546,80,10,80,10,80,4,80,3,80,0,80,0,136,624],[80,280,80,74,80,33,80,1,80,1,80,1,80,1,136,640],[80,810,80,40,80,2,80,3,80,2,80,1,80,1,136,660],[80,34,80,954,80,8,80,2,80,1,80,1,80,1,136,674],[80,372,80,956,80,11,80,2,80,1,80,1,80,1,136,685],[80,372,80,414,80,11,80,2,80,1,80,1,80,1,136,696],[80,750,80,954,80,10,80,0,80,1,80,1,80,1,136,707],[80,810,80,2,80,5,80,0,80,1,80,1,80,1,136,752],[81,73,80,1,64,129,876],[80,684,80,122,80,13,80,2,80,6,80,1,80,1,136,720],[141,137],[140,43],[80,36,80,6,80,10,80,2,80,1,136,765],[80,286,80,14,80,12,80,2,80,0,136,779],[80,546,80,14,80,10,80,4,80,0,136,788],[80,280,80,80,80,33,80,1,80,1,136,798],[80,810,80,36,80,2,80,3,80,1,136,811],[80,34,80,954,80,8,80,2,80,1,136,819],[80,750,80,954,80,10,80,0,80,1,136,827],[80,810,80,7,80,5,80,0,80,1,136,853],[81,73,80,1,64,129,888],[80,684,80,122,80,13,80,2,80,1,136,836],[141,137],[140,44],[144,53,10],[85,53,1,80,10,115,98,53,5,98,53,4,98,53,3,98,53,2,98,53,1],[81,305,82,53,1,80,1,25,2,120,24,4,112,80,1,64,129,924],[81,75,80,1,64,129,899],[80,180,98,53,8],[80,5,98,53,9],[80,2,98,53,10],[82,53,4,80,4,24,98,53,4],[128,902],[80,90,98,53,8],[80,10,98,53,9],[80,1,98,53,10],[82,53,3,221],[82,53,4,82,53,5,224],[80,90,219],[80,0,98,53,6],[80,0],[98,53,6,82,53,8],[82,53,6,69,129,919],[160],[82,53,9,227],[80,1,237],[80,90,229],[81,367,82,53,1,80,1,25,2,120,24,4,112,80,4,82,53,6,26,82,53,10,27,81,243,82,53,1,80,1,25,2,120,24,4,112,24,82,53,1,26,80,1,81,181,82,53,1,80,1,25,2,120,24,4,112,41,26,80,100,27,98,53,7],[82,53,7,227],[82,53,7,228],[80,1,237],[80,90,230],[82,53,6,4,128,907],[82,53,1,81,70,64,129,921],[80,4,220],[82,53,8,80,1,24,240],[82,53,1,81,70,64,129,924],[80,2,220],[145,53,141,137],[140,45],[144,54,12],[85,54,1,80,12,115,98,54,6,98,54,5,98,54,4,98,54,3,98,54,2,98,54,1],[82,54,4,221],[81,75,80,1,64,129,937],[80,180,98,54,10],[80,5,98,54,11],[80,2,98,54,12],[82,54,5,80,4,24,98,54,5],[80,2,220],[80,0,221],[128,941],[80,90,98,54,10],[80,10,98,54,11],[80,1,98,54,12],[80,2,220],[82,54,5,82,54,6,224],[80,90,219],[80,0,98,54,7],[80,0],[98,54,7,82,54,10],[82,54,7,69,129,972],[160],[82,54,11,227],[80,1,237],[161],[80,90,229],[80,0,98,54,9],[80,1],[98,54,8,82,54,1],[82,54,8,69,129,959],[81,305,82,54,8,80,1,25,2,120,24,4,112,80,1,64,129,958],[82,54,9,81,367,82,54,8,80,1,25,2,120,24,4,112,80,4,82,54,7,26,82,54,12,27,81,243,82,54,8,80,1,25,2,120,24,4,112,24,82,54,8,26,80,1,81,181,82,54,8,80,1,25,2,120,24,4,112,41,26,80,100,27,24,98,54,9],[82,54,8,4,128,954],[81,71,80,0,67,129,962],[82,54,9,81,71,27,98,54,9],[128,964],[81,71,80,0,66,129,964],[82,54,9,81,71,17,26,98,54,9],[81,75,80,1,64,129,966],[160],[82,54,9,227],[82,54,9,228],[161],[80,1,237],[80,90,230],[82,54,7,4,128,945],[82,54,10,80,1,24,240],[145,54,141,137],[140,46],[144,55,5],[85,55,1,80,5,115,98,55,4,98,55,3,98,55,2,98,55,1],[82,55,1,82,55,2,82,55,4,24,224],[80,10526880,221],[80,0,219],[80,1],[98,55,5,80,9],[82,55,5,69,129,998],[161],[82,55,5,80,1,64,129,987],[80,4,220],[128,988],[80,2,220],[80,2,82,55,4,26,227],[80,2,82,55,4,26,228],[80,90,230],[160],[82,55,3,80,8,27,227],[82,55,5,80,2,29,80,1,64,129,995],[80,1,227],[161],[80,90,229],[82,55,5,4,128,981],[145,55,141,137],[140,47],[144,56,6],[85,56,1,80,6,115,98,56,4,98,56,3,98,56,2,98,56,1],[80,50,98,56,6],[82,56,1,82,56,2,82,56,4,25,224],[80,10526880,221],[80,90,219],[80,1],[98,56,5,80,2,82,56,4,82,56,6,27,26,80,1,24],[82,56,5,69,129,1022],[82,56,5,82,56,4,82,56,6,27,80,1,24,64,129,1012],[80,4,220],[128,1013],[80,2,220],[161],[82,56,3,227],[82,56,3,228],[80,90,230],[160],[82,56,6,227],[161],[80,90,229],[82,56,5,4,128,1007],[145,56,141,137],[140,48],[144,57,1],[85,57,1,80,1,115],[80,0,164],[80,2,97,69],[80,1,97,70],[80,1,97,71],[80,10,97,72],[80,0,97,73],[80,1,97,74],[80,0,97,75],[81,111,87,9,65,108,108,32,119,97,118,101,115,2,121],[81,72,136,216],[80,1],[98,57,1,80,60],[82,57,1,69,129,1043],[81,181,82,57,1,80,1,25,2,120,24,4,80,100,2,113],[81,243,82,57,1,80,1,25,2,120,24,4,80,0,2,113],[81,305,82,57,1,80,1,25,2,120,24,4,80,1,2,113],[82,57,1,4,128,1037],[145,57,141,137],[140,49],[144,58,1],[85,58,1,80,1,115],[80,30,80,460,80,940,80,540,80,12628016,80,0,80,12632256,80,1,136,141],[80,32,80,462,80,936,80,536,80,0,80,12628016,80,16777215,80,1,136,141],[80,50,80,730,80,900,80,250,136,974],[80,50,80,730,80,900,80,250,136,999],[81,69,80,100,80,0,80,4210752,80,40,80,730,136,925],[80,30,80,118,80,940,80,340,80,12628016,80,6045747,80,12632256,80,0,136,141],[80,32,80,120,80,936,80,336,80,6045747,80,12628016,80,16777147,80,1,136,141],[80,50,80,288,80,900,80,150,136,974],[80,50,80,288,80,900,80,150,136,999],[80,1],[98,58,1,81,69],[82,58,1,69,129,1061],[82,58,1,80,900,82,58,1,80,40,80,288,136,889],[82,58,1,4,128,1057],[145,58,141,137],[136,1023],[80,0,97,67],[163],[80,9596735,248],[136,1044],[136,862],[162],[80,30,178],[80,-4,184,80,0,67,129,1069],[136,877],[81,67,80,1,64,129,1064],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,19,115,80,29,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,3,97,17],[84,22,97,21],[80,3,97,22],[81,16,80,0,2,120,24,4,80,400,2,113],[81,21,80,0,2,120,24,4,80,138,2,113],[81,16,80,1,2,120,24,4,80,843,2,113],[81,21,80,1,2,120,24,4,80,650,2,113],[81,16,80,2,2,120,24,4,80,179,2,113],[81,21,80,2,2,120,24,4,80,778,2,113],[80,200,19,4,80,399,24,97,26],[80,200,19,4,80,399,24,97,27],[80,3,19,4,80,1,25,97,28],[81,26,81,16,81,28,2,120,24,4,112,24,80,2,27,97,26],[81,27,81,21,81,28,2,120,24,4,112,24,80,2,27,97,27],[81,26,81,27,80,8388736,211],[80,0,80,1,64,129,15],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,19,115,80,29,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,6,97,17,84,24,97,18],[80,6,97,24,84,31,97,19],[80,6,97,31,84,38,97,20],[80,6,97,38,84,45,97,21],[80,6,97,45,84,52,97,22],[80,6,97,52,84,59,97,23],[80,6,97,59],[84,18,97,17],[80,3,97,18],[84,23,97,22],[80,3,97,23],[81,17,80,0,2,120,24,4,80,400,2,113],[81,22,80,0,2,120,24,4,80,138,2,113],[81,17,80,1,2,120,24,4,80,843,2,113],[81,22,80,1,2,120,24,4,80,650,2,113],[81,17,80,2,2,120,24,4,80,179,2,113],[81,22,80,2,2,120,24,4,80,778,2,113],[80,200,19,80,400,24,97,27],[80,200,19,80,400,24,97,28],[80,3,19,97,29],[81,27,81,17,81,29,2,120,24,4,112,24,80,2,27,97,27],[81,28,81,22,81,29,2,120,24,4,112,24,80,2,27,97,28],[81,27,81,28,80,8388736,211],[80,0,80,1,64,129,23],[130]]")},function(n){n.exports=JSON.parse("[[80,18,1,1,80,0,113,80,6,2,113,4,80,64,115,80,82,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,25,97,24],[80,5,97,25],[84,32,97,31],[80,5,97,32],[84,39,97,38],[80,5,97,39],[84,46,97,45],[80,5,97,46],[84,53,97,52],[80,5,97,53],[84,60,97,59],[80,5,97,60],[128,203],[140,1],[80,0,97,67],[80,999,97,68],[80,0,97,69],[80,999,97,70],[80,2,97,71],[80,3,97,72],[80,5,97,73],[80,64,97,74],[80,100,97,75],[81,24,80,1,2,120,24,4,80,50,2,113],[81,45,80,1,2,120,24,4,80,0,2,113],[81,31,80,1,2,120,24,4,80,0,2,113],[81,52,80,1,2,120,24,4,80,50,2,113],[81,38,80,1,2,120,24,4,80,250,2,113],[81,59,80,1,2,120,24,4,80,0,2,113],[81,24,80,2,2,120,24,4,80,50,2,113],[81,45,80,2,2,120,24,4,80,0,2,113],[81,31,80,2,2,120,24,4,80,0,2,113],[81,52,80,2,2,120,24,4,80,50,2,113],[81,38,80,2,2,120,24,4,80,0,2,113],[81,59,80,2,2,120,24,4,80,500,2,113],[81,24,80,3,2,120,24,4,80,50,2,113],[81,45,80,3,2,120,24,4,80,0,2,113],[81,31,80,3,2,120,24,4,80,0,2,113],[81,52,80,3,2,120,24,4,80,50,2,113],[81,38,80,3,2,120,24,4,80,500,2,113],[81,59,80,3,2,120,24,4,80,500,2,113],[141,137],[140,2],[80,236,16,97,67],[80,263,97,68],[80,1,97,69],[80,1000,97,70],[80,2,97,71],[80,4,97,72],[80,5,97,73],[80,32,97,74],[80,100,97,75],[81,24,80,1,2,120,24,4,80,0,2,113],[81,45,80,1,2,120,24,4,80,0,2,113],[81,31,80,1,2,120,24,4,80,0,2,113],[81,52,80,1,2,120,24,4,80,16,2,113],[81,38,80,1,2,120,24,4,80,0,2,113],[81,59,80,1,2,120,24,4,80,0,2,113],[81,24,80,2,2,120,24,4,80,85,2,113],[81,45,80,2,2,120,24,4,80,4,16,2,113],[81,31,80,2,2,120,24,4,80,4,2,113],[81,52,80,2,2,120,24,4,80,85,2,113],[81,38,80,2,2,120,24,4,80,0,2,113],[81,59,80,2,2,120,24,4,80,160,2,113],[81,24,80,3,2,120,24,4,80,20,2,113],[81,45,80,3,2,120,24,4,80,23,2,113],[81,31,80,3,2,120,24,4,80,26,16,2,113],[81,52,80,3,2,120,24,4,80,22,2,113],[81,38,80,3,2,120,24,4,80,0,2,113],[81,59,80,3,2,120,24,4,80,160,2,113],[81,24,80,4,2,120,24,4,80,15,16,2,113],[81,45,80,4,2,120,24,4,80,26,2,113],[81,31,80,4,2,120,24,4,80,28,2,113],[81,52,80,4,2,120,24,4,80,24,2,113],[81,38,80,4,2,120,24,4,80,0,2,113],[81,59,80,4,2,120,24,4,80,44,2,113],[141,137],[140,3],[80,0,97,67],[80,999,97,68],[80,0,97,69],[80,999,97,70],[80,4,97,71],[80,3,97,72],[80,5,97,73],[80,64,97,74],[80,1000,97,75],[81,24,80,1,2,120,24,4,80,0,2,113],[81,45,80,1,2,120,24,4,80,577,16,2,113],[81,31,80,1,2,120,24,4,80,577,2,113],[81,52,80,1,2,120,24,4,80,0,2,113],[81,38,80,1,2,120,24,4,80,95,2,113],[81,59,80,1,2,120,24,4,80,589,2,113],[81,24,80,2,2,120,24,4,80,0,2,113],[81,45,80,2,2,120,24,4,80,577,16,2,113],[81,31,80,2,2,120,24,4,80,577,2,113],[81,52,80,2,2,120,24,4,80,0,2,113],[81,38,80,2,2,120,24,4,80,441,2,113],[81,59,80,2,2,120,24,4,80,789,2,113],[81,24,80,3,2,120,24,4,80,0,2,113],[81,45,80,3,2,120,24,4,80,577,16,2,113],[81,31,80,3,2,120,24,4,80,577,2,113],[81,52,80,3,2,120,24,4,80,0,2,113],[81,38,80,3,2,120,24,4,80,95,2,113],[81,59,80,3,2,120,24,4,80,989,2,113],[141,137],[140,4],[80,-1,80,16777147,80,-1,166],[80,0,164],[87,41,73,84,69,82,65,84,69,68,32,70,85,78,67,84,73,79,78,83,32,79,78,32,67,79,76,79,85,82,69,68,32,66,65,67,75,71,82,79,85,78,68,190,191],[87,0,190,191],[87,59,83,101,108,101,99,116,32,83,105,101,114,112,105,110,115,107,105,44,32,66,97,114,110,115,108,101,121,32,102,101,114,110,44,32,111,114,32,68,114,97,103,111,110,32,99,117,114,118,101,63,32,40,83,47,66,47,68,41,32,190],[80,0,164],[80,-9,184,17,80,83,64,80,-9,184,17,80,66,64,10,80,-9,184,17,80,68,64,10,129,116],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,83,64,129,122],[87,32,83,105,101,114,112,105,110,115,107,105,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,16],[128,128],[80,-9,184,17,80,66,64,129,126],[87,35,66,97,114,110,115,108,101,121,32,102,101,114,110,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,45],[128,128],[87,34,68,114,97,103,111,110,32,99,117,114,118,101,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,80],[80,0,80,16777215,80,0,166],[141,137],[140,5],[81,67,81,71,27,97,76],[81,68,81,71,27,97,77],[81,69,81,71,27,97,78],[81,70,81,71,27,97,79],[80,1],[97,80,81,72],[81,80,69,129,141],[81,38,81,80,2,120,24,4,81,38,81,80,2,120,24,4,112,81,71,27,2,113],[81,59,81,80,2,120,24,4,81,59,81,80,2,120,24,4,112,81,71,27,2,113],[81,80,4,128,136],[81,74,81,71,27,97,81],[141,137],[140,6],[144,15,7],[85,15,1,80,7,115],[81,81,220],[80,4210752,221],[80,1],[98,15,1,81,73,80,1,25],[82,15,1,69,129,154],[81,76,81,77,81,76,25,81,73,82,15,1,32,24,81,78,224],[80,0,81,79,81,78,25,226],[82,15,1,4,128,149],[80,1],[98,15,2,81,73,80,1,25],[82,15,2,69,129,160],[81,76,81,81,80,2,27,24,81,78,81,79,81,78,25,81,73,82,15,2,32,24,224],[81,77,81,76,25,81,81,25,80,0,226],[82,15,2,4,128,155],[80,0,221],[81,76,81,78,224],[81,77,81,76,25,80,0,226],[80,0,81,79,81,78,25,226],[81,76,81,77,25,80,0,226],[80,0,81,78,81,79,25,226],[80,0],[98,15,1,81,73,80,1,25],[82,15,1,69,129,180],[80,0],[98,15,2,81,73,80,1,25],[82,15,2,69,129,179],[81,76,81,77,81,76,25,81,73,82,15,1,32,24,81,81,24,98,15,3],[81,78,81,79,81,78,25,81,73,82,15,2,32,24,81,81,24,98,15,4],[80,255,81,73,80,1,25,82,15,1,32,98,15,5],[80,255,81,73,80,1,25,82,15,2,32,98,15,6],[80,255,80,2,81,73,26,80,2,25,80,2,81,73,26,80,2,25,82,15,1,25,82,15,2,25,32,98,15,7],[82,15,3,82,15,4,82,15,5,80,65536,26,82,15,6,80,256,26,24,82,15,7,80,1,26,24,252],[82,15,2,4,128,170],[82,15,1,4,128,167],[145,15,141,137],[140,7],[144,16,5],[85,16,1,80,5,115,98,16,5,98,16,4,98,16,3,98,16,2,98,16,1],[82,16,2,81,75,81,24,82,16,1,2,120,24,4,112,32,82,16,3,81,75,81,31,82,16,1,2,120,24,4,112,32,24,81,38,82,16,1,2,120,24,4,112,24,99,16,4],[82,16,2,81,75,81,45,82,16,1,2,120,24,4,112,32,82,16,3,81,75,81,52,82,16,1,2,120,24,4,112,32,24,81,59,82,16,1,2,120,24,4,112,24,99,16,5],[145,16,141,137],[140,8],[144,17,5],[85,17,1,80,5,115,98,17,1],[163],[81,78],[98,17,3,81,79],[82,17,3,69,129,201],[81,76],[98,17,2,81,77],[82,17,2,69,129,200],[82,17,1,82,17,2,82,17,3,85,17,4,85,17,5,136,181],[82,17,4,82,17,5,82,17,2,82,17,3,210,211],[82,17,2,4,128,195],[82,17,3,4,128,192],[162],[145,17,141,137],[136,109],[136,130],[81,76,81,78,81,77,81,76,25,80,1,24,81,79,81,78,25,80,1,24,208],[81,77,81,76,25,80,1,24,81,79,81,78,25,80,1,24,209],[136,143],[80,1],[97,66,81,72],[81,66,69,129,213],[81,66,136,187],[81,66,4,128,209],[130]]")},function(n){n.exports=JSON.parse("[[80,18,1,1,80,0,113,80,6,2,113,4,80,57,115,80,75,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,25,97,24],[80,6,97,25,84,32,97,26],[80,6,97,32,84,39,97,27],[80,6,97,39,84,46,97,28],[80,6,97,46,84,53,97,29],[80,6,97,53,84,60,97,30],[80,6,97,60,84,67,97,31],[80,6,97,67],[84,40,97,39],[80,4,97,40],[84,46,97,45],[80,4,97,46],[84,52,97,51],[80,4,97,52],[84,58,97,57],[80,4,97,58],[84,64,97,63],[80,4,97,64],[84,70,97,69],[80,4,97,70],[128,213],[140,1],[80,0,97,25],[80,999,97,26],[80,0,97,27],[80,999,97,28],[80,2,97,29],[80,3,97,30],[80,5,97,31],[80,64,97,32],[80,100,97,38],[81,39,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,57,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,45,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,63,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,51,80,1,80,1,25,2,120,24,4,80,250,2,113],[81,69,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,39,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,57,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,45,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,63,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,51,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,69,80,2,80,1,25,2,120,24,4,80,500,2,113],[81,39,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,57,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,45,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,63,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,51,80,3,80,1,25,2,120,24,4,80,500,2,113],[81,69,80,3,80,1,25,2,120,24,4,80,500,2,113],[141,137],[140,2],[80,236,16,97,25],[80,263,97,26],[80,1,97,27],[80,1000,97,28],[80,2,97,29],[80,4,97,30],[80,5,97,31],[80,32,97,32],[80,100,97,38],[81,39,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,45,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,63,80,1,80,1,25,2,120,24,4,80,16,2,113],[81,51,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,69,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,39,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,57,80,2,80,1,25,2,120,24,4,80,4,16,2,113],[81,45,80,2,80,1,25,2,120,24,4,80,4,2,113],[81,63,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,51,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,69,80,2,80,1,25,2,120,24,4,80,160,2,113],[81,39,80,3,80,1,25,2,120,24,4,80,20,2,113],[81,57,80,3,80,1,25,2,120,24,4,80,23,2,113],[81,45,80,3,80,1,25,2,120,24,4,80,26,16,2,113],[81,63,80,3,80,1,25,2,120,24,4,80,22,2,113],[81,51,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,69,80,3,80,1,25,2,120,24,4,80,160,2,113],[81,39,80,4,80,1,25,2,120,24,4,80,15,16,2,113],[81,57,80,4,80,1,25,2,120,24,4,80,26,2,113],[81,45,80,4,80,1,25,2,120,24,4,80,28,2,113],[81,63,80,4,80,1,25,2,120,24,4,80,24,2,113],[81,51,80,4,80,1,25,2,120,24,4,80,0,2,113],[81,69,80,4,80,1,25,2,120,24,4,80,44,2,113],[141,137],[140,3],[80,0,97,25],[80,999,97,26],[80,0,97,27],[80,999,97,28],[80,4,97,29],[80,3,97,30],[80,5,97,31],[80,64,97,32],[80,1000,97,38],[81,39,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,1,80,1,25,2,120,24,4,80,577,16,2,113],[81,45,80,1,80,1,25,2,120,24,4,80,577,2,113],[81,63,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,51,80,1,80,1,25,2,120,24,4,80,95,2,113],[81,69,80,1,80,1,25,2,120,24,4,80,589,2,113],[81,39,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,2,80,1,25,2,120,24,4,80,577,16,2,113],[81,45,80,2,80,1,25,2,120,24,4,80,577,2,113],[81,63,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,51,80,2,80,1,25,2,120,24,4,80,441,2,113],[81,69,80,2,80,1,25,2,120,24,4,80,789,2,113],[81,39,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,3,80,1,25,2,120,24,4,80,577,16,2,113],[81,45,80,3,80,1,25,2,120,24,4,80,577,2,113],[81,63,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,51,80,3,80,1,25,2,120,24,4,80,95,2,113],[81,69,80,3,80,1,25,2,120,24,4,80,989,2,113],[141,137],[140,4],[80,-1,80,16777147,80,-1,166],[80,0,164],[87,41,73,84,69,82,65,84,69,68,32,70,85,78,67,84,73,79,78,83,32,79,78,32,67,79,76,79,85,82,69,68,32,66,65,67,75,71,82,79,85,78,68,190,191],[87,0,190,191],[87,59,83,101,108,101,99,116,32,83,105,101,114,112,105,110,115,107,105,44,32,66,97,114,110,115,108,101,121,32,102,101,114,110,44,32,111,114,32,68,114,97,103,111,110,32,99,117,114,118,101,63,32,40,83,47,66,47,68,41,32,190],[80,0,164],[80,-9,184,17,80,83,64,80,-9,184,17,80,66,64,10,80,-9,184,17,80,68,64,10,129,124],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,83,64,129,130],[87,32,83,105,101,114,112,105,110,115,107,105,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,24],[128,136],[80,-9,184,17,80,66,64,129,134],[87,35,66,97,114,110,115,108,101,121,32,102,101,114,110,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,53],[128,136],[87,34,68,114,97,103,111,110,32,99,117,114,118,101,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,88],[80,0,80,16777215,80,0,166],[141,137],[140,5],[144,14,1],[85,14,1,80,1,115],[81,25,81,29,27,97,33],[81,26,81,29,27,97,34],[81,27,81,29,27,97,35],[81,28,81,29,27,97,36],[80,1],[98,14,1,81,30],[82,14,1,69,129,151],[81,51,82,14,1,80,1,25,2,120,24,4,81,51,82,14,1,80,1,25,2,120,24,4,112,81,29,27,2,113],[81,69,82,14,1,80,1,25,2,120,24,4,81,69,82,14,1,80,1,25,2,120,24,4,112,81,29,27,2,113],[82,14,1,4,128,146],[81,32,81,29,27,97,37],[145,14,141,137],[140,6],[144,15,7],[85,15,1,80,7,115],[81,37,220],[80,4210752,221],[80,1],[98,15,1,81,31,80,1,25],[82,15,1,69,129,164],[81,33,81,34,81,33,25,81,31,82,15,1,32,24,81,35,224],[80,0,81,36,81,35,25,226],[82,15,1,4,128,159],[80,1],[98,15,2,81,31,80,1,25],[82,15,2,69,129,170],[81,33,81,37,80,2,27,24,81,35,81,36,81,35,25,81,31,82,15,2,32,24,224],[81,34,81,33,25,81,37,25,80,0,226],[82,15,2,4,128,165],[80,0,221],[81,33,81,35,224],[81,34,81,33,25,80,0,226],[80,0,81,36,81,35,25,226],[81,33,81,34,25,80,0,226],[80,0,81,35,81,36,25,226],[80,0],[98,15,1,81,31,80,1,25],[82,15,1,69,129,190],[80,0],[98,15,2,81,31,80,1,25],[82,15,2,69,129,189],[81,33,81,34,81,33,25,81,31,82,15,1,32,24,81,37,24,98,15,3],[81,35,81,36,81,35,25,81,31,82,15,2,32,24,81,37,24,98,15,4],[80,255,81,31,80,1,25,82,15,1,32,98,15,5],[80,255,81,31,80,1,25,82,15,2,32,98,15,6],[80,255,80,2,81,31,26,80,2,25,80,2,81,31,26,80,2,25,82,15,1,25,82,15,2,25,32,98,15,7],[82,15,3,82,15,4,82,15,5,80,65536,26,82,15,6,80,256,26,24,82,15,7,80,1,26,24,252],[82,15,2,4,128,180],[82,15,1,4,128,177],[145,15,141,137],[140,7],[144,16,5],[85,16,1,80,5,115,98,16,5,98,16,4,98,16,3,98,16,2,98,16,1],[82,16,2,81,38,81,39,82,16,1,80,1,25,2,120,24,4,112,32,82,16,3,81,38,81,45,82,16,1,80,1,25,2,120,24,4,112,32,24,81,51,82,16,1,80,1,25,2,120,24,4,112,24,99,16,4],[82,16,2,81,38,81,57,82,16,1,80,1,25,2,120,24,4,112,32,82,16,3,81,38,81,63,82,16,1,80,1,25,2,120,24,4,112,32,24,81,69,82,16,1,80,1,25,2,120,24,4,112,24,99,16,5],[145,16,141,137],[140,8],[144,17,5],[85,17,1,80,5,115,98,17,1],[163],[81,35],[98,17,3,81,36],[82,17,3,69,129,211],[81,33],[98,17,2,81,34],[82,17,2,69,129,210],[82,17,1,82,17,2,82,17,3,85,17,4,85,17,5,136,191],[82,17,4,82,17,5,82,17,2,82,17,3,210,211],[82,17,2,4,128,205],[82,17,3,4,128,202],[162],[145,17,141,137],[136,117],[136,138],[81,33,81,35,81,34,81,33,25,80,1,24,81,36,81,35,25,80,1,24,208],[81,34,81,33,25,80,1,24,81,36,81,35,25,80,1,24,209],[136,153],[80,1],[97,75,81,30],[81,75,69,129,223],[81,75,136,197],[81,75,4,128,219],[130]]")},function(n){n.exports=JSON.parse("[[80,18,1,1,80,0,113,80,6,2,113,4,80,70,115,80,88,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,25,97,24],[80,5,97,25],[84,32,97,31],[80,5,97,32],[84,39,97,38],[80,5,97,39],[84,46,97,45],[80,5,97,46],[84,53,97,52],[80,5,97,53],[84,60,97,59],[80,5,97,60],[128,210],[140,1],[80,0,97,71],[80,999,97,72],[80,0,97,73],[80,999,97,74],[80,2,97,75],[80,3,97,76],[80,0,97,77],[80,4210752,97,78],[80,250,97,79],[80,0,97,80],[80,100,97,81],[81,24,80,1,2,120,24,4,80,50,2,113],[81,45,80,1,2,120,24,4,80,0,2,113],[81,31,80,1,2,120,24,4,80,0,2,113],[81,52,80,1,2,120,24,4,80,50,2,113],[81,38,80,1,2,120,24,4,80,250,2,113],[81,59,80,1,2,120,24,4,80,0,2,113],[81,24,80,2,2,120,24,4,80,50,2,113],[81,45,80,2,2,120,24,4,80,0,2,113],[81,31,80,2,2,120,24,4,80,0,2,113],[81,52,80,2,2,120,24,4,80,50,2,113],[81,38,80,2,2,120,24,4,80,0,2,113],[81,59,80,2,2,120,24,4,80,500,2,113],[81,24,80,3,2,120,24,4,80,50,2,113],[81,45,80,3,2,120,24,4,80,0,2,113],[81,31,80,3,2,120,24,4,80,0,2,113],[81,52,80,3,2,120,24,4,80,50,2,113],[81,38,80,3,2,120,24,4,80,500,2,113],[81,59,80,3,2,120,24,4,80,500,2,113],[141,137],[140,2],[80,236,16,97,71],[80,263,97,72],[80,1,97,73],[80,1000,97,74],[80,2,97,75],[80,4,97,76],[80,3978097,97,77],[80,51543,97,78],[80,1,97,79],[80,1,97,80],[80,100,97,81],[81,24,80,1,2,120,24,4,80,0,2,113],[81,45,80,1,2,120,24,4,80,0,2,113],[81,31,80,1,2,120,24,4,80,0,2,113],[81,52,80,1,2,120,24,4,80,16,2,113],[81,38,80,1,2,120,24,4,80,0,2,113],[81,59,80,1,2,120,24,4,80,0,2,113],[81,24,80,2,2,120,24,4,80,85,2,113],[81,45,80,2,2,120,24,4,80,4,16,2,113],[81,31,80,2,2,120,24,4,80,4,2,113],[81,52,80,2,2,120,24,4,80,85,2,113],[81,38,80,2,2,120,24,4,80,0,2,113],[81,59,80,2,2,120,24,4,80,160,2,113],[81,24,80,3,2,120,24,4,80,20,2,113],[81,45,80,3,2,120,24,4,80,23,2,113],[81,31,80,3,2,120,24,4,80,26,16,2,113],[81,52,80,3,2,120,24,4,80,22,2,113],[81,38,80,3,2,120,24,4,80,0,2,113],[81,59,80,3,2,120,24,4,80,160,2,113],[81,24,80,4,2,120,24,4,80,15,16,2,113],[81,45,80,4,2,120,24,4,80,26,2,113],[81,31,80,4,2,120,24,4,80,28,2,113],[81,52,80,4,2,120,24,4,80,24,2,113],[81,38,80,4,2,120,24,4,80,0,2,113],[81,59,80,4,2,120,24,4,80,44,2,113],[141,137],[140,3],[80,0,97,71],[80,999,97,72],[80,0,97,73],[80,999,97,74],[80,4,97,75],[80,3,97,76],[80,0,97,77],[80,12632256,97,78],[80,1,97,79],[80,1,97,80],[80,1000,97,81],[81,24,80,1,2,120,24,4,80,0,2,113],[81,45,80,1,2,120,24,4,80,577,16,2,113],[81,31,80,1,2,120,24,4,80,577,2,113],[81,52,80,1,2,120,24,4,80,0,2,113],[81,38,80,1,2,120,24,4,80,95,2,113],[81,59,80,1,2,120,24,4,80,589,2,113],[81,24,80,2,2,120,24,4,80,0,2,113],[81,45,80,2,2,120,24,4,80,577,16,2,113],[81,31,80,2,2,120,24,4,80,577,2,113],[81,52,80,2,2,120,24,4,80,0,2,113],[81,38,80,2,2,120,24,4,80,441,2,113],[81,59,80,2,2,120,24,4,80,789,2,113],[81,24,80,3,2,120,24,4,80,0,2,113],[81,45,80,3,2,120,24,4,80,577,16,2,113],[81,31,80,3,2,120,24,4,80,577,2,113],[81,52,80,3,2,120,24,4,80,0,2,113],[81,38,80,3,2,120,24,4,80,95,2,113],[81,59,80,3,2,120,24,4,80,989,2,113],[141,137],[140,4],[80,-1,80,16777147,80,-1,166],[80,0,164],[87,46,73,84,69,82,65,84,69,68,32,70,85,78,67,84,73,79,78,32,83,89,83,84,69,77,83,32,68,69,77,79,78,83,84,82,65,84,79,82,32,80,82,79,71,82,65,77,190,191],[87,0,190,191],[87,59,83,101,108,101,99,116,32,66,97,114,110,115,108,101,121,32,102,101,114,110,44,32,83,105,101,114,112,105,110,115,107,105,44,32,111,114,32,68,114,97,103,111,110,32,99,117,114,118,101,63,32,40,66,47,83,47,68,41,32,190],[80,0,164],[80,-9,184,17,80,66,64,80,-9,184,17,80,83,64,10,80,-9,184,17,80,68,64,10,129,122],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,66,64,129,128],[87,35,66,97,114,110,115,108,101,121,32,102,101,114,110,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,47],[128,134],[80,-9,184,17,80,83,64,129,132],[87,32,83,105,101,114,112,105,110,115,107,105,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,16],[128,134],[87,34,68,114,97,103,111,110,32,99,117,114,118,101,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,84],[87,0,190,191],[87,48,83,116,97,114,116,32,119,105,116,104,32,115,105,110,103,108,101,32,80,105,120,101,108,32,111,114,32,101,110,116,105,114,101,32,67,97,110,118,97,115,63,32,40,80,47,67,41,32,190],[80,0,164],[80,-9,184,17,80,80,64,80,-9,184,17,80,67,64,10,129,137],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,80,64,97,82],[87,0,190,191],[87,53,85,115,101,32,85,110,105,102,111,114,109,32,111,114,32,68,105,102,102,101,114,101,110,116,32,99,111,108,111,117,114,115,32,102,111,114,32,109,97,112,112,105,110,103,115,63,32,40,85,47,68,41,32,190],[80,0,164],[80,-9,184,17,80,85,64,80,-9,184,17,80,68,64,10,129,143],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,85,64,97,83],[80,0,80,16777215,80,0,166],[141,137],[140,5],[144,14,1],[85,14,1,80,1,115],[81,71,81,75,27,97,84],[81,72,81,75,27,97,85],[81,73,81,75,27,97,86],[81,74,81,75,27,97,87],[80,1],[98,14,1,81,76],[82,14,1,69,129,161],[81,38,82,14,1,2,120,24,4,81,38,82,14,1,2,120,24,4,112,81,75,27,2,113],[81,59,82,14,1,2,120,24,4,81,59,82,14,1,2,120,24,4,112,81,75,27,2,113],[82,14,1,4,128,156],[145,14,141,137],[140,6],[144,15,5],[85,15,1,80,5,115,98,15,5,98,15,4,98,15,3,98,15,2,98,15,1],[82,15,2,81,81,81,24,82,15,1,2,120,24,4,112,32,82,15,3,81,81,81,31,82,15,1,2,120,24,4,112,32,24,81,38,82,15,1,2,120,24,4,112,24,99,15,4],[82,15,2,81,81,81,45,82,15,1,2,120,24,4,112,32,82,15,3,81,81,81,52,82,15,1,2,120,24,4,112,32,24,81,59,82,15,1,2,120,24,4,112,24,99,15,5],[145,15,141,137],[140,7],[144,16,5],[85,16,1,80,5,115,98,16,1],[163],[81,86],[98,16,3,81,87],[82,16,3,69,129,188],[81,84],[98,16,2,81,85],[82,16,2,69,129,187],[82,16,2,82,16,3,210,80,16777215,65,129,186],[82,16,1,82,16,2,82,16,3,85,16,4,85,16,5,136,162],[82,16,4,82,16,5,210,80,16777215,64,129,182],[84,68,1,112,4,2,113],[81,83,129,185],[82,16,4,82,16,5,81,78,211],[128,186],[82,16,4,82,16,5,82,16,1,222,211],[82,16,2,4,128,176],[82,16,3,4,128,173],[162],[145,16,141,137],[140,8],[144,17,2],[85,17,1,80,2,115],[163],[81,86],[98,17,2,81,87],[82,17,2,69,129,208],[81,84],[98,17,1,81,85],[82,17,1,69,129,207],[82,17,1,82,17,2,210,81,77,64,129,204],[82,17,1,82,17,2,80,16777215,211],[84,70,1,112,4,2,113],[128,206],[82,17,1,82,17,2,210,80,16777215,65,129,206],[82,17,1,82,17,2,81,77,211],[82,17,1,4,128,198],[82,17,2,4,128,195],[162],[145,17,141,137],[136,115],[136,148],[81,84,81,86,81,85,81,84,25,80,1,24,81,87,81,86,25,80,1,24,208],[81,85,81,84,25,80,1,24,81,87,81,86,25,80,1,24,209],[81,82,129,217],[81,79,81,80,81,77,211],[128,218],[81,77,248],[80,0,97,66],[80,0,177],[176,97,67],[84,66,1,112,4,2,113],[87,0,190,191],[87,10,73,116,101,114,97,116,105,111,110,32,81,66,49,54,87,1,58,54,190,191,147],[80,0,97,68],[80,1],[97,69,81,76],[81,69,69,129,230],[81,69,136,168],[81,69,4,128,226],[80,0,97,70],[136,190],[87,2,32,32,81,68,49,54,87,13,32,112,105,120,101,108,115,32,98,111,114,110,32,54,81,70,49,54,87,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,54,190,191,147],[87,8,32,32,40,116,111,111,107,32,176,81,67,25,80,1000,27,49,54,87,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,54,176,80,1000,27,49,54,87,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,54,190,191,147],[81,68,81,70,24,80,0,67,80,2000,80,1000,69,9,129,238],[87,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,80,2000,80,1000,80,1,52,54,87,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,54,190,147],[80,2000,178],[87,0,190,191],[81,68,81,70,24,80,0,64,129,220],[87,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,190,191],[80,1],[97,69,81,76],[81,69,69,129,245],[81,69,136,168],[81,69,4,128,241],[130]]")},function(n){n.exports=JSON.parse("[[80,18,1,1,80,0,113,80,6,2,113,4,80,64,115,80,82,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,25,97,24],[80,6,97,25,84,32,97,26],[80,6,97,32,84,39,97,27],[80,6,97,39,84,46,97,28],[80,6,97,46,84,53,97,29],[80,6,97,53,84,60,97,30],[80,6,97,60,84,67,97,31],[80,6,97,67],[84,43,97,42],[80,4,97,43],[84,49,97,48],[80,4,97,49],[84,55,97,54],[80,4,97,55],[84,61,97,60],[80,4,97,61],[84,67,97,66],[80,4,97,67],[84,73,97,72],[80,4,97,73],[128,218],[140,1],[80,0,97,25],[80,999,97,26],[80,0,97,27],[80,999,97,28],[80,2,97,29],[80,3,97,30],[80,0,97,31],[80,4210752,97,32],[80,250,97,35],[80,0,97,36],[80,100,97,41],[81,42,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,60,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,48,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,66,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,54,80,1,80,1,25,2,120,24,4,80,250,2,113],[81,72,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,60,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,48,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,66,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,54,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,72,80,2,80,1,25,2,120,24,4,80,500,2,113],[81,42,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,60,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,48,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,66,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,54,80,3,80,1,25,2,120,24,4,80,500,2,113],[81,72,80,3,80,1,25,2,120,24,4,80,500,2,113],[141,137],[140,2],[80,236,16,97,25],[80,263,97,26],[80,1,97,27],[80,1000,97,28],[80,2,97,29],[80,4,97,30],[80,3978097,97,31],[80,51543,97,32],[80,1,97,35],[80,1,97,36],[80,100,97,41],[81,42,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,60,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,48,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,66,80,1,80,1,25,2,120,24,4,80,16,2,113],[81,54,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,72,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,60,80,2,80,1,25,2,120,24,4,80,4,16,2,113],[81,48,80,2,80,1,25,2,120,24,4,80,4,2,113],[81,66,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,54,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,72,80,2,80,1,25,2,120,24,4,80,160,2,113],[81,42,80,3,80,1,25,2,120,24,4,80,20,2,113],[81,60,80,3,80,1,25,2,120,24,4,80,23,2,113],[81,48,80,3,80,1,25,2,120,24,4,80,26,16,2,113],[81,66,80,3,80,1,25,2,120,24,4,80,22,2,113],[81,54,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,72,80,3,80,1,25,2,120,24,4,80,160,2,113],[81,42,80,4,80,1,25,2,120,24,4,80,15,16,2,113],[81,60,80,4,80,1,25,2,120,24,4,80,26,2,113],[81,48,80,4,80,1,25,2,120,24,4,80,28,2,113],[81,66,80,4,80,1,25,2,120,24,4,80,24,2,113],[81,54,80,4,80,1,25,2,120,24,4,80,0,2,113],[81,72,80,4,80,1,25,2,120,24,4,80,44,2,113],[141,137],[140,3],[80,0,97,25],[80,999,97,26],[80,0,97,27],[80,999,97,28],[80,4,97,29],[80,3,97,30],[80,0,97,31],[80,12632256,97,32],[80,1,97,35],[80,1,97,36],[80,1000,97,41],[81,42,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,60,80,1,80,1,25,2,120,24,4,80,577,16,2,113],[81,48,80,1,80,1,25,2,120,24,4,80,577,2,113],[81,66,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,54,80,1,80,1,25,2,120,24,4,80,95,2,113],[81,72,80,1,80,1,25,2,120,24,4,80,589,2,113],[81,42,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,60,80,2,80,1,25,2,120,24,4,80,577,16,2,113],[81,48,80,2,80,1,25,2,120,24,4,80,577,2,113],[81,66,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,54,80,2,80,1,25,2,120,24,4,80,441,2,113],[81,72,80,2,80,1,25,2,120,24,4,80,789,2,113],[81,42,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,60,80,3,80,1,25,2,120,24,4,80,577,16,2,113],[81,48,80,3,80,1,25,2,120,24,4,80,577,2,113],[81,66,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,54,80,3,80,1,25,2,120,24,4,80,95,2,113],[81,72,80,3,80,1,25,2,120,24,4,80,989,2,113],[141,137],[140,4],[80,-1,80,16777147,80,-1,166],[80,0,164],[87,46,73,84,69,82,65,84,69,68,32,70,85,78,67,84,73,79,78,32,83,89,83,84,69,77,83,32,68,69,77,79,78,83,84,82,65,84,79,82,32,80,82,79,71,82,65,77,190,191],[87,0,190,191],[87,59,83,101,108,101,99,116,32,66,97,114,110,115,108,101,121,32,102,101,114,110,44,32,83,105,101,114,112,105,110,115,107,105,44,32,111,114,32,68,114,97,103,111,110,32,99,117,114,118,101,63,32,40,66,47,83,47,68,41,32,190],[80,0,164],[80,-9,184,17,80,66,64,80,-9,184,17,80,83,64,10,80,-9,184,17,80,68,64,10,129,130],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,66,64,129,136],[87,35,66,97,114,110,115,108,101,121,32,102,101,114,110,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,55],[128,142],[80,-9,184,17,80,83,64,129,140],[87,32,83,105,101,114,112,105,110,115,107,105,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,24],[128,142],[87,34,68,114,97,103,111,110,32,99,117,114,118,101,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,190,191],[136,92],[87,0,190,191],[87,48,83,116,97,114,116,32,119,105,116,104,32,115,105,110,103,108,101,32,80,105,120,101,108,32,111,114,32,101,110,116,105,114,101,32,67,97,110,118,97,115,63,32,40,80,47,67,41,32,190],[80,0,164],[80,-9,184,17,80,80,64,80,-9,184,17,80,67,64,10,129,145],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,80,64,97,34],[87,0,190,191],[87,53,85,115,101,32,85,110,105,102,111,114,109,32,111,114,32,68,105,102,102,101,114,101,110,116,32,99,111,108,111,117,114,115,32,102,111,114,32,109,97,112,112,105,110,103,115,63,32,40,85,47,68,41,32,190],[80,0,164],[80,-9,184,17,80,85,64,80,-9,184,17,80,68,64,10,129,151],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,85,64,97,33],[80,0,80,16777215,80,0,166],[141,137],[140,5],[144,14,1],[85,14,1,80,1,115],[81,25,81,29,27,97,37],[81,26,81,29,27,97,38],[81,27,81,29,27,97,39],[81,28,81,29,27,97,40],[80,1],[98,14,1,81,30],[82,14,1,69,129,169],[81,54,82,14,1,80,1,25,2,120,24,4,81,54,82,14,1,80,1,25,2,120,24,4,112,81,29,27,2,113],[81,72,82,14,1,80,1,25,2,120,24,4,81,72,82,14,1,80,1,25,2,120,24,4,112,81,29,27,2,113],[82,14,1,4,128,164],[145,14,141,137],[140,6],[144,15,5],[85,15,1,80,5,115,98,15,5,98,15,4,98,15,3,98,15,2,98,15,1],[82,15,2,81,41,81,42,82,15,1,80,1,25,2,120,24,4,112,32,82,15,3,81,41,81,48,82,15,1,80,1,25,2,120,24,4,112,32,24,81,54,82,15,1,80,1,25,2,120,24,4,112,24,99,15,4],[82,15,2,81,41,81,60,82,15,1,80,1,25,2,120,24,4,112,32,82,15,3,81,41,81,66,82,15,1,80,1,25,2,120,24,4,112,32,24,81,72,82,15,1,80,1,25,2,120,24,4,112,24,99,15,5],[145,15,141,137],[140,7],[144,16,5],[85,16,1,80,5,115,98,16,1],[163],[81,39],[98,16,3,81,40],[82,16,3,69,129,196],[81,37],[98,16,2,81,38],[82,16,2,69,129,195],[82,16,2,82,16,3,210,80,16777215,65,129,194],[82,16,1,82,16,2,82,16,3,85,16,4,85,16,5,136,170],[82,16,4,82,16,5,210,80,16777215,64,129,190],[84,81,1,112,4,2,113],[81,33,129,193],[82,16,4,82,16,5,81,32,211],[128,194],[82,16,4,82,16,5,82,16,1,222,211],[82,16,2,4,128,184],[82,16,3,4,128,181],[162],[145,16,141,137],[140,8],[144,17,2],[85,17,1,80,2,115],[163],[81,39],[98,17,2,81,40],[82,17,2,69,129,216],[81,37],[98,17,1,81,38],[82,17,1,69,129,215],[82,17,1,82,17,2,210,81,31,64,129,212],[82,17,1,82,17,2,80,16777215,211],[84,82,1,112,4,2,113],[128,214],[82,17,1,82,17,2,210,80,16777215,65,129,214],[82,17,1,82,17,2,81,31,211],[82,17,1,4,128,206],[82,17,2,4,128,203],[162],[145,17,141,137],[136,123],[136,156],[81,37,81,39,81,38,81,37,25,80,1,24,81,40,81,39,25,80,1,24,208],[81,38,81,37,25,80,1,24,81,40,81,39,25,80,1,24,209],[81,34,129,225],[81,35,81,36,81,31,211],[128,226],[81,31,248],[80,0,97,78],[80,0,177],[176,97,79],[84,78,1,112,4,2,113],[87,0,190,191],[87,10,73,116,101,114,97,116,105,111,110,32,81,78,49,54,80,58,48,54,190,191,147],[80,0,97,81],[80,1],[97,80,81,30],[81,80,69,129,238],[81,80,136,176],[81,80,4,128,234],[80,0,97,82],[136,198],[87,2,32,32,81,81,49,54,87,14,32,112,105,120,101,108,115,32,98,111,114,110,59,32,54,81,82,49,54,87,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,54,190,191,147],[87,8,32,32,40,116,111,111,107,32,176,81,79,25,80,1000,27,49,54,87,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,54,176,80,1000,27,49,54,87,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,54,190,191,147],[81,81,81,82,24,80,0,67,80,2000,80,1000,69,9,129,246],[87,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,80,2000,80,1000,80,1,52,54,87,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,54,190,147],[80,2000,178],[87,0,190,191],[81,81,81,82,24,80,0,64,129,228],[87,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,190,191],[80,1],[97,80,81,30],[81,80,69,129,253],[81,80,136,176],[81,80,4,128,249],[130]]")},function(n){n.exports=JSON.parse("[[80,14,1,1,80,0,113,80,6,2,113,4,80,43,115,80,57,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,21,97,20],[80,8,97,21],[84,31,97,30],[80,8,97,31],[128,73],[140,1],[80,-1,80,16777147,80,-1,166],[80,0,164],[87,30,77,65,78,68,69,76,66,82,79,84,32,83,69,84,32,68,73,83,80,76,65,89,32,80,82,79,71,82,65,77,190,191],[87,0,190,191],[87,65,83,101,108,101,99,116,32,87,104,111,108,101,32,115,101,116,44,32,111,114,32,90,111,111,109,32,111,110,32,109,105,110,105,32,34,108,97,107,101,34,32,97,116,32,45,48,46,49,53,57,50,44,45,49,46,48,51,51,48,32,40,87,47,90,41,190],[80,-9,184,17,80,87,64,80,-9,184,17,80,90,64,10,129,14],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,87,64,129,20],[80,500000,16,97,50],[80,0,97,51],[128,22],[80,159200,16,97,50],[80,1033000,16,97,51],[87,0,190,191],[81,51,80,0,64,129,26],[87,65,83,101,108,101,99,116,32,70,97,115,116,47,77,101,100,105,117,109,47,83,108,111,119,44,32,103,105,118,105,110,103,32,114,101,115,111,108,117,116,105,111,110,32,51,48,48,47,55,53,48,47,49,53,48,48,58,32,40,70,47,77,47,83,41,32,190],[128,27],[87,65,83,101,108,101,99,116,32,70,97,115,116,47,77,101,100,105,117,109,47,83,108,111,119,44,32,103,105,118,105,110,103,32,114,101,115,111,108,117,116,105,111,110,32,51,48,48,47,54,48,48,47,49,50,48,48,58,32,40,70,47,77,47,83,41,32,190],[80,-9,184,17,80,70,64,80,-9,184,17,80,77,64,10,80,-9,184,17,80,83,64,10,129,27],[80,-9,184,17,48,190,191,147],[81,51,80,0,64,129,39],[80,-9,184,17,80,70,64,129,33],[80,100,97,52],[128,37],[80,-9,184,17,80,77,64,129,36],[80,250,97,52],[128,37],[80,500,97,52],[81,52,80,3,26,97,53],[128,47],[80,-9,184,17,80,70,64,129,42],[80,10000,97,52],[128,46],[80,-9,184,17,80,77,64,129,45],[80,20000,97,52],[128,46],[80,40000,97,52],[81,52,80,100,27,80,3,26,97,53],[80,0,80,16777215,80,0,166],[141,137],[140,2],[81,20,80,0,2,120,24,4,80,9055202,2,113],[81,20,80,1,2,120,24,4,80,255,2,113],[81,20,80,2,2,120,24,4,80,65535,2,113],[81,20,80,3,2,120,24,4,80,65280,2,113],[81,20,80,4,2,120,24,4,80,16776960,2,113],[81,20,80,5,2,120,24,4,80,16755200,2,113],[81,20,80,6,2,120,24,4,80,16711680,2,113],[81,20,80,7,2,120,24,4,80,9055202,2,113],[80,0],[97,54,80,7],[81,54,69,129,63],[81,30,81,54,2,120,24,4,80,40,80,7,81,54,32,2,113],[81,54,4,128,59],[141,137],[140,3],[144,12,2],[85,12,1,80,2,115,98,12,2],[80,0,97,55],[84,55,1,112,4,2,113],[81,30,81,55,2,120,24,4,112,82,12,2,69,81,55,80,7,64,10,129,68],[81,55,80,1,25,97,56],[81,20,81,56,2,120,24,4,112,81,20,81,55,2,120,24,4,112,81,30,81,55,2,120,24,4,112,82,12,2,25,82,12,2,81,30,81,56,2,120,24,4,112,25,223,98,12,1],[81,12,97,13,145,12,141,137],[136,8],[136,49],[81,50,80,1000000,81,52,32,81,53,80,2,27,25,97,40],[81,51,80,1000000,81,52,32,81,53,80,2,27,25,97,41],[81,40,81,53,24,80,1,25,97,42],[81,41,81,53,24,80,1,25,97,43],[87,57,77,97,110,100,101,108,98,114,111,116,32,119,105,108,108,32,98,101,32,112,108,111,116,116,101,100,32,111,118,101,114,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,114,101,97,108,32,114,97,110,103,101,58,190,191],[81,40,81,52,80,4,52,87,7,32,60,32,120,32,60,32,54,81,42,81,52,80,4,52,54,87,4,32,32,32,32,54,190,147],[81,41,81,52,80,4,52,87,7,32,60,32,121,32,60,32,54,81,43,81,52,80,4,52,54,190,191,147],[87,16,83,99,97,108,105,110,103,32,102,97,99,116,111,114,58,32,81,52,49,54,87,22,32,32,32,32,73,109,97,103,101,32,114,101,115,111,108,117,116,105,111,110,58,32,54,81,53,49,54,87,1,120,54,81,53,49,54,190,191,147],[81,40,81,41,81,53,81,53,208],[81,53,81,53,209],[80,0,177],[81,40],[97,44,81,42],[81,44,69,129,110],[163],[81,41],[97,45,81,43],[81,45,69,129,108],[81,44,97,46],[81,45,97,47],[80,0,97,48],[81,46,81,47,80,1,34,80,2,81,52,26,66,81,48,80,40,68,9,129,102],[81,46,81,47,24,81,52,81,46,81,47,25,32,97,49],[80,2,81,46,26,81,52,81,47,32,81,45,24,97,47],[81,49,81,44,24,97,46],[84,48,1,112,4,2,113],[128,96],[81,48,80,40,67,129,105],[81,44,81,45,80,0,211],[128,107],[81,44,81,45,81,48,136,64],[82,13,1,211],[81,45,4,128,91],[162],[81,44,4,128,87],[87,12,84,105,109,101,32,116,97,107,101,110,58,32,176,80,1000,80,1,52,54,87,9,32,115,101,99,111,110,100,115,46,54,190,191,147],[130]]")},function(n){n.exports=JSON.parse("[[80,14,1,1,80,0,113,80,6,2,113,4,80,40,115,80,54,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,21,97,20],[80,6,97,21,84,28,97,22],[80,6,97,28,84,35,97,23],[80,6,97,35,84,42,97,24],[80,6,97,42,84,49,97,25],[80,6,97,49,84,56,97,26],[80,6,97,56,84,63,97,27],[80,6,97,63],[84,36,97,35],[80,8,97,36],[84,46,97,45],[80,8,97,46],[128,83],[140,1],[80,-1,80,16777147,80,-1,166],[80,0,164],[87,30,77,65,78,68,69,76,66,82,79,84,32,83,69,84,32,68,73,83,80,76,65,89,32,80,82,79,71,82,65,77,190,191],[87,0,190,191],[87,65,83,101,108,101,99,116,32,87,104,111,108,101,32,115,101,116,44,32,111,114,32,90,111,111,109,32,111,110,32,109,105,110,105,32,34,108,97,107,101,34,32,97,116,32,45,48,46,49,53,57,50,44,45,49,46,48,51,51,48,32,40,87,47,90,41,190],[80,-9,184,17,80,87,64,80,-9,184,17,80,90,64,10,129,22],[80,-9,184,17,48,190,191,147],[80,-9,184,17,80,87,64,129,28],[80,500000,16,97,21],[80,0,97,22],[128,30],[80,159200,16,97,21],[80,1033000,16,97,22],[87,0,190,191],[81,22,80,0,64,129,34],[87,65,83,101,108,101,99,116,32,70,97,115,116,47,77,101,100,105,117,109,47,83,108,111,119,44,32,103,105,118,105,110,103,32,114,101,115,111,108,117,116,105,111,110,32,51,48,48,47,55,53,48,47,49,53,48,48,58,32,40,70,47,77,47,83,41,32,190],[128,35],[87,65,83,101,108,101,99,116,32,70,97,115,116,47,77,101,100,105,117,109,47,83,108,111,119,44,32,103,105,118,105,110,103,32,114,101,115,111,108,117,116,105,111,110,32,51,48,48,47,54,48,48,47,49,50,48,48,58,32,40,70,47,77,47,83,41,32,190],[80,-9,184,17,80,70,64,80,-9,184,17,80,77,64,10,80,-9,184,17,80,83,64,10,129,35],[80,-9,184,17,48,190,191,147],[81,22,80,0,64,129,47],[80,-9,184,17,80,70,64,129,41],[80,100,97,33],[128,45],[80,-9,184,17,80,77,64,129,44],[80,250,97,33],[128,45],[80,500,97,33],[81,33,80,3,26,97,34],[128,55],[80,-9,184,17,80,70,64,129,50],[80,10000,97,33],[128,54],[80,-9,184,17,80,77,64,129,53],[80,20000,97,33],[128,54],[80,40000,97,33],[81,33,80,100,27,80,3,26,97,34],[80,0,80,16777215,80,0,166],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[81,35,80,0,2,120,24,4,80,9055202,2,113],[81,35,80,1,2,120,24,4,80,255,2,113],[81,35,80,2,2,120,24,4,80,65535,2,113],[81,35,80,3,2,120,24,4,80,65280,2,113],[81,35,80,4,2,120,24,4,80,16776960,2,113],[81,35,80,5,2,120,24,4,80,16755200,2,113],[81,35,80,6,2,120,24,4,80,16711680,2,113],[81,35,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,11,1,80,7],[82,11,1,69,129,73],[81,45,82,11,1,2,120,24,4,80,40,80,7,82,11,1,32,2,113],[82,11,1,4,128,69],[145,11,141,137],[140,3],[144,12,6],[85,12,1,80,6,115,98,12,2],[80,0,98,12,4],[85,12,4,1,112,4,2,113],[81,45,82,12,4,2,120,24,4,112,82,12,2,69,82,12,4,80,7,64,10,129,78],[82,12,4,80,1,25,98,12,3],[81,35,82,12,3,2,120,24,4,112,81,35,82,12,4,2,120,24,4,112,81,45,82,12,4,2,120,24,4,112,82,12,2,25,82,12,2,81,45,82,12,3,2,120,24,4,112,25,223,98,12,1],[81,12,97,13,145,12,141,137],[136,16],[136,57],[81,21,80,1000000,81,33,32,81,34,80,2,27,25,97,23],[81,22,80,1000000,81,33,32,81,34,80,2,27,25,97,25],[81,23,81,34,24,80,1,25,97,24],[81,25,81,34,24,80,1,25,97,26],[87,57,77,97,110,100,101,108,98,114,111,116,32,119,105,108,108,32,98,101,32,112,108,111,116,116,101,100,32,111,118,101,114,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,114,101,97,108,32,114,97,110,103,101,58,190,191],[81,23,81,33,80,4,52,87,7,32,60,32,120,32,60,32,54,81,24,81,33,80,4,52,54,87,4,32,32,32,32,54,190,147],[81,25,81,33,80,4,52,87,7,32,60,32,121,32,60,32,54,81,26,81,33,80,4,52,54,190,191,147],[87,16,83,99,97,108,105,110,103,32,102,97,99,116,111,114,58,32,81,33,49,54,87,22,32,32,32,32,73,109,97,103,101,32,114,101,115,111,108,117,116,105,111,110,58,32,54,81,34,49,54,80,120,48,54,81,34,49,54,190,191,147],[81,23,81,25,81,34,81,34,208],[81,34,81,34,209],[80,0,177],[81,23],[97,27,81,24],[81,27,69,129,120],[163],[81,25],[97,28,81,26],[81,28,69,129,118],[81,27,97,29],[81,28,97,30],[80,0,97,31],[81,29,81,30,80,1,34,80,2,81,33,26,66,81,31,80,40,68,9,129,112],[81,29,81,30,24,81,33,81,29,81,30,25,32,97,32],[80,2,81,29,26,81,33,81,30,32,81,28,24,97,30],[81,32,81,27,24,97,29],[84,31,1,112,4,2,113],[128,106],[81,31,80,40,67,129,115],[81,27,81,28,80,0,211],[128,117],[81,27,81,28,81,31,136,74],[82,13,1,211],[81,28,4,128,101],[162],[81,27,4,128,97],[87,12,84,105,109,101,32,116,97,107,101,110,58,32,176,80,1000,80,1,52,54,87,9,32,115,101,99,111,110,100,115,46,54,190,191,147],[130]]")},function(n){n.exports=JSON.parse("[[80,10,1,1,80,0,113,80,6,2,113,4,80,1509,115,80,1519,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,17,97,16],[80,6,97,17,84,24,97,18],[80,6,97,24,84,31,97,19],[80,6,97,31,84,38,97,20],[80,6,97,38,84,45,97,21],[80,6,97,45,84,52,97,22],[80,6,97,52,84,59,97,23],[80,6,97,59],[84,18,97,17],[80,15,97,18,84,35,97,19],[80,98,97,34,84,134,97,20],[80,98,97,133,84,233,97,21],[80,98,97,232,84,332,97,22],[80,98,97,331,84,431,97,23],[80,98,97,430,84,530,97,24],[80,98,97,529,84,629,97,25],[80,98,97,628,84,728,97,26],[80,98,97,727,84,827,97,27],[80,98,97,826,84,926,97,28],[80,98,97,925,84,1025,97,29],[80,98,97,1024,84,1124,97,30],[80,98,97,1123,84,1223,97,31],[80,98,97,1222,84,1322,97,32],[80,98,97,1321,84,1421,97,33],[80,98,97,1420],[80,-1,80,16777147,80,-1,166],[81,17,80,0,2,120,24,4,112,87,14,80,82,79,71,82,65,77,32,81,117,105,110,101,59,2,121],[81,17,80,1,2,120,24,4,112,87,38,86,65,82,32,108,105,110,101,115,58,32,97,114,114,97,121,91,48,46,46,49,52,93,32,111,102,32,115,116,114,105,110,103,91,57,55,93,59,2,121],[81,17,80,2,2,120,24,4,112,87,15,32,32,32,32,105,58,32,105,110,116,101,103,101,114,59,2,121],[81,17,80,3,2,120,24,4,112,87,5,66,69,71,73,78,2,121],[81,17,80,4,2,120,24,4,112,87,28,32,32,111,117,116,112,117,116,40,116,114,117,101,44,32,99,114,101,97,109,44,32,116,114,117,101,41,59,2,121],[81,17,80,5,2,120,24,4,112,87,20,32,32,102,111,114,32,105,32,58,61,32,48,32,116,111,32,52,32,100,111,2,121],[81,17,80,6,2,120,24,4,112,87,22,32,32,32,32,119,114,105,116,101,108,110,40,108,105,110,101,115,91,105,93,41,59,2,121],[81,17,80,7,2,120,24,4,112,87,21,32,32,102,111,114,32,105,32,58,61,32,48,32,116,111,32,49,52,32,100,111,2,121],[81,17,80,8,2,120,24,4,112,87,97,32,32,32,32,119,114,105,116,101,108,110,40,99,104,114,40,51,50,41,32,43,32,108,105,110,101,115,91,49,50,93,32,43,32,115,116,114,40,105,41,32,43,32,108,105,110,101,115,91,49,51,93,32,43,32,99,104,114,40,51,57,41,32,43,32,108,105,110,101,115,91,105,93,32,43,32,99,104,114,40,51,57,41,32,43,32,108,105,110,101,115,91,49,52,93,41,59,2,121],[81,17,80,9,2,120,24,4,112,87,21,32,32,102,111,114,32,105,32,58,61,32,53,32,116,111,32,49,49,32,100,111,2,121],[81,17,80,10,2,120,24,4,112,87,21,32,32,32,32,119,114,105,116,101,108,110,40,108,105,110,101,115,91,105,93,41,2,121],[81,17,80,11,2,120,24,4,112,87,4,69,78,68,46,2,121],[81,17,80,12,2,120,24,4,112,87,7,32,108,105,110,101,115,91,2,121],[81,17,80,13,2,120,24,4,112,87,5,93,32,58,61,32,2,121],[81,17,80,14,2,120,24,4,112,80,59,48,2,121,147],[80,0],[97,1519,80,4],[81,1519,69,129,49],[81,17,81,1519,2,120,24,4,112,190,191],[81,1519,4,128,45],[80,0],[97,1519,80,14],[81,1519,69,129,54],[80,32,48,81,17,80,12,2,120,24,4,112,54,81,1519,49,54,81,17,80,13,2,120,24,4,112,54,80,39,48,54,81,17,81,1519,2,120,24,4,112,54,80,39,48,54,81,17,80,14,2,120,24,4,112,54,190,191],[81,1519,4,147,128,50],[80,5],[97,1519,80,11],[81,1519,69,129,59],[81,17,81,1519,2,120,24,4,112,190,191],[81,1519,4,128,55],[130]]")},function(n){n.exports=JSON.parse("[[80,19,1,1,80,0,113,80,6,2,113,4,80,9375,115,80,9394,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,26,97,25],[80,6,97,26,84,33,97,27],[80,6,97,33,84,40,97,28],[80,6,97,40,84,47,97,29],[80,6,97,47,84,54,97,30],[80,6,97,54,84,61,97,31],[80,6,97,61,84,68,97,32],[80,6,97,68],[84,27,97,26],[80,4,97,27],[84,33,97,32],[80,4,97,33,84,39,97,34],[80,6,97,38,84,46,97,35],[80,6,97,45,84,53,97,36],[80,6,97,52,84,60,97,37],[80,6,97,59],[84,67,97,66],[80,4,97,67,84,73,97,68],[80,9,97,72,84,83,97,69],[80,9,97,82,84,93,97,70],[80,9,97,92,84,103,97,71],[80,9,97,102],[84,113,97,112],[80,256,97,113],[84,371,97,370],[80,256,97,371],[84,629,97,628],[80,256,97,629],[84,887,97,886],[80,256,97,887],[84,1145,97,1144],[80,256,97,1145],[84,1403,97,1402],[80,256,97,1403],[84,1661,97,1660],[80,256,97,1661,84,1919,97,1662],[80,4,97,1918,84,1924,97,1663],[80,4,97,1923,84,1929,97,1664],[80,4,97,1928,84,1934,97,1665],[80,4,97,1933,84,1939,97,1666],[80,4,97,1938,84,1944,97,1667],[80,4,97,1943,84,1949,97,1668],[80,4,97,1948,84,1954,97,1669],[80,4,97,1953,84,1959,97,1670],[80,4,97,1958,84,1964,97,1671],[80,4,97,1963,84,1969,97,1672],[80,4,97,1968,84,1974,97,1673],[80,4,97,1973,84,1979,97,1674],[80,4,97,1978,84,1984,97,1675],[80,4,97,1983,84,1989,97,1676],[80,4,97,1988,84,1994,97,1677],[80,4,97,1993,84,1999,97,1678],[80,4,97,1998,84,2004,97,1679],[80,4,97,2003,84,2009,97,1680],[80,4,97,2008,84,2014,97,1681],[80,4,97,2013,84,2019,97,1682],[80,4,97,2018,84,2024,97,1683],[80,4,97,2023,84,2029,97,1684],[80,4,97,2028,84,2034,97,1685],[80,4,97,2033,84,2039,97,1686],[80,4,97,2038,84,2044,97,1687],[80,4,97,2043,84,2049,97,1688],[80,4,97,2048,84,2054,97,1689],[80,4,97,2053,84,2059,97,1690],[80,4,97,2058,84,2064,97,1691],[80,4,97,2063,84,2069,97,1692],[80,4,97,2068,84,2074,97,1693],[80,4,97,2073,84,2079,97,1694],[80,4,97,2078,84,2084,97,1695],[80,4,97,2083,84,2089,97,1696],[80,4,97,2088,84,2094,97,1697],[80,4,97,2093,84,2099,97,1698],[80,4,97,2098,84,2104,97,1699],[80,4,97,2103,84,2109,97,1700],[80,4,97,2108,84,2114,97,1701],[80,4,97,2113,84,2119,97,1702],[80,4,97,2118,84,2124,97,1703],[80,4,97,2123,84,2129,97,1704],[80,4,97,2128,84,2134,97,1705],[80,4,97,2133,84,2139,97,1706],[80,4,97,2138,84,2144,97,1707],[80,4,97,2143,84,2149,97,1708],[80,4,97,2148,84,2154,97,1709],[80,4,97,2153,84,2159,97,1710],[80,4,97,2158,84,2164,97,1711],[80,4,97,2163,84,2169,97,1712],[80,4,97,2168,84,2174,97,1713],[80,4,97,2173,84,2179,97,1714],[80,4,97,2178,84,2184,97,1715],[80,4,97,2183,84,2189,97,1716],[80,4,97,2188,84,2194,97,1717],[80,4,97,2193,84,2199,97,1718],[80,4,97,2198,84,2204,97,1719],[80,4,97,2203,84,2209,97,1720],[80,4,97,2208,84,2214,97,1721],[80,4,97,2213,84,2219,97,1722],[80,4,97,2218,84,2224,97,1723],[80,4,97,2223,84,2229,97,1724],[80,4,97,2228,84,2234,97,1725],[80,4,97,2233,84,2239,97,1726],[80,4,97,2238,84,2244,97,1727],[80,4,97,2243,84,2249,97,1728],[80,4,97,2248,84,2254,97,1729],[80,4,97,2253,84,2259,97,1730],[80,4,97,2258,84,2264,97,1731],[80,4,97,2263,84,2269,97,1732],[80,4,97,2268,84,2274,97,1733],[80,4,97,2273,84,2279,97,1734],[80,4,97,2278,84,2284,97,1735],[80,4,97,2283,84,2289,97,1736],[80,4,97,2288,84,2294,97,1737],[80,4,97,2293,84,2299,97,1738],[80,4,97,2298,84,2304,97,1739],[80,4,97,2303,84,2309,97,1740],[80,4,97,2308,84,2314,97,1741],[80,4,97,2313,84,2319,97,1742],[80,4,97,2318,84,2324,97,1743],[80,4,97,2323,84,2329,97,1744],[80,4,97,2328,84,2334,97,1745],[80,4,97,2333,84,2339,97,1746],[80,4,97,2338,84,2344,97,1747],[80,4,97,2343,84,2349,97,1748],[80,4,97,2348,84,2354,97,1749],[80,4,97,2353,84,2359,97,1750],[80,4,97,2358,84,2364,97,1751],[80,4,97,2363,84,2369,97,1752],[80,4,97,2368,84,2374,97,1753],[80,4,97,2373,84,2379,97,1754],[80,4,97,2378,84,2384,97,1755],[80,4,97,2383,84,2389,97,1756],[80,4,97,2388,84,2394,97,1757],[80,4,97,2393,84,2399,97,1758],[80,4,97,2398,84,2404,97,1759],[80,4,97,2403,84,2409,97,1760],[80,4,97,2408,84,2414,97,1761],[80,4,97,2413,84,2419,97,1762],[80,4,97,2418,84,2424,97,1763],[80,4,97,2423,84,2429,97,1764],[80,4,97,2428,84,2434,97,1765],[80,4,97,2433,84,2439,97,1766],[80,4,97,2438,84,2444,97,1767],[80,4,97,2443,84,2449,97,1768],[80,4,97,2448,84,2454,97,1769],[80,4,97,2453,84,2459,97,1770],[80,4,97,2458,84,2464,97,1771],[80,4,97,2463,84,2469,97,1772],[80,4,97,2468,84,2474,97,1773],[80,4,97,2473,84,2479,97,1774],[80,4,97,2478,84,2484,97,1775],[80,4,97,2483,84,2489,97,1776],[80,4,97,2488,84,2494,97,1777],[80,4,97,2493,84,2499,97,1778],[80,4,97,2498,84,2504,97,1779],[80,4,97,2503,84,2509,97,1780],[80,4,97,2508,84,2514,97,1781],[80,4,97,2513,84,2519,97,1782],[80,4,97,2518,84,2524,97,1783],[80,4,97,2523,84,2529,97,1784],[80,4,97,2528,84,2534,97,1785],[80,4,97,2533,84,2539,97,1786],[80,4,97,2538,84,2544,97,1787],[80,4,97,2543,84,2549,97,1788],[80,4,97,2548,84,2554,97,1789],[80,4,97,2553,84,2559,97,1790],[80,4,97,2558,84,2564,97,1791],[80,4,97,2563,84,2569,97,1792],[80,4,97,2568,84,2574,97,1793],[80,4,97,2573,84,2579,97,1794],[80,4,97,2578,84,2584,97,1795],[80,4,97,2583,84,2589,97,1796],[80,4,97,2588,84,2594,97,1797],[80,4,97,2593,84,2599,97,1798],[80,4,97,2598,84,2604,97,1799],[80,4,97,2603,84,2609,97,1800],[80,4,97,2608,84,2614,97,1801],[80,4,97,2613,84,2619,97,1802],[80,4,97,2618,84,2624,97,1803],[80,4,97,2623,84,2629,97,1804],[80,4,97,2628,84,2634,97,1805],[80,4,97,2633,84,2639,97,1806],[80,4,97,2638,84,2644,97,1807],[80,4,97,2643,84,2649,97,1808],[80,4,97,2648,84,2654,97,1809],[80,4,97,2653,84,2659,97,1810],[80,4,97,2658,84,2664,97,1811],[80,4,97,2663,84,2669,97,1812],[80,4,97,2668,84,2674,97,1813],[80,4,97,2673,84,2679,97,1814],[80,4,97,2678,84,2684,97,1815],[80,4,97,2683,84,2689,97,1816],[80,4,97,2688,84,2694,97,1817],[80,4,97,2693,84,2699,97,1818],[80,4,97,2698,84,2704,97,1819],[80,4,97,2703,84,2709,97,1820],[80,4,97,2708,84,2714,97,1821],[80,4,97,2713,84,2719,97,1822],[80,4,97,2718,84,2724,97,1823],[80,4,97,2723,84,2729,97,1824],[80,4,97,2728,84,2734,97,1825],[80,4,97,2733,84,2739,97,1826],[80,4,97,2738,84,2744,97,1827],[80,4,97,2743,84,2749,97,1828],[80,4,97,2748,84,2754,97,1829],[80,4,97,2753,84,2759,97,1830],[80,4,97,2758,84,2764,97,1831],[80,4,97,2763,84,2769,97,1832],[80,4,97,2768,84,2774,97,1833],[80,4,97,2773,84,2779,97,1834],[80,4,97,2778,84,2784,97,1835],[80,4,97,2783,84,2789,97,1836],[80,4,97,2788,84,2794,97,1837],[80,4,97,2793,84,2799,97,1838],[80,4,97,2798,84,2804,97,1839],[80,4,97,2803,84,2809,97,1840],[80,4,97,2808,84,2814,97,1841],[80,4,97,2813,84,2819,97,1842],[80,4,97,2818,84,2824,97,1843],[80,4,97,2823,84,2829,97,1844],[80,4,97,2828,84,2834,97,1845],[80,4,97,2833,84,2839,97,1846],[80,4,97,2838,84,2844,97,1847],[80,4,97,2843,84,2849,97,1848],[80,4,97,2848,84,2854,97,1849],[80,4,97,2853,84,2859,97,1850],[80,4,97,2858,84,2864,97,1851],[80,4,97,2863,84,2869,97,1852],[80,4,97,2868,84,2874,97,1853],[80,4,97,2873,84,2879,97,1854],[80,4,97,2878,84,2884,97,1855],[80,4,97,2883,84,2889,97,1856],[80,4,97,2888,84,2894,97,1857],[80,4,97,2893,84,2899,97,1858],[80,4,97,2898,84,2904,97,1859],[80,4,97,2903,84,2909,97,1860],[80,4,97,2908,84,2914,97,1861],[80,4,97,2913,84,2919,97,1862],[80,4,97,2918,84,2924,97,1863],[80,4,97,2923,84,2929,97,1864],[80,4,97,2928,84,2934,97,1865],[80,4,97,2933,84,2939,97,1866],[80,4,97,2938,84,2944,97,1867],[80,4,97,2943,84,2949,97,1868],[80,4,97,2948,84,2954,97,1869],[80,4,97,2953,84,2959,97,1870],[80,4,97,2958,84,2964,97,1871],[80,4,97,2963,84,2969,97,1872],[80,4,97,2968,84,2974,97,1873],[80,4,97,2973,84,2979,97,1874],[80,4,97,2978,84,2984,97,1875],[80,4,97,2983,84,2989,97,1876],[80,4,97,2988,84,2994,97,1877],[80,4,97,2993,84,2999,97,1878],[80,4,97,2998,84,3004,97,1879],[80,4,97,3003,84,3009,97,1880],[80,4,97,3008,84,3014,97,1881],[80,4,97,3013,84,3019,97,1882],[80,4,97,3018,84,3024,97,1883],[80,4,97,3023,84,3029,97,1884],[80,4,97,3028,84,3034,97,1885],[80,4,97,3033,84,3039,97,1886],[80,4,97,3038,84,3044,97,1887],[80,4,97,3043,84,3049,97,1888],[80,4,97,3048,84,3054,97,1889],[80,4,97,3053,84,3059,97,1890],[80,4,97,3058,84,3064,97,1891],[80,4,97,3063,84,3069,97,1892],[80,4,97,3068,84,3074,97,1893],[80,4,97,3073,84,3079,97,1894],[80,4,97,3078,84,3084,97,1895],[80,4,97,3083,84,3089,97,1896],[80,4,97,3088,84,3094,97,1897],[80,4,97,3093,84,3099,97,1898],[80,4,97,3098,84,3104,97,1899],[80,4,97,3103,84,3109,97,1900],[80,4,97,3108,84,3114,97,1901],[80,4,97,3113,84,3119,97,1902],[80,4,97,3118,84,3124,97,1903],[80,4,97,3123,84,3129,97,1904],[80,4,97,3128,84,3134,97,1905],[80,4,97,3133,84,3139,97,1906],[80,4,97,3138,84,3144,97,1907],[80,4,97,3143,84,3149,97,1908],[80,4,97,3148,84,3154,97,1909],[80,4,97,3153,84,3159,97,1910],[80,4,97,3158,84,3164,97,1911],[80,4,97,3163,84,3169,97,1912],[80,4,97,3168,84,3174,97,1913],[80,4,97,3173,84,3179,97,1914],[80,4,97,3178,84,3184,97,1915],[80,4,97,3183,84,3189,97,1916],[80,4,97,3188,84,3194,97,1917],[80,4,97,3193],[84,3199,97,3198],[80,256,97,3199,84,3457,97,3200],[80,4,97,3456,84,3462,97,3201],[80,4,97,3461,84,3467,97,3202],[80,4,97,3466,84,3472,97,3203],[80,4,97,3471,84,3477,97,3204],[80,4,97,3476,84,3482,97,3205],[80,4,97,3481,84,3487,97,3206],[80,4,97,3486,84,3492,97,3207],[80,4,97,3491,84,3497,97,3208],[80,4,97,3496,84,3502,97,3209],[80,4,97,3501,84,3507,97,3210],[80,4,97,3506,84,3512,97,3211],[80,4,97,3511,84,3517,97,3212],[80,4,97,3516,84,3522,97,3213],[80,4,97,3521,84,3527,97,3214],[80,4,97,3526,84,3532,97,3215],[80,4,97,3531,84,3537,97,3216],[80,4,97,3536,84,3542,97,3217],[80,4,97,3541,84,3547,97,3218],[80,4,97,3546,84,3552,97,3219],[80,4,97,3551,84,3557,97,3220],[80,4,97,3556,84,3562,97,3221],[80,4,97,3561,84,3567,97,3222],[80,4,97,3566,84,3572,97,3223],[80,4,97,3571,84,3577,97,3224],[80,4,97,3576,84,3582,97,3225],[80,4,97,3581,84,3587,97,3226],[80,4,97,3586,84,3592,97,3227],[80,4,97,3591,84,3597,97,3228],[80,4,97,3596,84,3602,97,3229],[80,4,97,3601,84,3607,97,3230],[80,4,97,3606,84,3612,97,3231],[80,4,97,3611,84,3617,97,3232],[80,4,97,3616,84,3622,97,3233],[80,4,97,3621,84,3627,97,3234],[80,4,97,3626,84,3632,97,3235],[80,4,97,3631,84,3637,97,3236],[80,4,97,3636,84,3642,97,3237],[80,4,97,3641,84,3647,97,3238],[80,4,97,3646,84,3652,97,3239],[80,4,97,3651,84,3657,97,3240],[80,4,97,3656,84,3662,97,3241],[80,4,97,3661,84,3667,97,3242],[80,4,97,3666,84,3672,97,3243],[80,4,97,3671,84,3677,97,3244],[80,4,97,3676,84,3682,97,3245],[80,4,97,3681,84,3687,97,3246],[80,4,97,3686,84,3692,97,3247],[80,4,97,3691,84,3697,97,3248],[80,4,97,3696,84,3702,97,3249],[80,4,97,3701,84,3707,97,3250],[80,4,97,3706,84,3712,97,3251],[80,4,97,3711,84,3717,97,3252],[80,4,97,3716,84,3722,97,3253],[80,4,97,3721,84,3727,97,3254],[80,4,97,3726,84,3732,97,3255],[80,4,97,3731,84,3737,97,3256],[80,4,97,3736,84,3742,97,3257],[80,4,97,3741,84,3747,97,3258],[80,4,97,3746,84,3752,97,3259],[80,4,97,3751,84,3757,97,3260],[80,4,97,3756,84,3762,97,3261],[80,4,97,3761,84,3767,97,3262],[80,4,97,3766,84,3772,97,3263],[80,4,97,3771,84,3777,97,3264],[80,4,97,3776,84,3782,97,3265],[80,4,97,3781,84,3787,97,3266],[80,4,97,3786,84,3792,97,3267],[80,4,97,3791,84,3797,97,3268],[80,4,97,3796,84,3802,97,3269],[80,4,97,3801,84,3807,97,3270],[80,4,97,3806,84,3812,97,3271],[80,4,97,3811,84,3817,97,3272],[80,4,97,3816,84,3822,97,3273],[80,4,97,3821,84,3827,97,3274],[80,4,97,3826,84,3832,97,3275],[80,4,97,3831,84,3837,97,3276],[80,4,97,3836,84,3842,97,3277],[80,4,97,3841,84,3847,97,3278],[80,4,97,3846,84,3852,97,3279],[80,4,97,3851,84,3857,97,3280],[80,4,97,3856,84,3862,97,3281],[80,4,97,3861,84,3867,97,3282],[80,4,97,3866,84,3872,97,3283],[80,4,97,3871,84,3877,97,3284],[80,4,97,3876,84,3882,97,3285],[80,4,97,3881,84,3887,97,3286],[80,4,97,3886,84,3892,97,3287],[80,4,97,3891,84,3897,97,3288],[80,4,97,3896,84,3902,97,3289],[80,4,97,3901,84,3907,97,3290],[80,4,97,3906,84,3912,97,3291],[80,4,97,3911,84,3917,97,3292],[80,4,97,3916,84,3922,97,3293],[80,4,97,3921,84,3927,97,3294],[80,4,97,3926,84,3932,97,3295],[80,4,97,3931,84,3937,97,3296],[80,4,97,3936,84,3942,97,3297],[80,4,97,3941,84,3947,97,3298],[80,4,97,3946,84,3952,97,3299],[80,4,97,3951,84,3957,97,3300],[80,4,97,3956,84,3962,97,3301],[80,4,97,3961,84,3967,97,3302],[80,4,97,3966,84,3972,97,3303],[80,4,97,3971,84,3977,97,3304],[80,4,97,3976,84,3982,97,3305],[80,4,97,3981,84,3987,97,3306],[80,4,97,3986,84,3992,97,3307],[80,4,97,3991,84,3997,97,3308],[80,4,97,3996,84,4002,97,3309],[80,4,97,4001,84,4007,97,3310],[80,4,97,4006,84,4012,97,3311],[80,4,97,4011,84,4017,97,3312],[80,4,97,4016,84,4022,97,3313],[80,4,97,4021,84,4027,97,3314],[80,4,97,4026,84,4032,97,3315],[80,4,97,4031,84,4037,97,3316],[80,4,97,4036,84,4042,97,3317],[80,4,97,4041,84,4047,97,3318],[80,4,97,4046,84,4052,97,3319],[80,4,97,4051,84,4057,97,3320],[80,4,97,4056,84,4062,97,3321],[80,4,97,4061,84,4067,97,3322],[80,4,97,4066,84,4072,97,3323],[80,4,97,4071,84,4077,97,3324],[80,4,97,4076,84,4082,97,3325],[80,4,97,4081,84,4087,97,3326],[80,4,97,4086,84,4092,97,3327],[80,4,97,4091,84,4097,97,3328],[80,4,97,4096,84,4102,97,3329],[80,4,97,4101,84,4107,97,3330],[80,4,97,4106,84,4112,97,3331],[80,4,97,4111,84,4117,97,3332],[80,4,97,4116,84,4122,97,3333],[80,4,97,4121,84,4127,97,3334],[80,4,97,4126,84,4132,97,3335],[80,4,97,4131,84,4137,97,3336],[80,4,97,4136,84,4142,97,3337],[80,4,97,4141,84,4147,97,3338],[80,4,97,4146,84,4152,97,3339],[80,4,97,4151,84,4157,97,3340],[80,4,97,4156,84,4162,97,3341],[80,4,97,4161,84,4167,97,3342],[80,4,97,4166,84,4172,97,3343],[80,4,97,4171,84,4177,97,3344],[80,4,97,4176,84,4182,97,3345],[80,4,97,4181,84,4187,97,3346],[80,4,97,4186,84,4192,97,3347],[80,4,97,4191,84,4197,97,3348],[80,4,97,4196,84,4202,97,3349],[80,4,97,4201,84,4207,97,3350],[80,4,97,4206,84,4212,97,3351],[80,4,97,4211,84,4217,97,3352],[80,4,97,4216,84,4222,97,3353],[80,4,97,4221,84,4227,97,3354],[80,4,97,4226,84,4232,97,3355],[80,4,97,4231,84,4237,97,3356],[80,4,97,4236,84,4242,97,3357],[80,4,97,4241,84,4247,97,3358],[80,4,97,4246,84,4252,97,3359],[80,4,97,4251,84,4257,97,3360],[80,4,97,4256,84,4262,97,3361],[80,4,97,4261,84,4267,97,3362],[80,4,97,4266,84,4272,97,3363],[80,4,97,4271,84,4277,97,3364],[80,4,97,4276,84,4282,97,3365],[80,4,97,4281,84,4287,97,3366],[80,4,97,4286,84,4292,97,3367],[80,4,97,4291,84,4297,97,3368],[80,4,97,4296,84,4302,97,3369],[80,4,97,4301,84,4307,97,3370],[80,4,97,4306,84,4312,97,3371],[80,4,97,4311,84,4317,97,3372],[80,4,97,4316,84,4322,97,3373],[80,4,97,4321,84,4327,97,3374],[80,4,97,4326,84,4332,97,3375],[80,4,97,4331,84,4337,97,3376],[80,4,97,4336,84,4342,97,3377],[80,4,97,4341,84,4347,97,3378],[80,4,97,4346,84,4352,97,3379],[80,4,97,4351,84,4357,97,3380],[80,4,97,4356,84,4362,97,3381],[80,4,97,4361,84,4367,97,3382],[80,4,97,4366,84,4372,97,3383],[80,4,97,4371,84,4377,97,3384],[80,4,97,4376,84,4382,97,3385],[80,4,97,4381,84,4387,97,3386],[80,4,97,4386,84,4392,97,3387],[80,4,97,4391,84,4397,97,3388],[80,4,97,4396,84,4402,97,3389],[80,4,97,4401,84,4407,97,3390],[80,4,97,4406,84,4412,97,3391],[80,4,97,4411,84,4417,97,3392],[80,4,97,4416,84,4422,97,3393],[80,4,97,4421,84,4427,97,3394],[80,4,97,4426,84,4432,97,3395],[80,4,97,4431,84,4437,97,3396],[80,4,97,4436,84,4442,97,3397],[80,4,97,4441,84,4447,97,3398],[80,4,97,4446,84,4452,97,3399],[80,4,97,4451,84,4457,97,3400],[80,4,97,4456,84,4462,97,3401],[80,4,97,4461,84,4467,97,3402],[80,4,97,4466,84,4472,97,3403],[80,4,97,4471,84,4477,97,3404],[80,4,97,4476,84,4482,97,3405],[80,4,97,4481,84,4487,97,3406],[80,4,97,4486,84,4492,97,3407],[80,4,97,4491,84,4497,97,3408],[80,4,97,4496,84,4502,97,3409],[80,4,97,4501,84,4507,97,3410],[80,4,97,4506,84,4512,97,3411],[80,4,97,4511,84,4517,97,3412],[80,4,97,4516,84,4522,97,3413],[80,4,97,4521,84,4527,97,3414],[80,4,97,4526,84,4532,97,3415],[80,4,97,4531,84,4537,97,3416],[80,4,97,4536,84,4542,97,3417],[80,4,97,4541,84,4547,97,3418],[80,4,97,4546,84,4552,97,3419],[80,4,97,4551,84,4557,97,3420],[80,4,97,4556,84,4562,97,3421],[80,4,97,4561,84,4567,97,3422],[80,4,97,4566,84,4572,97,3423],[80,4,97,4571,84,4577,97,3424],[80,4,97,4576,84,4582,97,3425],[80,4,97,4581,84,4587,97,3426],[80,4,97,4586,84,4592,97,3427],[80,4,97,4591,84,4597,97,3428],[80,4,97,4596,84,4602,97,3429],[80,4,97,4601,84,4607,97,3430],[80,4,97,4606,84,4612,97,3431],[80,4,97,4611,84,4617,97,3432],[80,4,97,4616,84,4622,97,3433],[80,4,97,4621,84,4627,97,3434],[80,4,97,4626,84,4632,97,3435],[80,4,97,4631,84,4637,97,3436],[80,4,97,4636,84,4642,97,3437],[80,4,97,4641,84,4647,97,3438],[80,4,97,4646,84,4652,97,3439],[80,4,97,4651,84,4657,97,3440],[80,4,97,4656,84,4662,97,3441],[80,4,97,4661,84,4667,97,3442],[80,4,97,4666,84,4672,97,3443],[80,4,97,4671,84,4677,97,3444],[80,4,97,4676,84,4682,97,3445],[80,4,97,4681,84,4687,97,3446],[80,4,97,4686,84,4692,97,3447],[80,4,97,4691,84,4697,97,3448],[80,4,97,4696,84,4702,97,3449],[80,4,97,4701,84,4707,97,3450],[80,4,97,4706,84,4712,97,3451],[80,4,97,4711,84,4717,97,3452],[80,4,97,4716,84,4722,97,3453],[80,4,97,4721,84,4727,97,3454],[80,4,97,4726,84,4732,97,3455],[80,4,97,4731],[84,4737,97,4736],[80,256,97,4737,84,4995,97,4738],[80,4,97,4994,84,5000,97,4739],[80,4,97,4999,84,5005,97,4740],[80,4,97,5004,84,5010,97,4741],[80,4,97,5009,84,5015,97,4742],[80,4,97,5014,84,5020,97,4743],[80,4,97,5019,84,5025,97,4744],[80,4,97,5024,84,5030,97,4745],[80,4,97,5029,84,5035,97,4746],[80,4,97,5034,84,5040,97,4747],[80,4,97,5039,84,5045,97,4748],[80,4,97,5044,84,5050,97,4749],[80,4,97,5049,84,5055,97,4750],[80,4,97,5054,84,5060,97,4751],[80,4,97,5059,84,5065,97,4752],[80,4,97,5064,84,5070,97,4753],[80,4,97,5069,84,5075,97,4754],[80,4,97,5074,84,5080,97,4755],[80,4,97,5079,84,5085,97,4756],[80,4,97,5084,84,5090,97,4757],[80,4,97,5089,84,5095,97,4758],[80,4,97,5094,84,5100,97,4759],[80,4,97,5099,84,5105,97,4760],[80,4,97,5104,84,5110,97,4761],[80,4,97,5109,84,5115,97,4762],[80,4,97,5114,84,5120,97,4763],[80,4,97,5119,84,5125,97,4764],[80,4,97,5124,84,5130,97,4765],[80,4,97,5129,84,5135,97,4766],[80,4,97,5134,84,5140,97,4767],[80,4,97,5139,84,5145,97,4768],[80,4,97,5144,84,5150,97,4769],[80,4,97,5149,84,5155,97,4770],[80,4,97,5154,84,5160,97,4771],[80,4,97,5159,84,5165,97,4772],[80,4,97,5164,84,5170,97,4773],[80,4,97,5169,84,5175,97,4774],[80,4,97,5174,84,5180,97,4775],[80,4,97,5179,84,5185,97,4776],[80,4,97,5184,84,5190,97,4777],[80,4,97,5189,84,5195,97,4778],[80,4,97,5194,84,5200,97,4779],[80,4,97,5199,84,5205,97,4780],[80,4,97,5204,84,5210,97,4781],[80,4,97,5209,84,5215,97,4782],[80,4,97,5214,84,5220,97,4783],[80,4,97,5219,84,5225,97,4784],[80,4,97,5224,84,5230,97,4785],[80,4,97,5229,84,5235,97,4786],[80,4,97,5234,84,5240,97,4787],[80,4,97,5239,84,5245,97,4788],[80,4,97,5244,84,5250,97,4789],[80,4,97,5249,84,5255,97,4790],[80,4,97,5254,84,5260,97,4791],[80,4,97,5259,84,5265,97,4792],[80,4,97,5264,84,5270,97,4793],[80,4,97,5269,84,5275,97,4794],[80,4,97,5274,84,5280,97,4795],[80,4,97,5279,84,5285,97,4796],[80,4,97,5284,84,5290,97,4797],[80,4,97,5289,84,5295,97,4798],[80,4,97,5294,84,5300,97,4799],[80,4,97,5299,84,5305,97,4800],[80,4,97,5304,84,5310,97,4801],[80,4,97,5309,84,5315,97,4802],[80,4,97,5314,84,5320,97,4803],[80,4,97,5319,84,5325,97,4804],[80,4,97,5324,84,5330,97,4805],[80,4,97,5329,84,5335,97,4806],[80,4,97,5334,84,5340,97,4807],[80,4,97,5339,84,5345,97,4808],[80,4,97,5344,84,5350,97,4809],[80,4,97,5349,84,5355,97,4810],[80,4,97,5354,84,5360,97,4811],[80,4,97,5359,84,5365,97,4812],[80,4,97,5364,84,5370,97,4813],[80,4,97,5369,84,5375,97,4814],[80,4,97,5374,84,5380,97,4815],[80,4,97,5379,84,5385,97,4816],[80,4,97,5384,84,5390,97,4817],[80,4,97,5389,84,5395,97,4818],[80,4,97,5394,84,5400,97,4819],[80,4,97,5399,84,5405,97,4820],[80,4,97,5404,84,5410,97,4821],[80,4,97,5409,84,5415,97,4822],[80,4,97,5414,84,5420,97,4823],[80,4,97,5419,84,5425,97,4824],[80,4,97,5424,84,5430,97,4825],[80,4,97,5429,84,5435,97,4826],[80,4,97,5434,84,5440,97,4827],[80,4,97,5439,84,5445,97,4828],[80,4,97,5444,84,5450,97,4829],[80,4,97,5449,84,5455,97,4830],[80,4,97,5454,84,5460,97,4831],[80,4,97,5459,84,5465,97,4832],[80,4,97,5464,84,5470,97,4833],[80,4,97,5469,84,5475,97,4834],[80,4,97,5474,84,5480,97,4835],[80,4,97,5479,84,5485,97,4836],[80,4,97,5484,84,5490,97,4837],[80,4,97,5489,84,5495,97,4838],[80,4,97,5494,84,5500,97,4839],[80,4,97,5499,84,5505,97,4840],[80,4,97,5504,84,5510,97,4841],[80,4,97,5509,84,5515,97,4842],[80,4,97,5514,84,5520,97,4843],[80,4,97,5519,84,5525,97,4844],[80,4,97,5524,84,5530,97,4845],[80,4,97,5529,84,5535,97,4846],[80,4,97,5534,84,5540,97,4847],[80,4,97,5539,84,5545,97,4848],[80,4,97,5544,84,5550,97,4849],[80,4,97,5549,84,5555,97,4850],[80,4,97,5554,84,5560,97,4851],[80,4,97,5559,84,5565,97,4852],[80,4,97,5564,84,5570,97,4853],[80,4,97,5569,84,5575,97,4854],[80,4,97,5574,84,5580,97,4855],[80,4,97,5579,84,5585,97,4856],[80,4,97,5584,84,5590,97,4857],[80,4,97,5589,84,5595,97,4858],[80,4,97,5594,84,5600,97,4859],[80,4,97,5599,84,5605,97,4860],[80,4,97,5604,84,5610,97,4861],[80,4,97,5609,84,5615,97,4862],[80,4,97,5614,84,5620,97,4863],[80,4,97,5619,84,5625,97,4864],[80,4,97,5624,84,5630,97,4865],[80,4,97,5629,84,5635,97,4866],[80,4,97,5634,84,5640,97,4867],[80,4,97,5639,84,5645,97,4868],[80,4,97,5644,84,5650,97,4869],[80,4,97,5649,84,5655,97,4870],[80,4,97,5654,84,5660,97,4871],[80,4,97,5659,84,5665,97,4872],[80,4,97,5664,84,5670,97,4873],[80,4,97,5669,84,5675,97,4874],[80,4,97,5674,84,5680,97,4875],[80,4,97,5679,84,5685,97,4876],[80,4,97,5684,84,5690,97,4877],[80,4,97,5689,84,5695,97,4878],[80,4,97,5694,84,5700,97,4879],[80,4,97,5699,84,5705,97,4880],[80,4,97,5704,84,5710,97,4881],[80,4,97,5709,84,5715,97,4882],[80,4,97,5714,84,5720,97,4883],[80,4,97,5719,84,5725,97,4884],[80,4,97,5724,84,5730,97,4885],[80,4,97,5729,84,5735,97,4886],[80,4,97,5734,84,5740,97,4887],[80,4,97,5739,84,5745,97,4888],[80,4,97,5744,84,5750,97,4889],[80,4,97,5749,84,5755,97,4890],[80,4,97,5754,84,5760,97,4891],[80,4,97,5759,84,5765,97,4892],[80,4,97,5764,84,5770,97,4893],[80,4,97,5769,84,5775,97,4894],[80,4,97,5774,84,5780,97,4895],[80,4,97,5779,84,5785,97,4896],[80,4,97,5784,84,5790,97,4897],[80,4,97,5789,84,5795,97,4898],[80,4,97,5794,84,5800,97,4899],[80,4,97,5799,84,5805,97,4900],[80,4,97,5804,84,5810,97,4901],[80,4,97,5809,84,5815,97,4902],[80,4,97,5814,84,5820,97,4903],[80,4,97,5819,84,5825,97,4904],[80,4,97,5824,84,5830,97,4905],[80,4,97,5829,84,5835,97,4906],[80,4,97,5834,84,5840,97,4907],[80,4,97,5839,84,5845,97,4908],[80,4,97,5844,84,5850,97,4909],[80,4,97,5849,84,5855,97,4910],[80,4,97,5854,84,5860,97,4911],[80,4,97,5859,84,5865,97,4912],[80,4,97,5864,84,5870,97,4913],[80,4,97,5869,84,5875,97,4914],[80,4,97,5874,84,5880,97,4915],[80,4,97,5879,84,5885,97,4916],[80,4,97,5884,84,5890,97,4917],[80,4,97,5889,84,5895,97,4918],[80,4,97,5894,84,5900,97,4919],[80,4,97,5899,84,5905,97,4920],[80,4,97,5904,84,5910,97,4921],[80,4,97,5909,84,5915,97,4922],[80,4,97,5914,84,5920,97,4923],[80,4,97,5919,84,5925,97,4924],[80,4,97,5924,84,5930,97,4925],[80,4,97,5929,84,5935,97,4926],[80,4,97,5934,84,5940,97,4927],[80,4,97,5939,84,5945,97,4928],[80,4,97,5944,84,5950,97,4929],[80,4,97,5949,84,5955,97,4930],[80,4,97,5954,84,5960,97,4931],[80,4,97,5959,84,5965,97,4932],[80,4,97,5964,84,5970,97,4933],[80,4,97,5969,84,5975,97,4934],[80,4,97,5974,84,5980,97,4935],[80,4,97,5979,84,5985,97,4936],[80,4,97,5984,84,5990,97,4937],[80,4,97,5989,84,5995,97,4938],[80,4,97,5994,84,6000,97,4939],[80,4,97,5999,84,6005,97,4940],[80,4,97,6004,84,6010,97,4941],[80,4,97,6009,84,6015,97,4942],[80,4,97,6014,84,6020,97,4943],[80,4,97,6019,84,6025,97,4944],[80,4,97,6024,84,6030,97,4945],[80,4,97,6029,84,6035,97,4946],[80,4,97,6034,84,6040,97,4947],[80,4,97,6039,84,6045,97,4948],[80,4,97,6044,84,6050,97,4949],[80,4,97,6049,84,6055,97,4950],[80,4,97,6054,84,6060,97,4951],[80,4,97,6059,84,6065,97,4952],[80,4,97,6064,84,6070,97,4953],[80,4,97,6069,84,6075,97,4954],[80,4,97,6074,84,6080,97,4955],[80,4,97,6079,84,6085,97,4956],[80,4,97,6084,84,6090,97,4957],[80,4,97,6089,84,6095,97,4958],[80,4,97,6094,84,6100,97,4959],[80,4,97,6099,84,6105,97,4960],[80,4,97,6104,84,6110,97,4961],[80,4,97,6109,84,6115,97,4962],[80,4,97,6114,84,6120,97,4963],[80,4,97,6119,84,6125,97,4964],[80,4,97,6124,84,6130,97,4965],[80,4,97,6129,84,6135,97,4966],[80,4,97,6134,84,6140,97,4967],[80,4,97,6139,84,6145,97,4968],[80,4,97,6144,84,6150,97,4969],[80,4,97,6149,84,6155,97,4970],[80,4,97,6154,84,6160,97,4971],[80,4,97,6159,84,6165,97,4972],[80,4,97,6164,84,6170,97,4973],[80,4,97,6169,84,6175,97,4974],[80,4,97,6174,84,6180,97,4975],[80,4,97,6179,84,6185,97,4976],[80,4,97,6184,84,6190,97,4977],[80,4,97,6189,84,6195,97,4978],[80,4,97,6194,84,6200,97,4979],[80,4,97,6199,84,6205,97,4980],[80,4,97,6204,84,6210,97,4981],[80,4,97,6209,84,6215,97,4982],[80,4,97,6214,84,6220,97,4983],[80,4,97,6219,84,6225,97,4984],[80,4,97,6224,84,6230,97,4985],[80,4,97,6229,84,6235,97,4986],[80,4,97,6234,84,6240,97,4987],[80,4,97,6239,84,6245,97,4988],[80,4,97,6244,84,6250,97,4989],[80,4,97,6249,84,6255,97,4990],[80,4,97,6254,84,6260,97,4991],[80,4,97,6259,84,6265,97,4992],[80,4,97,6264,84,6270,97,4993],[80,4,97,6269],[84,6275,97,6274],[80,256,97,6275,84,6533,97,6276],[80,6,97,6532,84,6540,97,6277],[80,6,97,6539,84,6547,97,6278],[80,6,97,6546,84,6554,97,6279],[80,6,97,6553,84,6561,97,6280],[80,6,97,6560,84,6568,97,6281],[80,6,97,6567,84,6575,97,6282],[80,6,97,6574,84,6582,97,6283],[80,6,97,6581,84,6589,97,6284],[80,6,97,6588,84,6596,97,6285],[80,6,97,6595,84,6603,97,6286],[80,6,97,6602,84,6610,97,6287],[80,6,97,6609,84,6617,97,6288],[80,6,97,6616,84,6624,97,6289],[80,6,97,6623,84,6631,97,6290],[80,6,97,6630,84,6638,97,6291],[80,6,97,6637,84,6645,97,6292],[80,6,97,6644,84,6652,97,6293],[80,6,97,6651,84,6659,97,6294],[80,6,97,6658,84,6666,97,6295],[80,6,97,6665,84,6673,97,6296],[80,6,97,6672,84,6680,97,6297],[80,6,97,6679,84,6687,97,6298],[80,6,97,6686,84,6694,97,6299],[80,6,97,6693,84,6701,97,6300],[80,6,97,6700,84,6708,97,6301],[80,6,97,6707,84,6715,97,6302],[80,6,97,6714,84,6722,97,6303],[80,6,97,6721,84,6729,97,6304],[80,6,97,6728,84,6736,97,6305],[80,6,97,6735,84,6743,97,6306],[80,6,97,6742,84,6750,97,6307],[80,6,97,6749,84,6757,97,6308],[80,6,97,6756,84,6764,97,6309],[80,6,97,6763,84,6771,97,6310],[80,6,97,6770,84,6778,97,6311],[80,6,97,6777,84,6785,97,6312],[80,6,97,6784,84,6792,97,6313],[80,6,97,6791,84,6799,97,6314],[80,6,97,6798,84,6806,97,6315],[80,6,97,6805,84,6813,97,6316],[80,6,97,6812,84,6820,97,6317],[80,6,97,6819,84,6827,97,6318],[80,6,97,6826,84,6834,97,6319],[80,6,97,6833,84,6841,97,6320],[80,6,97,6840,84,6848,97,6321],[80,6,97,6847,84,6855,97,6322],[80,6,97,6854,84,6862,97,6323],[80,6,97,6861,84,6869,97,6324],[80,6,97,6868,84,6876,97,6325],[80,6,97,6875,84,6883,97,6326],[80,6,97,6882,84,6890,97,6327],[80,6,97,6889,84,6897,97,6328],[80,6,97,6896,84,6904,97,6329],[80,6,97,6903,84,6911,97,6330],[80,6,97,6910,84,6918,97,6331],[80,6,97,6917,84,6925,97,6332],[80,6,97,6924,84,6932,97,6333],[80,6,97,6931,84,6939,97,6334],[80,6,97,6938,84,6946,97,6335],[80,6,97,6945,84,6953,97,6336],[80,6,97,6952,84,6960,97,6337],[80,6,97,6959,84,6967,97,6338],[80,6,97,6966,84,6974,97,6339],[80,6,97,6973,84,6981,97,6340],[80,6,97,6980,84,6988,97,6341],[80,6,97,6987,84,6995,97,6342],[80,6,97,6994,84,7002,97,6343],[80,6,97,7001,84,7009,97,6344],[80,6,97,7008,84,7016,97,6345],[80,6,97,7015,84,7023,97,6346],[80,6,97,7022,84,7030,97,6347],[80,6,97,7029,84,7037,97,6348],[80,6,97,7036,84,7044,97,6349],[80,6,97,7043,84,7051,97,6350],[80,6,97,7050,84,7058,97,6351],[80,6,97,7057,84,7065,97,6352],[80,6,97,7064,84,7072,97,6353],[80,6,97,7071,84,7079,97,6354],[80,6,97,7078,84,7086,97,6355],[80,6,97,7085,84,7093,97,6356],[80,6,97,7092,84,7100,97,6357],[80,6,97,7099,84,7107,97,6358],[80,6,97,7106,84,7114,97,6359],[80,6,97,7113,84,7121,97,6360],[80,6,97,7120,84,7128,97,6361],[80,6,97,7127,84,7135,97,6362],[80,6,97,7134,84,7142,97,6363],[80,6,97,7141,84,7149,97,6364],[80,6,97,7148,84,7156,97,6365],[80,6,97,7155,84,7163,97,6366],[80,6,97,7162,84,7170,97,6367],[80,6,97,7169,84,7177,97,6368],[80,6,97,7176,84,7184,97,6369],[80,6,97,7183,84,7191,97,6370],[80,6,97,7190,84,7198,97,6371],[80,6,97,7197,84,7205,97,6372],[80,6,97,7204,84,7212,97,6373],[80,6,97,7211,84,7219,97,6374],[80,6,97,7218,84,7226,97,6375],[80,6,97,7225,84,7233,97,6376],[80,6,97,7232,84,7240,97,6377],[80,6,97,7239,84,7247,97,6378],[80,6,97,7246,84,7254,97,6379],[80,6,97,7253,84,7261,97,6380],[80,6,97,7260,84,7268,97,6381],[80,6,97,7267,84,7275,97,6382],[80,6,97,7274,84,7282,97,6383],[80,6,97,7281,84,7289,97,6384],[80,6,97,7288,84,7296,97,6385],[80,6,97,7295,84,7303,97,6386],[80,6,97,7302,84,7310,97,6387],[80,6,97,7309,84,7317,97,6388],[80,6,97,7316,84,7324,97,6389],[80,6,97,7323,84,7331,97,6390],[80,6,97,7330,84,7338,97,6391],[80,6,97,7337,84,7345,97,6392],[80,6,97,7344,84,7352,97,6393],[80,6,97,7351,84,7359,97,6394],[80,6,97,7358,84,7366,97,6395],[80,6,97,7365,84,7373,97,6396],[80,6,97,7372,84,7380,97,6397],[80,6,97,7379,84,7387,97,6398],[80,6,97,7386,84,7394,97,6399],[80,6,97,7393,84,7401,97,6400],[80,6,97,7400,84,7408,97,6401],[80,6,97,7407,84,7415,97,6402],[80,6,97,7414,84,7422,97,6403],[80,6,97,7421,84,7429,97,6404],[80,6,97,7428,84,7436,97,6405],[80,6,97,7435,84,7443,97,6406],[80,6,97,7442,84,7450,97,6407],[80,6,97,7449,84,7457,97,6408],[80,6,97,7456,84,7464,97,6409],[80,6,97,7463,84,7471,97,6410],[80,6,97,7470,84,7478,97,6411],[80,6,97,7477,84,7485,97,6412],[80,6,97,7484,84,7492,97,6413],[80,6,97,7491,84,7499,97,6414],[80,6,97,7498,84,7506,97,6415],[80,6,97,7505,84,7513,97,6416],[80,6,97,7512,84,7520,97,6417],[80,6,97,7519,84,7527,97,6418],[80,6,97,7526,84,7534,97,6419],[80,6,97,7533,84,7541,97,6420],[80,6,97,7540,84,7548,97,6421],[80,6,97,7547,84,7555,97,6422],[80,6,97,7554,84,7562,97,6423],[80,6,97,7561,84,7569,97,6424],[80,6,97,7568,84,7576,97,6425],[80,6,97,7575,84,7583,97,6426],[80,6,97,7582,84,7590,97,6427],[80,6,97,7589,84,7597,97,6428],[80,6,97,7596,84,7604,97,6429],[80,6,97,7603,84,7611,97,6430],[80,6,97,7610,84,7618,97,6431],[80,6,97,7617,84,7625,97,6432],[80,6,97,7624,84,7632,97,6433],[80,6,97,7631,84,7639,97,6434],[80,6,97,7638,84,7646,97,6435],[80,6,97,7645,84,7653,97,6436],[80,6,97,7652,84,7660,97,6437],[80,6,97,7659,84,7667,97,6438],[80,6,97,7666,84,7674,97,6439],[80,6,97,7673,84,7681,97,6440],[80,6,97,7680,84,7688,97,6441],[80,6,97,7687,84,7695,97,6442],[80,6,97,7694,84,7702,97,6443],[80,6,97,7701,84,7709,97,6444],[80,6,97,7708,84,7716,97,6445],[80,6,97,7715,84,7723,97,6446],[80,6,97,7722,84,7730,97,6447],[80,6,97,7729,84,7737,97,6448],[80,6,97,7736,84,7744,97,6449],[80,6,97,7743,84,7751,97,6450],[80,6,97,7750,84,7758,97,6451],[80,6,97,7757,84,7765,97,6452],[80,6,97,7764,84,7772,97,6453],[80,6,97,7771,84,7779,97,6454],[80,6,97,7778,84,7786,97,6455],[80,6,97,7785,84,7793,97,6456],[80,6,97,7792,84,7800,97,6457],[80,6,97,7799,84,7807,97,6458],[80,6,97,7806,84,7814,97,6459],[80,6,97,7813,84,7821,97,6460],[80,6,97,7820,84,7828,97,6461],[80,6,97,7827,84,7835,97,6462],[80,6,97,7834,84,7842,97,6463],[80,6,97,7841,84,7849,97,6464],[80,6,97,7848,84,7856,97,6465],[80,6,97,7855,84,7863,97,6466],[80,6,97,7862,84,7870,97,6467],[80,6,97,7869,84,7877,97,6468],[80,6,97,7876,84,7884,97,6469],[80,6,97,7883,84,7891,97,6470],[80,6,97,7890,84,7898,97,6471],[80,6,97,7897,84,7905,97,6472],[80,6,97,7904,84,7912,97,6473],[80,6,97,7911,84,7919,97,6474],[80,6,97,7918,84,7926,97,6475],[80,6,97,7925,84,7933,97,6476],[80,6,97,7932,84,7940,97,6477],[80,6,97,7939,84,7947,97,6478],[80,6,97,7946,84,7954,97,6479],[80,6,97,7953,84,7961,97,6480],[80,6,97,7960,84,7968,97,6481],[80,6,97,7967,84,7975,97,6482],[80,6,97,7974,84,7982,97,6483],[80,6,97,7981,84,7989,97,6484],[80,6,97,7988,84,7996,97,6485],[80,6,97,7995,84,8003,97,6486],[80,6,97,8002,84,8010,97,6487],[80,6,97,8009,84,8017,97,6488],[80,6,97,8016,84,8024,97,6489],[80,6,97,8023,84,8031,97,6490],[80,6,97,8030,84,8038,97,6491],[80,6,97,8037,84,8045,97,6492],[80,6,97,8044,84,8052,97,6493],[80,6,97,8051,84,8059,97,6494],[80,6,97,8058,84,8066,97,6495],[80,6,97,8065,84,8073,97,6496],[80,6,97,8072,84,8080,97,6497],[80,6,97,8079,84,8087,97,6498],[80,6,97,8086,84,8094,97,6499],[80,6,97,8093,84,8101,97,6500],[80,6,97,8100,84,8108,97,6501],[80,6,97,8107,84,8115,97,6502],[80,6,97,8114,84,8122,97,6503],[80,6,97,8121,84,8129,97,6504],[80,6,97,8128,84,8136,97,6505],[80,6,97,8135,84,8143,97,6506],[80,6,97,8142,84,8150,97,6507],[80,6,97,8149,84,8157,97,6508],[80,6,97,8156,84,8164,97,6509],[80,6,97,8163,84,8171,97,6510],[80,6,97,8170,84,8178,97,6511],[80,6,97,8177,84,8185,97,6512],[80,6,97,8184,84,8192,97,6513],[80,6,97,8191,84,8199,97,6514],[80,6,97,8198,84,8206,97,6515],[80,6,97,8205,84,8213,97,6516],[80,6,97,8212,84,8220,97,6517],[80,6,97,8219,84,8227,97,6518],[80,6,97,8226,84,8234,97,6519],[80,6,97,8233,84,8241,97,6520],[80,6,97,8240,84,8248,97,6521],[80,6,97,8247,84,8255,97,6522],[80,6,97,8254,84,8262,97,6523],[80,6,97,8261,84,8269,97,6524],[80,6,97,8268,84,8276,97,6525],[80,6,97,8275,84,8283,97,6526],[80,6,97,8282,84,8290,97,6527],[80,6,97,8289,84,8297,97,6528],[80,6,97,8296,84,8304,97,6529],[80,6,97,8303,84,8311,97,6530],[80,6,97,8310,84,8318,97,6531],[80,6,97,8317],[84,8325,97,8324],[80,9,97,8325],[84,8336,97,8335],[80,9,97,8336],[84,8347,97,8346],[80,9,97,8347],[84,8358,97,8357],[80,256,97,8358],[84,8616,97,8615],[80,256,97,8616],[84,8874,97,8873],[80,256,97,8874],[84,9132,97,9131],[80,256,97,9132],[128,1219],[140,1],[144,10,1],[85,10,1,80,1,115],[80,0],[98,10,1,80,3],[82,10,1,69,129,1092],[81,26,82,10,1,2,120,24,4,87,4,65,69,73,79,82,10,1,80,1,24,5,2,120,24,4,112,2,113],[82,10,1,4,128,1088],[81,32,80,0,2,120,24,4,112,87,4,65,108,108,32,2,121],[81,32,80,1,2,120,24,4,112,87,3,78,111,32,2,121],[81,32,80,2,2,120,24,4,112,87,5,83,111,109,101,32,2,121],[81,32,80,3,2,120,24,4,112,87,5,83,111,109,101,32,2,121],[81,66,80,0,2,120,24,4,112,87,6,115,32,97,114,101,32,2,121],[81,66,80,1,2,120,24,4,112,87,4,32,105,115,32,2,121],[81,66,80,2,2,120,24,4,112,87,4,32,105,115,32,2,121],[81,66,80,3,2,120,24,4,112,87,8,32,105,115,32,110,111,116,32,2,121],[145,10,141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,0],[98,11,1,80,255],[82,11,1,69,129,1126],[82,11,1,80,64,9,80,0,64,129,1111],[81,112,82,11,1,2,120,24,4,80,77,2,113],[81,370,82,11,1,2,120,24,4,80,80,2,113],[128,1113],[81,112,82,11,1,2,120,24,4,80,80,2,113],[81,370,82,11,1,2,120,24,4,80,77,2,113],[82,11,1,80,128,9,80,0,64,129,1117],[81,628,82,11,1,2,120,24,4,80,83,2,113],[81,886,82,11,1,2,120,24,4,80,77,2,113],[128,1119],[81,628,82,11,1,2,120,24,4,80,77,2,113],[81,886,82,11,1,2,120,24,4,80,83,2,113],[81,1144,82,11,1,2,120,24,4,80,83,2,113],[81,1402,82,11,1,2,120,24,4,80,80,2,113],[81,1660,82,11,1,2,120,24,4,112,81,26,82,11,1,80,4,29,2,120,24,4,112,48,81,112,82,11,1,2,120,24,4,112,48,54,81,370,82,11,1,2,120,24,4,112,48,54,2,121,147],[81,3198,82,11,1,2,120,24,4,112,81,26,82,11,1,80,4,27,80,4,29,2,120,24,4,112,48,81,628,82,11,1,2,120,24,4,112,48,54,81,886,82,11,1,2,120,24,4,112,48,54,2,121,147],[81,4736,82,11,1,2,120,24,4,112,81,26,82,11,1,80,16,27,80,4,29,2,120,24,4,112,48,81,1144,82,11,1,2,120,24,4,112,48,54,81,1402,82,11,1,2,120,24,4,112,48,54,2,121,147],[81,6274,82,11,1,2,120,24,4,112,82,11,1,80,64,27,80,1,24,49,80,32,48,54,81,26,82,11,1,80,4,29,2,120,24,4,112,48,54,81,26,82,11,1,80,4,27,80,4,29,2,120,24,4,112,48,54,81,26,82,11,1,80,16,27,80,4,29,2,120,24,4,112,48,54,2,121,147],[82,11,1,4,128,1105],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,2],[80,0,98,12,1],[80,1,98,12,3],[82,12,3,82,12,2,9,80,0,67,129,1137],[81,8324,82,12,1,2,120,24,4,82,12,3,80,170,9,80,0,67,2,113],[81,8335,82,12,1,2,120,24,4,82,12,3,80,204,9,80,0,67,2,113],[81,8346,82,12,1,2,120,24,4,82,12,3,80,240,9,80,0,67,2,113],[82,12,1,80,1,24,98,12,1],[82,12,3,80,2,26,98,12,3],[82,12,3,80,128,67,129,1132],[81,12,97,18,145,12,141,137],[140,4],[144,13,10],[85,13,1,80,10,115,98,13,1],[85,13,5,98,13,3,80,6,98,13,4],[82,13,1,49,87,14,32,45,32,112,111,112,117,108,97,116,105,111,110,32,54,81,9394,49,54,87,2,58,32,54,190,147],[80,0],[98,13,2,81,9394,80,1,25],[82,13,2,69,129,1158],[81,8324,82,13,2,2,120,24,4,112,129,1151],[82,13,3,80,77,48,2,121,147],[128,1152],[82,13,3,87,0,2,121],[81,8335,82,13,2,2,120,24,4,112,129,1154],[82,13,3,82,13,3,80,80,48,54,2,121,147],[81,8346,82,13,2,2,120,24,4,112,129,1156],[82,13,3,82,13,3,80,83,48,54,2,121,147],[87,2,32,91,82,13,3,54,87,2,93,32,54,190,147],[82,13,2,4,128,1146],[87,0,190,191],[145,13,141,137],[140,5],[144,14,4],[85,14,1,80,4,115,98,14,3,98,14,2],[80,0,98,14,1],[80,0],[98,14,4,81,9394,80,1,25],[82,14,4,69,129,1178],[82,14,2,82,14,4,2,120,24,4,112,129,1173],[82,14,3,82,14,4,2,120,24,4,112,129,1171],[82,14,1,80,8,10,98,14,1],[128,1172],[82,14,1,80,2,10,98,14,1],[128,1177],[82,14,3,82,14,4,2,120,24,4,112,129,1176],[82,14,1,80,4,10,98,14,1],[128,1177],[82,14,1,80,1,10,98,14,1],[82,14,4,4,128,1165],[81,14,97,18,145,14,141,137],[140,6],[144,15,37],[85,15,1,80,37,115,98,15,36,85,15,2,1,1,4,98,15,1,80,33,2,113,4,121],[80,0],[98,15,37,80,255],[82,15,37,69,129,1194],[81,1660,82,15,37,2,120,24,4,112,82,15,1,72,129,1188],[81,8357,82,15,37,2,120,24,4,82,15,36,2,113],[128,1193],[81,3198,82,15,37,2,120,24,4,112,82,15,1,72,129,1191],[81,8615,82,15,37,2,120,24,4,82,15,36,2,113],[128,1193],[81,4736,82,15,37,2,120,24,4,112,82,15,1,72,129,1193],[81,8873,82,15,37,2,120,24,4,82,15,36,2,113],[82,15,37,4,128,1183],[145,15,141,137],[140,7],[144,16,5],[85,16,1,80,5,115,98,16,4,98,16,3,98,16,2,98,16,1],[82,16,1,82,16,2,136,1160],[82,18,1,98,16,5],[80,65,48,82,16,3,48,54,82,16,4,48,54,82,16,5,80,2,9,80,0,64,147,136,1179],[80,65,48,82,16,4,48,54,82,16,3,48,54,82,16,5,80,4,9,80,0,64,147,136,1179],[80,69,48,82,16,3,48,54,82,16,4,48,54,82,16,5,80,8,9,80,0,64,147,136,1179],[80,69,48,82,16,4,48,54,82,16,3,48,54,82,16,5,80,8,9,80,0,64,147,136,1179],[80,73,48,82,16,3,48,54,82,16,4,48,54,82,16,5,80,8,9,80,0,67,147,136,1179],[80,73,48,82,16,4,48,54,82,16,3,48,54,82,16,5,80,8,9,80,0,67,147,136,1179],[80,79,48,82,16,3,48,54,82,16,4,48,54,82,16,5,80,2,9,80,0,67,147,136,1179],[80,79,48,82,16,4,48,54,82,16,3,48,54,82,16,5,80,4,9,80,0,67,147,136,1179],[145,16,141,137],[140,8],[144,17,1],[85,17,1,80,1,115],[80,0],[98,17,1,80,255],[82,17,1,69,129,1218],[81,8357,82,17,1,2,120,24,4,112,81,8615,82,17,1,2,120,24,4,112,9,81,8873,82,17,1,2,120,24,4,112,8,9,129,1217],[81,9131,82,17,1,2,120,24,4,1,112,4,2,113],[82,17,1,4,128,1213],[145,17,141,137],[80,-1,80,16777147,80,-1,166],[87,48,32,32,32,32,32,32,32,32,32,32,65,82,73,83,84,79,84,69,76,73,65,78,32,83,89,76,76,79,71,73,83,77,32,84,69,83,84,73,78,71,32,80,82,79,71,82,65,77,190,191],[87,61,65,114,105,115,116,111,116,101,108,105,97,110,32,115,121,108,108,111,103,105,115,109,115,32,99,111,110,115,105,115,116,32,111,102,32,116,119,111,32,112,114,101,109,105,115,101,115,32,102,111,108,108,111,119,101,100,32,98,121,32,97,190,191],[87,63,99,111,110,99,108,117,115,105,111,110,46,32,84,104,101,32,102,105,114,115,116,32,40,77,97,106,111,114,41,32,112,114,101,109,105,115,101,32,99,111,110,110,101,99,116,115,32,116,104,101,32,112,114,101,100,105,99,97,116,101,115,32,77,190,191],[87,63,97,110,100,32,80,44,32,116,104,101,32,115,101,99,111,110,100,32,40,77,105,110,111,114,41,32,112,114,101,109,105,115,101,32,99,111,110,110,101,99,116,115,32,116,104,101,32,112,114,101,100,105,99,97,116,101,115,32,83,32,97,110,100,190,191],[87,61,77,44,32,119,104,105,108,101,32,116,104,101,32,67,111,110,99,108,117,115,105,111,110,32,99,111,110,110,101,99,116,115,32,116,104,101,32,112,114,101,100,105,99,97,116,101,115,32,83,32,97,110,100,32,80,46,32,70,111,117,114,190,191],[87,59,100,105,102,102,101,114,101,110,116,32,116,121,112,101,115,32,111,102,32,108,111,103,105,99,97,108,32,99,111,110,110,101,99,116,105,111,110,32,97,114,101,32,97,118,97,105,108,97,98,108,101,44,32,119,105,116,104,32,97,190,191],[87,58,116,114,97,100,105,116,105,111,110,97,108,32,115,104,111,114,116,104,97,110,100,32,99,111,100,101,32,117,115,105,110,103,32,116,104,101,32,118,111,119,101,108,115,32,65,44,32,69,44,32,73,32,97,110,100,32,79,58,190,191],[87,46,32,32,32,32,65,32,32,32,32,32,65,108,108,32,70,115,32,97,114,101,32,71,46,32,32,32,32,32,32,32,69,32,32,32,32,32,78,111,32,70,32,105,115,32,71,46,190,191],[87,52,32,32,32,32,73,32,32,32,32,32,83,111,109,101,32,70,32,105,115,32,71,46,32,32,32,32,32,32,32,32,79,32,32,32,32,32,83,111,109,101,32,70,32,105,115,32,110,111,116,32,71,46,190,191],[87,62,84,104,101,114,101,32,97,114,101,32,116,104,117,115,32,52,32,112,111,115,115,105,98,108,101,32,114,101,108,97,116,105,111,110,115,32,105,110,32,116,104,101,32,77,97,106,111,114,32,80,114,101,109,105,115,101,44,32,52,32,105,110,190,191],[87,62,116,104,101,32,77,105,110,111,114,32,80,114,101,109,105,115,101,44,32,97,110,100,32,52,32,105,110,32,116,104,101,32,67,111,110,99,108,117,115,105,111,110,32,40,115,111,32,54,52,32,99,111,109,98,105,110,97,116,105,111,110,115,190,191],[87,62,111,118,101,114,97,108,108,41,44,32,98,117,116,32,105,110,32,97,100,100,105,116,105,111,110,44,32,116,104,101,114,101,32,97,114,101,32,102,111,117,114,32,100,105,102,102,101,114,101,110,116,32,34,70,105,103,117,114,101,115,34,44,190,191],[87,63,119,104,105,99,104,32,105,110,100,105,99,97,116,101,32,116,104,101,32,111,114,100,101,114,32,111,102,32,116,104,101,32,112,114,101,100,105,99,97,116,101,115,32,105,110,32,101,97,99,104,32,112,114,111,112,111,115,105,116,105,111,110,58,190,191],[87,55,32,32,32,70,105,103,117,114,101,32,49,32,32,32,77,97,106,111,114,58,32,77,45,80,32,32,32,77,105,110,111,114,58,32,83,45,77,32,32,32,67,111,110,99,108,117,115,105,111,110,58,32,83,45,80,190,191],[87,55,32,32,32,70,105,103,117,114,101,32,50,32,32,32,77,97,106,111,114,58,32,80,45,77,32,32,32,77,105,110,111,114,58,32,83,45,77,32,32,32,67,111,110,99,108,117,115,105,111,110,58,32,83,45,80,190,191],[87,55,32,32,32,70,105,103,117,114,101,32,51,32,32,32,77,97,106,111,114,58,32,77,45,80,32,32,32,77,105,110,111,114,58,32,77,45,83,32,32,32,67,111,110,99,108,117,115,105,111,110,58,32,83,45,80,190,191],[87,55,32,32,32,70,105,103,117,114,101,32,52,32,32,32,77,97,106,111,114,58,32,80,45,77,32,32,32,77,105,110,111,114,58,32,77,45,83,32,32,32,67,111,110,99,108,117,115,105,111,110,58,32,83,45,80,190,191],[87,63,72,101,110,99,101,32,116,104,101,114,101,32,97,114,101,32,50,53,54,32,112,111,115,115,105,98,108,101,32,115,121,108,108,111,103,105,115,109,115,32,97,108,116,111,103,101,116,104,101,114,46,32,72,101,114,101,32,105,115,32,116,104,101,190,191],[87,34,115,121,108,108,111,103,105,115,109,32,111,102,32,70,105,103,117,114,101,32,49,32,99,111,100,101,100,32,34,69,73,79,34,58,190,191],[87,56,32,32,32,78,111,32,77,32,105,115,32,80,59,32,32,83,111,109,101,32,83,32,105,115,32,77,59,32,32,116,104,101,114,101,102,111,114,101,32,32,83,111,109,101,32,83,32,105,115,32,110,111,116,32,80,46,190,191],[87,50,65,110,100,32,104,101,114,101,32,105,115,32,116,104,101,32,115,121,108,108,111,103,105,115,109,32,111,102,32,70,105,103,117,114,101,32,52,32,99,111,100,101,100,32,34,65,69,79,34,58,190,191],[87,57,32,32,32,65,108,108,32,80,115,32,97,114,101,32,77,59,32,32,78,111,32,77,32,105,115,32,83,59,32,32,116,104,101,114,101,102,111,114,101,32,32,83,111,109,101,32,83,32,105,115,32,110,111,116,32,80,46,190,191],[87,61,84,104,101,32,118,111,119,101,108,32,99,111,100,101,115,32,119,101,114,101,32,117,115,101,100,32,105,110,32,116,104,101,32,77,105,100,100,108,101,32,65,103,101,115,32,97,115,32,109,110,101,109,111,110,105,99,115,32,102,111,114,190,191],[87,61,116,104,101,32,102,111,114,109,115,32,111,102,32,115,121,108,108,111,103,105,115,109,32,116,104,97,116,32,119,101,114,101,32,97,99,99,101,112,116,101,100,32,97,115,32,118,97,108,105,100,32,45,32,105,110,32,116,104,101,115,101,190,191],[87,61,99,97,115,101,115,32,34,70,101,114,105,111,34,32,40,49,58,69,73,79,41,32,97,110,100,32,34,67,97,108,101,109,111,115,34,32,40,52,58,65,69,79,41,32,114,101,115,112,101,99,116,105,118,101,108,121,46,32,66,117,116,190,191],[87,63,110,111,116,101,32,116,104,97,116,32,67,97,108,101,109,111,115,32,105,115,32,105,110,118,97,108,105,100,32,40,105,46,101,46,32,105,116,115,32,112,114,101,109,105,115,101,115,32,99,97,110,32,98,101,32,116,114,117,101,32,97,110,100,190,191],[87,63,121,101,116,32,105,116,115,32,99,111,110,99,108,117,115,105,111,110,32,116,117,114,110,32,111,117,116,32,102,97,108,115,101,41,32,105,102,32,119,101,32,97,108,108,111,119,32,97,32,119,111,114,108,100,32,105,110,32,119,104,105,99,104,190,191],[87,63,116,104,101,114,101,32,105,115,32,110,111,32,83,32,97,116,32,97,108,108,46,32,65,114,105,115,116,111,116,108,101,39,115,32,116,104,101,111,114,121,32,116,97,107,101,115,32,102,111,114,32,103,114,97,110,116,101,100,32,116,104,97,116,190,191],[87,57,97,108,108,32,116,104,114,101,101,32,112,114,101,100,105,99,97,116,101,115,32,97,114,101,32,97,116,32,108,101,97,115,116,32,115,97,116,105,115,102,105,101,100,32,98,121,32,115,111,109,101,116,104,105,110,103,46,190,191],[87,0,190,191],[80,11,213],[87,65,78,111,119,32,112,114,101,115,115,32,34,102,34,32,111,114,32,34,70,34,32,102,111,114,32,70,114,101,103,101,97,110,32,118,97,108,105,100,105,116,121,32,116,101,115,116,105,110,103,44,32,119,104,105,99,104,32,100,111,101,115,32,110,111,116,190,191],[87,60,97,115,115,117,109,101,32,116,104,97,116,32,116,104,101,32,114,101,108,101,118,97,110,116,32,112,114,101,100,105,99,97,116,101,115,32,77,44,32,80,32,97,110,100,32,83,32,97,114,101,32,115,97,116,105,115,102,105,101,100,190,191],[87,64,98,121,32,97,110,121,116,104,105,110,103,59,32,112,114,101,115,115,32,34,97,34,32,111,114,32,34,65,34,32,102,111,114,32,65,114,105,115,116,111,116,101,108,105,97,110,32,118,97,108,105,100,105,116,121,32,116,101,115,116,105,110,103,46,190,191],[87,65,67,97,112,105,116,97,108,32,34,70,34,32,111,114,32,34,65,34,32,119,105,108,108,32,100,105,115,112,108,97,121,32,97,108,108,32,50,53,54,32,112,111,115,115,105,98,108,101,32,112,111,112,117,108,97,116,105,111,110,32,116,121,112,101,115,190,191],[87,35,97,115,32,116,104,101,121,32,97,114,101,32,103,101,110,101,114,97,116,101,100,32,97,110,100,32,116,101,115,116,101,100,46,32,32,190],[80,-9,184,80,65,16,64,80,-9,184,80,70,16,64,10,129,1256],[80,-9,184,80,65,16,64,97,9392],[80,-10,184,17,80,8,9,80,0,67,97,9393],[87,0,190,191],[87,0,190,191],[80,-1,80,16777147,80,-1,166],[81,9392,129,1265],[87,35,65,82,73,83,84,79,84,69,76,73,65,78,32,99,111,110,100,105,116,105,111,110,115,32,97,115,115,117,109,101,100,32,46,46,46,190,191],[128,1266],[87,37,70,82,69,71,69,65,78,32,116,114,117,116,104,45,99,111,110,100,105,116,105,111,110,115,32,97,115,115,117,109,101,100,32,46,46,46,32,190,191],[87,0,190,191],[87,55,78,111,119,32,97,108,108,32,50,53,54,32,112,111,115,115,105,98,108,101,32,115,121,108,108,111,103,105,115,109,115,32,119,105,108,108,32,98,101,32,116,101,115,116,101,100,32,97,103,97,105,110,115,116,32,80,256,49,54,190,191,147],[87,60,112,111,112,117,108,97,116,105,111,110,115,32,111,102,32,105,110,100,105,118,105,100,117,97,108,115,44,32,119,104,111,115,101,32,110,117,109,98,101,114,32,97,110,100,32,99,104,97,114,97,99,116,101,114,105,115,116,105,99,115,190,191],[87,65,97,114,101,32,115,121,115,116,101,109,97,116,105,99,97,108,108,121,32,103,101,110,101,114,97,116,101,100,32,116,111,32,99,111,118,101,114,32,97,108,108,32,114,101,108,101,118,97,110,116,32,112,111,115,115,105,98,105,108,105,116,105,101,115,58,190,191],[87,0,190,191],[80,11,213],[136,1084],[136,1101],[80,0],[97,9389,80,255],[81,9389,69,129,1279],[81,9131,81,9389,2,120,24,4,80,0,2,113],[81,9389,4,128,1275],[81,9393,8,129,1281],[87,6,40,50,53,54,41,32,190],[80,256,97,9390],[81,9390,80,0,67,129,1299],[81,9390,80,50,29,80,0,64,81,9393,8,9,129,1286],[87,0,190,191],[80,40,48,81,9390,49,54,87,2,41,32,54,190,147],[84,9390,1,112,5,2,113],[81,9390,136,1127],[82,18,1,97,9394],[81,9393,129,1292],[81,9390,136,1140],[128,1293],[80,46,48,190,147],[81,9392,8,81,9390,80,170,9,80,0,67,81,9390,80,204,9,80,0,67,9,81,9390,80,240,9,80,0,67,9,10,129,1298],[81,8324,81,8335,80,77,80,80,136,1195],[81,8346,81,8324,80,83,80,77,136,1195],[81,8346,81,8335,80,83,80,80,136,1195],[136,1209],[128,1282],[80,1,213],[80,0,80,10025880,80,-1,166],[87,0,190,191],[87,0,190,191],[87,55,65,102,116,101,114,32,115,121,115,116,101,109,97,116,105,99,97,108,108,121,32,116,101,115,116,105,110,103,32,97,108,108,32,114,101,108,101,118,97,110,116,32,112,111,115,115,105,98,105,108,105,116,105,101,115,190,191],[81,9392,129,1307],[87,47,40,105,110,32,119,104,105,99,104,32,115,111,109,101,32,77,115,44,32,115,111,109,101,32,80,115,44,32,97,110,100,32,115,111,109,101,32,83,115,32,101,120,105,115,116,41,44,190,191],[128,1308],[87,48,40,119,105,116,104,111,117,116,32,114,101,113,117,105,114,105,110,103,32,116,104,97,116,32,97,110,121,32,77,115,44,32,80,115,32,111,114,32,83,115,32,101,120,105,115,116,41,44,190,191],[87,40,116,104,101,115,101,32,97,114,101,32,116,104,101,32,117,110,114,101,102,117,116,101,100,32,40,97,110,100,32,116,104,117,115,32,118,97,108,105,100,41,190,191],[87,32,65,114,105,115,116,111,116,101,108,105,97,110,32,70,111,114,109,115,32,111,102,32,83,121,108,108,111,103,105,115,109,58,190,191],[87,0,190,191],[80,0,97,9391],[80,0],[97,9389,80,255],[81,9389,69,129,1319],[81,9131,81,9389,2,120,24,4,112,80,0,64,129,1318],[87,2,32,32,81,6274,81,9389,2,120,24,4,112,54,87,3,58,32,32,54,81,32,81,1660,81,9389,2,120,24,4,112,80,1,80,1,25,2,120,24,4,112,48,87,4,65,69,73,79,60,80,1,25,2,120,24,4,112,54,81,1660,81,9389,2,120,24,4,112,80,2,80,1,25,2,120,24,4,112,48,54,81,66,81,1660,81,9389,2,120,24,4,112,80,1,80,1,25,2,120,24,4,112,48,87,4,65,69,73,79,60,80,1,25,2,120,24,4,112,54,81,1660,81,9389,2,120,24,4,112,80,3,80,1,25,2,120,24,4,112,48,54,87,2,32,32,54,81,32,81,3198,81,9389,2,120,24,4,112,80,1,80,1,25,2,120,24,4,112,48,87,4,65,69,73,79,60,80,1,25,2,120,24,4,112,54,81,3198,81,9389,2,120,24,4,112,80,2,80,1,25,2,120,24,4,112,48,54,81,66,81,3198,81,9389,2,120,24,4,112,80,1,80,1,25,2,120,24,4,112,48,87,4,65,69,73,79,60,80,1,25,2,120,24,4,112,54,81,3198,81,9389,2,120,24,4,112,80,3,80,1,25,2,120,24,4,112,48,54,87,6,32,32,61,62,32,32,54,81,32,81,4736,81,9389,2,120,24,4,112,80,1,80,1,25,2,120,24,4,112,48,87,4,65,69,73,79,60,80,1,25,2,120,24,4,112,54,81,4736,81,9389,2,120,24,4,112,80,2,80,1,25,2,120,24,4,112,48,54,81,66,81,4736,81,9389,2,120,24,4,112,80,1,80,1,25,2,120,24,4,112,48,87,4,65,69,73,79,60,80,1,25,2,120,24,4,112,54,81,4736,81,9389,2,120,24,4,112,80,3,80,1,25,2,120,24,4,112,48,54,190,191,147],[84,9391,1,112,4,2,113],[81,9389,4,128,1313],[87,0,190,191],[80,40,48,81,9391,49,54,87,18,32,102,111,114,109,115,32,97,108,116,111,103,101,116,104,101,114,41,54,190,191,147],[130]]")},function(n){n.exports=JSON.parse("[[80,25,1,1,80,0,113,80,6,2,113,4,80,5696,115,80,5721,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,32,97,31],[80,6,97,32,84,39,97,33],[80,6,97,39,84,46,97,34],[80,6,97,46,84,53,97,35],[80,6,97,53,84,60,97,36],[80,6,97,60,84,67,97,37],[80,6,97,67,84,74,97,38],[80,6,97,74],[84,33,97,32],[80,2001,97,33],[84,2039,97,2037],[80,65,97,2038],[84,2107,97,2105],[80,31,97,2106],[84,2139,97,2138],[80,30,97,2139,84,2171,97,2140],[80,101,97,2170,84,2273,97,2141],[80,101,97,2272,84,2375,97,2142],[80,101,97,2374,84,2477,97,2143],[80,101,97,2476,84,2579,97,2144],[80,101,97,2578,84,2681,97,2145],[80,101,97,2680,84,2783,97,2146],[80,101,97,2782,84,2885,97,2147],[80,101,97,2884,84,2987,97,2148],[80,101,97,2986,84,3089,97,2149],[80,101,97,3088,84,3191,97,2150],[80,101,97,3190,84,3293,97,2151],[80,101,97,3292,84,3395,97,2152],[80,101,97,3394,84,3497,97,2153],[80,101,97,3496,84,3599,97,2154],[80,101,97,3598,84,3701,97,2155],[80,101,97,3700,84,3803,97,2156],[80,101,97,3802,84,3905,97,2157],[80,101,97,3904,84,4007,97,2158],[80,101,97,4006,84,4109,97,2159],[80,101,97,4108,84,4211,97,2160],[80,101,97,4210,84,4313,97,2161],[80,101,97,4312,84,4415,97,2162],[80,101,97,4414,84,4517,97,2163],[80,101,97,4516,84,4619,97,2164],[80,101,97,4618,84,4721,97,2165],[80,101,97,4720,84,4823,97,2166],[80,101,97,4822,84,4925,97,2167],[80,101,97,4924,84,5027,97,2168],[80,101,97,5026,84,5129,97,2169],[80,101,97,5128],[84,5231,97,5230],[80,30,97,5231,84,5263,97,5232],[80,6,97,5262,84,5270,97,5233],[80,6,97,5269,84,5277,97,5234],[80,6,97,5276,84,5284,97,5235],[80,6,97,5283,84,5291,97,5236],[80,6,97,5290,84,5298,97,5237],[80,6,97,5297,84,5305,97,5238],[80,6,97,5304,84,5312,97,5239],[80,6,97,5311,84,5319,97,5240],[80,6,97,5318,84,5326,97,5241],[80,6,97,5325,84,5333,97,5242],[80,6,97,5332,84,5340,97,5243],[80,6,97,5339,84,5347,97,5244],[80,6,97,5346,84,5354,97,5245],[80,6,97,5353,84,5361,97,5246],[80,6,97,5360,84,5368,97,5247],[80,6,97,5367,84,5375,97,5248],[80,6,97,5374,84,5382,97,5249],[80,6,97,5381,84,5389,97,5250],[80,6,97,5388,84,5396,97,5251],[80,6,97,5395,84,5403,97,5252],[80,6,97,5402,84,5410,97,5253],[80,6,97,5409,84,5417,97,5254],[80,6,97,5416,84,5424,97,5255],[80,6,97,5423,84,5431,97,5256],[80,6,97,5430,84,5438,97,5257],[80,6,97,5437,84,5445,97,5258],[80,6,97,5444,84,5452,97,5259],[80,6,97,5451,84,5459,97,5260],[80,6,97,5458,84,5466,97,5261],[80,6,97,5465],[84,5473,97,5472],[80,30,97,5473,84,5505,97,5474],[80,6,97,5504,84,5512,97,5475],[80,6,97,5511,84,5519,97,5476],[80,6,97,5518,84,5526,97,5477],[80,6,97,5525,84,5533,97,5478],[80,6,97,5532,84,5540,97,5479],[80,6,97,5539,84,5547,97,5480],[80,6,97,5546,84,5554,97,5481],[80,6,97,5553,84,5561,97,5482],[80,6,97,5560,84,5568,97,5483],[80,6,97,5567,84,5575,97,5484],[80,6,97,5574,84,5582,97,5485],[80,6,97,5581,84,5589,97,5486],[80,6,97,5588,84,5596,97,5487],[80,6,97,5595,84,5603,97,5488],[80,6,97,5602,84,5610,97,5489],[80,6,97,5609,84,5617,97,5490],[80,6,97,5616,84,5624,97,5491],[80,6,97,5623,84,5631,97,5492],[80,6,97,5630,84,5638,97,5493],[80,6,97,5637,84,5645,97,5494],[80,6,97,5644,84,5652,97,5495],[80,6,97,5651,84,5659,97,5496],[80,6,97,5658,84,5666,97,5497],[80,6,97,5665,84,5673,97,5498],[80,6,97,5672,84,5680,97,5499],[80,6,97,5679,84,5687,97,5500],[80,6,97,5686,84,5694,97,5501],[80,6,97,5693,84,5701,97,5502],[80,6,97,5700,84,5708,97,5503],[80,6,97,5707],[128,484],[140,1],[144,10,1],[85,10,1,80,1,115],[81,2105,87,0,2,121],[80,1],[98,10,1,80,30],[82,10,1,69,129,125],[81,2138,82,10,1,80,1,25,2,120,24,4,112,87,0,2,121],[81,5230,82,10,1,80,1,25,2,120,24,4,112,87,0,2,121],[81,5472,82,10,1,80,1,25,2,120,24,4,112,87,0,2,121],[82,10,1,4,128,119],[80,-1000],[98,10,1,80,1000],[82,10,1,69,129,130],[81,32,82,10,1,80,-1000,25,2,120,24,4,80,32,2,113],[82,10,1,4,128,126],[80,0,97,5715],[80,0,97,5716],[80,0,97,5717],[80,1,16,97,5718],[80,998,80,20,27,97,5720],[81,5720,80,4,27,97,5721],[80,1000,80,20,81,5720,26,25,80,2,27,97,5719],[145,10,141,137],[140,2],[144,11,1],[85,11,1,80,1,115,98,11,1],[80,200,97,2104],[82,11,1,80,1,64,129,150],[81,2037,87,36,80,101,116,122,111,108,100,32,112,46,32,56,49,44,32,48,32,49,32,48,32,49,32,46,46,46,32,32,52,32,115,116,97,116,101,115,2,121],[80,4,97,2035],[81,2138,80,1,80,1,25,2,120,24,4,112,87,8,98,59,32,99,80,48,44,82,2,121],[81,2138,80,2,80,1,25,2,120,24,4,112,87,5,99,59,32,101,82,2,121],[81,2138,80,3,80,1,25,2,120,24,4,112,87,8,101,59,32,102,80,49,44,82,2,121],[81,2138,80,4,80,1,25,2,120,24,4,112,87,5,102,59,32,98,82,2,121],[128,201],[82,11,1,80,2,64,129,155],[81,2037,87,35,80,101,116,122,111,108,100,32,112,46,32,56,52,44,32,48,32,49,32,48,32,49,32,46,46,46,32,32,49,32,115,116,97,116,101,2,121],[80,1,97,2035],[81,2138,80,1,80,1,25,2,120,24,4,112,87,25,98,59,32,98,80,48,59,48,98,82,44,82,44,80,49,59,49,98,82,44,82,44,80,48,59,2,121],[128,201],[82,11,1,80,3,64,129,164],[81,2037,87,29,80,101,116,122,111,108,100,32,112,46,32,56,55,44,32,116,114,97,110,115,99,101,110,100,101,110,116,97,108,2,121],[80,5,97,2035],[81,2138,80,1,80,1,25,2,120,24,4,112,87,27,98,59,42,111,80,64,44,82,44,80,64,44,82,44,80,48,44,82,44,82,44,80,48,44,76,44,76,2,121],[81,2138,80,2,80,1,25,2,120,24,4,112,87,17,111,59,49,111,82,44,80,120,44,76,44,76,44,76,59,48,113,2,121],[81,2138,80,3,80,1,25,2,120,24,4,112,87,14,113,59,32,112,80,49,44,76,59,42,113,82,44,82,2,121],[81,2138,80,4,80,1,25,2,120,24,4,112,87,18,112,59,120,113,80,32,44,82,59,64,102,82,59,32,112,76,44,76,2,121],[81,2138,80,5,80,1,25,2,120,24,4,112,87,16,102,59,32,111,80,48,44,76,44,76,59,42,102,82,44,82,2,121],[128,201],[82,11,1,80,4,64,129,171],[81,2037,87,30,80,101,116,122,111,108,100,32,112,46,32,57,57,44,32,98,105,110,97,114,121,32,99,111,117,110,116,105,110,103,2,121],[80,3,97,2035],[81,2138,80,1,80,1,25,2,120,24,4,112,87,6,98,59,32,105,80,48,2,121],[81,2138,80,2,80,1,25,2,120,24,4,112,87,18,105,59,48,114,80,49,59,49,105,80,48,44,76,59,32,114,80,49,2,121],[81,2138,80,3,80,1,25,2,120,24,4,112,87,9,114,59,32,105,76,59,42,114,82,2,121],[128,201],[82,11,1,80,5,64,129,201],[81,2037,87,28,80,101,116,122,111,108,100,32,112,112,46,32,49,48,50,45,56,44,32,114,111,111,116,32,111,102,32,50,2,121],[80,27,97,2035],[81,2138,80,1,80,1,25,2,120,24,4,112,87,11,98,59,32,110,80,64,44,82,44,80,49,2,121],[81,2138,80,2,80,1,25,2,120,24,4,112,87,9,110,59,64,109,82,59,42,110,76,2,121],[81,2138,80,3,80,1,25,2,120,24,4,112,87,33,109,59,48,109,82,44,80,120,44,82,59,49,109,82,44,80,120,44,82,59,32,120,82,44,80,122,44,82,44,82,44,80,114,2,121],[81,2138,80,4,80,1,25,2,120,24,4,112,87,16,120,59,120,114,80,32,59,64,115,78,59,42,120,76,44,76,2,121],[81,2138,80,5,80,1,25,2,120,24,4,112,87,13,114,59,114,82,82,44,82,59,42,114,82,44,82,2,121],[81,2138,80,6,80,1,25,2,120,24,4,112,87,19,82,59,114,82,82,44,82,59,32,120,80,114,44,82,44,82,44,80,114,2,121],[81,2138,80,7,80,1,25,2,120,24,4,112,87,13,115,59,64,102,82,44,82,59,42,115,76,44,76,2,121],[81,2138,80,8,80,1,25,2,120,24,4,112,87,19,102,59,120,70,76,59,121,70,76,59,122,68,76,59,32,102,82,44,82,2,121],[81,2138,80,9,80,1,25,2,120,24,4,112,87,13,70,59,48,48,82,59,49,100,82,44,82,44,82,2,121],[81,2138,80,10,80,1,25,2,120,24,4,112,87,15,100,59,120,68,76,59,121,68,76,59,32,100,82,44,82,2,121],[81,2138,80,11,80,1,25,2,120,24,4,112,87,13,68,59,48,48,82,59,49,49,82,59,32,49,82,2,121],[81,2138,80,12,80,1,25,2,120,24,4,112,87,17,48,59,114,97,80,115,59,117,97,80,118,59,42,48,82,44,82,2,121],[81,2138,80,13,80,1,25,2,120,24,4,112,87,21,49,59,114,97,80,118,59,117,99,80,115,44,82,44,82,59,42,49,82,44,82,2,121],[81,2138,80,14,80,1,25,2,120,24,4,112,87,20,99,59,114,97,80,117,59,32,122,80,117,59,117,99,80,114,44,82,44,82,2,121],[81,2138,80,15,80,1,25,2,120,24,4,112,87,13,97,59,64,101,82,44,82,59,42,97,76,44,76,2,121],[81,2138,80,16,80,1,25,2,120,24,4,112,87,25,101,59,120,121,80,32,44,76,44,76,59,122,121,80,121,44,76,44,76,59,42,101,82,44,82,2,121],[81,2138,80,17,80,1,25,2,120,24,4,112,87,17,121,59,64,69,82,44,82,59,121,115,80,122,59,32,115,80,120,2,121],[81,2138,80,18,80,1,25,2,120,24,4,112,87,16,69,59,121,89,80,32,44,76,44,76,59,42,69,82,44,82,2,121],[81,2138,80,19,80,1,25,2,120,24,4,112,87,12,89,59,64,111,82,59,42,88,80,121,44,82,2,121],[81,2138,80,20,80,1,25,2,120,24,4,112,87,14,88,59,32,117,82,44,80,120,59,42,88,82,44,82,2,121],[81,2138,80,21,80,1,25,2,120,24,4,112,87,25,117,59,115,85,80,116,44,82,44,82,59,118,85,80,119,44,82,44,82,59,42,117,82,44,82,2,121],[81,2138,80,22,80,1,25,2,120,24,4,112,87,23,85,59,115,85,80,114,44,82,44,82,59,118,85,80,117,44,82,44,82,59,42,115,78,2,121],[81,2138,80,23,80,1,25,2,120,24,4,112,87,9,122,59,64,112,82,59,42,122,76,2,121],[81,2138,80,24,80,1,25,2,120,24,4,112,87,30,112,59,48,112,82,44,80,32,44,82,59,49,112,82,44,80,32,44,82,59,32,67,80,48,44,82,44,82,44,82,2,121],[81,2138,80,25,80,1,25,2,120,24,4,112,87,9,111,59,64,80,82,59,42,111,76,2,121],[81,2138,80,26,80,1,25,2,120,24,4,112,87,30,80,59,48,80,82,44,80,32,44,82,59,49,80,82,44,80,32,44,82,59,32,67,80,49,44,82,44,82,44,82,2,121],[81,2138,80,27,80,1,25,2,120,24,4,112,87,14,67,59,32,110,78,59,42,67,80,32,44,82,44,82,2,121],[145,11,141,137],[140,3],[144,12,36],[85,12,1,80,36,115,85,12,3,98,12,1,80,33,98,12,2,98,12,36],[82,12,1,82,12,36,49,87,3,32,40,39,54,81,2105,82,12,36,80,1,25,2,120,24,4,112,48,54,87,2,39,41,54,2,121,147],[81,12,97,24,145,12,141,137],[140,4],[144,13,39],[85,13,1,80,39,115],[85,13,7,98,13,5,80,33,98,13,6],[80,-1,98,13,1],[80,1,98,13,2],[82,13,2,81,2035,68,129,238],[81,2138,82,13,2,80,1,25,2,120,24,4,112,87,0,72,129,222],[82,13,2,80,1,24],[98,13,3,81,2035],[82,13,3,69,129,220],[81,2138,82,13,3,80,1,25,80,1,25,2,120,24,4,112,81,2138,82,13,3,80,1,25,2,120,24,4,112,2,121],[82,13,3,4,128,216],[84,2035,1,112,5,2,113],[128,237],[82,13,5,81,2138,82,13,2,80,1,25,2,120,24,4,112,2,121],[81,2105,81,2105,82,13,5,80,1,80,1,25,2,120,24,4,112,48,54,2,121,147],[80,59,48,82,13,5,60,98,13,4,147],[82,13,4,80,0,67,129,236],[82,13,5,82,13,5,80,1,82,13,4,58,2,121,147],[82,13,5,55,80,1,67,129,234],[82,13,5,80,1,80,1,25,2,120,24,4,112,48,81,5230,82,13,2,80,1,25,2,120,24,4,112,60,80,0,67,147,129,232],[87,6,83,116,97,116,101,32,82,13,2,136,202],[82,24,1,80,0,56,54,87,37,32,104,97,115,32,109,117,108,116,105,112,108,101,32,97,99,116,105,111,110,115,32,102,111,114,32,99,104,97,114,97,99,116,101,114,32,34,54,82,13,5,80,1,80,1,25,2,120,24,4,112,48,54,80,34,48,54,190,191,147],[80,0,98,13,1],[81,5230,82,13,2,80,1,25,2,120,24,4,112,81,5230,82,13,2,80,1,25,2,120,24,4,112,82,13,5,80,1,80,1,25,2,120,24,4,112,48,54,2,121,147],[81,5472,82,13,2,80,1,25,2,120,24,4,112,81,5472,82,13,2,80,1,25,2,120,24,4,112,82,13,5,80,2,80,1,25,2,120,24,4,112,48,54,2,121,147],[80,59,48,82,13,5,60,98,13,4,147],[128,225],[85,13,2,1,112,4,2,113],[128,213],[80,1],[98,13,2,81,2035,80,1,25],[82,13,2,69,129,249],[82,13,2,80,1,24],[98,13,3,81,2035],[82,13,3,69,129,248],[81,2105,82,13,2,80,1,25,2,120,24,4,112,81,2105,82,13,3,80,1,25,2,120,24,4,112,64,129,247],[87,7,83,116,97,116,101,115,32,82,13,2,49,54,87,5,32,97,110,100,32,54,82,13,3,49,54,87,17,32,98,111,116,104,32,104,97,118,101,32,99,111,100,101,32,34,54,81,2105,82,13,2,80,1,25,2,120,24,4,112,48,54,87,2,34,46,54,190,191,147],[80,0,98,13,1],[82,13,3,4,128,242],[82,13,2,4,128,239],[82,13,1,129,264],[80,1],[98,13,2,81,2035],[82,13,2,69,129,264],[80,1],[98,13,3,81,5472,82,13,2,80,1,25,2,120,24,4,112,55],[82,13,3,69,129,263],[81,5472,82,13,2,80,1,25,2,120,24,4,112,82,13,3,80,1,25,2,120,24,4,112,48,81,2105,60,98,13,4,147],[82,13,4,80,0,64,129,261],[87,23,84,114,97,110,115,105,116,105,111,110,32,115,116,97,116,101,32,99,111,100,101,32,34,81,5472,82,13,2,80,1,25,2,120,24,4,112,82,13,3,80,1,25,2,120,24,4,112,48,54,87,20,34,32,105,115,32,110,111,116,32,114,101,99,111,103,110,105,115,101,100,46,54,190,191,147],[80,0,98,13,1],[128,262],[81,5472,82,13,2,80,1,25,2,120,24,4,112,82,13,3,80,1,25,2,120,24,4,82,13,4,2,113],[82,13,3,4,128,254],[82,13,2,4,128,251],[81,13,97,24,145,13,141,137],[140,5],[144,14,38],[85,14,1,80,38,115,85,14,3,98,14,1,80,33,98,14,2,98,14,37,98,14,36],[80,59,48,82,14,37,48,54,81,2138,82,14,36,80,1,25,2,120,24,4,112,60,98,14,38,147],[82,14,38,80,0,64,129,271],[87,2,59,42,81,2138,82,14,36,80,1,25,2,120,24,4,112,60,98,14,38],[82,14,38,80,0,64,129,276],[87,35,73,110,99,111,110,115,105,115,116,101,110,116,32,100,97,116,97,32,111,114,32,97,110,97,108,121,115,105,115,32,102,111,114,32,34,82,14,37,48,54,87,11,34,32,105,110,32,115,116,97,116,101,32,54,82,14,36,136,202],[82,24,1,80,0,56,54,190,191,147],[82,14,1,87,4,72,65,76,84,2,121],[128,280],[82,14,1,81,2138,82,14,36,80,1,25,2,120,24,4,112,82,14,38,80,3,24,255,57,2,121,147],[80,59,48,82,14,1,60,98,14,38,147],[82,14,38,80,0,67,129,280],[82,14,1,82,14,1,80,1,82,14,38,80,1,25,57,2,121,147],[81,14,97,24,145,14,141,137],[140,6],[144,15,2],[85,15,1,80,2,115],[80,16777215,248],[80,9849600,221],[80,35,80,50,224],[87,24,84,85,82,73,78,71,32,77,65,67,72,73,78,69,32,83,73,77,85,76,65,84,79,82,80,4,80,16,10,80,42,189],[80,11674146,221],[80,35,80,30,24,80,175,224],[87,42,40,69,120,97,109,112,108,101,115,32,97,114,101,32,116,97,107,101,110,32,102,114,111,109,32,67,104,97,114,108,101,115,32,80,101,116,122,111,108,100,39,115,80,4,80,30,189],[80,35,80,30,24,80,225,224],[87,39,101,120,99,101,108,108,101,110,116,32,98,111,111,107,44,32,34,84,104,101,32,65,110,110,111,116,97,116,101,100,32,84,117,114,105,110,103,34,41,80,4,80,30,189],[80,0,221],[80,35,80,350,224],[87,26,67,104,111,111,115,101,32,102,114,111,109,32,116,104,101,32,102,111,108,108,111,119,105,110,103,58,80,4,80,16,10,80,36,189],[80,35,80,450,224],[87,42,32,32,49,46,32,32,80,101,116,122,111,108,100,32,112,46,56,49,32,40,48,32,49,32,48,32,49,32,46,46,46,32,32,52,32,115,116,97,116,101,115,41,80,4,80,36,189],[80,35,80,550,224],[87,41,32,32,50,46,32,32,80,101,116,122,111,108,100,32,112,46,56,52,32,40,48,32,49,32,48,32,49,32,46,46,46,32,32,49,32,115,116,97,116,101,41,80,4,80,36,189],[80,35,80,650,224],[87,35,32,32,51,46,32,32,80,101,116,122,111,108,100,32,112,46,56,55,32,40,116,114,97,110,115,99,101,110,100,101,110,116,97,108,41,80,4,80,36,189],[80,35,80,750,224],[87,36,32,32,52,46,32,32,80,101,116,122,111,108,100,32,112,46,57,57,32,40,98,105,110,97,114,121,32,99,111,117,110,116,105,110,103,41,80,4,80,36,189],[80,35,80,850,224],[87,34,32,32,53,46,32,32,80,101,116,122,111,108,100,32,112,112,46,32,49,48,50,45,56,44,32,114,111,111,116,32,111,102,32,50,80,4,80,36,189],[80,-9,184,17,80,48,25,98,15,2],[82,15,2,80,0,67,82,15,2,80,6,66,9,129,306],[82,15,2,136,138],[80,16777215,248],[145,15,141,137],[140,7],[80,16711680,221],[80,35,80,25,224],[87,5,84,65,80,69,58,80,16,80,23,189],[80,35,80,200,224],[87,7,67,89,67,76,69,83,58,80,16,80,23,189],[80,35,80,350,224],[87,15,77,65,67,72,73,78,69,32,84,65,66,76,69,32,40,81,2037,54,87,2,41,58,54,80,16,80,23,189,147],[80,10526880,221],[80,400,80,200,224],[87,32,40,112,114,101,115,115,32,69,83,67,65,80,69,32,116,111,32,114,101,116,117,114,110,32,116,111,32,109,101,110,117,41,80,16,80,23,189],[141,137],[140,9],[144,18,36],[85,18,1,80,36,115,98,18,36,85,18,2,1,1,4,98,18,1,80,33,2,113,4,121],[80,0,221],[82,18,36,80,48,80,6,80,2,26,24,80,9849600,80,-1,246],[80,16777215,221],[80,0,80,6,80,4,24,225],[82,18,1,80,16,80,32,10,80,23,189],[82,18,36,80,6,16,80,4,25,225],[145,18,141,137],[140,10],[144,19,36],[85,19,1,80,36,115,98,19,36,85,19,2,1,1,4,98,19,1,80,33,2,113,4,121],[82,19,36,80,48,80,16777215,80,-1,246],[80,0,80,4,225],[82,19,1,80,16,80,23,189],[82,19,36,80,4,16,225],[145,19,141,137],[140,8],[144,17,2],[85,17,1,80,2,115],[80,35,80,425,224],[87,11,32,109,45,99,111,110,102,105,103,46,32,80,150,136,323],[87,8,32,115,121,109,98,111,108,32,80,130,136,323],[87,25,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,112,101,114,97,116,105,111,110,115,32,80,420,136,323],[87,17,32,102,105,110,97,108,32,109,45,99,111,110,102,105,103,46,32,80,230,136,323],[80,0,221],[80,0,80,6,80,2,26,225],[80,1],[98,17,1,81,2035],[82,17,1,69,129,376],[80,1],[98,17,2,81,5230,82,17,1,80,1,25,2,120,24,4,112,55],[82,17,2,69,129,375],[80,35,81,27,80,48,24,224],[82,17,2,80,1,64,129,362],[87,3,32,32,32,82,17,1,136,202],[82,24,1,80,0,56,54,80,150,136,333],[128,363],[87,0,80,150,147,136,333],[81,5230,82,17,1,80,1,25,2,120,24,4,112,82,17,2,80,1,25,2,120,24,4,112,80,32,64,129,366],[87,7,32,32,32,78,111,110,101,80,130,136,333],[128,370],[81,5230,82,17,1,80,1,25,2,120,24,4,112,82,17,2,80,1,25,2,120,24,4,112,80,42,64,129,369],[87,7,32,32,32,32,65,110,121,80,130,136,333],[128,370],[87,6,32,32,32,32,32,32,81,5230,82,17,1,80,1,25,2,120,24,4,112,82,17,2,80,1,25,2,120,24,4,112,48,54,80,130,147,136,333],[80,32,48,82,17,1,81,5230,82,17,1,80,1,25,2,120,24,4,112,82,17,2,80,1,25,2,120,24,4,112,136,265],[82,24,1,80,0,56,54,80,420,147,136,333],[87,8,32,32,32,32,32,32,32,32,81,5472,82,17,1,80,1,25,2,120,24,4,112,82,17,2,80,1,25,2,120,24,4,112,136,202],[82,24,1,80,0,56,54,80,230,147,136,333],[82,17,2,4,128,355],[82,17,1,4,128,352],[145,17,141,137],[140,11],[144,20,1],[85,20,1,80,1,115],[163],[80,0,80,100,80,5,25,224],[80,1000,80,2,81,5720,26,80,10,24,80,16777215,80,0,246],[81,5715,81,5718,80,4,24,66,129,388],[81,5715,80,4,25,97,5718],[81,5718,81,5716,80,1,25,66,129,387],[81,5716,80,1,25,97,5718],[128,390],[81,5715,81,5718,80,20,24,80,2,25,69,129,390],[81,5715,80,20,25,80,2,24,80,1,24,97,5718],[81,5719,81,5720,25,80,100,224],[81,5718,80,1,25],[98,20,1,81,5718,80,20,24],[82,20,1,69,129,403],[81,5720,81,5720,80,16777147,80,-1,246],[81,5721,80,0,225],[81,32,82,20,1,80,-1000,25,2,120,24,4,112,48,80,1,81,5720,80,2,27,189,147],[82,20,1,80,5,29,80,0,64,129,401],[81,5721,16,80,2,24,80,12,16,225],[80,46,48,80,1,80,12,189,147],[81,5721,80,2,25,80,12,225],[81,5720,81,5721,25,80,0,225],[82,20,1,4,128,392],[81,5719,81,5720,81,5715,81,5718,25,26,24,80,100,224],[80,10,220],[81,5720,81,5720,80,65535,80,-1,246],[80,2,220],[81,5721,80,0,225],[81,32,81,5715,80,-1000,25,2,120,24,4,112,48,80,1,81,5720,80,2,27,189,147],[80,0,81,5720,80,8,24,225],[80,9849600,221],[81,2036,49,80,16,81,5720,80,2,27,189,147],[80,200,80,200,224],[80,200,80,100,80,16777215,80,0,246],[81,5714,49,80,16,81,5720,80,2,27,189,147],[80,0,221],[162],[145,20,141,137],[140,13],[144,22,2],[85,22,1,80,2,115,98,22,1],[82,22,1,80,1,80,1,25,2,120,24,4,112,80,76,64,129,426],[84,5715,1,112,5,2,113],[81,5715,81,5716,66,129,425],[81,5715,97,5716],[128,440],[82,22,1,80,1,80,1,25,2,120,24,4,112,80,82,64,129,431],[84,5715,1,112,4,2,113],[81,5715,81,5717,67,129,430],[81,5715,97,5717],[128,440],[82,22,1,80,1,80,1,25,2,120,24,4,112,80,80,64,129,440],[82,22,1,55,80,1,67,129,438],[81,32,81,5715,80,-1000,25,2,120,24,4,82,22,1,80,2,80,1,25,2,120,24,4,112,2,113],[82,22,1,80,2,80,1,25,2,120,24,4,112,80,48,64,82,22,1,80,2,80,1,25,2,120,24,4,112,80,49,64,10,129,437],[87,8,67,121,99,108,101,32,61,32,81,5714,49,54,87,13,59,32,80,111,115,105,116,105,111,110,32,61,32,54,81,5715,49,54,87,10,59,32,83,116,97,116,101,32,61,32,54,81,2036,136,202],[82,24,1,80,0,56,54,87,13,59,32,80,114,105,110,116,101,100,32,61,32,34,54,82,22,1,80,2,80,1,25,2,120,24,4,112,48,54,80,34,48,54,190,191,147],[128,440],[87,28,78,117,108,108,32,80,114,105,110,116,32,105,110,115,116,114,117,99,116,105,111,110,32,102,111,114,32,34,82,21,1,48,54,87,11,34,32,105,110,32,115,116,97,116,101,32,54,81,2036,136,202],[82,24,1,80,0,56,54,190,191,147],[80,44,48,82,22,1,60,98,22,2,147],[82,22,2,80,0,64,129,444],[82,22,1,87,0,2,121],[128,445],[82,22,1,82,22,1,80,1,82,22,2,58,2,121,147],[145,22,141,137],[140,12],[144,21,37],[85,21,1,80,37,115],[85,21,5,98,21,3,80,33,98,21,4],[84,5714,1,112,4,2,113],[81,32,81,5715,80,-1000,25,2,120,24,4,112,98,21,1],[81,2104,80,200,64,129,455],[87,8,67,121,99,108,101,32,61,32,81,5714,49,54,87,13,59,32,80,111,115,105,116,105,111,110,32,61,32,54,81,5715,49,54,87,10,59,32,83,116,97,116,101,32,61,32,54,81,2036,136,202],[82,24,1,80,0,56,54,87,12,59,32,83,121,109,98,111,108,32,61,32,34,54,82,21,1,48,54,80,34,48,54,190,191,147],[82,21,1,48,81,5230,81,2036,80,1,25,2,120,24,4,112,60,98,21,2,147],[82,21,2,80,0,64,129,458],[80,42,48,81,5230,81,2036,80,1,25,2,120,24,4,112,60,98,21,2,147],[82,21,2,80,0,64,129,463],[87,12,65,99,116,105,111,110,32,102,111,114,32,34,82,21,1,48,54,87,27,34,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,115,116,97,116,101,32,54,81,2036,136,202],[82,24,1,80,0,56,54,190,191,147],[80,0,97,2036],[128,474],[82,21,3,81,2036,82,21,1,136,265],[82,24,1,80,0,56,2,121,147],[81,2104,80,200,64,129,467],[87,12,80,114,111,99,101,115,115,105,110,103,32,34,82,21,3,54,80,34,48,54,190,191,147],[82,21,3,87,4,72,65,76,84,72,129,470],[80,0,97,2036],[128,474],[82,21,3,87,0,73,129,473],[82,21,3,136,418],[128,470],[81,5472,81,2036,80,1,25,2,120,24,4,112,82,21,2,80,1,25,2,120,24,4,112,97,2036],[145,21,141,137],[140,14],[80,870,80,25,224],[80,9849600,221],[80,95,80,32,80,16777147,80,-1,246],[81,2104,80,200,64,129,482],[87,4,83,76,79,87,80,16,80,23,189],[128,483],[87,5,32,70,65,83,84,80,16,80,23,189],[141,137],[136,114],[136,281],[136,207],[82,24,1,129,503],[80,0,97,5714],[136,311],[136,341],[136,377],[136,475],[80,1,97,2036],[136,446],[136,377],[81,2104,178],[80,-4,184,80,0,67,80,-5,184,80,870,67,9,80,-6,184,80,100,66,9,129,502],[80,200,81,2104,25,97,2104],[136,475],[162],[80,500,178],[80,-9,184,17,80,27,64,129,494],[81,2036,80,0,64,129,484],[130]]")},function(n){n.exports=JSON.parse("[[80,24,1,1,80,0,113,80,6,2,113,4,80,267,115,80,291,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,31,97,30],[80,6,97,31,84,38,97,32],[80,6,97,38,84,45,97,33],[80,6,97,45,84,52,97,34],[80,6,97,52,84,59,97,35],[80,6,97,59,84,66,97,36],[80,6,97,66,84,73,97,37],[80,6,97,73],[84,32,97,31],[80,101,97,32],[84,137,97,136],[80,4,97,137,84,143,97,138],[80,33,97,142,84,177,97,139],[80,33,97,176,84,211,97,140],[80,33,97,210,84,245,97,141],[80,33,97,244],[84,279,97,278],[80,4,97,279],[84,285,97,284],[80,4,97,285],[128,185],[140,1],[81,136,80,1,80,1,25,2,120,24,4,112,87,17,66,117,98,98,108,101,115,111,114,116,58,32,32,32,32,32,32,2,121],[81,136,80,2,80,1,25,2,120,24,4,112,87,17,83,101,108,101,99,116,105,111,110,115,111,114,116,58,32,32,32,2,121],[81,136,80,3,80,1,25,2,120,24,4,112,87,17,73,110,115,101,114,116,105,111,110,115,111,114,116,58,32,32,32,2,121],[81,136,80,4,80,1,25,2,120,24,4,112,87,18,81,117,105,99,107,115,111,114,116,58,32,32,32,32,32,32,32,32,2,121],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,1],[98,11,1,80,100],[82,11,1,69,129,38],[81,31,82,11,1,2,120,24,4,82,11,1,2,113],[82,11,1,4,128,34],[80,1],[98,11,1,80,4],[82,11,1,69,129,44],[81,278,82,11,1,80,1,25,2,120,24,4,80,0,2,113],[81,284,82,11,1,80,1,25,2,120,24,4,80,0,2,113],[82,11,1,4,128,39],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,3,98,12,2],[82,12,2,82,12,3,66,98,12,1],[84,134,1,112,4,2,113],[81,12,97,23,145,12,141,137],[140,4],[144,13,3],[85,13,1,80,3,115,98,13,2,98,13,1],[81,31,82,13,1,2,120,24,4,112,98,13,3],[81,31,82,13,1,2,120,24,4,81,31,82,13,2,2,120,24,4,112,2,113],[81,31,82,13,2,2,120,24,4,82,13,3,2,113],[84,135,1,112,4,2,113],[145,13,141,137],[140,5],[144,14,2],[85,14,1,80,2,115],[80,-1,98,14,1],[80,2],[98,14,2,80,100],[82,14,2,69,129,69],[81,31,82,14,2,80,1,25,2,120,24,4,112,81,31,82,14,2,2,120,24,4,112,67,129,68],[80,0,98,14,1],[82,14,2,4,128,64],[81,14,97,23,145,14,141,137],[140,6],[144,15,1],[85,15,1,80,1,115],[87,5,32,32,32,32,32,190],[80,1],[98,15,1,80,100],[82,15,1,69,129,82],[81,31,82,15,1,2,120,24,4,112,49,80,32,48,54,190,147],[82,15,1,80,10,29,80,0,64,129,81],[87,0,190,191],[87,5,32,32,32,32,32,190],[82,15,1,4,128,75],[87,0,190,191],[145,15,141,137],[140,7],[144,16,2],[85,16,1,80,2,115],[80,1],[98,16,1,80,100],[82,16,1,69,129,93],[80,100,19,80,1,24,98,16,2],[82,16,1,82,16,2,136,51],[82,16,1,4,128,88],[145,16,141,137],[140,8],[144,17,2],[85,17,1,80,2,115],[80,1],[98,17,1,80,100],[82,17,1,69,129,108],[80,1],[98,17,2,80,100,80,1,25],[82,17,2,69,129,107],[81,31,82,17,2,80,1,24,2,120,24,4,112,81,31,82,17,2,2,120,24,4,112,136,45],[82,23,1,129,106],[82,17,2,82,17,2,80,1,24,136,51],[82,17,2,4,128,101],[82,17,1,4,128,98],[145,17,141,137],[140,9],[144,18,3],[85,18,1,80,3,115],[80,1],[98,18,1,80,100],[82,18,1,69,129,126],[82,18,1,98,18,3],[82,18,1,80,1,24],[98,18,2,80,100],[82,18,2,69,129,123],[81,31,82,18,2,2,120,24,4,112,81,31,82,18,3,2,120,24,4,112,136,45],[82,23,1,129,122],[82,18,2,98,18,3],[82,18,2,4,128,117],[82,18,3,82,18,1,65,129,125],[82,18,1,82,18,3,136,51],[82,18,1,4,128,113],[145,18,141,137],[140,10],[144,19,2],[85,19,1,80,2,115],[80,2],[98,19,1,80,100],[82,19,1,69,129,140],[82,19,1,98,19,2],[82,19,2,80,1,67,81,31,82,19,2,2,120,24,4,112,81,31,82,19,2,80,1,25,2,120,24,4,112,136,45],[82,23,1,9,129,139],[82,19,2,80,1,25,82,19,2,136,51],[85,19,2,1,112,5,2,113],[128,134],[82,19,1,4,128,131],[145,19,141,137],[140,12],[144,21,4],[85,21,1,80,4,115,98,21,2,98,21,1],[82,21,1,82,21,2,66,129,157],[82,21,1,98,21,3],[82,21,1,80,1,24],[98,21,4,82,21,2],[82,21,4,69,129,154],[81,31,82,21,4,2,120,24,4,112,81,31,82,21,1,2,120,24,4,112,136,45],[82,23,1,129,153],[85,21,3,1,112,4,2,113],[82,21,3,82,21,4,136,51],[82,21,4,4,128,147],[82,21,1,82,21,3,136,51],[82,21,1,82,21,3,80,1,25,136,141],[82,21,3,80,1,24,82,21,2,136,141],[145,21,141,137],[140,11],[80,1,80,100,136,141],[141,137],[140,13],[144,22,1],[85,22,1,80,1,115,98,22,1],[80,0,97,134],[80,0,97,135],[82,22,1,80,1,64,129,169],[136,94],[128,177],[82,22,1,80,2,64,129,172],[136,109],[128,177],[82,22,1,80,3,64,129,175],[136,127],[128,177],[82,22,1,80,4,64,129,177],[136,158],[81,136,82,22,1,80,1,25,2,120,24,4,112,81,134,49,54,87,12,32,99,111,109,112,97,114,105,115,111,110,115,54,87,2,32,32,54,81,135,49,54,87,6,32,115,119,97,112,115,54,190,191,147],[80,-1,129,184],[136,59],[82,23,1,8,129,184],[87,17,32,32,32,32,32,83,111,114,116,32,102,97,105,108,101,100,58,190,191],[136,70],[130],[145,22,141,137],[80,-1,80,16777215,80,-1,166],[136,24],[136,30],[80,4,49,87,61,32,115,111,114,116,105,110,103,32,109,101,116,104,111,100,115,32,119,105,108,108,32,98,101,32,99,111,109,112,97,114,101,100,44,32,101,97,99,104,32,111,102,32,116,104,101,109,32,98,101,105,110,103,32,117,115,101,100,32,116,111,54,190,191,147],[87,26,115,111,114,116,32,114,97,110,100,111,109,105,115,101,100,32,97,114,114,97,121,115,32,111,102,32,80,100,49,54,87,8,32,105,116,101,109,115,32,40,54,80,10,49,54,87,22,32,116,105,109,101,115,41,44,32,119,104,105,108,101,32,107,101,101,112,105,110,103,54,190,191,147],[87,55,116,114,97,99,107,32,111,102,32,116,104,101,32,110,117,109,98,101,114,115,32,111,102,32,99,111,109,112,97,114,105,115,111,110,115,32,97,110,100,32,115,119,97,112,115,32,114,101,113,117,105,114,101,100,46,190,191],[80,-1,129,193],[87,59,73,102,32,115,111,114,116,105,110,103,32,102,97,105,108,115,44,32,116,104,101,32,112,114,111,103,114,97,109,32,119,105,108,108,32,104,97,108,116,32,97,110,100,32,115,104,111,119,32,116,104,101,32,97,114,114,97,121,46,190,191],[87,0,190,191],[80,1],[97,290,80,10],[81,290,69,129,207],[80,1],[97,291,80,4],[81,291,69,129,205],[136,84],[81,291,136,161],[81,278,81,291,80,1,25,2,120,24,4,81,278,81,291,80,1,25,2,120,24,4,112,81,134,24,2,113],[81,284,81,291,80,1,25,2,120,24,4,81,284,81,291,80,1,25,2,120,24,4,112,81,135,24,2,113],[81,291,4,128,198],[87,0,190,191],[81,290,4,128,195],[80,-1,80,16777147,80,-1,166],[87,22,65,118,101,114,97,103,101,115,32,102,114,111,109,32,115,111,114,116,105,110,103,32,80,100,49,54,87,13,32,105,116,101,109,115,44,32,111,118,101,114,32,54,80,10,49,54,87,7,32,116,114,105,97,108,115,54,190,191,147],[87,0,190,191],[87,34,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,79,77,80,65,82,73,83,79,78,83,32,32,32,83,87,65,80,83,190,191],[80,1],[97,291,80,4],[81,291,69,129,216],[81,136,81,291,80,1,25,2,120,24,4,112,81,278,81,291,80,1,25,2,120,24,4,112,80,10,80,1,52,54,87,6,32,32,32,32,32,32,54,81,284,81,291,80,1,25,2,120,24,4,112,80,10,80,1,52,54,190,191],[81,291,4,147,128,212],[130]]")},function(n){n.exports=JSON.parse("[[80,21,1,1,80,0,113,80,6,2,113,4,80,143,115,80,164,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,28,97,27],[80,6,97,28,84,35,97,29],[80,6,97,35,84,42,97,30],[80,6,97,42,84,49,97,31],[80,6,97,49,84,56,97,32],[80,6,97,56,84,63,97,33],[80,6,97,63,84,70,97,34],[80,6,97,70],[84,29,97,28],[80,20,97,29,84,50,97,30],[80,3,97,50,84,54,97,31],[80,3,97,54,84,58,97,32],[80,3,97,58,84,62,97,33],[80,3,97,62,84,66,97,34],[80,3,97,66,84,70,97,35],[80,3,97,70,84,74,97,36],[80,3,97,74,84,78,97,37],[80,3,97,78,84,82,97,38],[80,3,97,82,84,86,97,39],[80,3,97,86,84,90,97,40],[80,3,97,90,84,94,97,41],[80,3,97,94,84,98,97,42],[80,3,97,98,84,102,97,43],[80,3,97,102,84,106,97,44],[80,3,97,106,84,110,97,45],[80,3,97,110,84,114,97,46],[80,3,97,114,84,118,97,47],[80,3,97,118,84,122,97,48],[80,3,97,122,84,126,97,49],[80,3,97,126],[84,131,97,130],[80,20,97,131],[128,241],[140,1],[144,10,1],[85,10,1,80,1,115],[80,16777215,248],[80,35,80,50,224],[80,9849600,221],[87,23,32,32,32,78,73,77,32,76,69,65,82,78,73,78,71,32,80,82,79,71,82,65,77,80,4,80,16,10,80,42,189],[80,11674146,221],[80,35,80,150,224],[87,43,84,104,105,115,32,112,114,111,103,114,97,109,32,108,101,97,114,110,115,32,116,111,32,112,108,97,121,32,78,73,77,44,32,97,110,100,32,99,97,110,32,98,101,80,4,80,32,189],[80,35,80,200,224],[87,44,99,111,110,102,105,103,117,114,101,100,32,116,111,32,112,108,97,121,32,101,105,116,104,101,114,32,97,103,97,105,110,115,116,32,121,111,117,32,40,104,117,109,97,110,80,4,80,32,189],[80,35,80,250,224],[87,42,111,112,112,111,110,101,110,116,41,44,32,111,114,32,97,103,97,105,110,115,116,32,97,32,115,105,109,117,108,97,116,101,100,32,99,111,109,112,117,116,101,114,80,4,80,32,189],[80,35,80,300,224],[87,40,111,112,112,111,110,101,110,116,44,32,119,104,105,99,104,32,101,105,116,104,101,114,32,112,108,97,121,115,32,114,97,110,100,111,109,108,121,32,111,114,80,4,80,32,189],[80,35,80,350,224],[87,30,105,116,115,101,108,102,32,108,101,97,114,110,115,32,102,114,111,109,32,101,120,112,101,114,105,101,110,99,101,46,80,4,80,32,189],[80,0,221],[80,35,80,525,224],[87,26,67,104,111,111,115,101,32,102,114,111,109,32,116,104,101,32,102,111,108,108,111,119,105,110,103,58,80,4,80,16,10,80,36,189],[80,35,80,650,224],[87,20,32,32,49,46,32,32,72,117,109,97,110,32,111,112,112,111,110,101,110,116,80,4,80,36,189],[80,35,80,750,224],[87,21,32,32,50,46,32,32,82,97,110,100,111,109,32,111,112,112,111,110,101,110,116,80,4,80,36,189],[80,35,80,850,224],[87,31,32,32,51,46,32,32,79,112,112,111,110,101,110,116,32,116,104,97,116,32,97,108,115,111,32,108,101,97,114,110,115,80,4,80,36,189],[80,-9,184,17,80,48,25,98,10,1],[82,10,1,80,0,67,82,10,1,80,4,66,9,129,63],[82,10,1,97,162],[80,16777215,248],[145,10,141,137],[140,2],[144,11,2],[85,11,1,80,2,115],[80,1],[98,11,1,80,20],[82,11,1,69,129,83],[80,1],[98,11,2,80,3],[82,11,2,69,129,82],[82,11,2,82,11,1,67,129,80],[81,28,82,11,1,80,1,25,2,120,24,4,112,82,11,2,80,1,25,2,120,24,4,80,0,2,113],[128,81],[81,28,82,11,1,80,1,25,2,120,24,4,112,82,11,2,80,1,25,2,120,24,4,80,5,2,113],[82,11,2,4,128,75],[82,11,1,4,128,72],[80,20,97,152],[80,1000,80,10,80,1,24,27,97,154],[80,50,97,155],[81,154,80,3,26,80,8,27,97,156],[80,28,97,157],[80,0,97,160],[80,0,97,161],[145,11,141,137],[140,3],[144,12,2],[85,12,1,80,2,115],[163],[80,16777215,248],[80,0],[98,12,1,80,20,80,1,25],[82,12,1,69,129,132],[80,3,81,154,26,80,2,27,82,12,1,80,10,29,81,154,26,24,81,155,82,12,1,80,10,28,81,155,26,80,3,80,3,24,26,24,224],[82,12,1,81,152,66,129,104],[80,16711680,221],[81,156,243],[128,106],[80,16777215,221],[81,156,243],[80,3,16,81,157,26,80,4,27,80,0,225],[80,1],[98,12,2,80,3],[82,12,2,69,129,122],[80,0,81,155,225],[80,0,221],[81,154,80,2,27,81,155,80,16777147,80,-1,246],[81,130,82,12,1,80,1,24,80,1,25,2,120,24,4,112,82,12,2,64,129,116],[81,154,80,2,27,81,155,80,65280,80,-1,246],[128,120],[81,130,82,12,1,80,1,24,80,1,25,2,120,24,4,112,82,12,2,16,64,129,119],[81,154,80,2,27,81,155,80,65535,80,-1,246],[128,120],[81,154,80,2,27,81,155,80,16777147,80,-1,246],[80,32,48,81,28,82,12,1,80,1,24,80,1,25,2,120,24,4,112,82,12,2,80,1,25,2,120,24,4,112,49,54,80,4,81,157,189,147],[82,12,2,4,128,108],[82,12,1,80,10,29,80,0,64,129,131],[81,154,80,2,27,81,157,80,2,27,25,81,155,82,12,1,80,10,27,81,155,26,80,3,80,3,24,26,24,224],[80,255,221],[80,1],[98,12,2,80,3],[82,12,2,69,129,131],[80,0,81,155,225],[82,12,2,49,80,4,81,157,189,147],[82,12,2,4,128,126],[82,12,1,4,128,97],[162],[145,12,141,137],[140,4],[144,13,36],[85,13,1,80,36,115,85,13,3,98,13,1,80,33,98,13,2,98,13,36],[82,13,36,80,1,64,129,140],[82,13,1,87,6,49,32,99,111,105,110,2,121],[128,141],[82,13,1,82,13,36,49,87,6,32,99,111,105,110,115,54,2,121,147],[81,13,97,20,145,13,141,137],[140,5],[144,14,3],[85,14,1,80,3,115,98,14,2],[80,0,221],[81,154,81,155,80,20,80,1,25,80,10,28,80,1,24,81,155,26,80,3,80,3,24,26,24,224],[80,1000,80,500,80,16777215,80,0,246],[81,152,80,1,64,129,153],[87,51,83,105,110,99,101,32,116,104,101,114,101,32,105,115,32,111,110,108,121,32,111,110,101,32,99,111,105,110,32,108,101,102,116,44,32,121,111,117,32,109,117,115,116,32,116,97,107,101,32,105,116,80,4,81,157,189],[80,2000,178],[80,1,98,14,1],[128,166],[87,10,84,104,101,114,101,32,97,114,101,32,81,152,136,134],[82,20,1,80,0,56,54,87,30,44,32,111,102,32,119,104,105,99,104,32,121,111,117,32,109,97,121,32,116,97,107,101,32,117,112,32,116,111,32,54,82,14,2,49,54,80,46,48,54,80,4,81,157,189,147],[80,0,81,155,225],[87,33,72,111,119,32,109,97,110,121,32,119,111,117,108,100,32,121,111,117,32,108,105,107,101,32,116,111,32,116,97,107,101,63,32,80,4,81,157,189],[80,0,185],[80,1,187,80,0,51,98,14,3,147],[82,14,3,80,0,67,82,14,3,82,14,2,68,9,129,158],[80,0,185],[80,0,81,155,80,2,26,225],[87,20,79,75,32,45,32,121,111,117,32,97,114,101,32,116,97,107,105,110,103,32,82,14,3,136,134],[82,20,1,80,0,56,54,87,4,32,46,46,46,54,80,4,81,157,189,147],[80,0,81,155,225],[82,14,3,98,14,1],[81,14,97,20,145,14,141,137],[140,6],[144,15,2],[85,15,1,80,2,115,98,15,2],[82,15,2,19,80,1,24,98,15,1],[81,15,97,20,145,15,141,137],[140,7],[144,16,4],[85,16,1,80,4,115],[80,0,98,16,3],[80,1],[98,16,2,80,3],[82,16,2,69,129,181],[82,16,3,81,28,81,152,80,1,25,2,120,24,4,112,82,16,2,80,1,25,2,120,24,4,112,24,98,16,3],[82,16,2,4,128,177],[82,16,3,19,98,16,4],[80,0,98,16,2],[85,16,2,1,112,4,2,113],[82,16,4,81,28,81,152,80,1,25,2,120,24,4,112,82,16,2,80,1,25,2,120,24,4,112,25,98,16,4],[82,16,4,80,0,66,129,183],[82,16,2,98,16,1],[81,16,97,20,145,16,141,137],[140,8],[144,17,35],[85,17,1,80,35,115],[85,17,3,98,17,1,80,33,98,17,2],[81,162,80,1,64,129,203],[80,0,221],[80,200,81,155,80,20,80,1,25,80,10,28,80,1,24,81,155,26,80,3,80,3,24,26,24,224],[81,159,80,0,67,129,198],[87,9,89,79,85,32,87,73,78,33,33,80,4,81,157,80,3,26,189],[128,199],[87,8,32,73,32,87,73,78,33,33,80,4,81,157,80,3,26,189],[80,0,80,4,81,155,26,225],[87,41,80,114,101,115,115,32,60,82,69,84,85,82,78,62,32,111,114,32,60,69,78,84,69,82,62,32,116,111,32,99,111,110,116,105,110,117,101,32,46,46,46,80,4,81,157,189],[82,17,1,188,2,121,147],[128,204],[87,9,80,82,79,71,82,65,77,58,32,81,160,49,54,87,13,59,32,32,79,80,80,79,78,69,78,84,58,32,54,81,161,49,54,190,191,147],[145,17,141,137],[140,9],[144,18,1],[85,18,1,80,1,115],[80,1],[98,18,1,80,20],[82,18,1,69,129,213],[81,130,82,18,1,80,1,25,2,120,24,4,80,0,2,113],[82,18,1,4,128,209],[80,20,97,152],[145,18,141,137],[140,10],[144,19,3],[85,19,1,80,3,115],[80,1],[98,19,1,80,20],[82,19,1,69,129,240],[81,130,82,19,1,80,1,25,2,120,24,4,112,80,0,65,129,239],[81,130,82,19,1,80,1,25,2,120,24,4,112,81,159,26,80,0,67,129,225],[80,1,98,19,3],[128,226],[80,1,16,98,19,3],[80,1],[98,19,2,80,3],[82,19,2,69,129,239],[82,19,2,82,19,1,68,129,238],[82,19,2,81,130,82,19,1,80,1,25,2,120,24,4,112,17,64,129,233],[81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,112,82,19,3,24,2,113],[128,234],[81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,112,82,19,3,25,2,113],[81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,112,80,0,66,129,236],[81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,80,0,2,113],[81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,112,80,9,67,129,238],[81,28,82,19,1,80,1,25,2,120,24,4,112,82,19,2,80,1,25,2,120,24,4,80,9,2,113],[82,19,2,4,128,227],[82,19,1,4,128,219],[145,19,141,137],[80,0,164],[136,36],[136,68],[136,205],[136,91],[81,152,80,3,67,129,249],[80,3,97,158],[128,250],[81,152,97,158],[81,162,80,1,64,129,254],[81,158,136,142],[82,20,1,97,153],[128,260],[81,162,80,2,64,129,258],[81,158,136,167],[82,20,1,97,153],[128,260],[136,172],[82,20,1,97,153],[81,130,81,152,80,1,25,2,120,24,4,81,153,2,113],[81,152,81,153,25,97,152],[81,152,80,0,64,129,265],[80,1,97,159],[128,289],[80,1,16,97,159],[136,172],[82,20,1,97,153],[81,162,80,1,64,129,287],[80,2000,178],[136,91],[81,154,81,155,80,20,80,1,25,80,10,28,80,1,24,81,155,26,80,3,80,3,24,26,24,224],[87,48,84,104,101,32,99,111,109,112,117,116,101,114,32,119,105,108,108,32,99,104,111,111,115,101,32,111,110,32,116,104,101,115,101,32,112,114,111,98,97,98,105,108,105,116,105,101,115,58,80,4,81,157,189],[80,0,81,155,80,2,27,225],[81,28,81,152,80,1,25,2,120,24,4,112,80,1,80,1,25,2,120,24,4,112,81,28,81,152,80,1,25,2,120,24,4,112,80,2,80,1,25,2,120,24,4,112,24,81,28,81,152,80,1,25,2,120,24,4,112,80,3,80,1,25,2,120,24,4,112,24,97,163],[80,1],[97,164,80,3],[81,164,69,129,282],[80,0,81,155,225],[87,5,32,32,32,32,32,81,164,136,134],[82,20,1,80,0,56,54,87,2,58,32,54,81,28,81,152,80,1,25,2,120,24,4,112,81,164,80,1,25,2,120,24,4,112,49,54,80,47,48,54,81,163,49,54,80,4,81,157,189,147],[81,164,4,128,276],[80,2000,178],[80,0,80,3,81,155,26,80,2,27,225],[87,36,79,75,44,32,105,110,32,114,101,115,112,111,110,115,101,44,32,116,104,101,32,99,111,109,112,117,116,101,114,32,116,97,107,101,115,32,81,153,136,134],[82,20,1,80,0,56,54,87,4,32,46,46,46,54,80,4,81,157,189,147],[80,2000,178],[81,130,81,152,80,1,25,2,120,24,4,81,153,16,2,113],[81,152,81,153,25,97,152],[136,91],[81,152,80,0,64,129,245],[81,159,80,0,67,129,294],[84,161,1,112,4,2,113],[128,295],[84,160,1,112,4,2,113],[136,188],[136,215],[80,0,80,1,64,129,244],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,26,115,80,41,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,22,97,21],[80,6,97,22,84,29,97,23],[80,6,97,29,84,36,97,24],[80,6,97,36,84,43,97,25],[80,6,97,43,84,50,97,26],[80,6,97,50,84,57,97,27],[80,6,97,57,84,64,97,28],[80,6,97,64],[84,23,97,22],[80,5,97,23],[128,101],[140,1],[80,1000,80,2,80,20,26,25,80,5,28,97,29],[80,800,80,20,25,80,8,28,97,30],[81,30,80,8,26,80,800,67,129,19],[80,800,80,8,28,97,30],[81,30,80,20,25,80,2,28,97,33],[80,20,81,33,24,81,29,25,97,31],[80,800,81,33,25,81,30,24,97,32],[80,0,97,36],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,1],[98,11,1,80,5],[82,11,1,69,129,32],[81,22,82,11,1,80,1,25,2,120,24,4,80,8,19,80,1,24,2,113],[82,11,1,4,128,28],[145,11,141,137],[140,3],[144,12,1],[85,12,1,80,1,115],[80,0,97,34],[80,0,97,35],[80,1],[98,12,1,80,5],[82,12,1,69,129,44],[81,34,81,22,82,12,1,80,1,25,2,120,24,4,112,24,97,34],[81,35,81,22,82,12,1,80,1,25,2,120,24,4,112,11,97,35],[82,12,1,4,128,39],[145,12,141,137],[140,4],[144,13,3],[85,13,1,80,3,115],[80,16777215,248],[81,34,19,80,1,24,98,13,3],[80,1],[98,13,1,80,5],[82,13,1,69,129,73],[81,22,82,13,1,80,1,25,2,120,24,4,112,98,13,2],[82,13,2,80,0,67,129,72],[85,13,3,1,112,5,2,113],[82,13,3,80,0,64,129,59],[82,13,1,97,40],[82,13,2,97,41],[81,31,81,29,82,13,1,26,24,81,32,81,30,82,13,2,26,25,224],[82,13,1,222,221],[81,33,243],[81,35,81,22,82,13,1,80,1,25,2,120,24,4,112,11,82,13,2,80,1,25,11,80,0,64,129,66],[82,13,1,97,40],[82,13,2,97,41],[80,0,98,13,3],[81,36,129,70],[81,33,80,20,24,81,33,16,80,15,24,225],[80,0,221],[81,35,81,22,82,13,1,80,1,25,2,120,24,4,112,11,82,13,2,80,1,25,11,49,80,4,80,20,189,147],[85,13,2,1,112,5,2,113],[128,54],[82,13,1,4,128,51],[80,0,221],[80,20,80,900,224],[87,14,84,111,116,97,108,32,67,111,105,110,115,58,32,32,81,34,49,54,80,4,80,30,189,147],[81,36,129,87],[80,0,221],[80,450,80,900,224],[87,12,88,79,82,32,115,99,111,114,101,58,32,32,81,35,49,54,80,4,80,30,189,147],[80,850,80,890,224],[80,8388608,221],[80,140,80,100,80,16711680,80,-1,246],[87,5,32,72,73,68,69,80,4,80,25,189],[80,850,80,940,224],[87,6,32,77,65,84,72,83,80,4,80,25,189],[128,93],[80,8388608,221],[80,850,80,890,224],[80,140,80,100,80,16711680,80,-1,246],[87,5,32,83,72,79,87,80,4,80,25,189],[80,850,80,940,224],[87,6,32,77,65,84,72,83,80,4,80,25,189],[145,13,141,137],[140,5],[144,14,2],[85,14,1,80,2,115,98,14,2,98,14,1],[81,31,81,29,82,14,1,26,24,81,32,81,30,82,14,2,26,25,224],[80,0,221],[81,33,243],[145,14,141,137],[136,14],[136,24],[136,33],[136,45],[80,2,213],[80,-1,184,80,0,67,129,106],[80,200,178],[80,-5,184,80,-6,184,210,97,37],[81,37,80,16777215,222,65,81,37,80,0,222,65,9,129,106],[80,11,213],[80,-6,184,80,800,69,129,117],[80,8,80,1,24,97,39],[81,36,8,97,36],[136,33],[136,45],[128,119],[80,-5,184,80,20,25,81,33,24,81,29,28,80,1,24,97,38],[81,32,81,33,25,80,-6,184,25,81,30,28,80,1,24,97,39],[80,-6,184,80,800,66,129,105],[81,22,81,38,80,1,25,2,120,24,4,81,39,80,1,25,2,113],[136,33],[81,34,80,0,64,129,129],[80,16777215,248],[80,330,80,850,224],[80,255,221],[87,8,89,111,117,32,87,105,110,33,80,4,80,60,189],[80,5000,178],[128,145],[136,45],[80,1000,178],[81,40,81,41,136,94],[81,22,81,40,80,1,25,2,120,24,4,81,41,80,1,25,2,113],[136,33],[81,35,80,0,64,81,36,8,9,129,138],[80,15602313,221],[80,400,80,900,224],[87,17,73,39,109,32,103,111,105,110,103,32,116,111,32,119,105,110,33,80,4,80,30,189],[80,2500,178],[81,34,80,0,64,129,145],[80,16777215,248],[80,330,80,850,224],[80,16711680,221],[87,6,73,32,87,105,110,33,80,4,80,60,189],[80,5000,178],[81,34,80,0,64,129,103],[80,0,80,1,64,129,102],[130]]")},function(n){n.exports=JSON.parse("[[80,23,1,1,80,0,113,80,6,2,113,4,80,554,115,80,577,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,30,97,29],[80,6,97,30,84,37,97,31],[80,6,97,37,84,44,97,32],[80,6,97,44,84,51,97,33],[80,6,97,51,84,58,97,34],[80,6,97,58,84,65,97,35],[80,6,97,65,84,72,97,36],[80,6,97,72],[84,31,97,30],[80,9,97,31],[84,42,97,41],[80,9,97,42],[84,53,97,52],[80,256,97,53],[84,311,97,310],[80,256,97,311],[128,213],[140,1],[81,30,80,0,2,120,24,4,80,1,2,113],[81,41,80,0,2,120,24,4,80,2,16,2,113],[81,30,80,1,2,120,24,4,80,2,2,113],[81,41,80,1,2,120,24,4,80,1,16,2,113],[81,30,80,2,2,120,24,4,80,2,2,113],[81,41,80,2,2,120,24,4,80,1,2,113],[81,30,80,3,2,120,24,4,80,1,2,113],[81,41,80,3,2,120,24,4,80,2,2,113],[81,30,80,4,2,120,24,4,80,1,16,2,113],[81,41,80,4,2,120,24,4,80,2,2,113],[81,30,80,5,2,120,24,4,80,2,16,2,113],[81,41,80,5,2,120,24,4,80,1,2,113],[81,30,80,6,2,120,24,4,80,2,16,2,113],[81,41,80,6,2,120,24,4,80,1,16,2,113],[81,30,80,7,2,120,24,4,80,1,16,2,113],[81,41,80,7,2,120,24,4,80,2,16,2,113],[80,1000,80,2,80,20,26,25,80,10,27,97,569],[80,1000,80,2,80,20,26,25,80,10,27,97,570],[81,569,81,570,68,129,42],[81,569,80,2,26,80,5,27,97,571],[128,43],[81,570,80,2,26,80,5,27,97,571],[80,10,80,10,26,80,1,25,97,568],[141,137],[140,2],[144,11,2],[85,11,1,80,2,115,98,11,2],[82,11,2,80,10,29,98,11,1],[81,11,97,22,145,11,141,137],[140,3],[144,12,2],[85,12,1,80,2,115,98,12,2],[82,12,2,80,10,28,98,12,1],[81,12,97,22,145,12,141,137],[140,4],[144,13,3],[85,13,1,80,3,115,98,13,3,98,13,2],[82,13,3,80,10,26,82,13,2,24,98,13,1],[81,13,97,22,145,13,141,137],[140,5],[144,14,1],[85,14,1,80,1,115,98,14,1],[80,20,81,569,82,14,1,136,45],[82,22,1,26,24,81,569,80,2,27,24,80,20,81,570,82,14,1,136,50],[82,22,1,26,24,81,570,80,2,27,24,224],[81,52,82,14,1,2,120,24,4,112,80,0,64,129,70],[80,16416882,221],[81,571,243],[128,92],[80,16777215,221],[81,571,243],[80,10,80,10,67,129,83],[81,52,82,14,1,2,120,24,4,112,80,10,66,129,76],[80,8,16,80,20,16,225],[128,80],[81,52,82,14,1,2,120,24,4,112,80,100,66,129,79],[80,15,16,80,20,16,225],[128,80],[80,22,16,80,20,16,225],[80,0,221],[81,52,82,14,1,2,120,24,4,112,49,80,4,80,20,189,147],[128,92],[81,52,82,14,1,2,120,24,4,112,80,10,66,129,86],[80,10,16,80,24,16,225],[128,90],[81,52,82,14,1,2,120,24,4,112,80,100,66,129,89],[80,20,16,80,24,16,225],[128,90],[80,30,16,80,24,16,225],[80,0,221],[81,52,82,14,1,2,120,24,4,112,49,80,4,80,25,189,147],[145,14,141,137],[140,6],[144,15,1],[85,15,1,80,1,115],[80,25600,248],[80,0],[98,15,1,81,568],[82,15,1,69,129,102],[82,15,1,136,60],[82,15,1,4,128,98],[145,15,141,137],[140,7],[144,16,5],[85,16,1,80,5,115,98,16,3,98,16,2],[82,16,2,136,45],[82,22,1,81,30,82,16,3,2,120,24,4,112,24,98,16,4],[82,16,2,136,50],[82,22,1,81,41,82,16,3,2,120,24,4,112,24,98,16,5],[82,16,4,80,0,69,82,16,4,80,10,66,9,82,16,5,80,0,69,9,82,16,5,80,10,66,9,129,116],[82,16,4,82,16,5,136,55],[82,22,1,98,16,1],[81,52,82,16,1,2,120,24,4,112,80,0,67,129,115],[80,1,16,98,16,1],[128,117],[80,1,16,98,16,1],[81,16,97,22,145,16,141,137],[140,8],[144,17,7],[85,17,1,80,7,115,98,17,3,98,17,2],[82,17,2,136,45],[82,22,1,81,30,82,17,3,2,120,24,4,112,24,98,17,4],[82,17,2,136,50],[82,22,1,81,41,82,17,3,2,120,24,4,112,24,98,17,5],[82,17,4,82,17,5,136,55],[82,22,1,98,17,1],[81,576,129,136],[80,0],[98,17,7,80,7],[82,17,7,69,129,136],[82,17,1,82,17,7,136,103],[82,22,1,98,17,6],[82,17,6,80,1,16,67,129,135],[81,310,82,17,6,2,120,24,4,1,112,5,2,113],[82,17,7,4,128,129],[81,17,97,22,145,17,141,137],[140,9],[144,18,2],[85,18,1,80,2,115],[80,0],[98,18,1,81,568],[82,18,1,69,129,145],[81,52,82,18,1,2,120,24,4,80,0,2,113],[82,18,1,4,128,141],[81,576,129,158],[80,0],[98,18,1,81,568],[82,18,1,69,129,158],[81,310,82,18,1,2,120,24,4,80,0,2,113],[80,0],[98,18,2,80,7],[82,18,2,69,129,157],[82,18,1,82,18,2,136,103],[82,22,1,80,1,16,67,129,156],[81,310,82,18,1,2,120,24,4,1,112,4,2,113],[82,18,2,4,128,151],[82,18,1,4,128,147],[145,18,141,137],[140,10],[144,19,3],[85,19,1,80,3,115,98,19,2],[80,8,19,98,19,3],[82,19,2,82,19,3,136,103],[82,22,1,80,1,16,67,176,80,500,69,10,129,162],[82,19,3,98,19,1],[81,19,97,22,145,19,141,137],[140,11],[144,20,7],[85,20,1,80,7,115,98,20,2],[80,1,16,98,20,3],[80,9,98,20,6],[80,0],[98,20,4,80,8],[82,20,4,69,129,188],[82,20,2,82,20,4,136,103],[82,22,1,98,20,5],[82,20,5,80,1,16,67,129,187],[81,310,82,20,5,2,120,24,4,112,82,20,6,66,129,183],[82,20,4,98,20,3],[81,310,82,20,5,2,120,24,4,112,98,20,6],[80,1,98,20,7],[128,187],[81,310,82,20,5,2,120,24,4,112,82,20,6,64,129,187],[85,20,7,1,112,4,2,113],[82,20,7,19,80,0,64,129,187],[82,20,4,98,20,3],[82,20,4,4,128,173],[82,20,3,98,20,1],[81,20,97,22,145,20,141,137],[140,12],[144,21,3],[85,21,1,80,3,115],[80,1,97,572],[81,568,80,1,24,19,98,21,1],[81,52,82,21,1,2,120,24,4,81,572,2,113],[80,0,177],[176,80,500,66,129,212],[81,576,129,202],[82,21,1,136,167],[82,22,1,98,21,3],[128,204],[82,21,1,136,159],[82,22,1,98,21,3],[176,80,500,66,82,21,3,80,1,16,67,9,129,211],[82,21,1,82,21,3,136,118],[82,22,1,98,21,1],[84,572,1,112,4,2,113],[81,52,82,21,1,2,120,24,4,81,572,2,113],[80,0,129,211],[82,21,1,136,60],[128,197],[145,21,141,137],[87,38,82,97,110,100,111,109,32,115,101,97,114,99,104,32,111,114,32,67,108,101,118,101,114,32,115,101,97,114,99,104,63,32,40,82,47,67,41,32,190],[80,-9,184,17,80,82,64,80,-9,184,17,80,67,64,10,129,214],[80,-9,184,17,80,67,64,97,576],[81,576,129,219],[87,12,32,32,67,108,101,118,101,114,32,46,46,46,190,191],[128,220],[87,12,32,32,82,97,110,100,111,109,32,46,46,46,190,191],[136,20],[81,568,80,255,67,129,224],[87,29,69,114,114,111,114,58,32,109,97,120,105,109,117,109,32,98,111,97,114,100,32,115,105,122,101,32,105,115,32,80,255,80,1,24,49,54,87,8,32,115,113,117,97,114,101,115,54,190,191],[147,128,252],[80,0,97,573],[80,0,97,574],[80,0,97,575],[84,573,1,112,4,2,113],[136,137],[80,0,129,231],[136,93],[136,190],[81,574,81,572,24,97,574],[81,572,81,575,67,97,577],[81,572,81,575,67,129,248],[136,93],[81,572,97,575],[87,8,65,116,116,101,109,112,116,32,190],[81,573,49,190,147],[87,9,44,32,115,99,111,114,101,58,32,190],[81,572,49,190,147],[81,573,80,1,67,129,246],[87,29,32,32,32,40,97,118,101,114,97,103,101,32,111,102,32,97,108,108,32,97,116,116,101,109,112,116,115,58,32,190],[81,574,81,573,80,2,52,190,147],[80,41,48,190,191,147],[128,247],[87,0,190,191],[162],[81,577,129,250],[80,1000,178],[163],[81,575,80,10,80,10,26,64,129,227],[130]]")},function(n){n.exports=JSON.parse("[[80,14,1,1,80,0,113,80,6,2,113,4,80,117,115,80,131,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,30,97,29],[80,101,97,30],[128,111],[140,1],[80,0,80,0,80,100,80,21,24,80,15,24,80,100,80,2,26,80,20,24,80,10,24,208],[80,100,80,21,24,80,15,24,80,100,80,2,26,80,20,24,80,10,24,209],[80,100,80,2,26,80,20,24,80,10,24,80,1,25,97,22],[80,100,80,1000,80,707,32,97,23],[80,16711680,80,255,11,97,21],[80,1,220],[80,255,221],[81,23,80,21,24,81,22,81,23,25,224],[80,0,81,23,226],[81,23,80,21,24,81,22,81,23,25,80,10,25,224],[80,0,80,5,226],[81,23,80,21,24,80,20,224],[80,0,80,5,226],[80,16711680,221],[81,23,80,21,24,80,1,25,81,22,81,23,25,80,10,25,224],[80,0,80,5,226],[81,23,80,21,24,80,1,25,80,20,224],[80,0,80,5,226],[80,0,221],[80,21,80,1,25,81,22,224],[80,100,80,1,24,80,100,16,80,1,25,226],[80,0,221],[80,0,80,100,80,1,24,226],[80,21,80,2,24,81,22,80,16711680,252],[80,100,80,21,24,80,4,25,81,22,80,255,252],[80,0],[97,24,81,23,80,1,25],[81,24,69,129,37],[81,29,81,24,2,120,24,4,81,24,80,1,24,2,113],[81,24,4,128,33],[81,23],[97,24,80,100,80,1,25],[81,24,69,129,42],[81,29,81,24,2,120,24,4,80,0,2,113],[81,24,4,128,38],[80,0,221],[80,0,80,0,224],[87,28,68,105,102,102,117,115,105,111,110,32,105,110,32,97,32,84,97,112,101,114,105,110,103,32,84,117,98,101,80,2,80,100,80,10,27,189],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,1,16],[98,11,1,80,50],[82,11,1,69,129,54],[80,21,80,1,25,80,80,82,11,1,25,80,0,211],[82,11,1,4,128,50],[80,0],[98,11,1,80,100],[82,11,1,69,129,59],[80,21,80,100,24,80,20,82,11,1,24,80,0,211],[82,11,1,4,128,55],[80,0],[98,11,1,80,100],[82,11,1,69,129,66],[82,11,1,80,31,66,82,11,1,80,5,29,80,0,64,10,129,64],[80,21,82,11,1,24,80,80,80,1,24,80,0,211],[80,21,82,11,1,24,80,20,80,101,24,80,0,211],[82,11,1,4,128,60],[80,0,80,50,16,226],[80,3978097,221],[80,0,80,80,80,50,25,80,100,80,15,27,25,224],[87,4,49,48,48,37,80,2,80,100,80,15,27,189],[80,0,80,80,80,100,80,15,27,25,224],[87,4,32,32,48,37,80,2,80,100,80,15,27,189],[80,0,80,20,80,100,80,11,26,80,10,27,24,224],[87,17,82,101,100,32,99,111,110,99,101,110,116,114,97,116,105,111,110,80,2,80,100,80,12,27,189],[80,16711680,221],[80,100,80,21,24,80,2,24,80,20,80,100,24,81,23,25,80,1,24,80,100,80,15,27,25,224],[81,23,80,1,25,49,80,2,80,100,80,15,27,189,147],[80,100,80,21,24,80,2,24,80,20,80,100,24,80,100,80,15,27,25,224],[87,3,32,32,48,80,2,80,100,80,15,27,189],[80,0,80,20,80,100,80,12,26,80,10,27,24,224],[87,18,82,101,100,32,109,111,108,101,99,117,108,101,32,99,111,117,110,116,80,2,80,100,80,12,27,189],[80,0,221],[80,0,80,20,80,100,80,13,26,80,10,27,24,80,5,24,224],[87,23,40,97,116,32,104,111,114,105,122,111,110,116,97,108,32,112,111,115,105,116,105,111,110,80,2,80,100,80,15,27,189],[80,0,80,20,80,100,80,14,26,80,10,27,24,80,5,24,224],[87,17,105,110,32,116,97,112,101,114,105,110,103,32,116,117,98,101,41,80,2,80,100,80,15,27,189],[145,11,141,137],[140,3],[144,12,2],[85,12,1,80,2,115,98,12,2,98,12,1],[82,12,2,129,94],[82,12,1,80,21,24,80,20,80,100,24,81,29,82,12,1,2,120,24,4,112,25,80,16711680,211],[82,12,1,80,21,24,80,80,81,29,82,12,1,2,120,24,4,112,82,12,1,80,1,24,80,50,32,25,80,3978097,211],[128,96],[82,12,1,80,21,24,80,20,80,100,24,81,29,82,12,1,2,120,24,4,112,25,80,16777215,211],[82,12,1,80,21,24,80,80,81,29,82,12,1,2,120,24,4,112,82,12,1,80,1,24,80,50,32,25,80,16777215,211],[145,12,141,137],[140,4],[144,13,2],[85,13,1,80,2,115,98,13,2,98,13,1],[81,24,80,0,136,87],[81,24,80,1,24,80,0,136,87],[82,13,2,80,16711680,64,129,106],[81,29,81,24,2,120,24,4,1,112,5,2,113],[81,29,81,24,80,1,24,2,120,24,4,1,112,4,2,113],[128,108],[81,29,81,24,2,120,24,4,1,112,4,2,113],[81,29,81,24,80,1,24,2,120,24,4,1,112,5,2,113],[81,24,80,-1,136,87],[81,24,80,1,24,80,-1,136,87],[145,13,141,137],[136,6],[136,46],[80,0],[97,24,80,100,80,1,25],[81,24,69,129,118],[81,24,80,-1,136,87],[81,24,4,128,114],[80,2500,178],[80,100,19,97,24],[80,100,19,97,25],[81,25,81,24,68,129,137],[81,22,81,25,25,97,25],[81,24,97,26],[81,25,97,27],[80,2,19,80,0,64,129,128],[84,26,1,112,4,2,113],[128,129],[84,27,1,112,5,2,113],[81,24,80,21,24,81,25,210,97,28],[81,26,80,21,24,81,27,210,81,28,11,81,21,64,129,137],[163],[81,24,80,21,24,81,25,81,26,80,21,24,81,27,210,211],[81,26,80,21,24,81,27,81,28,211],[81,26,81,24,65,129,136],[81,24,81,28,136,97],[162],[80,0,80,1,64,129,119],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,36,115,80,49,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,6,97,20,84,27,97,21],[80,6,97,27,84,34,97,22],[80,6,97,34,84,41,97,23],[80,6,97,41,84,48,97,24],[80,6,97,48,84,55,97,25],[80,6,97,55,84,62,97,26],[80,6,97,62],[84,31,97,30],[80,8,97,31],[84,41,97,40],[80,8,97,41],[128,42],[140,1],[144,10,1],[85,10,1,80,1,115],[81,30,80,0,2,120,24,4,80,9055202,2,113],[81,30,80,1,2,120,24,4,80,255,2,113],[81,30,80,2,2,120,24,4,80,65535,2,113],[81,30,80,3,2,120,24,4,80,65280,2,113],[81,30,80,4,2,120,24,4,80,16776960,2,113],[81,30,80,5,2,120,24,4,80,16755200,2,113],[81,30,80,6,2,120,24,4,80,16711680,2,113],[81,30,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,10,1,80,7],[82,10,1,69,129,32],[81,40,82,10,1,2,120,24,4,80,40,80,7,82,10,1,32,2,113],[82,10,1,4,128,28],[145,10,141,137],[140,2],[144,11,6],[85,11,1,80,6,115,98,11,2],[80,0,98,11,4],[85,11,4,1,112,4,2,113],[81,40,82,11,4,2,120,24,4,112,82,11,2,69,82,11,4,80,7,64,10,129,37],[82,11,4,80,1,25,98,11,3],[81,30,82,11,3,2,120,24,4,112,81,30,82,11,4,2,120,24,4,112,81,40,82,11,4,2,120,24,4,112,82,11,2,25,82,11,2,81,40,82,11,3,2,120,24,4,112,25,223,98,11,1],[81,11,97,12,145,11,141,137],[136,16],[80,-500000,80,1000000,80,250,32,80,750,80,2,27,25,97,20],[80,0,80,1000000,80,250,32,80,750,80,2,27,25,97,22],[81,20,80,750,24,80,1,25,97,21],[81,22,80,750,24,80,1,25,97,23],[81,20,81,22,80,750,80,750,208],[80,750,80,750,209],[80,0,177],[81,20],[97,24,81,21],[81,24,69,129,74],[163],[81,22],[97,25,81,23],[81,25,69,129,72],[81,24,97,26],[81,25,97,27],[80,0,97,28],[81,26,81,27,80,1,34,80,2,80,250,26,66,81,28,80,40,68,9,129,66],[81,26,81,27,24,80,250,81,26,81,27,25,32,97,29],[80,2,81,26,26,80,250,81,27,32,81,25,24,97,27],[81,29,81,24,24,97,26],[84,28,1,112,4,2,113],[128,60],[81,28,80,40,67,129,69],[81,24,81,25,80,0,211],[128,71],[81,24,81,25,81,28,136,33],[82,12,1,211],[81,25,4,128,55],[162],[81,24,4,128,51],[87,12,82,101,115,111,108,117,116,105,111,110,58,32,80,250,80,3,26,49,54,87,14,59,32,84,105,109,101,32,116,97,107,101,110,58,32,54,176,80,1000,80,1,52,54,87,9,32,115,101,99,111,110,100,115,46,54,190,191,147],[130]]")},function(n){n.exports=JSON.parse("[[80,13,1,1,80,0,113,80,6,2,113,4,80,36,115,80,49,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,20,97,19],[80,6,97,20,84,27,97,21],[80,6,97,27,84,34,97,22],[80,6,97,34,84,41,97,23],[80,6,97,41,84,48,97,24],[80,6,97,48,84,55,97,25],[80,6,97,55,84,62,97,26],[80,6,97,62],[84,31,97,30],[80,8,97,31],[84,41,97,40],[80,8,97,41],[128,42],[140,1],[144,10,1],[85,10,1,80,1,115],[81,30,80,0,2,120,24,4,80,9055202,2,113],[81,30,80,1,2,120,24,4,80,255,2,113],[81,30,80,2,2,120,24,4,80,65535,2,113],[81,30,80,3,2,120,24,4,80,65280,2,113],[81,30,80,4,2,120,24,4,80,16776960,2,113],[81,30,80,5,2,120,24,4,80,16755200,2,113],[81,30,80,6,2,120,24,4,80,16711680,2,113],[81,30,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,10,1,80,7],[82,10,1,69,129,32],[81,40,82,10,1,2,120,24,4,80,100,80,7,82,10,1,32,2,113],[82,10,1,4,128,28],[145,10,141,137],[140,2],[144,11,6],[85,11,1,80,6,115,98,11,2],[80,0,98,11,4],[85,11,4,1,112,4,2,113],[81,40,82,11,4,2,120,24,4,112,82,11,2,69,82,11,4,80,7,64,10,129,37],[82,11,4,80,1,25,98,11,3],[81,30,82,11,3,2,120,24,4,112,81,30,82,11,4,2,120,24,4,112,81,40,82,11,4,2,120,24,4,112,82,11,2,25,82,11,2,81,40,82,11,3,2,120,24,4,112,25,223,98,11,1],[81,11,97,12,145,11,141,137],[136,16],[80,-159200,80,1000000,80,10000,32,80,300,80,2,27,25,97,20],[80,-1033000,80,1000000,80,10000,32,80,300,80,2,27,25,97,22],[81,20,80,300,24,80,1,25,97,21],[81,22,80,300,24,80,1,25,97,23],[81,20,81,22,80,300,80,300,208],[80,300,80,300,209],[80,0,177],[81,20],[97,24,81,21],[81,24,69,129,74],[163],[81,22],[97,25,81,23],[81,25,69,129,72],[81,24,97,26],[81,25,97,27],[80,0,97,28],[81,26,81,27,80,1,34,80,2,80,10000,26,66,81,28,80,100,68,9,129,66],[81,26,81,27,24,80,10000,81,26,81,27,25,32,97,29],[80,2,81,26,26,80,10000,81,27,32,81,25,24,97,27],[81,29,81,24,24,97,26],[84,28,1,112,4,2,113],[128,60],[81,28,80,100,67,129,69],[81,24,81,25,80,0,211],[128,71],[81,24,81,25,81,28,136,33],[82,12,1,211],[81,25,4,128,55],[162],[81,24,4,128,51],[87,12,82,101,115,111,108,117,116,105,111,110,58,32,80,10000,80,3,26,49,54,87,14,59,32,84,105,109,101,32,116,97,107,101,110,58,32,54,176,80,1000,80,1,52,54,87,9,32,115,101,99,111,110,100,115,46,54,190,191,147],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,43,115,80,58,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,22,97,21],[80,6,97,22,84,29,97,23],[80,6,97,29,84,36,97,24],[80,6,97,36,84,43,97,25],[80,6,97,43,84,50,97,26],[80,6,97,50,84,57,97,27],[80,6,97,57,84,64,97,28],[80,6,97,64],[84,29,97,28],[80,3,97,29],[84,34,97,33],[80,3,97,34],[84,39,97,38],[80,3,97,39],[84,44,97,43],[80,3,97,44],[84,49,97,48],[80,3,97,49],[84,54,97,53],[80,3,97,54],[128,120],[140,1],[80,100,97,27],[81,28,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,43,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,33,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,48,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,38,80,1,80,1,25,2,120,24,4,80,250,2,113],[81,53,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,28,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,43,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,33,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,48,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,38,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,53,80,2,80,1,25,2,120,24,4,80,500,2,113],[81,28,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,43,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,33,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,48,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,38,80,3,80,1,25,2,120,24,4,80,500,2,113],[81,53,80,3,80,1,25,2,120,24,4,80,500,2,113],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,0,80,4,27,97,22],[80,999,80,4,27,97,23],[80,0,80,4,27,97,24],[80,999,80,4,27,97,25],[80,1],[98,11,1,80,3],[82,11,1,69,129,58],[81,38,82,11,1,80,1,25,2,120,24,4,81,38,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,53,82,11,1,80,1,25,2,120,24,4,81,53,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,11,1,4,128,53],[80,64,80,4,27,97,26],[145,11,141,137],[140,3],[144,12,8],[85,12,1,80,8,115,98,12,1],[81,26,220],[80,4210752,221],[80,1],[98,12,2,80,5,80,1,25],[82,12,2,69,129,71],[81,22,81,23,81,22,25,80,5,82,12,2,32,24,81,24,224],[80,0,81,25,81,24,25,226],[82,12,2,4,128,66],[80,1],[98,12,3,80,5,80,1,25],[82,12,3,69,129,77],[81,22,81,26,80,2,27,24,81,24,81,25,81,24,25,80,5,82,12,3,32,24,224],[81,23,81,22,25,81,26,25,80,0,226],[82,12,3,4,128,72],[80,0,221],[81,22,81,24,224],[81,23,81,22,25,80,0,226],[80,0,81,25,81,24,25,226],[81,22,81,23,25,80,0,226],[80,0,81,24,81,25,25,226],[80,0],[98,12,2,80,5,80,1,25],[82,12,2,69,129,97],[80,0],[98,12,3,80,5,80,1,25],[82,12,3,69,129,96],[81,22,81,23,81,22,25,80,5,82,12,2,32,24,81,26,24,98,12,4],[81,24,81,25,81,24,25,80,5,82,12,3,32,24,81,26,24,98,12,5],[80,255,80,5,80,1,25,82,12,2,32,98,12,6],[80,255,80,5,80,1,25,82,12,3,32,98,12,7],[80,255,80,2,80,5,26,80,2,25,80,2,80,5,26,80,2,25,82,12,2,25,82,12,3,25,32,98,12,8],[82,12,4,82,12,5,82,12,6,80,65536,26,82,12,7,80,256,26,24,82,12,8,80,1,26,24,252],[82,12,3,4,128,87],[82,12,2,4,128,84],[145,12,141,137],[140,4],[144,13,5],[85,13,1,80,5,115,98,13,5,98,13,4,98,13,3,98,13,2,98,13,1],[82,13,2,81,27,81,28,82,13,1,80,1,25,2,120,24,4,112,32,82,13,3,81,27,81,33,82,13,1,80,1,25,2,120,24,4,112,32,24,81,38,82,13,1,80,1,25,2,120,24,4,112,24,99,13,4],[82,13,2,81,27,81,43,82,13,1,80,1,25,2,120,24,4,112,32,82,13,3,81,27,81,48,82,13,1,80,1,25,2,120,24,4,112,32,24,81,53,82,13,1,80,1,25,2,120,24,4,112,24,99,13,5],[145,13,141,137],[140,5],[144,14,5],[85,14,1,80,5,115,98,14,1],[163],[81,24],[98,14,3,81,25],[82,14,3,69,129,118],[81,22],[98,14,2,81,23],[82,14,2,69,129,117],[82,14,1,82,14,2,82,14,3,85,14,4,85,14,5,136,98],[82,14,4,82,14,5,82,14,2,82,14,3,210,211],[82,14,2,4,128,112],[82,14,3,4,128,109],[162],[145,14,141,137],[136,24],[136,45],[81,22,81,24,81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,208],[81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,209],[80,6,136,60],[87,19,83,105,101,114,112,105,110,115,107,105,32,116,114,105,97,110,103,108,101,87,19,32,109,97,112,112,105,110,103,115,32,105,110,32,99,111,108,111,117,114,54,190,191,147],[80,1],[97,58,80,3],[81,58,69,129,131],[81,58,136,104],[81,58,4,128,127],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,46,115,80,61,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,22,97,21],[80,6,97,22,84,29,97,23],[80,6,97,29,84,36,97,24],[80,6,97,36,84,43,97,25],[80,6,97,43,84,50,97,26],[80,6,97,50,84,57,97,27],[80,6,97,57,84,64,97,28],[80,6,97,64],[84,28,97,27],[80,3,97,28],[84,33,97,32],[80,3,97,33],[84,38,97,37],[80,3,97,38],[84,43,97,42],[80,3,97,43],[84,48,97,47],[80,3,97,48],[84,53,97,52],[80,3,97,53],[128,104],[140,1],[80,100,97,26],[81,27,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,42,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,32,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,47,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,37,80,1,80,1,25,2,120,24,4,80,250,2,113],[81,52,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,42,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,32,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,47,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,37,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,52,80,2,80,1,25,2,120,24,4,80,500,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,42,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,32,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,47,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,37,80,3,80,1,25,2,120,24,4,80,500,2,113],[81,52,80,3,80,1,25,2,120,24,4,80,500,2,113],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,0,80,4,27,97,22],[80,999,80,4,27,97,23],[80,0,80,4,27,97,24],[80,999,80,4,27,97,25],[80,1],[98,11,1,80,3],[82,11,1,69,129,58],[81,37,82,11,1,80,1,25,2,120,24,4,81,37,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,52,82,11,1,80,1,25,2,120,24,4,81,52,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,11,1,4,128,53],[145,11,141,137],[140,3],[144,12,5],[85,12,1,80,5,115,98,12,5,98,12,4,98,12,3,98,12,2,98,12,1],[82,12,2,81,26,81,27,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,32,82,12,1,80,1,25,2,120,24,4,112,32,24,81,37,82,12,1,80,1,25,2,120,24,4,112,24,99,12,4],[82,12,2,81,26,81,42,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,47,82,12,1,80,1,25,2,120,24,4,112,32,24,81,52,82,12,1,80,1,25,2,120,24,4,112,24,99,12,5],[145,12,141,137],[140,4],[144,13,5],[85,13,1,80,5,115,98,13,1],[163],[81,24],[98,13,3,81,25],[82,13,3,69,129,82],[81,22],[98,13,2,81,23],[82,13,2,69,129,81],[82,13,2,82,13,3,210,80,16777215,65,129,80],[82,13,1,82,13,2,82,13,3,85,13,4,85,13,5,136,59],[82,13,4,82,13,5,210,80,16777215,64,129,79],[84,60,1,112,4,2,113],[82,13,4,82,13,5,80,4210752,211],[82,13,2,4,128,73],[82,13,3,4,128,70],[162],[145,13,141,137],[140,5],[144,14,2],[85,14,1,80,2,115],[163],[81,24],[98,14,2,81,25],[82,14,2,69,129,102],[81,22],[98,14,1,81,23],[82,14,1,69,129,101],[82,14,1,82,14,2,210,80,0,64,129,98],[82,14,1,82,14,2,80,16777215,211],[84,61,1,112,4,2,113],[128,100],[82,14,1,82,14,2,210,80,4210752,64,129,100],[82,14,1,82,14,2,80,0,211],[82,14,1,4,128,92],[82,14,2,4,128,89],[162],[145,14,141,137],[136,24],[136,45],[81,22,81,24,81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,208],[81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,209],[80,0,248],[80,0,97,57],[87,19,83,105,101,114,112,105,110,115,107,105,32,116,114,105,97,110,103,108,101,87,21,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,54,190,191,147],[80,0,177],[176,97,58],[84,57,1,112,4,2,113],[87,0,190,191],[87,10,73,116,101,114,97,116,105,111,110,32,81,57,49,54,80,58,48,54,190,191,147],[80,0,97,60],[80,1],[97,59,80,3],[81,59,69,129,122],[81,59,136,65],[81,59,4,128,118],[80,0,97,61],[136,84],[87,2,32,32,81,60,49,54,87,14,32,112,105,120,101,108,115,32,98,111,114,110,59,32,54,81,61,49,54,87,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,54,190,191,147],[87,8,32,32,40,116,111,111,107,32,176,81,58,25,80,1000,27,49,54,87,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,54,176,80,1000,27,49,54,87,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,54,190,191,147],[81,60,81,61,24,80,0,67,80,2000,80,1000,69,9,129,130],[87,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,80,2000,80,1000,80,1,52,54,87,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,54,190,147],[80,2000,178],[87,0,190,191],[81,60,81,61,24,80,0,64,129,112],[87,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,190,191],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,52,115,80,67,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,28,97,27],[80,4,97,28],[84,34,97,33],[80,4,97,34],[84,40,97,39],[80,4,97,40],[84,46,97,45],[80,4,97,46],[84,52,97,51],[80,4,97,52],[84,58,97,57],[80,4,97,58],[128,102],[140,1],[80,100,97,26],[81,27,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,45,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,33,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,51,80,1,80,1,25,2,120,24,4,80,16,2,113],[81,39,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,45,80,2,80,1,25,2,120,24,4,80,4,16,2,113],[81,33,80,2,80,1,25,2,120,24,4,80,4,2,113],[81,51,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,39,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,2,80,1,25,2,120,24,4,80,160,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,20,2,113],[81,45,80,3,80,1,25,2,120,24,4,80,23,2,113],[81,33,80,3,80,1,25,2,120,24,4,80,26,16,2,113],[81,51,80,3,80,1,25,2,120,24,4,80,22,2,113],[81,39,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,3,80,1,25,2,120,24,4,80,160,2,113],[81,27,80,4,80,1,25,2,120,24,4,80,15,16,2,113],[81,45,80,4,80,1,25,2,120,24,4,80,26,2,113],[81,33,80,4,80,1,25,2,120,24,4,80,28,2,113],[81,51,80,4,80,1,25,2,120,24,4,80,24,2,113],[81,39,80,4,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,4,80,1,25,2,120,24,4,80,44,2,113],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,-236,80,3,27,97,22],[80,263,80,3,27,97,23],[80,1,80,3,27,97,24],[80,1000,80,3,27,97,25],[80,1],[98,11,1,80,4],[82,11,1,69,129,56],[81,39,82,11,1,80,1,25,2,120,24,4,81,39,82,11,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[81,57,82,11,1,80,1,25,2,120,24,4,81,57,82,11,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[82,11,1,4,128,51],[145,11,141,137],[140,3],[144,12,5],[85,12,1,80,5,115,98,12,5,98,12,4,98,12,3,98,12,2,98,12,1],[82,12,2,81,26,81,27,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,33,82,12,1,80,1,25,2,120,24,4,112,32,24,81,39,82,12,1,80,1,25,2,120,24,4,112,24,99,12,4],[82,12,2,81,26,81,45,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,51,82,12,1,80,1,25,2,120,24,4,112,32,24,81,57,82,12,1,80,1,25,2,120,24,4,112,24,99,12,5],[145,12,141,137],[140,4],[144,13,5],[85,13,1,80,5,115,98,13,1],[163],[81,24],[98,13,3,81,25],[82,13,3,69,129,80],[81,22],[98,13,2,81,23],[82,13,2,69,129,79],[82,13,2,82,13,3,210,80,16777215,65,129,78],[82,13,1,82,13,2,82,13,3,85,13,4,85,13,5,136,57],[82,13,4,82,13,5,210,80,16777215,64,129,77],[84,66,1,112,4,2,113],[82,13,4,82,13,5,80,51543,211],[82,13,2,4,128,71],[82,13,3,4,128,68],[162],[145,13,141,137],[140,5],[144,14,2],[85,14,1,80,2,115],[163],[81,24],[98,14,2,81,25],[82,14,2,69,129,100],[81,22],[98,14,1,81,23],[82,14,1,69,129,99],[82,14,1,82,14,2,210,80,2263842,64,129,96],[82,14,1,82,14,2,80,16777215,211],[84,67,1,112,4,2,113],[128,98],[82,14,1,82,14,2,210,80,51543,64,129,98],[82,14,1,82,14,2,80,2263842,211],[82,14,1,4,128,90],[82,14,2,4,128,87],[162],[145,14,141,137],[136,16],[136,43],[81,22,81,24,81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,208],[81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,209],[80,1,80,1,80,2263842,211],[80,0,97,63],[87,13,66,97,114,110,115,108,101,121,32,102,101,114,110,87,21,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,54,190,191,147],[80,0,177],[176,97,64],[84,63,1,112,4,2,113],[87,0,190,191],[87,10,73,116,101,114,97,116,105,111,110,32,81,63,49,54,80,58,48,54,190,191,147],[80,0,97,66],[80,1],[97,65,80,4],[81,65,69,129,120],[81,65,136,63],[81,65,4,128,116],[80,0,97,67],[136,82],[87,2,32,32,81,66,49,54,87,14,32,112,105,120,101,108,115,32,98,111,114,110,59,32,54,81,67,49,54,87,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,54,190,191,147],[87,8,32,32,40,116,111,111,107,32,176,81,64,25,80,1000,27,49,54,87,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,54,176,80,1000,27,49,54,87,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,54,190,191,147],[81,66,81,67,24,80,0,67,80,2000,80,1000,69,9,129,128],[87,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,80,2000,80,1000,80,1,52,54,87,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,54,190,147],[80,2000,178],[87,0,190,191],[81,66,81,67,24,80,0,64,129,110],[87,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,190,191],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,49,115,80,64,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,29,97,28],[80,4,97,29],[84,35,97,34],[80,4,97,35],[84,41,97,40],[80,4,97,41],[84,47,97,46],[80,4,97,47],[84,53,97,52],[80,4,97,53],[84,59,97,58],[80,4,97,59],[128,113],[140,1],[80,100,97,27],[81,28,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,46,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,34,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,52,80,1,80,1,25,2,120,24,4,80,16,2,113],[81,40,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,58,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,28,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,46,80,2,80,1,25,2,120,24,4,80,4,16,2,113],[81,34,80,2,80,1,25,2,120,24,4,80,4,2,113],[81,52,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,40,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,58,80,2,80,1,25,2,120,24,4,80,160,2,113],[81,28,80,3,80,1,25,2,120,24,4,80,20,2,113],[81,46,80,3,80,1,25,2,120,24,4,80,23,2,113],[81,34,80,3,80,1,25,2,120,24,4,80,26,16,2,113],[81,52,80,3,80,1,25,2,120,24,4,80,22,2,113],[81,40,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,58,80,3,80,1,25,2,120,24,4,80,160,2,113],[81,28,80,4,80,1,25,2,120,24,4,80,15,16,2,113],[81,46,80,4,80,1,25,2,120,24,4,80,26,2,113],[81,34,80,4,80,1,25,2,120,24,4,80,28,2,113],[81,52,80,4,80,1,25,2,120,24,4,80,24,2,113],[81,40,80,4,80,1,25,2,120,24,4,80,0,2,113],[81,58,80,4,80,1,25,2,120,24,4,80,44,2,113],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,-236,80,3,27,97,22],[80,263,80,3,27,97,23],[80,1,80,3,27,97,24],[80,1000,80,3,27,97,25],[80,1],[98,11,1,80,4],[82,11,1,69,129,56],[81,40,82,11,1,80,1,25,2,120,24,4,81,40,82,11,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[81,58,82,11,1,80,1,25,2,120,24,4,81,58,82,11,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[82,11,1,4,128,51],[80,32,80,3,27,97,26],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,1],[81,26,220],[80,4210752,221],[80,1],[98,12,2,80,5,80,1,25],[82,12,2,69,129,69],[81,22,81,23,81,22,25,80,5,82,12,2,32,24,81,24,224],[80,0,81,25,81,24,25,226],[82,12,2,4,128,64],[80,1],[98,12,3,80,5,80,1,25],[82,12,3,69,129,75],[81,22,81,26,80,2,27,24,81,24,81,25,81,24,25,80,5,82,12,3,32,24,224],[81,23,81,22,25,81,26,25,80,0,226],[82,12,3,4,128,70],[80,0,221],[81,22,81,24,224],[81,23,81,22,25,80,0,226],[80,0,81,25,81,24,25,226],[81,22,81,23,25,80,0,226],[80,0,81,24,81,25,25,226],[80,0],[98,12,2,80,5,80,1,25],[82,12,2,69,129,90],[80,0],[98,12,3,80,5,80,1,25],[82,12,3,69,129,89],[81,22,81,23,81,22,25,80,5,82,12,2,32,24,81,26,24,81,24,81,25,81,24,25,80,5,82,12,3,32,24,81,26,24,80,255,80,5,80,1,25,82,12,2,32,80,65536,26,80,255,80,5,80,1,25,82,12,3,32,80,256,26,24,80,255,80,2,80,5,26,80,2,25,80,2,80,5,26,80,2,25,82,12,2,25,82,12,3,25,32,80,1,26,24,252],[82,12,3,4,128,85],[82,12,2,4,128,82],[145,12,141,137],[140,4],[144,13,5],[85,13,1,80,5,115,98,13,5,98,13,4,98,13,3,98,13,2,98,13,1],[82,13,2,81,27,81,28,82,13,1,80,1,25,2,120,24,4,112,32,82,13,3,81,27,81,34,82,13,1,80,1,25,2,120,24,4,112,32,24,81,40,82,13,1,80,1,25,2,120,24,4,112,24,99,13,4],[82,13,2,81,27,81,46,82,13,1,80,1,25,2,120,24,4,112,32,82,13,3,81,27,81,52,82,13,1,80,1,25,2,120,24,4,112,32,24,81,58,82,13,1,80,1,25,2,120,24,4,112,24,99,13,5],[145,13,141,137],[140,5],[144,14,5],[85,14,1,80,5,115,98,14,1],[163],[81,24],[98,14,3,81,25],[82,14,3,69,129,111],[81,22],[98,14,2,81,23],[82,14,2,69,129,110],[82,14,1,82,14,2,82,14,3,85,14,4,85,14,5,136,91],[82,14,4,82,14,5,82,14,2,82,14,3,210,211],[82,14,2,4,128,105],[82,14,3,4,128,102],[162],[145,14,141,137],[136,16],[136,43],[81,22,81,24,81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,208],[81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,209],[80,6,136,58],[87,13,66,97,114,110,115,108,101,121,32,102,101,114,110,87,19,32,109,97,112,112,105,110,103,115,32,105,110,32,99,111,108,111,117,114,54,190,191,147],[80,1],[97,64,80,4],[81,64,69,129,124],[81,64,136,97],[81,64,4,128,120],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,58,115,80,73,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,22,97,21],[80,6,97,22,84,29,97,23],[80,6,97,29,84,36,97,24],[80,6,97,36,84,43,97,25],[80,6,97,43,84,50,97,26],[80,6,97,50,84,57,97,27],[80,6,97,57,84,64,97,28],[80,6,97,64],[84,28,97,27],[80,5,97,28],[84,35,97,34],[80,5,97,35],[84,42,97,41],[80,5,97,42],[84,49,97,48],[80,5,97,49],[84,56,97,55],[80,5,97,56],[84,63,97,62],[80,5,97,63],[128,116],[140,1],[80,1000,97,26],[81,27,80,1,80,1,25,2,120,24,4,80,195,2,113],[81,48,80,1,80,1,25,2,120,24,4,80,344,2,113],[81,34,80,1,80,1,25,2,120,24,4,80,488,16,2,113],[81,55,80,1,80,1,25,2,120,24,4,80,443,2,113],[81,41,80,1,80,1,25,2,120,24,4,80,443,2,113],[81,62,80,1,80,1,25,2,120,24,4,80,245,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,462,2,113],[81,48,80,2,80,1,25,2,120,24,4,80,252,16,2,113],[81,34,80,2,80,1,25,2,120,24,4,80,414,2,113],[81,55,80,2,80,1,25,2,120,24,4,80,361,2,113],[81,41,80,2,80,1,25,2,120,24,4,80,251,2,113],[81,62,80,2,80,1,25,2,120,24,4,80,569,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,58,16,2,113],[81,48,80,3,80,1,25,2,120,24,4,80,453,2,113],[81,34,80,3,80,1,25,2,120,24,4,80,70,16,2,113],[81,55,80,3,80,1,25,2,120,24,4,80,111,16,2,113],[81,41,80,3,80,1,25,2,120,24,4,80,598,2,113],[81,62,80,3,80,1,25,2,120,24,4,80,97,2,113],[81,27,80,4,80,1,25,2,120,24,4,80,35,16,2,113],[81,48,80,4,80,1,25,2,120,24,4,80,469,16,2,113],[81,34,80,4,80,1,25,2,120,24,4,80,70,2,113],[81,55,80,4,80,1,25,2,120,24,4,80,22,16,2,113],[81,41,80,4,80,1,25,2,120,24,4,80,488,2,113],[81,62,80,4,80,1,25,2,120,24,4,80,507,2,113],[81,27,80,5,80,1,25,2,120,24,4,80,637,16,2,113],[81,48,80,5,80,1,25,2,120,24,4,80,0,2,113],[81,34,80,5,80,1,25,2,120,24,4,80,0,2,113],[81,55,80,5,80,1,25,2,120,24,4,80,501,2,113],[81,41,80,5,80,1,25,2,120,24,4,80,856,2,113],[81,62,80,5,80,1,25,2,120,24,4,80,251,2,113],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,0,80,4,27,97,22],[80,999,80,4,27,97,23],[80,0,80,4,27,97,24],[80,999,80,4,27,97,25],[80,1],[98,11,1,80,5],[82,11,1,69,129,70],[81,41,82,11,1,80,1,25,2,120,24,4,81,41,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,62,82,11,1,80,1,25,2,120,24,4,81,62,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,11,1,4,128,65],[145,11,141,137],[140,3],[144,12,5],[85,12,1,80,5,115,98,12,5,98,12,4,98,12,3,98,12,2,98,12,1],[82,12,2,81,26,81,27,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,34,82,12,1,80,1,25,2,120,24,4,112,32,24,81,41,82,12,1,80,1,25,2,120,24,4,112,24,99,12,4],[82,12,2,81,26,81,48,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,55,82,12,1,80,1,25,2,120,24,4,112,32,24,81,62,82,12,1,80,1,25,2,120,24,4,112,24,99,12,5],[145,12,141,137],[140,4],[144,13,5],[85,13,1,80,5,115,98,13,1],[163],[81,24],[98,13,3,81,25],[82,13,3,69,129,94],[81,22],[98,13,2,81,23],[82,13,2,69,129,93],[82,13,2,82,13,3,210,80,16777215,65,129,92],[82,13,1,82,13,2,82,13,3,85,13,4,85,13,5,136,71],[82,13,4,82,13,5,210,80,16777215,64,129,91],[84,72,1,112,4,2,113],[82,13,4,82,13,5,80,51543,211],[82,13,2,4,128,85],[82,13,3,4,128,82],[162],[145,13,141,137],[140,5],[144,14,2],[85,14,1,80,2,115],[163],[81,24],[98,14,2,81,25],[82,14,2,69,129,114],[81,22],[98,14,1,81,23],[82,14,1,69,129,113],[82,14,1,82,14,2,210,80,2263842,64,129,110],[82,14,1,82,14,2,80,16777215,211],[84,73,1,112,4,2,113],[128,112],[82,14,1,82,14,2,210,80,51543,64,129,112],[82,14,1,82,14,2,80,2263842,211],[82,14,1,4,128,104],[82,14,2,4,128,101],[162],[145,14,141,137],[136,24],[136,57],[81,22,81,24,81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,208],[81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,209],[80,1,80,1,80,2263842,211],[80,0,97,69],[87,4,84,114,101,101,87,21,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,54,190,191,147],[80,0,177],[176,97,70],[84,69,1,112,4,2,113],[87,0,190,191],[87,10,73,116,101,114,97,116,105,111,110,32,81,69,49,54,80,58,48,54,190,191,147],[80,0,97,72],[80,1],[97,71,80,5],[81,71,69,129,134],[81,71,136,77],[81,71,4,128,130],[80,0,97,73],[136,96],[87,2,32,32,81,72,49,54,87,14,32,112,105,120,101,108,115,32,98,111,114,110,59,32,54,81,73,49,54,87,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,54,190,191,147],[87,8,32,32,40,116,111,111,107,32,176,81,70,25,80,1000,27,49,54,87,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,54,176,80,1000,27,49,54,87,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,54,190,191,147],[81,72,81,73,24,80,0,67,80,2000,80,1000,69,9,129,142],[87,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,80,2000,80,1000,80,1,52,54,87,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,54,190,147],[80,2000,178],[87,0,190,191],[81,72,81,73,24,80,0,64,129,124],[87,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,190,191],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,46,115,80,61,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,28,97,27],[80,3,97,28],[84,33,97,32],[80,3,97,33],[84,38,97,37],[80,3,97,38],[84,43,97,42],[80,3,97,43],[84,48,97,47],[80,3,97,48],[84,53,97,52],[80,3,97,53],[128,96],[140,1],[80,1000,97,26],[81,27,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,1,80,1,25,2,120,24,4,80,577,16,2,113],[81,32,80,1,80,1,25,2,120,24,4,80,577,2,113],[81,47,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,37,80,1,80,1,25,2,120,24,4,80,95,2,113],[81,52,80,1,80,1,25,2,120,24,4,80,589,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,2,80,1,25,2,120,24,4,80,577,16,2,113],[81,32,80,2,80,1,25,2,120,24,4,80,577,2,113],[81,47,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,37,80,2,80,1,25,2,120,24,4,80,441,2,113],[81,52,80,2,80,1,25,2,120,24,4,80,789,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,3,80,1,25,2,120,24,4,80,577,16,2,113],[81,32,80,3,80,1,25,2,120,24,4,80,577,2,113],[81,47,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,37,80,3,80,1,25,2,120,24,4,80,95,2,113],[81,52,80,3,80,1,25,2,120,24,4,80,989,2,113],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,0,80,4,27,97,22],[80,999,80,4,27,97,23],[80,0,80,4,27,97,24],[80,999,80,4,27,97,25],[80,1],[98,11,1,80,3],[82,11,1,69,129,50],[81,37,82,11,1,80,1,25,2,120,24,4,81,37,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,52,82,11,1,80,1,25,2,120,24,4,81,52,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,11,1,4,128,45],[145,11,141,137],[140,3],[144,12,5],[85,12,1,80,5,115,98,12,5,98,12,4,98,12,3,98,12,2,98,12,1],[82,12,2,81,26,81,27,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,32,82,12,1,80,1,25,2,120,24,4,112,32,24,81,37,82,12,1,80,1,25,2,120,24,4,112,24,99,12,4],[82,12,2,81,26,81,42,82,12,1,80,1,25,2,120,24,4,112,32,82,12,3,81,26,81,47,82,12,1,80,1,25,2,120,24,4,112,32,24,81,52,82,12,1,80,1,25,2,120,24,4,112,24,99,12,5],[145,12,141,137],[140,4],[144,13,5],[85,13,1,80,5,115,98,13,1],[163],[81,24],[98,13,3,81,25],[82,13,3,69,129,74],[81,22],[98,13,2,81,23],[82,13,2,69,129,73],[82,13,2,82,13,3,210,80,16777215,65,129,72],[82,13,1,82,13,2,82,13,3,85,13,4,85,13,5,136,51],[82,13,4,82,13,5,210,80,16777215,64,129,71],[84,60,1,112,4,2,113],[82,13,4,82,13,5,82,13,1,222,211],[82,13,2,4,128,65],[82,13,3,4,128,62],[162],[145,13,141,137],[140,5],[144,14,2],[85,14,1,80,2,115],[163],[81,24],[98,14,2,81,25],[82,14,2,69,129,94],[81,22],[98,14,1,81,23],[82,14,1,69,129,93],[82,14,1,82,14,2,210,80,0,64,129,90],[82,14,1,82,14,2,80,16777215,211],[84,61,1,112,4,2,113],[128,92],[82,14,1,82,14,2,210,80,16777215,65,129,92],[82,14,1,82,14,2,80,0,211],[82,14,1,4,128,84],[82,14,2,4,128,81],[162],[145,14,141,137],[136,16],[136,37],[81,22,81,24,81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,208],[81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,209],[80,0,248],[80,0,97,57],[87,12,68,114,97,103,111,110,32,99,117,114,118,101,87,21,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,54,190,191,147],[80,0,177],[176,97,58],[84,57,1,112,4,2,113],[87,0,190,191],[87,10,73,116,101,114,97,116,105,111,110,32,81,57,49,54,80,58,48,54,190,191,147],[80,0,97,60],[80,1],[97,59,80,3],[81,59,69,129,114],[81,59,136,57],[81,59,4,128,110],[80,0,97,61],[136,76],[87,2,32,32,81,60,49,54,87,14,32,112,105,120,101,108,115,32,98,111,114,110,59,32,54,81,61,49,54,87,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,54,190,191,147],[87,8,32,32,40,116,111,111,107,32,176,81,58,25,80,1000,27,49,54,87,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,54,176,80,1000,27,49,54,87,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,54,190,191,147],[81,60,81,61,24,80,0,67,80,2000,80,1000,69,9,129,122],[87,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,80,2000,80,1000,80,1,52,54,87,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,54,190,147],[80,2000,178],[87,0,190,191],[81,60,81,61,24,80,0,64,129,104],[87,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,190,191],[80,1],[97,59,80,3],[81,59,69,129,129],[81,59,136,57],[81,59,4,128,125],[130]]")},function(n){n.exports=JSON.parse("[[80,15,1,1,80,0,113,80,6,2,113,4,80,43,115,80,58,104],[216,80,2,220,80,360,212,80,32,186,80,1,113,146,80,0,1,80,1000,1,1,1,209,208],[84,29,97,28],[80,3,97,29],[84,34,97,33],[80,3,97,34],[84,39,97,38],[80,3,97,39],[84,44,97,43],[80,3,97,44],[84,49,97,48],[80,3,97,49],[84,54,97,53],[80,3,97,54],[128,107],[140,1],[80,1000,97,27],[81,28,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,43,80,1,80,1,25,2,120,24,4,80,577,16,2,113],[81,33,80,1,80,1,25,2,120,24,4,80,577,2,113],[81,48,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,38,80,1,80,1,25,2,120,24,4,80,95,2,113],[81,53,80,1,80,1,25,2,120,24,4,80,589,2,113],[81,28,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,43,80,2,80,1,25,2,120,24,4,80,577,16,2,113],[81,33,80,2,80,1,25,2,120,24,4,80,577,2,113],[81,48,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,38,80,2,80,1,25,2,120,24,4,80,441,2,113],[81,53,80,2,80,1,25,2,120,24,4,80,789,2,113],[81,28,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,43,80,3,80,1,25,2,120,24,4,80,577,16,2,113],[81,33,80,3,80,1,25,2,120,24,4,80,577,2,113],[81,48,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,38,80,3,80,1,25,2,120,24,4,80,95,2,113],[81,53,80,3,80,1,25,2,120,24,4,80,989,2,113],[141,137],[140,2],[144,11,1],[85,11,1,80,1,115],[80,0,80,4,27,97,22],[80,999,80,4,27,97,23],[80,0,80,4,27,97,24],[80,999,80,4,27,97,25],[80,1],[98,11,1,80,3],[82,11,1,69,129,50],[81,38,82,11,1,80,1,25,2,120,24,4,81,38,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,53,82,11,1,80,1,25,2,120,24,4,81,53,82,11,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,11,1,4,128,45],[80,64,80,4,27,97,26],[145,11,141,137],[140,3],[144,12,3],[85,12,1,80,3,115,98,12,1],[81,26,220],[80,4210752,221],[80,1],[98,12,2,80,5,80,1,25],[82,12,2,69,129,63],[81,22,81,23,81,22,25,80,5,82,12,2,32,24,81,24,224],[80,0,81,25,81,24,25,226],[82,12,2,4,128,58],[80,1],[98,12,3,80,5,80,1,25],[82,12,3,69,129,69],[81,22,81,26,80,2,27,24,81,24,81,25,81,24,25,80,5,82,12,3,32,24,224],[81,23,81,22,25,81,26,25,80,0,226],[82,12,3,4,128,64],[80,0,221],[81,22,81,24,224],[81,23,81,22,25,80,0,226],[80,0,81,25,81,24,25,226],[81,22,81,23,25,80,0,226],[80,0,81,24,81,25,25,226],[80,0],[98,12,2,80,5,80,1,25],[82,12,2,69,129,84],[80,0],[98,12,3,80,5,80,1,25],[82,12,3,69,129,83],[81,22,81,23,81,22,25,80,5,82,12,2,32,24,81,26,24,81,24,81,25,81,24,25,80,5,82,12,3,32,24,81,26,24,80,255,80,5,80,1,25,82,12,2,32,80,65536,26,80,255,80,5,80,1,25,82,12,3,32,80,256,26,24,80,255,80,2,80,5,26,80,2,25,80,2,80,5,26,80,2,25,82,12,2,25,82,12,3,25,32,80,1,26,24,252],[82,12,3,4,128,79],[82,12,2,4,128,76],[145,12,141,137],[140,4],[144,13,5],[85,13,1,80,5,115,98,13,5,98,13,4,98,13,3,98,13,2,98,13,1],[82,13,2,81,27,81,28,82,13,1,80,1,25,2,120,24,4,112,32,82,13,3,81,27,81,33,82,13,1,80,1,25,2,120,24,4,112,32,24,81,38,82,13,1,80,1,25,2,120,24,4,112,24,99,13,4],[82,13,2,81,27,81,43,82,13,1,80,1,25,2,120,24,4,112,32,82,13,3,81,27,81,48,82,13,1,80,1,25,2,120,24,4,112,32,24,81,53,82,13,1,80,1,25,2,120,24,4,112,24,99,13,5],[145,13,141,137],[140,5],[144,14,5],[85,14,1,80,5,115,98,14,1],[163],[81,24],[98,14,3,81,25],[82,14,3,69,129,105],[81,22],[98,14,2,81,23],[82,14,2,69,129,104],[82,14,1,82,14,2,82,14,3,85,14,4,85,14,5,136,85],[82,14,4,82,14,5,82,14,2,82,14,3,210,211],[82,14,2,4,128,99],[82,14,3,4,128,96],[162],[145,14,141,137],[136,16],[136,37],[81,22,81,24,81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,208],[81,23,81,22,25,80,1,24,81,25,81,24,25,80,1,24,209],[80,6,136,52],[87,12,68,114,97,103,111,110,32,99,117,114,118,101,87,19,32,109,97,112,112,105,110,103,115,32,105,110,32,99,111,108,111,117,114,54,190,191,147],[80,1],[97,58,80,3],[81,58,69,129,118],[81,58,136,91],[81,58,4,128,114],[130]]")},function(n,e,t){var o=t(64);"string"==typeof o&&(o=[[n.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(66)(o,r);o.locals&&(n.exports=o.locals)},function(n,e,t){(e=t(65)(!1)).push([n.i,'.tse{font-family:arial;font-size:16px;line-height:1;color:#282828;box-sizing:border-box}.tse *{font:inherit;margin:0;padding:0;border:0;box-sizing:inherit;min-height:0;min-width:0}.tse a,.tse a:hover{text-decoration:none}.tse a,.tse button,.tse input[type="text"],.tse input[type="number"],.tse th,.tse td{height:2em;padding:.5em}.tse select{height:2em;padding:.25em .5em}.tse select[multiple]{overflow:auto;padding:0}.tse select[multiple] option{cursor:pointer;padding:.25em .5em}.tse option{padding:.25em .5em}.tse input[type="text"],.tse input[type="number"],.tse select{background:#fff;border:1px solid #ababab;outline:0}.tse button{background:#159d6b;border:0;cursor:pointer;color:#fff;text-align:center;transition:background .3s}.tse button:hover{background:#0f704c}.tse table{border-collapse:collapse;font-size:.875em;width:calc(100% + 2px);margin:-1px}.tse thead th{background:#f3f3f3}.tse th{font-weight:bold}.tse th,.tse td{vertical-align:top;text-align:center;border:1px solid #ababab}.tse th.tse-wide,.tse td.tse-wide{width:50%}.tse code .tse-comment{color:gray}.tse code .tse-string{color:seagreen}.tse code .tse-operator{color:steelblue}.tse code .tse-binary,.tse code .tse-octal,.tse code .tse-decimal,.tse code .tse-hexadecimal{color:peru}.tse code .tse-type{color:firebrick}.tse code .tse-keyword{color:firebrick;font-weight:bold}.tse code .tse-command,.tse code .tse-custom{color:purple}.tse code .tse-turtle,.tse code .tse-variable{font-weight:bold}.tse code .tse-constant{color:steelblue}.tse code .tse-keycode{color:steelblue}.tse code .tse-query{font-weight:bold}.tse code .tse-unterminated-comment,.tse code .tse-unterminated-string,.tse code .tse-bad-binary,.tse code .tse-bad-octal,.tse code .tse-bad-hexadecimal,.tse code .tse-bad-decimal,.tse code .tse-illegal{background:rgba(200,0,0,0.2)}.tse-browser{max-width:548px;margin:0 auto;display:grid;grid-template-rows:auto 700px}.tse-browser .tse-browser-tab-list{display:flex}.tse-browser .tse-browser-tab-list .tse-browser-tab{flex:1;display:block;padding:.75em 1em .5em;height:auto;cursor:pointer;color:#fff;background:rgba(90,90,90,0.7)}.tse-browser .tse-browser-tab-list .tse-browser-tab:hover,.tse-browser .tse-browser-tab-list .tse-browser-tab.active{background:rgba(66,66,66,0.9)}.tse-browser .tse-browser-tab-panes{background:rgba(66,66,66,0.9);padding:4px}.tse-browser .tse-browser-tab-panes .tse-browser-tab-pane{display:none;grid-template-rows:auto 1fr;grid-gap:4px;height:100%}.tse-browser .tse-browser-tab-panes .tse-browser-tab-pane.active{display:grid}@media (min-width: 1024px){.tse-browser{max-width:1024px;grid-template-rows:700px}.tse-browser .tse-browser-tab-list{display:none}.tse-browser .tse-browser-tab-panes{display:grid;grid-template-columns:auto 540px;grid-gap:4px}.tse-browser .tse-browser-tab-panes .tse-browser-tab-pane{display:grid !important}}.tse-overlay{position:fixed;padding:0.5rem;top:0;right:0;bottom:0;left:0;overflow:auto;background:rgba(50,50,50,0.5);z-index:9999;opacity:0;transition:opacity 0.3s linear;pointer-events:none}.tse-overlay.tse-open{opacity:1;pointer-events:auto}.tse-overlay.tse-open .tse-modal{margin-top:8rem}.tse-overlay .tse-modal{margin:2rem auto 0;box-shadow:0 0.25rem 1rem 0 rgba(0,0,0,0.5);transition:margin-top 0.3s ease-in-out;max-width:30em}.tse-overlay .tse-modal .tse-modal-head{background:#159d6b;color:#fff}.tse-overlay .tse-modal .tse-modal-head h2{font-size:1em;margin:0;padding:.5em}.tse-overlay .tse-modal .tse-modal-body{background:#fff;padding:1em}.tse-overlay .tse-modal .tse-modal-body p{margin:0 0 1em}.tse-overlay .tse-modal .tse-modal-buttons{text-align:right}.tse-tabs{display:grid;grid-template-rows:1fr auto}.tse-tabs .tse-tab-panes .tse-tab-pane{display:none;height:100%;flex-direction:column;background:#fff;padding:4px}.tse-tabs .tse-tab-panes .tse-tab-pane.tse-active{display:flex}.tse-tabs .tse-tab-panes .tse-tab-pane div{flex-shrink:0}.tse-tabs .tse-tab-list{display:flex;overflow-x:auto}.tse-tabs .tse-tab-list .tse-tab{cursor:pointer;color:#fff;padding:.5em .75em;flex-shrink:0}.tse-tabs .tse-tab-list .tse-tab:hover{background:#ababab}.tse-tabs .tse-tab-list .tse-tab.tse-active{background:#fff;color:#282828}.tse-system{display:grid;grid-template-columns:1fr 540px;grid-template-rows:auto 1fr;grid-gap:4px;background:#424242;border:4px solid #424242}.tse-help{display:grid;grid-template-rows:auto 1fr;grid-gap:4px;line-height:1.4}.tse-help .tse-controls{justify-content:flex-end}.tse-help .tse-controls .tse-filename-input{display:none}.tse-help .tse-tabs{grid-template-rows:none;grid-template-columns:auto 1fr}.tse-help .tse-tabs .tse-tab-list{order:1;flex-direction:column}.tse-help .tse-tabs .tse-tab-panes{order:2}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane{overflow:auto;padding:8px 16px}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane h3,.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane h4{font-weight:bold;border-bottom:2px solid #282828}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane h3{margin:0 0 .75em;font-size:1em}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane h4{font-size:1em;margin:1.5em 0 .75em}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane p{margin:0 0 1em}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane p:last-child{margin-bottom:0}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane ul{margin-left:2.5em}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane ul li{margin-bottom:.5em}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane i,.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane em{font-style:italic}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane a{color:#159d6b;text-decoration:none}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane a:hover{text-decoration:underline}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane pre{font-family:consolas,monospace;background:#f3f3f3;border:1px solid #ababab;padding:4px 8px;margin:0 0 1em;overflow:auto}.tse-help .tse-tabs .tse-tab-panes .tse-tab-pane code{font-family:consolas,monospace}.tse-commands-options{display:flex;justify-content:space-between;flex-wrap:wrap}.tse-commands-options label{cursor:pointer;font-weight:bold}.tse-commands-options input[type="checkbox"]{margin:.5em}.tse-commands-options select,.tse-commands-options div{margin-bottom:1em}.tse-commands-options select{font-weight:normal}.tse-commands-table{font-size:1em}.tse-commands-table th{font-size:.9em}.tse-commands-table td,.tse-commands-table th{text-align:left}.tse-commands-table td:first-child{white-space:nowrap}.tse-help-table{overflow:auto;margin-bottom:1.25em}.tse-help-table table{width:auto;min-width:100%;margin:0}.tse-controls{display:flex;justify-content:space-between;background:#fff;padding:4px}.tse-controls .tse-filename-input{flex:1;margin-left:4px;text-align:center}.tse-controls .tse-machine-buttons{display:flex}.tse-controls .tse-machine-buttons button{padding:2px}.tse-controls .tse-machine-buttons .tse-run-halt-button{width:3.5em;font-weight:bold;margin-right:4px}.tse-controls .tse-machine-buttons .tse-play-pause-button{width:2em}.tse-controls .tse-turtle-properties{display:flex;align-items:stretch;margin:0;font-size:.75em}.tse-controls .tse-turtle-properties dd,.tse-controls .tse-turtle-properties dt{padding:10px 4px;text-align:center}.tse-controls .tse-turtle-properties dt{display:none}@media (min-width: 540px){.tse-controls .tse-turtle-properties dt{display:block}}.tse-controls .tse-turtle-properties dd{margin-left:4px}.tse-controls .tse-turtle-properties .tse-turt,.tse-controls .tse-turtle-properties .tse-turt-wide{background:#f3f3f3;overflow:hidden;width:2.5em}.tse-controls .tse-turtle-properties .tse-turt-wide{width:4.5em}.tse-file-box{background:#f3f3f3;border:1px solid #ababab;display:flex;flex-direction:column;padding:4px}.tse-file-box:not(:last-child){margin-bottom:4px}.tse-file-box:last-child{flex:1}.tse-file-box button{flex:1}.tse-file-box button:not(:last-child){margin-right:4px}.tse-file-box label{font-weight:bold;display:block;padding:4px;margin-bottom:4px}.tse-file-box select{width:100%}.tse-file-box select:not(:last-child){margin-bottom:4px}.tse-file-box select[multiple]{flex:1}.tse-buttons{display:flex;justify-content:flex-end}.tse-buttons:not(:last-child){margin-bottom:4px}.tse-code{flex:1;position:relative;border:1px solid #ababab;font-family:consolas,monospace;line-height:1.5;z-index:4;overflow:auto}.tse-code textarea,.tse-code ol,.tse-code pre{position:absolute;top:0;left:0;min-height:100%;margin:0;font:inherit}.tse-code textarea,.tse-code pre{padding:0 .5em 0 3.25em;min-width:100%}.tse-code textarea{background:transparent;border:0;outline:0;resize:none;overflow:hidden;opacity:.4;z-index:1}.tse-code ol,.tse-code pre{pointer-events:none}.tse-code ol{list-style:none;padding:0 .5em;width:3em;background:#f3f3f3;border-right:1px solid #ababab}.tse-code ol li{text-align:right}.tse-code pre{z-index:2}.tse-code code{font:inherit}.tse-usage{flex:1;border:1px solid #ababab;overflow-x:hidden;overflow-y:auto}.tse-usage code{font-family:consolas,monospace}.tse-usage .tse-usage-table td:first-child,.tse-usage .tse-usage-table td:last-child,.tse-usage .tse-usage-table th:first-child,.tse-usage .tse-usage-table th:last-child{text-align:left}.tse-usage .tse-usage-table .tse-category-heading th{background:#159d6b;color:white;font-style:italic;font-weight:bold;text-align:right}.tse-lexemes{flex:1;border:1px solid #ababab;overflow-x:hidden;overflow-y:auto}.tse-checkboxes{display:flex;flex-shrink:0;flex-wrap:wrap;border:1px solid #ababab;background:#f3f3f3;padding:4px;margin-bottom:4px;font-size:.875em}.tse-checkboxes label{cursor:pointer;flex-basis:50%;padding:.25rem}.tse-checkboxes label input{height:auto;padding:0;margin:0;margin-right:.25em}.tse-pcode{flex:1;overflow:auto;border:1px solid #ababab;font-size:.875em;line-height:1.3;font-family:consolas,monospace;margin:0;list-style-type:none;counter-reset:pcode-table}.tse-pcode li{display:flex;flex-wrap:wrap;background:#f3f3f3;counter-increment:pcode-table;padding-left:3.5em;border-bottom:1px solid #ababab}.tse-pcode li::before{content:counter(pcode-table)}.tse-pcode li::before{font-weight:bold;margin-left:-3.5em;width:2.5em;padding:.25em .5em;text-align:right}.tse-pcode li:last-child{margin-bottom:-1px}.tse-pcode li div{flex:0 0 12.5%;padding:.25em;overflow:hidden;background:#fff;border-left:1px solid #ababab;text-align:center}.tse-settings{height:100%;display:flex;flex-direction:column}.tse-settings .tse-option{flex:1;font-size:.875em;border:1px solid #ababab;background:#f3f3f3}.tse-settings .tse-option:not(:last-child){margin-bottom:4px}.tse-settings .tse-option label{padding:.25rem;display:flex;justify-content:space-between;align-items:baseline;font-weight:bold}.tse-settings .tse-option label input{width:8em;font-weight:normal !important;text-align:right}.tse-settings .tse-option p{text-align:justify;font-style:italic;padding:8px;margin:0}.tse-canvas{display:flex}.tse-canvas .tse-canvas-coords{flex:1;display:flex;justify-content:space-between}.tse-canvas .tse-canvas-coords span{display:block;font-size:10px;padding:4px;width:30px;color:#159d6b;text-align:right}.tse-canvas .tse-canvas-left{display:flex;flex-direction:column}.tse-canvas .tse-canvas-left .tse-canvas-coords{flex-direction:column;text-align:right;margin-top:18px}.tse-canvas .tse-canvas-right{flex:1}.tse-canvas .tse-canvas-right .tse-canvas-coords span:nth-child(1),.tse-canvas .tse-canvas-right .tse-canvas-coords span:nth-child(2){text-align:left}.tse-canvas .tse-canvas-right .tse-canvas-coords span:nth-child(3){text-align:center}.tse-canvas .tse-canvas-right .tse-canvas-wrapper{margin-bottom:4px}.tse-canvas .tse-canvas-right .tse-canvas-wrapper canvas{display:block;width:100%;border:1px solid #ababab;image-rendering:pixelated}.tse-console{flex:1;overflow:auto;border:1px solid #ababab;padding:4px;font-family:consolas,monospace}.tse-output{flex:1;width:532px;overflow:auto;padding:4px;font-family:consolas,monospace;border:1px solid #ababab}.tse-memory-container{flex:1;overflow-y:auto;overflow-x:hidden;border:1px solid #ababab}.tse-memory-container:not(:last-child){margin-bottom:4px}\n',""]),n.exports=e},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var r=(i=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([r]).join("\n")}var i,s,l;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&r[l[0]]||(t&&(l[2]?l[2]="".concat(t," and ").concat(l[2]):l[2]=t),e.push(l))}},e}},function(n,e,t){var o,r,a={},i=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(n,e){return e?e.querySelector(n):document.querySelector(n)},l=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var o=s.call(this,n,t);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}}(),c=null,d=0,u=[],p=t(67);function m(n,e){for(var t=0;t<n.length;t++){var o=n[t],r=a[o.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](o.parts[i]);for(;i<o.parts.length;i++)r.parts.push(E(o.parts[i],e))}else{var s=[];for(i=0;i<o.parts.length;i++)s.push(E(o.parts[i],e));a[o.id]={id:o.id,refs:1,parts:s}}}}function g(n,e){for(var t=[],o={},r=0;r<n.length;r++){var a=n[r],i=e.base?a[0]+e.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};o[i]?o[i].parts.push(s):t.push(o[i]={id:i,parts:[s]})}return t}function y(n,e){var t=l(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=u[u.length-1];if("top"===n.insertAt)o?o.nextSibling?t.insertBefore(e,o.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),u.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(n.insertAt.before,t);t.insertBefore(e,r)}}function h(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=u.indexOf(n);e>=0&&u.splice(e,1)}function x(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var o=function(){0;return t.nc}();o&&(n.attrs.nonce=o)}return b(e,n.attrs),y(n,e),e}function b(n,e){Object.keys(e).forEach((function(t){n.setAttribute(t,e[t])}))}function E(n,e){var t,o,r,a;if(e.transform&&n.css){if(!(a="function"==typeof e.transform?e.transform(n.css):e.transform.default(n.css)))return function(){};n.css=a}if(e.singleton){var i=d++;t=c||(c=x(e)),o=R.bind(null,t,i,!1),r=R.bind(null,t,i,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",b(e,n.attrs),y(n,e),e}(e),o=w.bind(null,t,e),r=function(){h(t),t.href&&URL.revokeObjectURL(t.href)}):(t=x(e),o=O.bind(null,t),r=function(){h(t)});return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else r()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=g(n,e);return m(t,e),function(n){for(var o=[],r=0;r<t.length;r++){var i=t[r];(s=a[i.id]).refs--,o.push(s)}n&&m(g(n,e),e);for(r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var f,T=(f=[],function(n,e){return f[n]=e,f.filter(Boolean).join("\n")});function R(n,e,t,o){var r=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=T(e,r);else{var a=document.createTextNode(r),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function O(n,e){var t=e.css,o=e.media;if(o&&n.setAttribute("media",o),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}function w(n,e,t){var o=t.css,r=t.sourceMap,a=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||a)&&(o=p(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([o],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,o=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(n,e){var r,a=e.trim().replace(/^"(.*)"$/,(function(n,e){return e})).replace(/^'(.*)'$/,(function(n,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?n:(r=0===a.indexOf("//")?a:0===a.indexOf("/")?t+a:o+a.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},function(n,e,t){"use strict";t.r(e);const o=(n,e=null,t=null)=>{const o=document.createElement(n);return e&&o.classList.add(e),t&&c(o,t),o},r=(n,e)=>{const t=document.createElement("input");return t.type=n,t.name=e,t},a=(n,e)=>{const t=document.createElement("option");return t.innerHTML=n,t.setAttribute("value",e),t},i=(n,e)=>{const t=document.createElement("select");return e&&t.setAttribute("multiple","multiple"),c(t,n),t},s=n=>document.createTextNode(n),l=(n=null)=>{const e=document.createDocumentFragment();return n&&c(e,n),e},c=(n,e)=>{if("object"==typeof e){const t=document.createDocumentFragment();e.forEach(n=>{t.appendChild(n)}),n.innerHTML="",n.appendChild(t)}else n.innerHTML=e},d=n=>o("div","tse-tabs",[o("div","tse-tab-panes",n.map(m)),o("nav","tse-tab-list",n.map(p))]),u=n=>{g(document.querySelector(`[data-target="${n}"]`)),g(document.getElementById(n))},p=n=>{const e=o("a","tse-tab",n.label);return n.active&&e.classList.add("tse-active"),e.dataset.target=n.label.replace(/\s/g,""),e.addEventListener("click",n=>{g(n.currentTarget),g(document.getElementById(n.currentTarget.getAttribute("data-target")))}),e},m=n=>{const e=o("div","tse-tab-pane",n.content);return n.active&&e.classList.add("tse-active"),e.id=n.label.replace(/\s/g,""),e},g=n=>{if(n){Array.from(n.parentElement.children).forEach(n=>n.classList.remove("tse-active")),n.classList.add("tse-active")}};var y=n=>{let e=[];for(;n.length>0;){let t=h(n)||x(n)||b(n)||E(n)||f(n)||T(n)||R(n)||O(n)||w(n)||N(n)||I(n)||S(n)||v(n)||P(n)||C(n)||A(n)||L(n)||D(n)||k(n)||F(n);e.push(t),n=n.slice(t.content.length)}return e};const h=n=>!!("\n"===n[0])&&{type:"linebreak",content:"\n"},x=n=>{const e=n.match(/^( +)/);return!!e&&{type:"spaces",content:e[0]}},b=n=>!!n.match(/^REM\b/)&&{type:"comment",content:n.split("\n")[0]},E=n=>{if(n.match(/^""""/))return{type:"string",content:'""""'};if(n.match(/^""[^"]/))return{type:"string",content:'""'};const e='"'===n[0],t=n.match(/[^"](")([^"]|$)/);return e&&t?{type:"string",content:n.slice(0,t.index+2)}:!!e&&{type:"unterminated-string",content:n.split("\n")[0]}},f=n=>{const e=n.match(/^(\+|-|\*|\/|DIV\b|MOD\b|=|<>|<=|>=|<|>|NOT\b|AND\b|OR\b|EOR\b)/);return!!e&&{type:"operator",content:e[0]}},T=n=>{const e=n.match(/^(\(|\)|,|:)/);return!!e&&{type:"delimiter",content:e[0]}},R=n=>{const e=n.match(/^(TRUE|FALSE)\b/);return!!e&&{type:"boolean",content:e[0]}},O=n=>{const e=n.match(/^(%[01]+)\b/),t=n.match(/^(0b[01]+)\b/);return e?{type:"binary",content:e[0]}:!!t&&{type:"bad-binary",content:t[0]}},w=n=>{const e=n.match(/^((\$|(0x))[A-Fa-f0-9]+)\b/),t=n.match(/^((&|#)[A-Fa-f0-9]+)\b/);return e?{type:"bad-hexadecimal",content:e[0]}:!!t&&{type:"hexadecimal",content:t[0]}},N=n=>{const e=n.match(/^(\d+\.\d+)/),t=n.match(/^(\d+)\b/);return e?{type:"bad-decimal",content:e[0]}:!!t&&{type:"decimal",content:t[0]}},I=n=>{const e=n.match(/^(CONST|DEF|DIM|ELSE|END|ENDIF|ENDPROC|ENDWHILE|FOR|IF|LOCAL|NEXT|PRIVATE|REPEAT|RETURN|STEP|THEN|TO|UNTIL|WHILE)\b/);return!!e&&{type:"keyword",content:e[0]}},S=n=>{const e=n.match(/^((ABS|ACS|ANGLES|ANTILOG|ASC|ASN|ATN|BACK|BLANK|BLOT|BOOLINT|BOX|CANVAS|CIRCLE|COLOU?R|CONSOLE|COS|CURSOR|DEC||DETECT|DIRECTION|DIVMULT|DRAWXY|DUMP|ELLBLOT|ELLIPSE|EXP|FILL|FORGET|FORWARD|HEAPRESET||HOME|HYPOT|INC|INSTR|KEYBUFFER|KEYECHO|KEYSTATUS|LEFT|LEN|LN|LOG10|MAX|MAXINT|MIN|MIXCOLS|MOVEXY|NEWTURTLE|NOUPDATE|OLDTURTLE|OUTPUT|PAUSE|PENDOWN|PENUP|PI|PIXCOL|PIXSET|POLYGON|POLYLINE|POWER|PRINT|QVAL|RECOLOU?R|REMEMBER|RESET|RESOLUTION|RGB|RIGHT|RND|RNDCOL|ROOT|SETX|SETXY|SETY|SIGN|SIN|SQR|TAN|THICKNESS|TIME|TIMESET|TRACE|TURNXY|UPDATE|VAL|VALDEF|WATCH|WRITE|WRITELN)[$%])/);return!!e&&{type:"variable",content:e[0]}},v=n=>{const e=n.match(/^(ABS\b|ACS\b|ANGLES\b|ANTILOG\b|ASC\b|ASN\b|ATN\b|BACK\b|BLANK\b|BLOT\b|BOOLINT\b|BOX\b|CANVAS\b|CHR\$|CIRCLE\b|COLOU?R\b|CONSOLE\b|COS\b|CURSOR\b|DEC\b|DEL\$|DETECT\b|DIRECTION\b|DIVMULT\b|DRAWXY\b|DUMP\b|ELLBLOT\b|ELLIPSE\b|EXP\b|FILL\b|FORGET\b|FORWARD\b|GET\$|GETLINE\$|HEAPRESET\b|HEX\$|HOME\b|HYPOT\b|INC\b|INPUT\$|INSTR\b|KEYBUFFER\b|KEYECHO\b|KEYSTATUS\b|LCASE\$|LEFT\$|LEFT\b|LEN\b|LN\b|LOG10\b|MAX\b|MAXINT\b|MID\$|MIN\b|MIXCOLS\b|MOVEXY\b|NEWTURTLE\b|NOUPDATE\b|OLDTURTLE\b|OUTPUT\b|PAUSE\b|PENDOWN\b|PENUP\b|PI\b|PIXCOL\b|PIXSET\b|POLYGON\b|POLYLINE\b|POWER\b|PRINT\b|QSTR\$|QVAL\b|RECOLOU?R\b|REMEMBER\b|RESET\b|RESOLUTION\b|RGB\b|RIGHT\$|RIGHT\b|RND\b|RNDCOL\b|ROOT\b|SETX\b|SETXY\b|SETY\b|SIGN\b|SIN\b|SQR\b|STR\$|TAN\b|THICKNESS\b|TIME\b|TIMESET\b|TRACE\b|TURNXY\b|UPDATE\b|UCASE\$|VAL\b|VALDEF\b|WATCH\b|WRITE\b|WRITELN\b)/);return!!e&&{type:"command",content:e[0]}},P=n=>{const e=n.match(/^((PROC|FN)[_a-zA-Z0-9]+[%|$]?)/);return!!e&&{type:"custom",content:e[0]}},C=n=>{const e=n.match(/^(turt[xydatc]%)/);return!!e&&{type:"turtle",content:e[0]}},A=n=>{const e=n.match(/^(GREEN|DARKGREEN|LIGHTGREEN|SEAGREEN|GREENGREY|GREENGRAY|RED|DARKRED|LIGHTRED|MAROON|REDGREY|REDGRAY|BLUE|DARKBLUE|LIGHTBLUE|ROYAL|BLUEGREY|YELLOW|OCHRE|CREAM|GOLD|YELLOWGREY|YELLOWGRAY|VIOLET|INDIGO|LILAC|PURPLE|DARKGREY|DARKGRAY|LIME|OLIVE|YELLOWGREEN|EMERALD|MIDGREY|MIDGRAY|ORANGE|ORANGERED|PEACH|SALMON|LIGHTGREY|LIGHTGRAY|SKYBLUE|TEAL|CYAN|TURQUOISE|SILVER|BROWN|DARKBROWN|LIGHTBROWN|COFFEE|WHITE|PINK|MAGENTA|LIGHTPINK|ROSE|BLACK)\b/);return!!e&&{type:"colour",content:e[0]}},L=n=>{const e=n.match(/^([_a-zA-Z][_a-zA-Z0-9]*[%|$]?)/);return!!e&&{type:"variable",content:e[0]}},D=n=>{const e=n.match(/^(\\[#A-Z0-9]+)/);return!!e&&{type:"keycode",content:e[0]}},k=n=>{const e=n.match(/^(\?[A-Z]+)\b/);return!!e&&{type:"query",content:e[0]}},F=n=>{const e=n.match(/^\d+/),t="#"===n[0];return e?{type:"unterminated-integer",content:n}:t?{type:"bad-hexadecimal",content:n}:{type:"illegal",content:n.split(/\b/)[0]}};var M=n=>{const e=[];for(;n.length>0;){let t=B(n)||U(n)||H(n)||X(n)||G(n)||Y(n)||W(n)||j(n)||z(n)||V(n)||$(n)||K(n)||q(n)||Q(n)||_(n)||Z(n)||J(n)||nn(n)||en(n)||tn(n);e.push(t),n=n.slice(t.content.length)}return e};const B=n=>!!("\n"===n[0])&&{type:"linebreak",content:"\n"},U=n=>{const e=n.match(/^( +)/);return!!e&&{type:"spaces",content:e[0]}},H=n=>{const e="{"===n[0],t=n.match(/}/);return e&&t?{type:"comment",content:n.slice(0,t.index+1)}:!!e&&{type:"unterminated-comment",content:n.split("\n")[0]}},X=n=>{const e=n.match(/^(\+|-|\*|\/|div\b|mod\b|=|<>|<=|>=|<|>|:=|not\b|and\b|or\b|xor\b)/i);return!!e&&{type:"operator",content:e[0]}},G=n=>{const e=n.match(/^(\(|\)|\[|\]|,|:|;|\.\.|\.)/);return!!e&&{type:"delimiter",content:e[0]}},Y=n=>{if(n.match(/^''''/))return{type:"string",content:"''''"};if(n.match(/^''[^']/))return{type:"string",content:"''"};if(n.match(/^""""/))return{type:"string",content:'""""'};if(n.match(/^""[^"]/))return{type:"string",content:'""'};const e="'"===n[0],t='"'===n[0],o=n.match(/[^'](')([^']|$)/),r=n.match(/[^"](")([^"]|$)/);return e&&o?{type:"string",content:n.slice(0,o.index+2)}:e?{type:"unterminated-string",content:n.split("\n")[0]}:t&&r?{type:"string",content:n.slice(0,r.index+2)}:!!t&&{type:"unterminated-string",content:n.split("\n")[0]}},W=n=>{const e=n.match(/^(true|false)\b/i);return!!e&&{type:"boolean",content:e[0]}},j=n=>{const e=n.match(/^(%[01]+)\b/),t=n.match(/^(0b[01]+)\b/);return e?{type:"binary",content:e[0]}:!!t&&{type:"bad-binary",content:t[0]}},z=n=>{const e=n.match(/^(&[0-7]+)\b/),t=n.match(/^(0o[0-7]+)\b/);return e?{type:"octal",content:e[0]}:!!t&&{type:"bad-octal",content:t[0]}},V=n=>{const e=n.match(/^((&|(0x))[A-Fa-f0-9]+)\b/),t=n.match(/^((\$|#)[A-Fa-f0-9]+)\b/);return e?{type:"bad-hexadecimal",content:e[0]}:!!t&&{type:"hexadecimal",content:t[0]}},$=n=>{const e=n.match(/^(\d+\.\d+)/),t=n.match(/^(\d+)\b/);return e?{type:"bad-decimal",content:e[0]}:!!t&&{type:"decimal",content:t[0]}},K=n=>{const e=n.match(/^(begin|const|do|downto|else|end|for|function|if|of|procedure|program|repeat|result|then|to|until|var|while)\b/i);return!!e&&{type:"keyword",content:e[0]}},q=n=>{const e=n.match(/^(array|boolean|char|integer|string)\b/i);return!!e&&{type:"type",content:e[0]}},Q=n=>{const e=n.match(/^(abs|angles|antilog|arccos|arcsin|arctan|back|blank|blot|boolint|box|canvas|chr|circle|colou?r|console|copy|cos|cursor|dec|delete|detect|direction|divmult|drawxy|dump|ellblot|ellipse|exp|fill|forget|forward|heapreset|hexstr|home|hypot|inc|insert|keybuffer|keyecho|keystatus|left|length|ln|log10|lowercase|max|maxint|min|mixcols|movexy|newturtle|noupdate|oldturtle|ord|output|pause|pendown|penup|pi|pixcol|pixset|polygon|polyline|pos|power|print|qstr|qval|randcol|random|read|readln|recolour|remember|reset|resolution|rgb|right|root|setx|setxy|sety|sign|sin|sqrt|str|tan|thickness|time|timeset|trace|turnxy|update|uppercase|val|valdef|watch|write|writeln)\b/i);return!!e&&{type:"command",content:e[0]}},_=n=>{const e=n.match(/^(turt[xydatc])\b/i);return!!e&&{type:"turtle",content:e[0]}},Z=n=>{const e=n.match(/^(true|false|green|darkgreen|lightgreen|seagreen|greengrey|greengray|red|darkred|lightred|maroon|redgrey|redgray|blue|darkblue|lightblue|royal|bluegrey|yellow|ochre|cream|gold|yellowgrey|yellowgray|violet|indigo|lilac|purple|darkgrey|darkgray|lime|olive|yellowgreen|emerald|midgrey|midgray|orange|orangered|peach|salmon|lightgrey|lightgray|skyblue|teal|cyan|turquoise|silver|brown|darkbrown|lightbrown|coffee|white|pink|magenta|lightpink|rose|black)\b/i);return!!e&&{type:"colour",content:e[0]}},J=n=>{const e=n.match(/^(\\[#a-z0-9]+)/i);return!!e&&{type:"keycode",content:e[0]}},nn=n=>{const e=n.match(/^(\?[a-z]+)\b/i);return!!e&&{type:"query",content:e[0]}},en=n=>{const e=n.match(/^([_a-zA-Z][_a-zA-Z0-9]*)\b/);return!!e&&{type:"identifier",content:e[0]}},tn=n=>({type:"illegal",content:n.split(/\b/)[0]});var on=t(1),rn=[{code:0,args:0,str:"NULL"},{code:1,args:0,str:"DUPL"},{code:2,args:0,str:"SWAP"},{code:3,args:0,str:"ROTA"},{code:4,args:0,str:"INCR"},{code:5,args:0,str:"DECR"},void 0,void 0,{code:8,args:0,str:"NOT"},{code:9,args:0,str:"AND"},{code:10,args:0,str:"OR"},{code:11,args:0,str:"XOR"},{code:12,args:0,str:"BAND"},{code:13,args:0,str:"BOR"},void 0,void 0,{code:16,args:0,str:"NEG"},{code:17,args:0,str:"ABS"},{code:18,args:0,str:"SIGN"},{code:19,args:0,str:"RAND"},{code:20,args:0,str:"SEED"},void 0,void 0,void 0,{code:24,args:0,str:"PLUS"},{code:25,args:0,str:"SUBT"},{code:26,args:0,str:"MULT"},{code:27,args:0,str:"DIVR"},{code:28,args:0,str:"DIV"},{code:29,args:0,str:"MOD"},void 0,void 0,{code:32,args:0,str:"DIVM"},{code:33,args:0,str:"SQRT"},{code:34,args:0,str:"HYP"},{code:35,args:0,str:"ROOT"},{code:36,args:0,str:"POWR"},{code:37,args:0,str:"LOG"},{code:38,args:0,str:"ALOG"},{code:39,args:0,str:"LN"},{code:40,args:0,str:"EXP"},{code:41,args:0,str:"SIN"},{code:42,args:0,str:"COS"},{code:43,args:0,str:"TAN"},{code:44,args:0,str:"ASIN"},{code:45,args:0,str:"ACOS"},{code:46,args:0,str:"ATAN"},{code:47,args:0,str:"PI"},{code:48,args:0,str:"CTOS"},{code:49,args:0,str:"ITOS"},{code:50,args:0,str:"HEXS"},{code:51,args:0,str:"SVAL"},{code:52,args:0,str:"QTOS"},{code:53,args:0,str:"QVAL"},{code:54,args:0,str:"SCAT"},{code:55,args:0,str:"SLEN"},{code:56,args:0,str:"CASE"},{code:57,args:0,str:"COPY"},{code:58,args:0,str:"DELS"},{code:59,args:0,str:"INSS"},{code:60,args:0,str:"POSS"},{code:61,args:0,str:"REPL"},{code:62,args:0,str:"SASC"},{code:63,args:0,str:"SPAD"},{code:64,args:0,str:"EQAL"},{code:65,args:0,str:"NOEQ"},{code:66,args:0,str:"LESS"},{code:67,args:0,str:"MORE"},{code:68,args:0,str:"LSEQ"},{code:69,args:0,str:"MREQ"},{code:70,args:0,str:"MAXI"},{code:71,args:0,str:"MINI"},{code:72,args:0,str:"SEQL"},{code:73,args:0,str:"SNEQ"},{code:74,args:0,str:"SLES"},{code:75,args:0,str:"SMOR"},{code:76,args:0,str:"SLEQ"},{code:77,args:0,str:"SMEQ"},{code:78,args:0,str:"SMAX"},{code:79,args:0,str:"SMIN"},{code:80,args:1,str:"LDIN"},{code:81,args:1,str:"LDVG"},{code:82,args:2,str:"LDVV"},{code:83,args:2,str:"LDVR"},{code:84,args:1,str:"LDAG"},{code:85,args:2,str:"LDAV"},void 0,{code:87,args:-1,str:"LSTR"},{code:88,args:0,str:"LDMT"},void 0,void 0,void 0,{code:92,args:0,str:"PEEK"},{code:93,args:0,str:"POKE"},void 0,void 0,{code:96,args:2,str:"ZERO"},{code:97,args:1,str:"STVG"},{code:98,args:2,str:"STVV"},{code:99,args:2,str:"STVR"},void 0,void 0,void 0,void 0,{code:104,args:0,str:"STMT"},void 0,void 0,void 0,void 0,void 0,void 0,void 0,{code:112,args:0,str:"LPTR"},{code:113,args:0,str:"SPTR"},{code:114,args:0,str:"CPTR"},{code:115,args:0,str:"ZPTR"},void 0,void 0,void 0,void 0,{code:120,args:0,str:"TEST"},{code:121,args:0,str:"CSTR"},void 0,void 0,void 0,void 0,void 0,void 0,{code:128,args:1,str:"JUMP"},{code:129,args:1,str:"IFNO"},{code:130,args:0,str:"HALT"},void 0,void 0,void 0,void 0,void 0,{code:136,args:1,str:"SUBR"},{code:137,args:0,str:"RETN"},void 0,void 0,{code:140,args:1,str:"PSSR"},{code:141,args:0,str:"PLSR"},{code:142,args:0,str:"PSRJ"},{code:143,args:0,str:"PLRJ"},{code:144,args:2,str:"MEMC"},{code:145,args:1,str:"MEMR"},{code:146,args:0,str:"HFIX"},{code:147,args:0,str:"HCLR"},{code:148,args:0,str:"HRST"},void 0,void 0,void 0,{code:152,args:-2,str:"NEWT"},{code:153,args:-2,str:"OLDT"},{code:154,args:-2,str:"RNDC"},{code:155,args:-2,str:"TEXL"},{code:156,args:-2,str:"UPPC"},{code:157,args:-2,str:"LOWC"},{code:158,args:-2,str:"LEFS"},{code:159,args:-2,str:"RGTS"},{code:160,args:0,str:"PNUP"},{code:161,args:0,str:"PNDN"},{code:162,args:0,str:"UDAT"},{code:163,args:0,str:"NDAT"},{code:164,args:0,str:"KECH"},void 0,{code:166,args:0,str:"OUTP"},{code:167,args:0,str:"CONS"},{code:168,args:0,str:"TRAC"},{code:169,args:0,str:"MEMW"},{code:170,args:0,str:"DUMP"},{code:171,args:-2,str:"SVD0"},{code:172,args:-2,str:"BOOL"},{code:173,args:-2,str:"ILIN"},void 0,void 0,{code:176,args:0,str:"TIME"},{code:177,args:0,str:"TSET"},{code:178,args:0,str:"WAIT"},{code:179,args:0,str:"TDET"},void 0,void 0,void 0,void 0,{code:184,args:0,str:"INPT"},{code:185,args:0,str:"ICLR"},{code:186,args:0,str:"BUFR"},{code:187,args:0,str:"READ"},{code:188,args:0,str:"RDLN"},{code:189,args:0,str:"PRNT"},{code:190,args:0,str:"TEXT"},{code:191,args:0,str:"NEWL"},{code:192,args:0,str:"FDIR"},{code:193,args:0,str:"OPEN"},{code:194,args:0,str:"CLOS"},{code:195,args:0,str:"FPTR"},{code:196,args:0,str:"FBEG"},{code:197,args:0,str:"EOF"},{code:198,args:0,str:"FRDS"},{code:199,args:0,str:"FRLN"},{code:200,args:0,str:"FWRS"},{code:201,args:0,str:"FWNL"},void 0,void 0,void 0,void 0,void 0,void 0,{code:208,args:0,str:"CANV"},{code:209,args:0,str:"RESO"},{code:210,args:0,str:"PIXC"},{code:211,args:0,str:"PIXS"},{code:212,args:0,str:"ANGL"},{code:213,args:0,str:"CURS"},void 0,void 0,{code:216,args:0,str:"HOME"},{code:217,args:0,str:"SETX"},{code:218,args:0,str:"SETY"},{code:219,args:0,str:"SETD"},{code:220,args:0,str:"THIK"},{code:221,args:0,str:"COLR"},{code:222,args:0,str:"RGB"},{code:223,args:0,str:"MIXC"},{code:224,args:0,str:"TOXY"},{code:225,args:0,str:"MVXY"},{code:226,args:0,str:"DRXY"},{code:227,args:0,str:"FWRD"},{code:228,args:0,str:"BACK"},{code:229,args:0,str:"LEFT"},{code:230,args:0,str:"RGHT"},{code:231,args:0,str:"TURN"},void 0,void 0,void 0,void 0,{code:236,args:0,str:"RMBR"},{code:237,args:0,str:"FRGT"},void 0,void 0,{code:240,args:0,str:"POLY"},{code:241,args:0,str:"PFIL"},{code:242,args:0,str:"CIRC"},{code:243,args:0,str:"BLOT"},{code:244,args:0,str:"ELPS"},{code:245,args:0,str:"EBLT"},{code:246,args:0,str:"BOX"},void 0,{code:248,args:0,str:"BLNK"},void 0,void 0,void 0,{code:252,args:0,str:"RCOL"},{code:253,args:0,str:"FILL"},void 0,{code:255,args:0,str:"MXIN"}],an=rn.filter(n=>void 0!==n).reduce((n,e)=>(n[e.str.toLowerCase()]=e.code,n),{}),sn=[{names:{BASIC:"FORWARD",Pascal:"forward",Python:"forward"},code:an.fwrd,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:0,level:0,description:"Moves the Turtle forward <code>n</code> units, drawing as it goes (unless the pen is up)."},{names:{BASIC:"BACK",Pascal:"back",Python:"back"},code:an.back,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:0,level:0,description:"Moves the Turtle back <code>n</code> units, drawing as it goes (unless the pen is up)."},{names:{BASIC:"LEFT",Pascal:"left",Python:"left"},code:an.left,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:0,level:0,description:"Rotates the Turtle left by <code>n</code> degrees."},{names:{BASIC:"RIGHT",Pascal:"right",Python:"right"},code:an.rght,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:0,level:0,description:"Rotates the Turtle right by <code>n</code> degrees."},{names:{BASIC:"DRAWXY",Pascal:"drawxy",Python:"drawxy"},code:an.drxy,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1}],category:0,level:1,description:"Moves the Turtle in a straight line to a point <code>x</code> units away along the x-axis and <code>y</code> units away along the y-axis, drawing as it goes (unless the pen is up)."},{names:{BASIC:"MOVEXY",Pascal:"movexy",Python:"movexy"},code:an.mvxy,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1}],category:0,level:1,description:"Moves the Turtle in a straight line to a point <code>x</code> units away along the x-axis and <code>y</code> units away along the y-axis, <em>without</em> drawing (regardless of the current pen status)."},{names:{BASIC:"HOME",Pascal:"home",Python:"home"},code:an.home,parameters:[],category:1,level:0,description:"Moves the Turtle back to its starting position in the centre of the canvas, facing north, drawing as it goes (unless the pen is up)."},{names:{BASIC:"SETX",Pascal:"setx",Python:"setx"},code:an.setx,parameters:[{name:"x",type:"integer",byref:!1,length:1}],category:1,level:0,description:"Sets the Turtle&rsquo;s <code>x</code> coordinate directly (without movement or drawing on the canvas). This can also be achieved by direct assignment of the global variable <code>turtx</code>."},{names:{BASIC:"SETY",Pascal:"sety",Python:"sety"},code:an.sety,parameters:[{name:"y",type:"integer",byref:!1,length:1}],category:1,level:0,description:"Sets the Turtle&rsquo;s <code>y</code> coordinate directly (without movement or drawing on the canvas). This can also be achieved by direct assignment of the global variable <code>turty</code>."},{names:{BASIC:"SETXY",Pascal:"setxy",Python:"setxy"},code:an.toxy,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1}],category:1,level:0,description:"Sets the Turtle&rsquo;s <code>x</code> and <code>y</code> coordinates directly (without movement or drawing on the canvas). This can also be achieved by direct assingment of the global variables <code>turtx</code> and <code>turty</code>."},{names:{BASIC:"DIRECTION",Pascal:"direction",Python:"direction"},code:an.setd,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:1,level:0,description:"Sets the Turtle&rsquo;s direction to <code>n</code> degrees (0 for north, 90 for east, 180 for south, 270 for west). This can also be achieved by direct assignment of the global variable <code>turtd</code>. Note that the number of degrees in a circle (360 by default) can be changed with the <code>angles</code> command."},{names:{BASIC:"TURNXY",Pascal:"turnxy",Python:"turnxy"},code:an.turn,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1}],category:1,level:1,description:"Turns the Turtle to face the point <code>x</code> units away alongthe x-axis and <code>y</code> units away along the y-axis."},{names:{BASIC:"CIRCLE",Pascal:"circle",Python:"circle"},code:an.circ,parameters:[{name:"radius",type:"integer",byref:!1,length:1}],category:2,level:0,description:"Draws a circle outline in the Turtle&rsquo;s current colour and thickness, of the given <code>radius</code>, centred on the Turtle&rsquo;s current location."},{names:{BASIC:"BLOT",Pascal:"blot",Python:"blot"},code:an.blot,parameters:[{name:"radius",type:"integer",byref:!1,length:1}],category:2,level:0,description:"Draws a filled circle in the Turtle&rsquo;s current colour, of the given <code>radius</code>, centred on the Turtle&rsquo;s current location."},{names:{BASIC:"ELLIPSE",Pascal:"ellipse",Python:"ellipse"},code:an.elps,parameters:[{name:"Xradius",type:"integer",byref:!1,length:1},{name:"Yradius",type:"integer",byref:!1,length:1}],category:2,level:0,description:"Draws an ellipse outline in the Turtle&rsquo;s current colour and thickness, of the given <code>Xradius</code> and <code>Yradius</code>, centred on the Turtle&rsquo;s current location."},{names:{BASIC:"ELLBLOT",Pascal:"ellblot",Python:"ellblot"},code:an.eblt,parameters:[{name:"Xradius",type:"integer",byref:!1,length:1},{name:"Yradius",type:"integer",byref:!1,length:1}],category:2,level:0,description:"Draws a filled ellipse in the Turtle&rsquo;s current colour, of the given <code>Xradius</code> and <code>Yradius</code>, centred on the Turtle&rsquo;s current location."},{names:{BASIC:"POLYLINE",Pascal:"polyline",Python:"polyline"},code:an.poly,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:2,level:1,description:"Draws a polygon outline in the Turtle&rsquo;s current colour and thickness, connecting the last <code>n</code> locations that the Turtle has visited."},{names:{BASIC:"POLYGON",Pascal:"polygon",Python:"polygon"},code:an.pfil,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:2,level:1,description:"Draws a filled polygon in the Turtle&rsquo;s current colour and thickness, connecting the last <code>n</code> locations that the Turtle has visited."},{names:{BASIC:"FORGET",Pascal:"forget",Python:"forget"},code:an.frgt,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:2,level:1,description:"Makes the Turtle &ldquo;forget&rdquo; the last <code>n</code> points it has visited. Used in conjunction with <code>polyline</code> and <code>polygon</code>."},{names:{BASIC:"REMEMBER",Pascal:"remember",Python:"remember"},code:an.rmbr,parameters:[],category:2,level:1,description:"Makes the Turtle &ldquo;remember&rdquo; its current location. This is only necessary if its current location was set by a direct assignment of the global variables <code>turtx</code> and <code>turty</code>; when using the standard moving commands, the Turtle automatically remembers where it has been."},{names:{BASIC:"BOX",Pascal:"box",Python:"box"},code:an.box,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1},{name:"colour",type:"integer",byref:!1,length:1},{name:"border",type:"boolean",byref:!1,length:1}],category:2,level:1,description:"Draws a box of width <code>x</code> and height <code>y</code>, with the top left corner in the Turtle&rsquo;s current location, filled with the specified <code>colour</code>. If <code>border</code> is <code>true</code>, a border is drawn around the box in the Turtle&rsquo;s current colour and and thickness. This is intended to be used with the <code>print</code> command, to provide a box for framing text."},{names:{BASIC:"COLOUR",Pascal:"colour",Python:"colour"},code:an.colr,parameters:[{name:"colour",type:"integer",byref:!1,length:1}],category:3,level:0,description:"Sets the <code>colour</code> of the Turtle&rsquo;s pen. Takes as an argument either an RGB value, or one of the Turtle System&rsquo;s fifty predefined colour constants (see the <b>Colours</b> tab). This can also be achieved by direct assignment of the global variable <code>turtc</code>."},{names:{BASIC:"RNDCOL",Pascal:"randcol",Python:"randcol"},code:an.rndc,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:3,level:0,description:"Assigns a random colour to the Turte&rsquo;s pen, between 1 and <code>n</code> (maximum 50). The colours are taken from the Turtle System&rsquo;s fifty predefined colours, which are each assigned a number between 1 and 50 (see the <b>Colours</b> tab)."},{names:{BASIC:"THICKNESS",Pascal:"thickness",Python:"thickness"},code:an.thik,parameters:[{name:"thickness",type:"integer",byref:!1,length:1}],category:3,level:0,description:"Sets the <code>thickness</code> of the Turtle&rsquo;s pen (for line drawing, and outlines of circles, ellipses, boxes, and polygons). This can also be achieved by direct assignment of the global variable <code>turtt</code>."},{names:{BASIC:"PENUP",Pascal:"penup",Python:"penup"},code:an.pnup,parameters:[],category:3,level:0,description:"Lifts the Turtle&rsquo;s pen, so that subsequent movement will not draw a line on the Canvas."},{names:{BASIC:"PENDOWN",Pascal:"pendown",Python:"pendown"},code:an.pndn,parameters:[],category:3,level:0,description:"Lowers the Turtle&rsquo;s pen, so that subsequent movement will draw a line on the Canvas."},{names:{BASIC:"OUTPUT",Pascal:"output",Python:"output"},code:an.outp,parameters:[{name:"clear",type:"boolean",byref:!1,length:1},{name:"colour",type:"integer",byref:!1,length:1},{name:"tofront",type:"boolean",byref:!1,length:1}],category:3,level:1,description:"Modifies the textual output. If the first argument is <code>true</code>, it clears any existing text. The second argument specifies the background colour, and the third argument is for switching the display. If the third argument is <code>true</code>, it switches to the <b>Output</b> tab, while if it is <code>false</code>, it switches to the <b>Canvas and Console</b> tab."},{names:{BASIC:"CONSOLE",Pascal:"console",Python:"console"},code:an.cons,parameters:[{name:"clear",type:"boolean",byref:!1,length:1},{name:"colour",type:"integer",byref:!1,length:1}],category:3,level:1,description:"Modifies the Console; if the first argument is <code>true</code>, it clears any existing text, while the second argument specifies the background colour."},{names:{BASIC:"RGB",Pascal:"rgb",Python:"rgb"},code:an.rgb,parameters:[{name:"colour",type:"integer",byref:!1,length:1}],returns:"integer",category:3,level:2,description:"Returns the RGB value of the input <code>colour</code> (an integer between 1 and 50). For example, <code>rgb(red)=255</code>."},{names:{BASIC:"MIXCOLS",Pascal:"mixcols",Python:"mixcols"},code:an.mixc,parameters:[{name:"colour1",type:"integer",byref:!1,length:1},{name:"colour1",type:"integer",byref:!1,length:1},{name:"proportion1",type:"integer",byref:!1,length:1},{name:"proportion2",type:"integer",byref:!1,length:1}],returns:"integer",category:3,level:2,description:"Mixes the given colours in the given proportions."},{names:{BASIC:"NEWTURTLE",Pascal:"newturtle",Python:"newturtle"},code:an.newt,parameters:[{name:"array",type:"integer",byref:!0,length:5}],category:3,level:2,description:"Points the Turtle to a custom array in memory (this must be an array of five integers, corresponding to the Turtle&rsquo;s five properties, <code>turtx</code>, <code>turty</code>, <code>turtd</code>, <code>turtt</code>, and <code>turtc</code>). Use repeatedly to simulate multiple Turtles."},{names:{BASIC:"OLDTURTLE",Pascal:"oldturtle",Python:"oldturtle"},code:an.oldt,parameters:[],category:3,level:2,description:"Points the Turtle back to the default (built-in) array in memory. Use in conjunction with <code>newturtle</code>."},{names:{BASIC:"UPDATE",Pascal:"update",Python:"update"},code:an.udat,parameters:[],category:4,level:0,description:"Makes the Machine update the Canvas, and continue updating with all subsequent drawing commands. Used in conjunction with <em>noupdate</em>."},{names:{BASIC:"NOUPDATE",Pascal:"noupdate",Python:"noupdate"},code:an.ndat,parameters:[],category:4,level:0,description:"Makes the Machine refrain from updating the Canvas when executing all subsequent drawing commands, until <em>update</em> is called. Use this to create smooth animations, by queueing up several drawing commands to execute simultaneously."},{names:{BASIC:"BLANK",Pascal:"blank",Python:"blank"},code:an.blnk,parameters:[{name:"colour",type:"integer",byref:!1,length:1}],category:4,level:0,description:"Blanks the entire Canvas with the specified <code>colour</code>."},{names:{BASIC:"CANVAS",Pascal:"canvas",Python:"canvas"},code:an.canv,parameters:[{name:"x1",type:"integer",byref:!1,length:1},{name:"y1",type:"integer",byref:!1,length:1},{name:"x2",type:"integer",byref:!1,length:1},{name:"y2",type:"integer",byref:!1,length:1}],category:4,level:1,description:"Sets the top left Canvas coordinate to <code>(x1,y1)</code>, and the Canvas width and height to <code>x2</code> and <code>y2</code> respectively. Note that the width and height fix the number of virtual points on the Canvas, not the number of actual pixels."},{names:{BASIC:"RESOLUTION",Pascal:"resolution",Python:"resolution"},code:an.reso,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1}],category:4,level:1,description:"Sets the Canvas resolution, i.e. the number of actual pixels in the <code>x</code> and <code>y</code> dimensions. To be used in conjunction with the <code>canvas</code> command, typically to set the number of actual pixels equal to the number of virtual points on the Canvas."},{names:{BASIC:"ANGLES",Pascal:"angles",Python:"angles"},code:an.angl,parameters:[{name:"degrees",type:"integer",byref:!1,length:1}],category:4,level:1,description:"Sets the number of <code>degrees</code> in a circle (360 by default)."},{names:{BASIC:"PIXSET",Pascal:"pixset",Python:"pixset"},code:an.pixs,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1},{name:"colour",type:"integer",byref:!1,length:1}],category:4,level:2,description:"Sets the <code>colour</code> at point <code>(x,y)</code>."},{names:{BASIC:"PIXCOL",Pascal:"pixcol",Python:"pixcol"},code:an.pixc,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1}],returns:"integer",category:4,level:2,description:"Returns the RGB value of the colour at point <code>(x,y)</code>."},{names:{BASIC:"RECOLOUR",Pascal:"recolour",Python:"recolour"},code:an.rcol,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1},{name:"colour",type:"integer",byref:!1,length:1}],category:4,level:2,description:"Floods the Canvas with the specified <code>colour</code>, starting at point <code>(x,y)</code>, until reaching any different colour."},{names:{BASIC:"FILL",Pascal:"fill",Python:"fill"},code:an.fill,parameters:[{name:"x",type:"integer",byref:!1,length:1},{name:"y",type:"integer",byref:!1,length:1},{name:"colour",type:"integer",byref:!1,length:1},{name:"boundary",type:"integer",byref:!1,length:1}],category:4,level:2,description:"Floods the Canvas with the specified <code>colour</code>, starting at point <code>(x,y)</code>, until reaching the <code>boundary</code> colour."},{names:{BASIC:"INC",Pascal:"inc",Python:"inc"},code:an.incr,parameters:[{name:"variable",type:"integer",byref:!0,length:1}],category:5,level:0,description:"Increments the specified <code>variable</code> by 1."},{names:{BASIC:"DEC",Pascal:"dec",Python:"dec"},code:an.decr,parameters:[{name:"variable",type:"integer",byref:!0,length:1}],category:5,level:0,description:"Decrements the specified <code>variable</code> by 1."},{names:{BASIC:"ABS",Pascal:"abs",Python:"abs"},code:an.abs,parameters:[{name:"n",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:0,description:"Returns the absolute value of <code>n</code>, i.e. <code>n</code> if positive, <code>-n</code> if negative."},{names:{BASIC:"SGN",Pascal:"sign",Python:"sign"},code:an.sign,parameters:[{name:"a",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns <code>+1</code> if <code>a</code> is positive, <code>-1</code> if <code>a</code> is negative, and <code>0</code> otherwise."},{names:{BASIC:"MAX",Pascal:"max",Python:"max"},code:an.maxi,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns the maximum of <code>a</code> and <code>b</code>."},{names:{BASIC:"MIN",Pascal:"min",Python:"min"},code:an.mini,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns the minimum of <code>a</code> and <code>b</code>."},{names:{BASIC:"SQR",Pascal:"sqrt",Python:"sqrt"},code:an.sqrt,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns <code>&radic;a</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"HYPOT",Pascal:"hypot",Python:"hypot"},code:an.hyp,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns <code>&radic;(a<sup>2</sup>+b<sup>2</sup>)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"RND",Pascal:null,Python:null},code:an.rand,parameters:[{name:"n",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns a random integer between 1 and <code>n</code>."},{names:{BASIC:null,Pascal:"random",Python:null},code:an.rand,parameters:[{name:"n",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns a random non-negative integer less than <code>n</code>."},{names:{BASIC:null,Pascal:null,Python:"randint"},code:an.rand,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Returns a random integer between <code>a</code> and <code>b</code>."},{names:{BASIC:"RNDSEED",Pascal:"randseed",Python:"randseed"},code:an.seed,parameters:[{name:"seed",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:1,description:"Initialises the random number generator with the given <code>seed</code>, and returns that seed. If <code>seed</code> is 0, the seed is set from the current system clock."},{names:{BASIC:"POWER",Pascal:"power",Python:"power"},code:an.powr,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"c",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:2,description:"Returns <code>(a/b)<sup>c</sup></code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"ROOT",Pascal:"root",Python:"root"},code:an.root,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"c",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:2,description:"Returns <code><sup>c</sup>&radic;(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"DIVMULT",Pascal:"divmult",Python:"divmult"},code:an.divm,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:5,level:2,description:"Returns <code>a/b</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"MAXINT",Pascal:"maxint",Python:"maxint"},code:an.mxin,parameters:[],returns:"integer",category:5,level:2,description:"Returns the maximum integer that the Machine can deal with (2<sup>31</sup>-1)."},{names:{BASIC:"SIN",Pascal:"sin",Python:"sin"},code:an.sin,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:1,description:"Returns <code>sin(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"COS",Pascal:"cos",Python:"cos"},code:an.cos,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:1,description:"Returns <code>cos(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"TAN",Pascal:"tan",Python:"tan"},code:an.tan,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:1,description:"Returns <code>tan(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"PI",Pascal:"pi",Python:"pi"},code:an.pi,parameters:[{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:1,description:"Returns the value of Pi, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"EXP",Pascal:"exp",Python:"exp"},code:an.exp,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:1,description:"Returns <code>a<sup>b</sup></code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"LN",Pascal:"ln",Python:"ln"},code:an.ln,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:1,description:"Returns <code>ln(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"ANTILOG",Pascal:"antilog",Python:"antilog"},code:an.alog,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:2,description:"Returns <code>antilog<sub>10</sub>(a/b)</code> - i.e. <code>10<sup>a/b</sub></code> - multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"LOG10",Pascal:"log10",Python:"log10"},code:an.log,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:2,description:"Returns <code>log<sub>10</sub>(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"ASN",Pascal:"arcsin",Python:"asin"},code:an.asin,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:2,description:"Returns <code>arcsin(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"ACS",Pascal:"arccos",Python:"acos"},code:an.acos,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:2,description:"Returns <code>arccos(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"ATN",Pascal:"arctan",Python:"atan"},code:an.atan,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1}],returns:"integer",category:6,level:2,description:"Returns <code>arctan(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."},{names:{BASIC:"WRITE",Pascal:"write",Python:"write"},code:an.text,parameters:[{name:"string",type:"string",byref:!1,length:1}],category:7,level:0,description:"Writes the input <code>string</code> to the console and textual output area of the System."},{names:{BASIC:"WRITELN",Pascal:"writeln",Python:"writeline"},code:an.texl,parameters:[{name:"string",type:"string",byref:!1,length:1}],category:7,level:0,description:"Writes the input <code>string</code> to the console and textual output area of the System, followed by a line break."},{names:{BASIC:"PRINT",Pascal:"print",Python:"print"},code:an.prnt,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"font",type:"integer",byref:!1,length:1},{name:"size",type:"integer",byref:!1,length:1}],category:7,level:0,description:"Prints the input <code>string</code> in the Turtle&rsquo;s current colour and at the Turtle&rsquo;s current location, in the specified <code>font</code> and <code>size</code>. Can be used in conjunction with the <code>box</code> drawing command. For a list of available fonts, see the <b>Constants</b> tab."},{names:{BASIC:"UCASE$",Pascal:"uppercase",Python:"upper"},code:an.uppc,parameters:[{name:"string",type:"string",byref:!1,length:1}],returns:"string",category:7,level:1,description:"Returns the input <code>string</code> as all uppercase."},{names:{BASIC:"LCASE$",Pascal:"lowercase",Python:"lower"},code:an.lowc,parameters:[{name:"string",type:"string",byref:!1,length:1}],returns:"string",category:7,level:1,description:"Returns the input <code>string</code> as all lowercase."},{names:{BASIC:"LEN",Pascal:"length",Python:"len"},code:an.slen,parameters:[{name:"string",type:"string",byref:!1,length:1}],returns:"integer",category:7,level:1,description:"Returns the length of the input <code>string</code> (i.e. the number of characters)."},{names:{BASIC:"DEL$",Pascal:"delete",Python:null},code:an.dels,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"index",type:"integer",byref:!1,length:1},{name:"length",type:"integer",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with some characters removed, starting at the given <code>index</code> and of the specified <code>length</code>."},{names:{BASIC:"LEFT$",Pascal:null,Python:null},code:an.lefs,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"length",type:"integer",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns a copy of the characters in the input <code>string</code>, starting on the left and of the specified <code>length</code>."},{names:{BASIC:"MID$",Pascal:"copy",Python:"copy"},code:an.copy,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"index",type:"integer",byref:!1,length:1},{name:"length",type:"integer",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns a copy of the characters in the input <code>string</code>, starting at the given <code>index</code> and of the specified <code>length</code>."},{names:{BASIC:"RIGHT$",Pascal:null,Python:null},code:an.rgts,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"length",type:"integer",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns a copy of the characters in the input <code>string</code>, starting on the right and of the specified <code>length</code>."},{names:{BASIC:"INS$",Pascal:null,Python:"insert"},code:an.inss,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"index",type:"integer",byref:!1,length:1},{name:"substr",type:"string",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with the specified <code>substring</code> inserted at the given <code>index</code>."},{names:{BASIC:null,Pascal:"insert",Python:null},code:an.inss,parameters:[{name:"substr",type:"string",byref:!1,length:1},{name:"string",type:"string",byref:!1,length:1},{name:"index",type:"integer",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with the specified <code>substring</code> inserted at the given <code>index</code>."},{names:{BASIC:"PAD$",Pascal:"pad",Python:"pad"},code:an.spad,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"padding",type:"string",byref:!1,length:1},{name:"length",type:"integer",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with the input <code>padding</code> added either before or after to make a string of minimum given <code>length</cope>. The <code>padding</code> is placed before if <code>length</code> is positive, after if it is negative."},{names:{BASIC:"REPLACE$",Pascal:"replace",Python:"replace"},code:an.repl,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"substr",type:"string",byref:!1,length:1},{name:"replace",type:"string",byref:!1,length:1},{name:"n",type:"integer",byref:!1,length:1}],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with up to <code>n</code> occurences of <code>substring</code> replaced by <code>replace</code>. Set <code>n</code> equal to <code>0</code> to replace every occurence."},{names:{BASIC:"INSTR",Pascal:null,Python:"find"},code:an.poss,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"substr",type:"string",byref:!1,length:1}],returns:"integer",category:7,level:2,description:"Searches for the input <code>substring</code> within the given <code>string</code>; returns the index of the first character if found, 0 otherwise."},{names:{BASIC:null,Pascal:"pos",Python:null},code:an.poss,parameters:[{name:"substr",type:"string",byref:!1,length:1},{name:"string",type:"string",byref:!1,length:1}],returns:"integer",category:7,level:2,description:"Searches for the input <code>substring</code> within the given <code>string</code>; returns the index of the first character if found, 0 otherwise."},{names:{BASIC:"STR$",Pascal:"str",Python:"str"},code:an.itos,parameters:[{name:"n",type:"integer",byref:!1,length:1}],returns:"string",category:8,level:0,description:"Returns the integer <code>n</code> as a string, e.g. <code>str(12)='12'</code>."},{names:{BASIC:"VAL",Pascal:"val",Python:"int"},code:an.svd0,parameters:[{name:"string",type:"string",byref:!1,length:1}],returns:"integer",category:8,level:0,description:"Returns the input <code>string</code> as an integer, e.g. <code>val('12')=12</code>. Returns <code>0</code> if the string cannot be converted (i.e. if it is not an integer string)."},{names:{BASIC:"VALDEF",Pascal:"valdef",Python:"intdef"},code:an.sval,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"default",type:"integer",byref:!1,length:1}],returns:"integer",category:8,level:0,description:"Returns the input <code>string</code> as an integer, e.g. <code>val('12')=12</code>. Returns the specified <code>default</code> value if the string cannot be converted (i.e. if it is not an integer string)."},{names:{BASIC:"QSTR$",Pascal:"qstr",Python:"qstr"},code:an.qtos,parameters:[{name:"a",type:"integer",byref:!1,length:1},{name:"b",type:"integer",byref:!1,length:1},{name:"decplaces",type:"integer",byref:!1,length:1}],returns:"string",category:8,level:1,description:"Returns the value of <code>a/b</code> to the specified number of decimal places, as a decimal string, e.g. <code>qstr(2,3,4)='0.6667'</code>."},{names:{BASIC:"QVAL",Pascal:"qval",Python:"qval"},code:an.qval,parameters:[{name:"string",type:"string",byref:!1,length:1},{name:"mult",type:"integer",byref:!1,length:1},{name:"default",type:"integer",byref:!1,length:1}],returns:"integer",category:8,level:1,description:"Returns the input decimal <code>string</code> as an integer, multiplied by <code>mult</code> and rounded to the nearest integer, e.g. <code>qval('1.5',10)=15</code>. Returns the specified <code>default</code> value if the string cannot be converted (i.e. if it is not a decimal string)."},{names:{BASIC:"CHR$",Pascal:"chr",Python:"chr"},code:an.ctos,parameters:[{name:"n",type:"integer",byref:!1,length:1}],returns:"string",category:8,level:2,description:"Returns the character with ASCII character code <code>n</code>."},{names:{BASIC:"ASC",Pascal:"ord",Python:"ord"},code:an.sasc,parameters:[{name:"char",type:"string",byref:!1,length:1}],returns:"integer",category:8,level:2,description:"Returns the ASCII code of the input character."},{names:{BASIC:"BOOLINT",Pascal:"boolint",Python:null},code:an.null,parameters:[{name:"boolean",type:"boolean",byref:!1,length:1}],returns:"integer",category:8,level:2,description:"Returns the input <code>boolean</code> as an integer (-1 for <code>true</code>, 0 for <code>false</code>)."},{names:{BASIC:null,Pascal:null,Python:"boolint"},code:an.bool,parameters:[{name:"boolean",type:"boolean",byref:!1,length:1}],returns:"integer",category:8,level:2,description:"Returns the input <code>boolean</code> as an integer (1 for <code>true</code>, 0 for <code>false</code>)."},{names:{BASIC:"HEX$",Pascal:"hexstr",Python:"hex"},code:an.hexs,parameters:[{name:"n",type:"integer",byref:!1,length:1},{name:"minlength",type:"integer",byref:!1,length:1}],category:8,level:2,description:"Returns a string representation of integer <code>n</code> in hexadecimal format, padded with leading zeros as up to <code>minlength</code>, e.g. <code>hexstr(255,6)='0000FF'</code>."},{names:{BASIC:"PAUSE",Pascal:"pause",Python:"pause"},code:an.wait,parameters:[{name:"m",type:"integer",byref:!1,length:1}],category:9,level:0,description:"Makes the Turtle Machine wait <code>m</code> milliseconds before performing the next operation. This is useful for controlling the speed of animations."},{names:{BASIC:"GETLINE$",Pascal:"readln",Python:"readline"},code:an.rdln,parameters:[],returns:"string",category:9,level:0,description:"Waits for the RETURN key to be pressed, then returns everything in the keybuffer up to (and not including) the new line character."},{names:{BASIC:"INPUT$",Pascal:null,Python:"input"},code:an.ilin,parameters:[{name:"prompt",type:"string",byref:!1,length:1}],returns:"string",category:9,level:0,description:"Gives an input prompt, then returns the input when the RETURN key is pressed (using the keybuffer)."},{names:{BASIC:"CURSOR",Pascal:"cursor",Python:"cursor"},code:an.curs,parameters:[{name:"cursorcode",type:"integer",byref:!1,length:1}],category:9,level:1,description:"Sets which cursor to display (1-15) when the mouse pointer is over the canvas. 0 hides the cursor; any value outside the range 0-15 resets the default cursor. For a list of available cursors, see the <b>Cursors</b> tab."},{names:{BASIC:"KEYECHO",Pascal:"keyecho",Python:"keyecho"},code:an.kech,parameters:[{name:"on",type:"boolean",byref:!1,length:1}],category:9,level:1,description:"Turns the keyboard echo to the console on (<code>true</code>) or off (<code>false</code>)."},{names:{BASIC:"DETECT",Pascal:"detect",Python:"detect"},code:an.tdet,parameters:[{name:"keycode",type:"integer",byref:!1,length:1},{name:"m",type:"integer",byref:!1,length:1}],returns:"boolean",category:9,level:1,description:"Waits a maximum of <code>m</code> milliseconds for the key with the specified <code>keycode</code> to be pressed; returns <code>true</code> if pressed (and stops waiting), <code>false</code> otherwise."},{names:{BASIC:"GET$",Pascal:"read",Python:"read"},code:an.read,parameters:[{name:"n",type:"integer",byref:!1,length:1}],returns:"string",category:9,level:1,description:"Returns the first <code>n</code> characters from the keybuffer as a string."},{names:{BASIC:"TIME",Pascal:"time",Python:"time"},code:an.time,parameters:[],returns:"integer",category:9,level:1,description:"Returns the time (in milliseconds) since the program began."},{names:{BASIC:"TIMESET",Pascal:"timeset",Python:"timeset"},code:an.tset,parameters:[{name:"m",type:"integer",byref:!1,length:1}],category:9,level:1,description:"Artificially sets the time since the program began to <code>m</code> milliseconds."},{names:{BASIC:"RESET",Pascal:"reset",Python:"reset"},code:an.iclr,parameters:[{name:"?input",type:"integer",byref:!1,length:1}],category:9,level:2,description:"Resets the specified <code>?input</code> (<code>?mousex</code>, <code>?mousey</code>, <code>?click</code>, etc.) to its initial value (i.e. -1)."},{names:{BASIC:"KEYSTATUS",Pascal:"keystatus",Python:"keystatus"},code:an.inpt,parameters:[{name:"keycode",type:"integer",byref:!1,length:1}],returns:"integer",category:9,level:2,description:"Returns the <code>?kshift</code> value for the most recent press of the key with the specified <code>keycode</code>."},{names:{BASIC:"KEYBUFFER",Pascal:"keybuffer",Python:"keybuffer"},code:an.bufr,parameters:[{name:"n",type:"integer",byref:!1,length:1}],category:9,level:2,description:"Creates a new custom keybuffer of length <code>n</code>. A keybuffer of length 32 is available by default; use this command if you need a larger buffer."},{names:{BASIC:"HALT",Pascal:"halt",Python:"halt"},code:an.halt,parameters:[],category:10,level:0,description:"Halts the program."},{names:{BASIC:"DUMP",Pascal:"dump",Python:"dump"},code:an.dump,parameters:[],category:10,level:2,description:"&ldquo;Dumps&rdquo; the current memory state into the display in the memory tab."},{names:{BASIC:"HEAPRESET",Pascal:"heapreset",Python:"heapreset"},code:an.hrst,parameters:[],category:10,level:2,description:"Resets the memory heap to the initial global value."},{names:{BASIC:"PEEK",Pascal:"peek",Python:"peek"},code:an.peek,parameters:[{name:"address",type:"integer",byref:!1,length:1}],category:10,level:2,description:"Peek at the value of the memory at the given <code>address</code>."},{names:{BASIC:"POKE",Pascal:"poke",Python:"poke"},code:an.poke,parameters:[{name:"address",type:"integer",byref:!1,length:1},{name:"value",type:"integer",byref:!1,length:1}],category:10,level:2,description:"Poke the <code>value</code> into the memory at the given <code>address</code>."},{names:{BASIC:"TRACE",Pascal:"trace",Python:"trace"},code:an.trac,parameters:[{name:"on",type:"boolean",byref:!1,length:1}],category:10,level:2,description:"Turns the PCode trace facility on (<code>true</code>) or off (<code>false</code>)."},{names:{BASIC:"WATCH",Pascal:"watch",Python:"watch"},code:an.memw,parameters:[{name:"address",type:"integer",byref:!1,length:1}],category:10,level:2,description:"Sets an <code>address</code> in memory for the trace facility to watch."}],ln=n=>{let e=[];for(;n.length>0;){let t=cn(n)||dn(n)||un(n)||pn(n)||mn(n)||gn(n)||yn(n)||hn(n)||xn(n)||bn(n)||En(n)||fn(n)||Tn(n)||Rn(n)||On(n)||wn(n)||Nn(n)||In(n)||Sn(n);e.push(t),n=n.slice(t.content.length)}return e};const cn=n=>!!("\n"===n[0])&&{type:"linebreak",content:"\n"},dn=n=>{const e=n.match(/^( +)/);return!!e&&{type:"spaces",content:e[0]}},un=n=>!!n.match(/^#/)&&{type:"comment",content:n.split("\n")[0]},pn=n=>{const e=n.match(/^(\(|\)|,|;|:|->)/);return!!e&&{type:"delimiter",content:e[0]}},mn=n=>{const e=n.match(/^(\+|-|\*|\/\/|\/|%|==|!=|<=|>=|=|<|>|~|&|\||\^|not\b|and\b|or\b)/);return!!e&&{type:"operator",content:e[0]}},gn=n=>{const e="'"===n[0],t='"'===n[0],o=n.match(/[^\\](')/),r=n.match(/[^\\](")/);return e&&o?{type:"string",content:n.slice(0,o.index+2)}:e?{type:"unterminated-string",content:n.split("\n")[0]}:t&&r?{type:"string",content:n.slice(0,r.index+2)}:!!t&&{type:"unterminated-string",content:n.split("\n")[0]}},yn=n=>{const e=n.match(/^(True|False)\b/);return!!e&&{type:"boolean",content:e[0]}},hn=n=>{const e=n.match(/^(0b[01]+)\b/),t=n.match(/^(%[01]+)\b/);return e?{type:"binary",content:e[0]}:!!t&&{type:"bad-binary",content:t[0]}},xn=n=>{const e=n.match(/^(0o[0-7]+)\b/),t=n.match(/^(&[0-7]+)\b/);return e?{type:"octal",content:e[0]}:!!t&&{type:"bad-octal",content:t[0]}},bn=n=>{const e=n.match(/^(0x[A-Fa-f0-9]+)\b/),t=n.match(/^((&|#|\$)[A-Fa-f0-9]+)\b/);return e?{type:"hexadecimal",content:e[0]}:!!t&&{type:"bad-hexadecimal",content:t[0]}},En=n=>{const e=n.match(/^(\d+\.\d+)/),t=n.match(/^(\d+)\b/);return e?{type:"bad-decimal",content:e[0]}:!!t&&{type:"decimal",content:t[0]}},fn=n=>{const e=n.match(/^(def|elif|else|for|global|if|in|nonlocal|pass|return|while)\b/);return!!e&&{type:"keyword",content:e[0]}},Tn=n=>{const e=sn.reduce((n,e)=>e.names.Python?`${n}|${e.names.Python}`:n,"").slice(1),t=new RegExp(new RegExp(`^(${e}|bool|range)\\b`)),o=n.match(t);return!!o&&{type:"command",content:o[0]}},Rn=n=>{const e=n.match(/^(turt[xydatc])\b/);return!!e&&{type:"turtle",content:e[0]}},On=n=>{const e=on.a.reduce((n,e)=>`${n}|${e.names.Python}`,"").slice(1),t=new RegExp(new RegExp(`^(${e})\\b`)),o=n.match(t);return!!o&&{type:"colour",content:o[0]}},wn=n=>{const e=n.match(/^(\\[#a-z0-9]+)/);return!!e&&{type:"keycode",content:e[0]}},Nn=n=>{const e=n.match(/^(\?[a-z]+)\b/);return!!e&&{type:"query",content:e[0]}},In=n=>{const e=n.match(/^([_a-zA-Z][_a-zA-Z0-9]*)\b/);return!!e&&{type:"identifier",content:e[0]}},Sn=n=>({type:"illegal",content:n.split(/\b/)[0]});var vn=(n,e)=>({BASIC:y,Pascal:M,Python:ln}[e](n)),Pn=(n,e)=>vn(n,e).map(Cn).join("");const Cn=n=>`<span class="tse-${n.type}">${n.content}</span>`;var An={DrawPause:"REM DrawPause\n\nCOLOUR(GREEN)\nBLOT(100)\nPAUSE(1000)\nCOLOUR(RED)\nFORWARD(450)\nPAUSE(1000)\nRIGHT(90)\nTHICKNESS(9)\nCOLOUR(BLUE)\nPAUSE(1000)\nFORWARD(300)\nEND\n",SmileyFace:"REM SmileyFace\n\nCOLOUR(PEACH)\nBLOT(200)\nCOLOUR(DARKRED)\nBLOT(140)\nFORWARD(30)\nCOLOUR(PEACH)\nBLOT(150)\nBACK(60)\nCOLOUR(ROYAL)\nBLOT(30)\nPENUP\nFORWARD(90)\nLEFT(90)\nFORWARD(80)\nCOLOUR(WHITE)\nELLBLOT(30, 20)\nCOLOUR(EMERALD)\nBLOT(18)\nCOLOUR(BLACK)\nBLOT(8)\nBACK(160)\nCOLOUR(WHITE)\nELLBLOT(30, 20)\nCOLOUR(EMERALD)\nBLOT(18)\nCOLOUR(BLACK)\nBLOT(8)\nEND\n",ThePlough:"REM ThePlough\n\nBLANK(BLACK)\nCOLOUR(LIGHTBLUE)\nSETXY(100, 200)\nBLOT(10)\nSETXY(300, 250)\nBLOT(10)\nSETXY(420, 350)\nBLOT(10)\nSETXY(570, 490)\nBLOT(10)\nSETXY(900, 560)\nBLOT(10)\nSETXY(840, 720)\nBLOT(10)\nSETXY(590, 660)\nBLOT(10)\nSETXY(570, 490)\nCOLOUR(SILVER)\nPOLYLINE(8)\nEND\n",OlympicRings:"REM OlympicRings\n\nringsize% = 130\nTHICKNESS(20)\nPENUP\nFORWARD(50)\nCIRCLE(ringsize%)\nLEFT(90)\nFORWARD(300)\nCOLOUR(BLUE)\nCIRCLE(ringsize%)\nBACK(600)\nCOLOUR(RED)\nCIRCLE(ringsize%)\nFORWARD(150)\nRIGHT(90)\nBACK(125)\nCOLOUR(LIME)\nCIRCLE(ringsize%)\nLEFT(90)\nFORWARD(300)\nCOLOUR(YELLOW)\nCIRCLE(ringsize%)\nEND\n",ForLoop:"REM ForLoop\n\nFOR count% = 1 TO 200\n  FORWARD(count% DIV 3)\n  RIGHT(5)\n  COLOUR(RED)\n  BLOT(200)\n  COLOUR(BLACK)\n  CIRCLE(200)\nNEXT\nEND\n",TriangleSpin:"REM TriangleSpin\n\nMOVEXY(30, 20)\nFOR i% = 1 TO 300\n  FORWARD(i% * 3)\n  RIGHT(121)\nNEXT\nEND\n",Circles:"REM Circles\n\nTHICKNESS(6)\nPENUP\nBLANK(BLACK)\nCOLOUR(ORANGE)\nFOR count% = 1 TO 36\n  FORWARD(200)\n  CIRCLE(200)\n  BACK(200)\n  RIGHT(10)\n  PAUSE(25)\nNEXT\nEND\n",NestedLoops:"REM NestedLoops\n\nPENUP\nFOR countblot% = 1 TO 10\n  FORWARD(260)\n  COLOUR(BLACK)\n  BLOT(150)\n  COLOUR(RGB(countblot%))\n  FOR countcirc% = 1 TO 25\n    CIRCLE(countcirc% * 8)\n  NEXT\n  BACK(260)\n  RIGHT(36)\nNEXT\nEND\n",RandomLines:"REM RandomLines\n\nFOR count% = 1 TO 30\n  x% = RND(1000)\n  y% = RND(1000)\n  SETXY(x%, y%)\n  turtd% = RND(360)\n  FORWARD(1500)\n  BACK(3000)\nNEXT\nFOR count% = 1 TO 10000\n  x% = RND(1000)\n  y% = RND(1000)\n  IF PIXCOL(x%, y%) = WHITE THEN\n    RECOLOUR(x%, y%, RGB(RND(20) + 1))\n  ENDIF\nNEXT\nEND\n",RandomEllipses:"REM RandomEllipses\n\nFOR count% = 1 TO 10\n  x% = RND(1500) - 250\n  y% = RND(1500) - 250\n  rx% = RND(500) + 500\n  ry% = RND(500) + 500\n  SETXY(x%, y%)\n  ELLIPSE(rx%, ry%)\nNEXT\nnextcol% = 0\nFOR count% = 1 TO 10000\n  x% = RND(1000)\n  y% = RND(1000)\n  IF PIXCOL(x%, y%) = WHITE THEN\n    nextcol% = nextcol% MOD 20 + 1\n    RECOLOUR(x%, y%, RGB(nextcol%))\n  ENDIF\nNEXT\nEND\n",ColourSpiral:"REM ColourSpiral\n\nBLANK(BLACK)\nFORWARD(15)\nTHICKNESS(27)\nlen% = 20\nREPEAT\n  RNDCOL(40)\n  PROClineturn\n  len% = len% + 10\nUNTIL len% > 500\nEND\n\nDEF PROClineturn\n  FORWARD(len%)\n  RIGHT(60)\nENDPROC\n",SimpleProc:"REM SimpleProc\n\nREPEAT\n  RNDCOL(10)\n  PROCprong\n  RIGHT(61)\nUNTIL turtd% = 0\nEND\n\nDEF PROCprong\n  FORWARD(400)\n  BLOT(20)\n  BACK(400)\nENDPROC\n",ParameterProc:"REM ParameterProc\n\nFOR count% = 360 TO 1 STEP -1\n  RNDCOL(10)\n  PROCprong(count% + 100)\n  RIGHT(61)\nNEXT\nEND\n\nDEF PROCprong(len%)\n  FORWARD(len%)\n  BLOT(len% / 20)\n  BACK(len%)\nENDPROC\n",ResizableFace:"REM ResizableFace\n\nPROCface(400)\nEND\n\nDEF PROCface(size%)\n  COLOUR(PEACH)\n  BLOT(size%)\n  COLOUR(DARKRED)\n  BLOT(size% * 7 / 10)\n  FORWARD(size% * 3 / 20)\n  COLOUR(PEACH)\n  BLOT(size% * 3 / 4)\n  BACK(size% * 3 / 10)\n  COLOUR(ROYAL)\n  BLOT(size% * 3 / 20)\n  PENUP\n  FORWARD(size% * 9 / 20)\n  LEFT(90)\n  FORWARD(size% * 2 / 5)\n  PROCeye(size%)\n  BACK(size% * 4 / 5)\n  PROCeye(size%)\nENDPROC\n\nDEF PROCeye(size%)\n  COLOUR(WHITE)\n  ELLBLOT(size% * 3 / 20, size% / 10)\n  COLOUR(EMERALD)\n  BLOT(size% * 9 / 100)\n  COLOUR(BLACK)\n  BLOT(size% / 25)\nENDPROC\n",Polygons:"REM Polygons\n\nPENUP\nTHICKNESS(4)\nSETXY(100, 400)\nPROCpoly(3, BLUE)\nSETXY(400, 400)\nPROCpoly(4, RED)\nSETXY(700, 400)\nPROCpoly(5, YELLOW)\nSETXY(150, 750)\nPROCpoly(6, PINK)\nSETXY(440, 750)\nPROCpoly(7, GREEN)\nSETXY(740, 750)\nPROCpoly(8, TURQUOISE)\nEND\n\nDEF PROCpoly(points%, col%)\n  LOCAL count%\n  DIRECTION(90)\n  FOR count% = 1 TO points%\n    FORWARD(600 DIV points%)\n    LEFT(360 DIV points%)\n  NEXT\n  COLOUR(col%)\n  POLYGON(points%)\n  COLOUR(BLACK)\n  POLYLINE(points% + 1)\nENDPROC\n",Stars:"REM Stars\n\nPENUP\nFOR n% = 3 TO 12\n  PROCstar(n%, RGB(n% - 2))\n  PAUSE(500)\nNEXT\nEND\n\nDEF PROCstar(points%, col%)\n  LOCAL count%\n  ANGLES(points% * 2)\n  FOR count% = 1 TO points%\n    FORWARD(450)\n    BACK(450)\n    FORGET(1)\n    RIGHT(1)\n    FORWARD(200)\n    BACK(200)\n    FORGET(1)\n    RIGHT(1)\n  NEXT\n  COLOUR(col%)\n  POLYGON(points% * 2)\nENDPROC\n",PolygonRings:"REM PolygonRings\n\nPENUP\nBLOT(500)\nRNDCOL(6)\nPROCannulus(410, 80, 2)\nPROCannulus(310, 80, 3)\nPROCannulus(210, 80, 5)\nPROCannulus(110, 80, 7)\nPROCannulus(10, 80, 1)\nEND\n\nDEF PROCannulus(inner%, width%, angle%)\n  LOCAL count%\n  FOR count% = 0 TO 360 DIV angle%\n    FORWARD(inner% + width%)\n    BACK(width%)\n    BACK(inner%)\n    FORGET(1)\n    RIGHT(angle%)\n    FORWARD(inner%)\n    FORWARD(width%)\n    COLOUR(RGB(count% MOD 20 + 1))\n    POLYGON(4)\n    BACK(inner% + width%)\n  NEXT\nENDPROC\n",Triangle1:"REM Triangle1\n\nMOVEXY(-100, 150)\nFORWARD(256)\nRIGHT(120)\nFORWARD(256)\nRIGHT(120)\nFORWARD(256)\nRIGHT(120)\nEND\n",Triangle2:"REM Triangle2\n\nMOVEXY(-100, 150)\nPROCtriangle(256)\nEND\n\nDEF PROCtriangle(size%)\n  FORWARD(size%)\n  RIGHT(120)\n  FORWARD(size%)\n  RIGHT(120)\n  FORWARD(size%)\n  RIGHT(120)\nENDPROC\n",Triangle3:"REM Triangle3\n\nMOVEXY(-100, 150)\nPROCtriangle(256)\nEND\n\nDEF PROCtriangle(size%)\n  IF size% > 1 THEN\n    FORWARD(size%)\n    RIGHT(120)\n    FORWARD(size%)\n    RIGHT(120)\n    FORWARD(size%)\n    RIGHT(120)\n  ENDIF\nENDPROC\n",Triangles:"REM Triangles\n\nMOVEXY(-100, 150)\nPROCtriangle(256)\nEND\n\nDEF PROCtriangle(size%)\n  IF size% > 1 THEN\n    FORWARD(size%)\n    PROCtriangle(size% / 2)\n    RIGHT(120)\n    FORWARD(size%)\n    PROCtriangle(size% / 2)\n    RIGHT(120)\n    FORWARD(size%)\n    PROCtriangle(size% / 2)\n    RIGHT(120)\n  ENDIF\nENDPROC\n",Factorials:'REM Factorials\n\nOUTPUT(TRUE, CREAM, TRUE)\nFOR count% = 1 TO 10\n  WRITELN(STR$(count%) + "! = " + STR$(FNfact(count%)))\nNEXT\nEND\n\nDEF FNfact(n%)\n  IF n% = 0 THEN\n    result% = 1\n  ELSE\n    result% = n% * FNfact(n% - 1)\n  ENDIF\n= result%\n',Fibonaccis:'REM Fibonaccis\n\nCONST LASTNUM% = 25\nDIM fibsave%(LASTNUM%)\nOUTPUT(TRUE, CREAM, TRUE)\nWRITELN("First, by recursion:")\nTIMESET(0)\nFOR count% = 1 TO LASTNUM%\n  WRITELN("fib(" + STR$(count%) + ") = " + STR$(FNfibrec(count%)))\nNEXT\nWRITELN("Time taken: " + QSTR$(TIME, 1000, 2) + " seconds")\nWRITELN("")\nWRITELN("Then, by iteration:")\nTIMESET(0)\nFOR count% = 1 TO LASTNUM%\n  WRITELN("fib(" + STR$(count%) + ") = " + STR$(FNfibiter(count%)))\nNEXT\nWRITELN("Time taken: " + QSTR$(TIME, 1000, 2) + " seconds")\nEND\n\nDEF FNfibrec(n%)\n  IF (n% = 1) OR (n% = 2) THEN\n    result% = 1\n  ELSE\n    result% = FNfibrec(n% - 1) + FNfibrec(n% - 2)\n  ENDIF\n= result%\n\nDEF FNfibiter(n%)\n  IF (n% = 1) OR (n% = 2) THEN\n    fibsave%(n%) = 1\n  ELSE\n    fibsave%(n%) = fibsave%(n% - 1) + fibsave%(n% - 2)\n  ENDIF\n= fibsave%(n%)\n',YouAreHere:'REM YouAreHere\n\nCOLOUR(RED)\nBLOT(20)\nCOLOUR(VIOLET)\nPRINT("You are here", 2, 35)\nSETXY(790, 540)\nCOLOUR(BLUE)\nDRAWXY(40, 0)\nDRAWXY(28, -28)\nDRAWXY(0, -40)\nDRAWXY(-28, -28)\nDRAWXY(-40, 0)\nSETXY(500, 500)\nSETXY(530, 480)\nSETXY(535, 505)\nSETXY(500, 500)\nPOLYLINE(5)\nPOLYGON(3)\nEND\n',CycleColours:"REM CycleColours\n\nBLANK(BLACK)\ncolinc% = RND(5) - 1\ncolcode% = RND(20)\nCOLOUR(RGB(colcode%))\nlength% = 0\nTHICKNESS(16)\nREPEAT\n  colcode% = (colcode% + colinc%) MOD 20 + 1\n  COLOUR(RGB(colcode%))\n  length% = length% + 1\n  FORWARD(length%)\n  RIGHT(30)\nUNTIL length% > 250\nEND\n",Clock:"REM Clock\n\nTHICKNESS(10)\nCIRCLE(400)\nHours% = 0\nMinutes% = 0\nREPEAT\n  REPEAT\n    PROCshowhands\n    PAUSE(600)\n    INC(Minutes%)\n  UNTIL Minutes% = 60\n  INC(Hours%)\n  Minutes% = 0\nUNTIL Hours% = 12\nPROCshowhands\nEND\n\nDEF PROCshowhands\n  COLOUR(WHITE)\n  BLOT(360)\n  COLOUR(RED)\n  DIRECTION(Hours% * 30)\n  THICKNESS(10)\n  FORWARD(250)\n  BACK(250)\n  DIRECTION(Minutes% * 6)\n  THICKNESS(6)\n  FORWARD(350)\n  BACK(350)\nENDPROC\n",DigitalClock:'REM DigitalClock\n\nBLANK(LIGHTGREEN)\nSETXY(250, 390)\nCOLOUR(MAROON)\nTHICKNESS(10)\nBOX(500, 210, LIGHTBROWN, TRUE)\nCOLOUR(BLACK)\nHours% = 0\nMinutes% = 0\nWHILE Hours% < 12\n  PROCshowtime\n  PAUSE(600)\n  INC(Minutes%)\n  IF Minutes% = 60 THEN\n    INC(Hours%)\n    Minutes% = 0\n  ENDIF\nENDWHILE\nPROCshowtime\nEND\n\nDEF PROCshowtime\n  LOCAL hstring$, mstring$\n  SETXY(300, 430)\n  BOX(400, 130, WHITE, FALSE)\n  IF Hours% < 10 THEN\n    hstring$ = "0" + STR$(Hours%)\n  ELSE\n    hstring$ = STR$(Hours%)\n  ENDIF\n  IF Minutes% < 10 THEN\n    mstring$ = "0" + STR$(Minutes%)\n  ELSE\n    mstring$ = STR$(Minutes%)\n  ENDIF\n  PRINT(hstring$ + ":" + mstring$, 19, 100)\nENDPROC\n',Flashlights:"REM Flashlights\n\nBLOT(1000)\nTHICKNESS(8)\nREPEAT\n  SETX(RND(8) * 111)\n  SETY(RND(8) * 111)\n  PROCdrawit(RND(2) = 1)\nUNTIL FALSE\nEND\n\nDEF PROCdrawit(doblot%)\n  IF doblot% THEN\n    RNDCOL(10)\n    BLOT(25)\n  ELSE\n    COLOUR(BLACK)\n    BLOT(30)\n    RNDCOL(10)\n    CIRCLE(25)\n  ENDIF\nENDPROC\n",RefParams:"REM RefParams\n\nSETXY(100, 900)\nPROClines(turtt%, FALSE)\nPROClines(turtc%, TRUE)\nPROCdots(turtx%)\nPROCdots(turty%)\nEND\n\nDEF PROClines(RETURN style%, convert%)\n  LOCAL count%\n  FOR count% = 1 TO 8\n    IF convert% THEN\n      style% = RGB(count%)\n    ELSE\n      style% = count%\n    ENDIF\n    FORWARD(50)\n    PAUSE(100)\n  NEXT\nENDPROC\n\nDEF PROCdots(RETURN coord%)\n  LOCAL count%\n  FOR count% = 1 TO 8\n    coord% = coord% + 100\n    BLOT(40)\n    PAUSE(100)\n  NEXT\nENDPROC\n",Balls3D:"REM Balls3D\n\nSETXY(250, 250)\nCOLOUR(&00FFFF)\nFOR count% = 240 TO 1 STEP -1\n  BLOT(count%)\n  turtc% = turtc% + &10000\nNEXT\nRIGHT(60)\nSETXY(750, 250)\nCOLOUR(&D2691E)\nFOR count% = 40 TO 1 STEP -1\n  BLOT(count% * 6)\n  FORWARD(3)\n  turtc% = turtc% + &10102\nNEXT\nSETXY(250, 750)\nCOLOUR(&D2691E)\nFOR count% = 40 TO 1 STEP -1\n  BLOT(count% * 6)\n  FORWARD(3)\n  turtc% = turtc% + &10102\nNEXT\nSETXY(750, 750)\nCOLOUR(&FFA500)\nFOR count% = 80 TO 1 STEP -1\n  BLOT(count% * 3)\n  FORWARD(2)\n  turtc% = turtc% + &101\nNEXT\nEND\n",StringFunctions:'REM StringFunctions\n\nCONST DELAY% = 500\nOUTPUT(TRUE, CREAM, TRUE)\ns1$ = "Turtle BASIC"\ns2$ = MID$(s1$, 1, 6)\nWRITELN(s2$ + " is the name of a small animal.")\nPAUSE(DELAY%)\ns3$ = MID$(s1$, 8, 5)\nWRITELN(s3$ + " was invented in the 1960s.")\nPAUSE(DELAY%)\ns4$ = INS$(s3$, 2, "BC B")\nWRITELN("""" + s4$ + """ is the name of a 1980s variant.")\nPAUSE(DELAY%)\nWRITELN("\'" + s1$ + "\' has " + STR$(LEN(s1$)) + " characters.")\nPAUSE(DELAY%)\nWRITELN("In lower case it is \'" + LCASE$(s1$) + "\'.")\nWRITELN("In upper case it is \'" + UCASE$(s1$) + "\'.")\nPAUSE(DELAY%)\nposn% = INSTR(s1$, s3$)\nIF posn% > 0 THEN\n  WRITELN("\'" + s3$ + "\' occurs within \'" + s1$ + "\' at position " + STR$(posn%) + ".")\nENDIF\nPAUSE(DELAY%)\ns5$ = "3.14159"\nWRITELN(s5$ + " times 100000 = " + STR$(QVAL(s5$, 100000, -1)) + ".")\nn% = QVAL(s5$, 100000, -1)\nPAUSE(DELAY%)\nWRITELN(STR$(n%) + " divided by 100000 = " + QSTR$(n%, 100000, 5) + ".")\nWRITELN("")\nPAUSE(DELAY% * 5)\nWRITELN("Now back to the Canvas and Console ...")\nOUTPUT(FALSE, PEACH, TRUE)\nPAUSE(DELAY% * 5)\nOUTPUT(FALSE, LIGHTRED, FALSE)\nPAUSE(DELAY% * 5)\nCONSOLE(TRUE, LIGHTBLUE)\nWRITELN("You will see this on a clear light blue Console")\nEND\n',UserStringFunctions:'REM UserStringFunctions\n\nOUTPUT(TRUE, CREAM, TRUE)\nWRITELN("Some User-Defined String Functions")\nPROCprocess("the quick brown fox jumps,")\nPROCprocess("OVER THE LAZY DOG.")\nEND\n\nDEF FNreverse$(s$)\n  LOCAL posn%, t$\n  t$ = ""\n  FOR posn% = LEN(s$) TO 1 STEP -1\n    t$ = t$ + MID$(s$, posn%, 1)\n  NEXT\n= t$\n\nDEF FNrevrecurse$(s$)\n  IF s$ = "" THEN\n    result$ = s$\n  ELSE\n    result$ = FNrevrecurse$(DEL$(s$, 1, 1)) + MID$(s$, 1, 1)\n  ENDIF\n= result$\n\nDEF FNinitcaps$(s$)\n  LOCAL posn%, t$\n  s$ = LCASE$(s$)\n  t$ = CHR$(ASC(MID$(s$, 1, 1)) - 32)\n  FOR posn% = 2 TO LEN(s$)\n    IF (MID$(s$, posn% - 1, 1) = " ") THEN\n      t$ = t$ + CHR$(ASC(MID$(s$, posn%, 1)) - 32)\n    ELSE\n      t$ = t$ + MID$(s$, posn%, 1)\n    ENDIF\n  NEXT\n= t$\n\nDEF FNcaesar$(s$, n%)\n  LOCAL posn%, c$, t$\n  t$ = ""\n  FOR posn% = 1 TO LEN(s$)\n    c$ = MID$(s$, posn%, 1)\n    IF (c$ >= "A") AND (c$ <= "Z") THEN\n      c$ = CHR$(ASC(c$) + n%)\n      IF c$ > "Z" THEN c$ = CHR$(ASC(c$) - 26)\n    ENDIF\n    IF (c$ >= "a") AND (c$ <= "z") THEN\n      c$ = CHR$(ASC(c$) + n%)\n      IF c$ > "z" THEN c$ = CHR$(ASC(c$) - 26)\n    ENDIF\n    t$ = t$ + c$\n  NEXT\n= t$\n\nDEF PROCprocess(s$)\n  WRITELN("")\n  WRITELN("ORIGINAL STRING:            \'" + s$ + "\'")\n  WRITELN("REVERSED (by iteration):    \'" + FNreverse$(s$) + "\'")\n  WRITELN("REVERSED (by recursion):    \'" + FNrevrecurse$(s$) + "\'")\n  WRITELN("INITIAL CAPITAL ALL WORDS:  \'" + FNinitcaps$(s$) + "\'")\n  WRITELN("CAESAR CIPHER (1 letter):   \'" + FNcaesar$(s$, 1) + "\'")\n  WRITELN("CAESAR DECRYPT (1+25 = 26): \'" + FNcaesar$(FNcaesar$(s$, 1), 25) + "\'")\n  WRITELN("CAESAR CIPHER (4 letters):  \'" + FNcaesar$(s$, 4) + "\'\'")\n  WRITELN("CAESAR DECRYPT (4+22 = 26): \'" + FNcaesar$(FNcaesar$(s$, 4), 22) + "\'")\nENDPROC\n',MathFunctions:'REM MathFunctions\n\nCONST DECIMALS% = 4\nCONST DENOMINATOR% = 1000000\nOUTPUT(TRUE, WHITE, TRUE)\nWRITELN("This program selects two random numbers a and b, in the")\nWRITELN("range 100-999, and then outputs various mathematical")\nWRITELN("functions of the fraction a/b. The results are expressed")\nWRITELN("to " + STR$(DECIMALS%) + " decimal places, and a denominator of " + STR$(DENOMINATOR%) + " is")\nWRITELN("used in the calculations to provide precision, even")\nWRITELN("though the Turtle functions strictly operate only on")\nWRITELN("integers and produce integer results.")\nWRITELN("")\nPROCselectAB\nWRITELN("a = " + STR$(A%) + "; b = " + STR$(B%))\nWRITELN("a / b = " + STR$(A%) + " / " + STR$(B%) + " = " + QSTR$(A%, B%, DECIMALS%))\nWRITELN("")\nPROCshow("square", POWER(A%, B%, 2, DENOMINATOR%))\nPROCshow("square root", ROOT(A%, B%, 2, DENOMINATOR%))\nPROCshow("cube", POWER(A%, B%, 3, DENOMINATOR%))\nPROCshow("cube root", ROOT(A%, B%, 3, DENOMINATOR%))\nWRITELN("")\nPROCshow("hypot", HYPOT(A%, B%, DENOMINATOR%))\nPROCshow("calculated hypot", SQR(A% * A% + B% * B%, DENOMINATOR%))\nWRITELN("")\nPROCshow("sin", SIN(A%, B%, DENOMINATOR%))\nPROCshow("cos", COS(A%, B%, DENOMINATOR%))\nPROCshow("tan", TAN(A%, B%, DENOMINATOR%))\nWRITELN("")\nPROCshow("ln", LN(A%, B%, DENOMINATOR%))\nIF DIVMULT(A%, B%, 1000) + LN(DENOMINATOR%, 1, 1000) > LN(MAXINT, 1, 1000) THEN\n  WRITELN("EXP(" + STR$(A%) + " / " + STR$(B%) + ") would give numerical overflow, because")\n  WRITELN("the result * " + STR$(DENOMINATOR%) + " would be greater than " + STR$(MAXINT))\nELSE\n  PROCshow("exp", EXP(A%, B%, DENOMINATOR%))\nENDIF\nPROCshow("log10", LOG10(A%, B%, DENOMINATOR%))\nIF DIVMULT(A%, B%, 1000) + LOG10(DENOMINATOR%, 1, 1000) > LOG10(MAXINT, 1, 1000) THEN\n  WRITELN("ANTILOG(" + STR$(A%) + " / " + STR$(B%) + ") would give numerical overflow, because")\n  WRITELN("the result * " + STR$(DENOMINATOR%) + " would be greater than " + STR$(MAXINT))\nELSE\n  PROCshow("antilog", ANTILOG(A%, B%, DENOMINATOR%))\nENDIF\nWRITELN("")\nIF A% > B% THEN\n  WRITELN("ACS and ASN are not defined for " + STR$(A%) + " / " + STR$(B%) + " = " + QSTR$(A%, B%, DECIMALS%))\nELSE\n  PROCshow("arccos", ACS(A%, B%, DENOMINATOR%))\n  PROCshow("arcsin", ASN(A%, B%, DENOMINATOR%))\nENDIF\nPROCshow("arctan", ATN(A%, B%, DENOMINATOR%))\nEND\n\nDEF PROCshow(s$, n%)\n  WRITELN(s$ + "(" + STR$(A%) + " / " + STR$(B%) + ") = " + QSTR$(n%, DENOMINATOR%, DECIMALS%))\nENDPROC\n\nDEF PROCselectAB\n  A% = RND(900) + 99\n  B% = RND(900) + 99\nENDPROC\n',TrigGraphs:'REM TrigGraphs\n\nCONST XORIGIN% = 500\nCONST YORIGIN% = 500\nCONST HALFWIDTH% = 400\nCONST YSCALE% = 200\nCONST RADIANS% = FALSE\nPROCaxes\nNOUPDATE\nTHICKNESS(4)\nCOLOUR(RED)\nSETXY(20, 700)\nPRINT("cosine", 16, 40)\nPROCcosinecurve\nCOLOUR(GREEN)\nSETXY(100, 810)\nPRINT("sine", 16, 40)\nSETXY(205, 820)\nDRAWXY(70, -110)\nDRAWXY(0, 20)\nMOVEXY(0, -20)\nDRAWXY(-18, 11)\nPROCsinecurve\nCOLOUR(BLUE)\nSETXY(140, 920)\nPRINT("tangent", 16, 40)\nPROCtancurve\nEND\n\nDEF PROCaxes\n  THICKNESS(3)\n  SETXY(XORIGIN% - HALFWIDTH%, YORIGIN%)\n  DRAWXY(HALFWIDTH% * 2, 0)\n  SETXY(XORIGIN%, 0)\n  DRAWXY(0, 1000)\n  SETXY(XORIGIN%, YORIGIN%)\n  CIRCLE(15)\n  THICKNESS(2)\n  SETXY(XORIGIN% - HALFWIDTH%, YORIGIN% - YSCALE%)\n  DRAWXY(HALFWIDTH% * 2, 0)\n  SETXY(XORIGIN% - HALFWIDTH%, YORIGIN% + YSCALE%)\n  DRAWXY(HALFWIDTH% * 2, 0)\n  SETXY(XORIGIN% + HALFWIDTH% + 10, YORIGIN% - YSCALE% - 18)\n  PRINT("+1", 0, 20)\n  SETXY(XORIGIN% + HALFWIDTH% + 10, YORIGIN% + YSCALE% - 18)\n  PRINT("-1", 0, 20)\n  IF RADIANS% THEN\n    SETXY(XORIGIN% - HALFWIDTH% - 44, YORIGIN% - 4)\n    PRINT("-p", 29, 28)\n    SETXY(XORIGIN% - HALFWIDTH% DIV 2 - 2, YORIGIN% - 4)\n    PRINT("-p/2", 29, 28)\n    SETXY(XORIGIN% + HALFWIDTH% DIV 2 - 50, YORIGIN% - 4)\n    PRINT("p/2", 29, 28)\n    SETXY(XORIGIN% + HALFWIDTH%, YORIGIN% - 4)\n    PRINT("p", 29, 28)\n  ELSE\n    SETXY(XORIGIN% - HALFWIDTH% - 60, YORIGIN%)\n    PRINT("-180", 0, 20)\n    SETXY(XORIGIN% - HALFWIDTH% / 2, YORIGIN%)\n    PRINT("-90", 0, 20)\n    SETXY(XORIGIN% + HALFWIDTH% / 2 - 30, YORIGIN%)\n    PRINT("90", 0, 20)\n    SETXY(XORIGIN% + HALFWIDTH%, YORIGIN%)\n    PRINT("180", 0, 20)\n  ENDIF\nENDPROC\n\nDEF PROCsinecurve\n  LOCAL degrees%, x%, y%\n  FOR degrees% = -180 TO 180\n    x% = XORIGIN% + DIVMULT(degrees%, 180, HALFWIDTH%)\n    y% = YORIGIN% - SIN(degrees%, 1, YSCALE%)\n    SETXY(x%, y%)\n  NEXT\n  POLYLINE(361)\nENDPROC\n\nDEF PROCcosinecurve\n  LOCAL degrees%, x%, y%\n  FOR degrees% = -180 TO 180\n    x% = XORIGIN% + DIVMULT(degrees%, 180, HALFWIDTH%)\n    y% = YORIGIN% - COS(degrees%, 1, YSCALE%)\n    SETXY(x%, y%)\n  NEXT\n  POLYLINE(361)\nENDPROC\n\nDEF PROCtancurve\n  LOCAL degrees%, x%, y%\n  FOR degrees% = -180 TO 180\n    IF degrees% = -90 THEN\n      POLYLINE(90)\n    ELSE\n      IF degrees% = 90 THEN\n        POLYLINE(179)\n      ELSE\n        x% = XORIGIN% + DIVMULT(degrees%, 180, HALFWIDTH%)\n        y% = YORIGIN% - TAN(degrees%, 1, YSCALE%)\n        SETXY(x%, y%)\n      ENDIF\n    ENDIF\n  NEXT\n  POLYLINE(90)\nENDPROC\n',MovingBall:"REM MovingBall\n\nx% = 100\ny% = 700\nFOR count% = 1 TO 100\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  x% = x% + 8\n  y% = y% - 4\n  SETXY(x%, y%)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\nNEXT\nEND\n",BouncingBall:"REM BouncingBall\n\nx% = 100\ny% = 700\nxvel% = 8\nyvel% = -4\nWHILE 0 < 1\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  x% = x% + xvel%\n  y% = y% + yvel%\n  SETXY(x%, y%)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\n  IF (x% < 50) OR (x% > 949) THEN\n    xvel% = -xvel%\n  ENDIF\n  IF (y% < 50) OR (y% > 949) THEN\n    yvel% = -yvel%\n  ENDIF\nENDWHILE\nEND\n",TurtleMove:"REM TurtleMove\n\nSETXY(100, 700)\nFOR count% = 1 TO 100\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  MOVEXY(8, -4)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\nNEXT\nEND\n",TurtleBounce:"REM TurtleBounce\n\nSETXY(100, 700)\nxvel% = 8\nyvel% = -4\nWHILE 0 < 1\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  MOVEXY(xvel%, yvel%)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\n  IF (turtx% < 50) OR (turtx% > 949) THEN\n    xvel% = -xvel%\n  ENDIF\n  IF (turty% < 50) OR (turty% > 949) THEN\n    yvel% = -yvel%\n  ENDIF\nENDWHILE\nEND\n",BouncingFace:"REM BouncingFace\n\nCONST FACESIZE% = 100\nx% = 300\ny% = 700\nxvel% = 8\nyvel% = -4\nWHILE 0 < 1\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(FACESIZE% + 1)\n  x% = x% + xvel%\n  y% = y% + yvel%\n  SETXY(x%, y%)\n  PROCface(FACESIZE%)\n  SETXY(x%, y%)\n  UPDATE\n  PAUSE(10)\n  IF (x% < FACESIZE%) OR (x% > 999 - FACESIZE%) THEN\n    xvel% = -xvel%\n  ENDIF\n  IF (y% < FACESIZE%) OR (y% > 999 - FACESIZE%) THEN\n    yvel% = -yvel%\n  ENDIF\nENDWHILE\nEND\n\nDEF PROCeye(size%)\n  COLOUR(WHITE)\n  ELLBLOT(size% * 3 / 20, size% / 10)\n  COLOUR(EMERALD)\n  BLOT(size% * 9 / 100)\n  COLOUR(BLACK)\n  BLOT(size% / 25)\nENDPROC\n\nDEF PROCface(size%)\n  DIRECTION(0)\n  COLOUR(PEACH)\n  BLOT(size%)\n  COLOUR(DARKRED)\n  BLOT(size% * 7 / 10)\n  FORWARD(size% * 3 / 20)\n  COLOUR(PEACH)\n  BLOT(size% * 3 / 4)\n  BACK(size% * 3 / 10)\n  COLOUR(ROYAL)\n  BLOT(size% * 3 / 20)\n  PENUP\n  FORWARD(size% * 9 / 20)\n  LEFT(90)\n  FORWARD(size% * 2 / 5)\n  PROCeye(size%)\n  BACK(size% * 4 / 5)\n  PROCeye(size%)\nENDPROC\n",MultiBounce:"REM MultiBounce\n\nCONST MINSIZE% = 70\nCONST MAXSIZE% = 130\nCONST BALLS% = 10\nDIM x%(BALLS%)\nDIM y%(BALLS%)\nDIM xvel%(BALLS%)\nDIM yvel%(BALLS%)\nDIM size%(BALLS%)\nDIM colr%(BALLS%)\nFOR n% = 1 TO BALLS%\n  size%(n%) = MINSIZE% + RND(MAXSIZE% - MINSIZE%)\n  colr%(n%) = RGB(n%)\n  x%(n%) = RND(1000 - 2 * size%(n%)) + size%(n%)\n  y%(n%) = RND(1000 - 2 * size%(n%)) + size%(n%)\n  xvel%(n%) = RND(15) - 7\n  yvel%(n%) = RND(15) - 7\nNEXT\nREPEAT\n  NOUPDATE\n  BLANK(WHITE)\n  FOR n% = 1 TO BALLS%\n    x%(n%) = x%(n%) + xvel%(n%)\n    y%(n%) = y%(n%) + yvel%(n%)\n    SETXY(x%(n%), y%(n%))\n    COLOUR(colr%(n%))\n    BLOT(size%(n%))\n    IF (x%(n%) < size%(n%)) OR (x%(n%) > 1000 - size%(n%)) THEN\n      xvel%(n%) = -xvel%(n%)\n    ENDIF\n    IF (y%(n%) < size%(n%)) OR (y%(n%) > 1000 - size%(n%)) THEN\n      yvel%(n%) = -yvel%(n%)\n    ENDIF\n  NEXT\n  UPDATE\n  PAUSE(5)\nUNTIL 1 = 0\nEND\n",BouncingTriangle:"REM BouncingTriangle\n\nCONST SIZE% = 100\nx% = 300\ny% = 700\nd% = 0\nxvel% = 8\nyvel% = -4\ndvel% = 5\nWHILE 0 < 1\n  NOUPDATE\n  BLANK(WHITE)\n  x% = x% + xvel%\n  y% = y% + yvel%\n  d% = (d% + dvel%) MOD 360\n  PROCtriangle(RED)\n  UPDATE\n  PAUSE(10)\n  IF bouncex% THEN\n    xvel% = -xvel%\n    dvel% = -dvel%\n  ENDIF\n  IF bouncey% THEN\n    yvel% = -yvel%\n    dvel% = -dvel%\n  ENDIF\nENDWHILE\nEND\n\nDEF PROCtriangle(col%)\n  LOCAL count%\n  bouncex% = FALSE\n  bouncey% = FALSE\n  SETXY(x%, y%)\n  DIRECTION(d%)\n  COLOUR(col%)\n  FOR count% = 1 TO 3\n    FORWARD(SIZE%)\n    IF ABS(turtx% - 500) > 495 THEN\n      bouncex% = TRUE\n    ENDIF\n    IF ABS(turty% - 500) > 495 THEN\n      bouncey% = TRUE\n    ENDIF\n    BACK(SIZE%)\n    FORGET(1)\n    RIGHT(120)\n  NEXT\n  POLYGON(3)\nENDPROC\n",BouncingShapes:"REM BouncingShapes\n\nCONST MINSIZE% = 70\nCONST MAXSIZE% = 130\nCONST SHAPES% = 6\nDIM x%(SHAPES%)\nDIM y%(SHAPES%)\nDIM d%(SHAPES%)\nDIM xvel%(SHAPES%)\nDIM yvel%(SHAPES%)\nDIM dvel%(SHAPES%)\nDIM sides%(SHAPES%)\nDIM size%(SHAPES%)\nDIM colr%(SHAPES%)\nFOR n% = 1 TO SHAPES%\n  sides%(n%) = n% + 2\n  size%(n%) = MINSIZE% + RND(MAXSIZE% - MINSIZE%)\n  colr%(n%) = RGB(n%)\n  x%(n%) = RND(1000 - 2 * size%(n%)) + size%(n%)\n  y%(n%) = RND(1000 - 2 * size%(n%)) + size%(n%)\n  d%(n%) = RND(360)\n  xvel%(n%) = RND(15) - 7\n  yvel%(n%) = RND(15) - 7\n  dvel%(n%) = RND(4) + 3\nNEXT\nWHILE 0 < 1\n  NOUPDATE\n  BLANK(WHITE)\n  FOR n% = 1 TO SHAPES%\n    x%(n%) = x%(n%) + xvel%(n%)\n    y%(n%) = y%(n%) + yvel%(n%)\n    d%(n%) = (d%(n%) + dvel%(n%)) MOD 360\n    SETXY(x%(n%), y%(n%))\n    DIRECTION(d%(n%))\n    PROCdrawshape(sides%(n%), size%(n%), colr%(n%))\n    IF bouncex% THEN\n      xvel%(n%) = -xvel%(n%)\n      dvel%(n%) = -dvel%(n%)\n    ENDIF\n    IF bouncey% THEN\n      yvel%(n%) = -yvel%(n%)\n      dvel%(n%) = -dvel%(n%)\n    ENDIF\n  NEXT\n  UPDATE\n  PAUSE(5)\nENDWHILE\nEND\n\nDEF PROCdrawshape(sid%, siz%, col%)\n  LOCAL count%\n  bouncex% = FALSE\n  bouncey% = FALSE\n  COLOUR(col%)\n  FOR count% = 1 TO sid%\n    FORWARD(siz%)\n    IF ABS(turtx% - 500) > 495 THEN\n      bouncex% = TRUE\n    ENDIF\n    IF ABS(turty% - 500) > 495 THEN\n      bouncey% = TRUE\n    ENDIF\n    BACK(siz%)\n    FORGET(1)\n    RIGHT(360 / sid%)\n  NEXT\n  POLYGON(sid%)\nENDPROC\n",GravitySteps:"REM GravitySteps\n\nPROCsteps(10)\nSETXY(950, 75)\nREPEAT\n  PROCthrowball(-2, -22, 1, turty% + 100)\nUNTIL turtx% < 75\nFOR bounce% = 1 TO 10\n  PROCthrowball(0, bounce% * 2 - 20, 1, turty%)\nNEXT\nEND\n\nDEF PROCsteps(s%)\n  LOCAL size%, count%\n  size% = 1000 / s%\n  SETXY(0, 1000)\n  THICKNESS(1)\n  FOR count% = 1 TO s% * 2\n    IF count% MOD 2 = 0 THEN MOVEXY(0, -size%) ELSE MOVEXY(size%, 0)\n  NEXT\n  MOVEXY(0, s% * size%)\n  MOVEXY(-s% * size%, 0)\n  COLOUR(BLUE)\n  POLYGON(s% * 2 + 2)\nENDPROC\n\nDEF PROCthrowball(xvel%, yvel%, gravity%, floor%)\n  REPEAT\n    COLOUR(WHITE)\n    BLOT(25)\n    MOVEXY(xvel%, yvel%)\n    yvel% = yvel% + gravity%\n    IF turty% > floor% THEN turty% = floor%\n    COLOUR(RED)\n    BLOT(24)\n    UPDATE\n    PAUSE(10)\n    NOUPDATE\n  UNTIL turty% = floor%\nENDPROC\n",SolarSystem:"REM SolarSystem\n\nCONST SUNRADIUS% = 50000\nDIM radius%(7)\nDIM distancefromsun%(7)\nDIM design%(7)\nDIM rotation%(7)\nDIM speed%(7)\nradius%(0) = 2433\ndistancefromsun%(0) = 5795\nspeed%(0) = 1607\ndesign%(0) = WHITE\nradius%(1) = 6053\ndistancefromsun%(1) = 10811\nspeed%(1) = 1174\ndesign%(1) = OCHRE\nradius%(2) = 6371\ndistancefromsun%(2) = 14957\nspeed%(2) = 1000\ndesign%(2) = BLUE\nradius%(3) = 3380\ndistancefromsun%(3) = 22784\nspeed%(3) = 802\ndesign%(3) = ORANGERED\nradius%(4) = 71492\ndistancefromsun%(4) = 77814\nspeed%(4) = 434\ndesign%(4) = LIGHTRED\nradius%(5) = 58219\ndistancefromsun%(5) = 142700\nspeed%(5) = 323\ndesign%(5) = CREAM\nradius%(6) = 23470\ndistancefromsun%(6) = 287030\nspeed%(6) = 182\ndesign%(6) = CYAN\nradius%(7) = 23716\ndistancefromsun%(7) = 449990\nspeed%(7) = 159\ndesign%(7) = ROYAL\nANGLES(360000)\nCANVAS(0, 0, 1000000, 1000000)\nRESOLUTION(500, 500)\nTHICKNESS(1)\nPENUP\nWHILE TRUE\n  BLANK(BLACK)\n  HOME\n  COLOUR(YELLOW)\n  BLOT(SUNRADIUS%)\n  FOR i% = 0 TO 7\n    HOME\n    COLOUR(WHITE)\n    CIRCLE(distancefromsun%(i%) + SUNRADIUS%)\n    RIGHT(rotation%(i%))\n    FORWARD(distancefromsun%(i%) + SUNRADIUS%)\n    rotation%(i%) = (rotation%(i%) + speed%(i%)) MOD 360000\n    COLOUR(design%(i%))\n    IF i% < 4 THEN\n      BLOT(radius%(i%) * 2)\n    ELSE\n      BLOT(radius%(i%) DIV 2)\n    ENDIF\n  NEXT\n  UPDATE\n  NOUPDATE\nENDWHILE\nEND\n",AskInput:'REM AskInput\n\nWRITE("What is your name?  ")\ns$ = GETLINE$\nWRITELN("")\nWRITE("Hello, " + s$ + ", ...  ")\nPAUSE(500)\nWRITELN("How are you?")\nEND\n',QuickClick:'REM QuickClick\n\nBLANK(CREAM)\nSETXY(15, 200)\nPRINT("This reaction game will display a sequence", 4, 36)\nSETXY(20, 270)\nPRINT("of 10 coloured circles on the Canvas. Try", 4, 36)\nSETXY(20, 340)\nPRINT("to click the mouse on each circle as quickly", 4, 36)\nSETXY(20, 410)\nPRINT("as you can, and see how short a total time", 4, 36)\nSETXY(20, 480)\nPRINT("you can achieve for all 10.", 4, 36)\nSETXY(100, 620)\nPRINT("Now press the ""Esc"" key to start ...", 4, 36)\nKEYECHO(FALSE)\nREPEAT\nUNTIL (ABS(?KEY) = \\ESCAPE)\nTIMESET(0)\nFOR count% = 1 TO 10\n  x% = RND(900) + 50\n  y% = RND(900) + 50\n  BLANK(BLACK)\n  SETXY(x%, y%)\n  COLOUR(RGB(count%))\n  BLOT(50)\n  REPEAT\n    REPEAT\n      UPDATE\n    UNTIL ?LMOUSE > 0\n    clickcol% = PIXCOL(?MOUSEX, ?MOUSEY)\n  UNTIL clickcol% = turtc%\nNEXT\nBLANK(LIGHTBLUE)\nSETXY(60, 460)\nCOLOUR(LIGHTRED)\nPRINT("Your time was " + QSTR$(TIME, 1000, 2) + " seconds", 4, 50)\nEND\n',TypingTest:'REM TypingTest\n\nDIM letters%(26)\nBLANK(CREAM)\nSETXY(15, 200)\nPRINT("In this typing test, you will be shown the", 4, 36)\nSETXY(20, 270)\nPRINT("letters of the alphabet in a random order,", 4, 36)\nSETXY(20, 340)\nPRINT("and in a mixture of upper- and lower-case.", 4, 36)\nSETXY(20, 410)\nPRINT("Type them as fast as you can, and see how", 4, 36)\nSETXY(20, 480)\nPRINT("quickly you can finish the entire alphabet.", 4, 36)\nSETXY(100, 620)\nPRINT("Now press the ""Esc"" key to start ...", 4, 36)\nKEYECHO(FALSE)\nREPEAT\nUNTIL (ABS(?KEY) = \\ESCAPE)\nFOR count% = 1 TO 26\n  IF RND(2) = 1 THEN\n    letters%(count%) = count% + 64\n  ELSE\n    letters%(count%) = count% + 96\n  ENDIF\nNEXT\nFOR count% = 1 TO 50\n  m% = RND(26)\n  n% = RND(26)\n  IF m% <> n% THEN\n    temp% = letters%(m%)\n    letters%(m%) = letters%(n%)\n    letters%(n%) = temp%\n  ENDIF\nNEXT\nTIMESET(0)\nFOR count% = 1 TO 26\n  BLANK(BLACK)\n  SETXY(100 + RND(300), RND(250))\n  COLOUR(YELLOW)\n  PRINT(CHR$(letters%(count%)), 3, 450)\n  REPEAT\n  UNTIL GET$(1) = CHR$(letters%(count%))\nNEXT\nBLANK(LIGHTBLUE)\nSETXY(60, 460)\nCOLOUR(LIGHTRED)\nPRINT("Your time was " + QSTR$(TIME, 1000, 2) + " seconds", 4, 50)\nEND\n',TypingTestKeys:'REM TypingTestKeys\n\nDIM letters%(26)\nBLANK(CREAM)\nSETXY(15, 200)\nPRINT("In this typing test, you will be shown the", 4, 36)\nSETXY(20, 270)\nPRINT("letters of the alphabet in a random order,", 4, 36)\nSETXY(20, 340)\nPRINT("and in a mixture of upper- and lower-case.", 4, 36)\nSETXY(20, 410)\nPRINT("Type them as fast as you can, and see how", 4, 36)\nSETXY(20, 480)\nPRINT("quickly you can finish the entire alphabet.", 4, 36)\nSETXY(100, 620)\nPRINT("Now press the ""Esc"" key to start ...", 4, 36)\nKEYECHO(FALSE)\nREPEAT\nUNTIL (ABS(?KEY) = \\ESCAPE)\nFOR count% = 1 TO 26\n  letters%(count%) = count% + 64\nNEXT\nFOR count% = 1 TO 50\n  m% = RND(26)\n  n% = RND(26)\n  IF m% <> n% THEN\n    temp% = letters%(m%)\n    letters%(m%) = letters%(n%)\n    letters%(n%) = temp%\n  ENDIF\nNEXT\nTIMESET(0)\nFOR count% = 1 TO 26\n  c% = letters%(count%)\n  lowcase% = (RND(2) = 1)\n  BLANK(BLACK)\n  SETXY(100 + RND(300), RND(250))\n  COLOUR(YELLOW)\n  IF lowcase% THEN\n    PRINT(CHR$(c% + 32), 3, 450)\n  ELSE\n    PRINT(CHR$(c%), 3, 450)\n  ENDIF\n  REPEAT\n    shiftok% = ((ABS(?KSHIFT) AND 8) > 0) EOR lowcase%\n  UNTIL (ABS(?KEY) = c%) AND shiftok%\n  RESET(?KSHIFT)\nNEXT\nBLANK(LIGHTBLUE)\nSETXY(60, 460)\nCOLOUR(LIGHTRED)\nPRINT("Your time was " + QSTR$(TIME, 1000, 2) + " seconds", 4, 50)\nEND\n',IterationGame:'REM IterationGame\n\nKEYECHO(FALSE)\nREPEAT\n  BLANK(WHITE)\n  SETXY(50, 20)\n  COLOUR(BLUE)\n  PRINT("Type in a starting integer (>1):", 4, 36)\n  SETXY(800, 20)\n  COLOUR(BLACK)\n  REPEAT\n    RESET(\\KEYBUFFER)\n    REPEAT\n      BOX(200, 60, WHITE, FALSE)\n      PRINT(GET$(0), 4, 36)\n      PAUSE(100)\n    UNTIL ABS(?KEY) = \\RETURN\n    s$ = GETLINE$\n    RESET(?KEY)\n    first% = VALDEF(s$, -1)\n  UNTIL first% > 1\n  latest% = first%\n  count% = 0\n  COLOUR(BLUE)\n  REPEAT\n    SETXY((count% MOD 10) * 100 + 20, (count% DIV 10) * 45 + 300)\n    PRINT(STR$(latest%), 4, 24)\n    IF latest% MOD 2 = 0 THEN\n      latest% = latest% / 2\n    ELSE\n      latest% = 3 * latest% + 1\n    ENDIF\n    INC(count%)\n    COLOUR(GREEN)\n  UNTIL latest% = 1\n  SETXY((count% MOD 10) * 100 + 20, (count% DIV 10) * 45 + 300)\n  COLOUR(RED)\n  PRINT(STR$(latest%), 4, 24)\n  SETXY(100, 100)\n  PRINT("That took " + STR$(count%) + " iterations to reach 1", 4, 36)\n  COLOUR(BLACK)\n  SETXY(250, 200)\n  PRINT("[Press a key to continue]", 4, 30)\n  REPEAT\n  UNTIL ?KEY > 0\n  RESET(?KEY)\nUNTIL FALSE\nEND\n',SpongeThrow:"REM SpongeThrow\n\nCONST FACESIZE% = 100\nCONST SPONGESIZE% = 40\nx% = 300\ny% = 700\nxvel% = 8\nyvel% = -4\nWHILE 0 < 1\n  NOUPDATE\n  COLOUR(WHITE)\n  SETXY(x%, y%)\n  BLOT(FACESIZE% + SPONGESIZE%)\n  x% = x% + xvel%\n  y% = y% + yvel%\n  SETXY(x%, y%)\n  PROCface(FACESIZE%)\n  UPDATE\n  PAUSE(10)\n  IF (?LMOUSE > 0) AND (HYPOT(?MOUSEX - x%, ?MOUSEY - y%, 1) < FACESIZE%) THEN\n    SETXY(?MOUSEX, ?MOUSEY)\n    RNDCOL(4)\n    BLOT(SPONGESIZE%)\n    PAUSE(100)\n  ENDIF\n  IF (x% < FACESIZE%) OR (x% > 999 - FACESIZE%) THEN\n    xvel% = -xvel%\n  ENDIF\n  IF (y% < FACESIZE%) OR (y% > 999 - FACESIZE%) THEN\n    yvel% = -yvel%\n  ENDIF\nENDWHILE\nEND\n\nDEF PROCeye(size%)\n  COLOUR(WHITE)\n  ELLBLOT(size% * 3 / 20, size% / 10)\n  COLOUR(EMERALD)\n  BLOT(size% * 9 / 100)\n  COLOUR(BLACK)\n  BLOT(size% / 25)\nENDPROC\n\nDEF PROCface(size%)\n  DIRECTION(0)\n  COLOUR(PEACH)\n  BLOT(size%)\n  COLOUR(DARKRED)\n  BLOT(size% * 7 / 10)\n  FORWARD(size% * 3 / 20)\n  COLOUR(PEACH)\n  BLOT(size% * 3 / 4)\n  BACK(size% * 3 / 10)\n  COLOUR(ROYAL)\n  BLOT(size% * 3 / 20)\n  PENUP\n  FORWARD(size% * 9 / 20)\n  LEFT(90)\n  FORWARD(size% * 2 / 5)\n  PROCeye(size%)\n  BACK(size% * 4 / 5)\n  PROCeye(size%)\nENDPROC\n",Arcade:'REM Arcade\n\nCONST TARGETS% = 10\nFaceX% = -100\nFaceY% = 625\nfacexspeed% = 5\nfaceyspeed% = 0\nhits% = 0\nCURSOR(0)\nWHILE hits% < TARGETS%\n  NOUPDATE\n  PROCbackground\n  SETXY(FaceX%, FaceY%)\n  PROCface\n  FOR i% = 1 TO hits%\n    PROCbottle(50 * i% - 35, 740)\n  NEXT\n  COLOUR(BROWN)\n  THICKNESS(272)\n  SETXY(0, 863)\n  DRAWXY(1000, 0)\n  PROCgunsight\n  THICKNESS(2)\n  UPDATE\n  FaceX% = FaceX% + facexspeed%\n  FaceY% = FaceY% + faceyspeed%\n  IF FaceX% > 1100 THEN FaceX% = -100\n  IF FaceX% < -100 THEN FaceX% = 1100\n  IF (FaceY% < 100) OR (FaceY% > 625) THEN faceyspeed% = faceyspeed% * -1\n  IF ((?LMOUSE > 0) AND (((?MOUSEX - FaceX%) * (?MOUSEX - FaceX%)) + ((?MOUSEY - FaceY%) * (?MOUSEY - FaceY%)) < 10000)) THEN\n    FaceX% = -100\n    facexspeed% = RND(5) + 1\n    faceyspeed% = RND(9) - 5\n    FaceY% = RND(550) + 49\n    INC(hits%)\n  ENDIF\nENDWHILE\nBLANK(BLACK)\nSETXY(200, 450)\nCOLOUR(GREEN)\nPRINT("  Well done!  ", 4, 75)\nEND\n\nDEF PROCbottle(x%, y%)\n  SETXY(x%, y%)\n  COLOUR(CYAN)\n  MOVEXY(0, -15)\n  THICKNESS(40)\n  DRAWXY(0, -50)\n  THICKNESS(10)\n  DRAWXY(0, -40)\n  THICKNESS(2)\n  MOVEXY(-20, 90)\n  MOVEXY(40, 0)\n  MOVEXY(0, -20)\n  MOVEXY(-40, 0)\n  COLOUR(PURPLE)\n  POLYGON(4)\n  MOVEXY(20, 35)\nENDPROC\n\nDEF PROCaddhat\n  SETXY(FaceX%, FaceY% - 80)\n  COLOUR(DARKGREY)\n  ELLBLOT(90, 30)\n  THICKNESS(2)\n  COLOUR(BLACK)\n  ELLIPSE(90, 30)\n  MOVEXY(-70, 0)\n  THICKNESS(4)\n  DRAWXY(35, -70)\n  DRAWXY(70, 0)\n  DRAWXY(35, 70)\n  COLOUR(DARKGREY)\n  THICKNESS(1)\n  POLYGON(4)\nENDPROC\n\nDEF PROCface\n  THICKNESS(1)\n  COLOUR(&FF8899)\n  BLOT(100)\n  COLOUR(WHITE)\n  SETXY(FaceX% - 20, FaceY% - 20)\n  BLOT(10)\n  COLOUR(BLACK)\n  BLOT(4)\n  THICKNESS(4)\n  MOVEXY(0, -22)\n  COLOUR(&663300)\n  DRAWXY(15, 15)\n  THICKNESS(1)\n  COLOUR(WHITE)\n  SETXY(FaceX% + 20, FaceY% - 20)\n  BLOT(10)\n  COLOUR(BLACK)\n  BLOT(4)\n  THICKNESS(4)\n  MOVEXY(0, -22)\n  COLOUR(&663300)\n  DRAWXY(-15, 15)\n  PROCaddhat\n  SETXY(FaceX%, FaceY% + 13)\n  COLOUR(RED)\n  BLOT(10)\n  MOVEXY(0, 32)\n  ELLBLOT(30, 6)\n  COLOUR(WHITE)\n  ELLBLOT(20, 4)\nENDPROC\n\nDEF PROCbackground\n  BLANK(COFFEE)\n  PROCbottle(100, 500)\n  PROCbottle(200, 500)\n  PROCbottle(450, 500)\n  PROCbottle(500, 500)\n  PROCbottle(565, 500)\n  PROCbottle(865, 500)\n  COLOUR(DARKBROWN)\n  THICKNESS(20)\n  SETXY(0, 125)\n  DRAWXY(1000, 0)\n  SETXY(0, 325)\n  DRAWXY(1000, 0)\n  SETXY(0, 525)\n  DRAWXY(1000, 0)\n  COLOUR(BROWN)\n  THICKNESS(30)\n  SETXY(0, 100)\n  DRAWXY(1000, 0)\n  SETXY(0, 300)\n  DRAWXY(1000, 0)\n  SETXY(0, 500)\n  DRAWXY(1000, 0)\nENDPROC\n\nDEF PROCgunsight\n  COLOUR(BLACK)\n  THICKNESS(6)\n  SETXY(?MOUSEX - 50, ?MOUSEY)\n  DRAWXY(100, 0)\n  SETXY(?MOUSEX, ?MOUSEY - 50)\n  DRAWXY(0, 100)\nENDPROC\n',SnakeGame:'REM SnakeGame\n\nCONST BOARDSIZE% = 30\nCONST SNAKECOLOUR% = PURPLE\nCONST APPLECOLOUR% = GREEN\nCANVAS(0, 0, BOARDSIZE%, BOARDSIZE%)\nRESOLUTION(BOARDSIZE%, BOARDSIZE%)\nANGLES(4)\nBLANK(LIGHTBLUE)\nCURSOR(0)\nCOLOUR(SNAKECOLOUR%)\nTHICKNESS(1)\nPENUP\nFORWARD(1)\nsnakelength% = 2\nPROCnewapple\ncrash% = FALSE\nREPEAT\n  NOUPDATE\n  IF (ABS(?KEY) = \\UP) AND (turtd% <> 2) THEN DIRECTION(0)\n  IF (ABS(?KEY) = \\RIGHT) AND (turtd% <> 3) THEN DIRECTION(1)\n  IF (ABS(?KEY) = \\DOWN) AND (turtd% <> 0) THEN DIRECTION(2)\n  IF (ABS(?KEY) = \\LEFT) AND (turtd% <> 1) THEN DIRECTION(3)\n  FORWARD(1)\n  IF (turtx% < 0) OR (turtx% >= BOARDSIZE%) OR (turty% < 0) OR (turty% >= BOARDSIZE%) THEN crash% = TRUE\n  IF PIXCOL(turtx%, turty%) = SNAKECOLOUR% THEN crash% = TRUE\n  IF PIXCOL(turtx%, turty%) = APPLECOLOUR% THEN\n    INC(snakelength%)\n    PIXSET(turtx%, turty%, SNAKECOLOUR%)\n    PROCnewapple\n  ENDIF\n  COLOUR(LIGHTBLUE)\n  POLYLINE(snakelength% + 2)\n  COLOUR(SNAKECOLOUR%)\n  POLYLINE(snakelength%)\n  UPDATE\n  PAUSE(250 - (snakelength% * 3))\nUNTIL crash%\nRESOLUTION(1000, 1000)\nBLANK(LILAC)\nSETXY(BOARDSIZE% / 4, 2 * BOARDSIZE% / 5)\nPRINT("Score " + STR$(snakelength% - 2), 20, 100)\nEND\n\nDEF PROCnewapple\n  LOCAL x%, y%\n  REPEAT\n    x% = RND(BOARDSIZE%) - 1\n    y% = RND(BOARDSIZE%) - 1\n  UNTIL (PIXCOL(x%, y%) <> SNAKECOLOUR%)\n  PIXSET(x%, y%, APPLECOLOUR%)\nENDPROC\n',NoughtsAndCrosses:'REM NoughtsAndCrosses\n\nCONST CROSS% = 33\nCONST NOUGHT% = 2\nDIM board%(11)\nDIM b2%(9, 11)\nnumgames% = 0\nREPEAT\n  numgames% = numgames% + 1\n  randfirst% = (numgames% MOD 2 = 1)\n  BLANK(LIGHTGREEN)\n  THICKNESS(10)\n  COLOUR(BLACK)\n  SETXY(375, 50)\n  DRAWXY(0, 750)\n  SETXY(625, 50)\n  DRAWXY(0, 750)\n  SETXY(125, 300)\n  DRAWXY(750, 0)\n  SETXY(125, 550)\n  DRAWXY(750, 0)\n  FOR i% = 0 TO 10\n    board%(i%) = 0\n  NEXT\n  board%(11) = 8\n  REPEAT\n    IF (randfirst%) THEN\n      board%(10) = RND(8)\n      randfirst% = FALSE\n    ELSE\n      CURSOR(2)\n      REPEAT\n        REPEAT\n          REPEAT\n          UNTIL ?LMOUSE > 0\n          PAUSE(200)\n        UNTIL ((?CLICKX >= 125) AND (?CLICKX <= 875) AND (?CLICKY >= 50) AND (?CLICKY <= 800))\n        column% = (?CLICKX - 125) DIV 250\n        row% = (?CLICKY - 50) DIV 250\n      UNTIL board%(column% + row% * 3) = 0\n      PROCdoblot(column%, row%, CROSS%)\n      board%(column% + row% * 3) = CROSS%\n      CURSOR(11)\n      PROCevaluate(board%, CROSS%, 0)\n    ENDIF\n    IF (board%(10) <> -1) THEN\n      PROCdoblot(board%(10) MOD 3, board%(10) DIV 3, NOUGHT%)\n      board%(board%(10)) = NOUGHT%\n    ENDIF\n  UNTIL (board%(11) <= 1)\n  SETXY(350, 850)\n  COLOUR(BLACK)\n  IF (board%(9) = 0) THEN\n    PRINT("  Draw!  ", 4, 60)\n  ELSE\n    PRINT("  I win!  ", 4, 60)\n  ENDIF\n  PAUSE(2500)\nUNTIL (1 <> 1)\nEND\n\nDEF PROCdoblot(x%, y%, col%)\n  SETXY(x% * 250 + 250, y% * 250 + 175)\n  COLOUR(RGB(col%))\n  BLOT(70)\nENDPROC\n\nDEF PROCcopy(RETURN fromarray%(), RETURN toarray%())\n  FOR i% = 0 TO 11\n    toarray%(i%) = fromarray%(i%)\n  NEXT\nENDPROC\n\nDEF PROCevaluate(RETURN b1%(), jm%, depth%)\n  LOCAL mover%, replyscore%, m%\n  mover% = CROSS% + NOUGHT% - jm%\n  replyscore% = -2\n  b1%(9) = 0\n  b1%(10) = -1\n  b1%(11) = depth%\n  IF ((b1%(0) = jm%) AND (b1%(1) = jm%) AND (b1%(2) = jm%)) THEN b1%(9) = 1\n  IF ((b1%(3) = jm%) AND (b1%(4) = jm%) AND (b1%(5) = jm%)) THEN b1%(9) = 1\n  IF ((b1%(6) = jm%) AND (b1%(7) = jm%) AND (b1%(8) = jm%)) THEN b1%(9) = 1\n  IF ((b1%(0) = jm%) AND (b1%(3) = jm%) AND (b1%(6) = jm%)) THEN b1%(9) = 1\n  IF ((b1%(1) = jm%) AND (b1%(4) = jm%) AND (b1%(7) = jm%)) THEN b1%(9) = 1\n  IF ((b1%(2) = jm%) AND (b1%(5) = jm%) AND (b1%(8) = jm%)) THEN b1%(9) = 1\n  IF ((b1%(0) = jm%) AND (b1%(4) = jm%) AND (b1%(8) = jm%)) THEN b1%(9) = 1\n  IF ((b1%(2) = jm%) AND (b1%(4) = jm%) AND (b1%(6) = jm%)) THEN b1%(9) = 1\n  IF b1%(9) = 0 THEN\n    m% = 0\n    REPEAT\n      IF (b1%(m%) = 0) THEN\n       PROCcopy(b1%, b2%(depth%))\n       b2%(depth%, m%) = mover%\n       PROCevaluate(b2%(depth%), mover%, depth% + 1)\n       IF (b2%(depth%, 9) > replyscore%) THEN\n         replyscore% = b2%(depth%, 9)\n         b1%(10) = m%\n         b1%(11) = b2%(depth%, 11)\n       ENDIF\n      ENDIF\n      m% = m% + 1\n    UNTIL (m% > 8) OR (replyscore% > 0)\n    IF (replyscore% <> -2) THEN b1%(9) = -replyscore%\n  ENDIF\nENDPROC\n',SimpleDraw:"REM SimpleDraw\n\nPROCpalette\nHOME\nTHICKNESS(10)\nBLOT(2)\nREPEAT\n  REPEAT\n    UPDATE\n  UNTIL (?LMOUSE > 0) OR (?RMOUSE > 0)\n  IF ?MOUSEY > 900 THEN\n    COLOUR(RGB(?MOUSEX DIV 100 + 1))\n  ELSE\n    IF ?LMOUSE > 0 THEN\n      DRAWXY(?MOUSEX - turtx%, ?MOUSEY - turty%)\n    ELSE\n      SETXY(?MOUSEX, ?MOUSEY)\n    ENDIF\n  ENDIF\nUNTIL FALSE\nEND\n\nDEF PROCpalette\n  LOCAL col%\n  FOR col% = 1 TO 10\n    SETXY(col% * 100 - 50, 950)\n    COLOUR(RGB(col%))\n    BLOT(50)\n  NEXT\nENDPROC\n",PaintApp:'REM PaintApp\n\nPROCsetup\nREPEAT\n  IF ?LMOUSE > 0 THEN\n    IF ?MOUSEY > 900 THEN\n      PROCsetbrushcolour(PIXCOL(?MOUSEX, ?MOUSEY))\n    ELSE\n      IF (?MOUSEY > 850) AND ((?MOUSEX > 600) AND (?MOUSEX < 850)) THEN\n        PROCsetbrushwidth(((?MOUSEX DIV 50) * 2) - 16)\n      ELSE\n        IF ?MOUSEY < 850 - BrushWidth% THEN PROCpaintbrush(?MOUSEX, ?MOUSEY)\n      ENDIF\n    ENDIF\n  ENDIF\n  IF (?RMOUSE > 0) AND (?MOUSEY < 850) THEN PROCpaintcan(?MOUSEX, ?MOUSEY)\n  UPDATE\nUNTIL FALSE\nEND\n\nDEF PROCsetbrushwidth(wdth%)\n  LOCAL count%\n  BrushWidth% = wdth%\n  NOUPDATE\n  COLOUR(BLACK)\n  FOR count% = 0 TO 4\n    SETXY(625 + count% * 50, 875)\n    BLOT(8 + count% * 2)\n  NEXT\n  COLOUR(BrushColour%)\n  RECOLOUR(((BrushWidth% + 16) * 25) + 25, 875, LIGHTRED)\n  UPDATE\nENDPROC\n\nDEF PROCsetbrushcolour(clr%)\n  BrushColour% = clr%\n  COLOUR(clr%)\n  SETXY(975, 875)\n  BLOT(16)\nENDPROC\n\nDEF PROCpaintbrush(x%, y%)\n  SETXY(x%, y%)\n  BLOT(BrushWidth%)\nENDPROC\n\nDEF PROCpaintcan(x%, y%)\n  RECOLOUR(x%, y%, BrushColour%)\nENDPROC\n\nDEF PROCsquare(col%)\n  MOVEXY(50, 0)\n  MOVEXY(0, 50)\n  MOVEXY(-50, 0)\n  MOVEXY(0, -50)\n  COLOUR(col%)\n  POLYGON(4)\nENDPROC\n\nDEF PROCsetup\n  LOCAL count%\n  COLOUR(LIGHTRED)\n  SETXY(0, 850)\n  DRAWXY(1000, 0)\n  SETXY(0, 900)\n  DRAWXY(1000, 0)\n  SETXY(450, 850)\n  DRAWXY(0, 50)\n  SETXY(850, 850)\n  DRAWXY(0, 50)\n  COLOUR(BLACK)\n  SETXY(10, 858)\n  PRINT("Left-click to draw, right-click to fill", 0, 20)\n  SETXY(450 + 10, 858)\n  PRINT("Brush width:", 0, 20)\n  SETXY(850 + 10, 858)\n  PRINT("Colour:", 0, 20)\n  SETXY(0, 900)\n  FOR count% = 1 TO 20\n    PROCsquare(RGB(count%))\n    MOVEXY(0, 50)\n    PROCsquare(RGB(count% + 30))\n    MOVEXY(50, -50)\n  NEXT\n  PROCsetbrushwidth(8)\n  PROCsetbrushcolour(BLACK)\nENDPROC\n',MultipleTurtles:'REM MultipleTurtles\n\nCONST NUMTURTLES% = 5\nCONST X% = 0\nCONST Y% = 1\nCONST D% = 2\nCONST A% = 3\nCONST T% = 4\nCONST C% = 5\nDIM turtles%(NUMTURTLES%, C%)\nCANVAS(0, 0, 100000, 100000)\nSETXY(2500, 80000)\nPRINT("Click on a circle to alter the ANGLES setting", 0, 36)\nSETXY(2500, 86000)\nPRINT("of the corresponding turtle. Its direction will", 0, 36)\nSETXY(2500, 92000)\nPRINT("then change to the closest possible angle.", 0, 36)\nFOR i% = 1 TO NUMTURTLES%\n  SETXY(10000, 70000)\n  DIRECTION(35 + i% * 10)\n  FORWARD(110000)\nNEXT\nPROCmenu\nPROCsetupturtles\nREPEAT\n  FOR i% = 1 TO NUMTURTLES%\n    NEWTURTLE(turtles%(i%))\n    FORWARD(100)\n  NEXT\n  PAUSE(50)\n  IF ?CLICK > 128 THEN PROChandleclick\nUNTIL ?KEY = \\ESCAPE\nEND\n\nDEF PROCsetupturtles\n  LOCAL i%\n  FOR i% = 1 TO NUMTURTLES%\n    turtles%(i%, X%) = 10000\n    turtles%(i%, Y%) = 70000\n    turtles%(i%, D%) = 35 + i% * 10\n    turtles%(i%, A%) = 360\n    turtles%(i%, T%) = 5 + i%\n    turtles%(i%, C%) = RGB(i%)\n  NEXT\nENDPROC\n\nDEF PROCmenu\n  LOCAL i%\n  FOR i% = 1 TO NUMTURTLES%\n    SETXY(5000, i% * 10000)\n    COLOUR(RGB(i%))\n    BLOT(5000)\n  NEXT\nENDPROC\n\nDEF PROChandleclick\n  LOCAL col%, i%, thist%\n  col% = PIXCOL(?MOUSEX, ?MOUSEY)\n  thist% = 0\n  FOR i% = 1 TO NUMTURTLES%\n    IF col% = RGB(i%) THEN thist% = i%\n  NEXT\n  IF thist% > 0 THEN\n    NEWTURTLE(turtles%(thist%))\n    WRITE("Turtle " + STR$(thist%) + " changing direction,")\n    WRITE("  from " + STR$(turtles%(thist%, D%)) + "/" + STR$(turtles%(thist%, A%)))\n    ANGLES(RND(46) + 46)\n    WRITELN("  to " + STR$(turtles%(thist%, D%)) + "/" + STR$(turtles%(thist%, A%)))\n    PAUSE(200)\n  ENDIF\nENDPROC\n',AimCannon:'REM AimCannon\n\nCONST GUNLENGTH% = 1000\nCONST DISTANCECOL% = GREEN\nCONST TIMECOL% = RED\nCANVAS(0, 0, 10500, 10000)\nPROCgraphaxes\nturtd% = 45\nTHICKNESS(20)\nREPEAT\n  PROCaim\n  WRITE("Elevation: " + STR$(90 - turtd%))\n  PROCfire(COS(90 - turtd%, 1, 96), SIN(90 - turtd%, 1, -96), 1, 9950)\n  WRITE("  Distance: " + STR$(turtx%))\n  WRITELN("  Time: " + STR$(steps%))\n  PROCplot(90 - turtd%, turtx%, DISTANCECOL%)\n  PROCplot(90 - turtd%, steps% * 50, TIMECOL%)\nUNTIL 0 = 1\nEND\n\nDEF PROCgraphaxes\n  LOCAL n%\n  THICKNESS(5)\n  SETXY(9700, 600)\n  DRAWXY(0, 3900)\n  DRAWXY(-9000, 0)\n  DRAWXY(0, -3900)\n  FOR n% = 0 TO 90\n    IF n% MOD 5 = 0 THEN\n      SETXY(650 + n% * 100, 4600)\n      PRINT(STR$(n%), 2, 16)\n    ENDIF\n  NEXT\n  FOR n% = 0 TO 9\n    SETXY(100, 4350 - n% * 400)\n    PRINT(STR$(n% * 1000), 2, 16)\n  NEXT\n  FOR n% = 0 TO 9\n    SETXY(9900, 4380 - n% * 400)\n    PRINT(STR$(n% * 20), 2, 16)\n  NEXT\n  SETXY(4000, 4900)\n  PRINT("Angle of elevation", 2, 24)\n  COLOUR(DISTANCECOL%)\n  SETXY(0, 100)\n  PRINT("Distance", 2, 24)\n  COLOUR(TIMECOL%)\n  SETXY(9600, 100)\n  PRINT("Time", 2, 24)\nENDPROC\n\nDEF PROCplot(x%, y%, col%)\n  SETXY(700 + x% * 100, 4500 - y% * 2 / 5)\n  COLOUR(col%)\n  BLOT(40)\nENDPROC\n\nDEF PROCaim\n  REPEAT\n    NOUPDATE\n    SETXY(0, 10000)\n    COLOUR(CREAM)\n    BLOT(1600)\n    COLOUR(YELLOWGREEN)\n    BLOT(1400)\n    COLOUR(MAROON)\n    SETXY(250, 9750)\n    BLOT(250)\n    FORWARD(GUNLENGTH%)\n    SETXY(250, 9750)\n    COLOUR(RED)\n    BLOT(100)\n    UPDATE\n    REPEAT\n    UNTIL (?LMOUSE > 0)\n    IF PIXCOL(?MOUSEX, ?MOUSEY) = CREAM THEN\n      TURNXY(?MOUSEX - 250, ?MOUSEY - 9750)\n    ENDIF\n  UNTIL PIXCOL(?MOUSEX, ?MOUSEY) = RED\nENDPROC\n\nDEF PROCfire(xvel%, yvel%, gravity%, floor%)\n  SETXY(250, 9750)\n  steps% = 0\n  REPEAT\n    INC(steps%)\n    IF PIXCOL(turtx%, turty%) = BLACK THEN\n      COLOUR(WHITE)\n      BLOT(90)\n    ENDIF\n    MOVEXY(xvel%, yvel%)\n    yvel% = yvel% + gravity%\n    IF turty% > floor% THEN turty% = floor%\n    IF (PIXCOL(turtx%, turty%) = WHITE) OR (turty% = floor%) THEN\n      COLOUR(BLACK)\n      BLOT(75)\n    ENDIF\n    UPDATE\n    PAUSE(10)\n    NOUPDATE\n  UNTIL turty% = floor%\nENDPROC\n',AutoCannon:'REM AutoCannon\n\nCONST GUNLENGTH% = 1000\nCONST DISTANCECOL% = GREEN\nCONST TIMECOL% = RED\nCANVAS(0, 0, 10500, 10000)\nPROCgraphaxes\nturtd% = 45\nTHICKNESS(20)\nFOR n% = 0 TO 90\n  PROCaim(n%)\n  WRITE("Elevation: " + STR$(90 - turtd%))\n  PROCfire(COS(90 - turtd%, 1, 96), SIN(90 - turtd%, 1, -96), 1, 9950)\n  WRITE("  Distance: " + STR$(turtx%))\n  WRITELN("  Time: " + STR$(steps%))\n  PROCplot(90 - turtd%, turtx%, DISTANCECOL%)\n  PROCplot(90 - turtd%, steps% * 50, TIMECOL%)\nNEXT\nEND\n\nDEF PROCgraphaxes\n  LOCAL n%\n  THICKNESS(5)\n  SETXY(9700, 600)\n  DRAWXY(0, 3900)\n  DRAWXY(-9000, 0)\n  DRAWXY(0, -3900)\n  FOR n% = 0 TO 90\n    IF n% MOD 5 = 0 THEN\n      SETXY(650 + n% * 100, 4600)\n      PRINT(STR$(n%), 2, 16)\n    ENDIF\n  NEXT\n  FOR n% = 0 TO 9\n    SETXY(100, 4350 - n% * 400)\n    PRINT(STR$(n% * 1000), 2, 16)\n  NEXT\n  FOR n% = 0 TO 9\n    SETXY(9900, 4380 - n% * 400)\n    PRINT(STR$(n% * 20), 2, 16)\n  NEXT\n  SETXY(4000, 4900)\n  PRINT("Angle of elevation", 2, 24)\n  COLOUR(DISTANCECOL%)\n  SETXY(0, 100)\n  PRINT("Distance", 2, 24)\n  COLOUR(TIMECOL%)\n  SETXY(9600, 100)\n  PRINT("Time", 2, 24)\nENDPROC\n\nDEF PROCplot(x%, y%, col%)\n  SETXY(700 + x% * 100, 4500 - y% * 2 / 5)\n  COLOUR(col%)\n  BLOT(40)\nENDPROC\n\nDEF PROCaim(elevation%)\n  NOUPDATE\n  SETXY(0, 10000)\n  COLOUR(CREAM)\n  BLOT(1600)\n  COLOUR(YELLOWGREEN)\n  BLOT(1400)\n  COLOUR(MAROON)\n  SETXY(250, 9750)\n  BLOT(250)\n  DIRECTION(90 - elevation%)\n  FORWARD(GUNLENGTH%)\n  SETXY(250, 9750)\n  COLOUR(RED)\n  BLOT(100)\n  UPDATE\nENDPROC\n\nDEF PROCfire(xvel%, yvel%, gravity%, floor%)\n  SETXY(250, 9750)\n  steps% = 0\n  REPEAT\n    INC(steps%)\n    IF PIXCOL(turtx%, turty%) = BLACK THEN\n      COLOUR(WHITE)\n      BLOT(90)\n    ENDIF\n    MOVEXY(xvel%, yvel%)\n    yvel% = yvel% + gravity%\n    IF turty% > floor% THEN turty% = floor%\n    IF (PIXCOL(turtx%, turty%) = WHITE) OR (turty% = floor%) THEN\n      COLOUR(BLACK)\n      BLOT(75)\n    ENDIF\n    UPDATE\n    PAUSE(10)\n    NOUPDATE\n  UNTIL turty% = floor%\nENDPROC\n',Launch:'REM Launch\n\nCONST EARTHRADIUS% = 6371000\nCONST EARTHGM% = 398600442\nCONST INITDIRECTION% = 2000\nCONST INITTHRUST% = 20000\nCONST THRUSTTIME% = 500\nCONST ANGLEPRECISION% = 1296000\nCANVAS(-20000, -20000, 40000, 40000)\nANGLES(ANGLEPRECISION%)\nx% = 0\ny% = -EARTHRADIUS%\nxvel% = 0\nyvel% = 0\nd% = INITDIRECTION%\nt% = 0\nprevdiff% = 1\nthrust% = INITTHRUST%\nREPEAT\n  PROCdrawrocket\n  prevdist% = dist%\n  dist% = HYPOT(x%, y%, 1)\n  IF (dist% - prevdist%) * prevdiff% <= 0 THEN PROCreport\n  prevdiff% = dist% - prevdist%\n  gravity% = DIVMULT(EARTHGM%, DIVMULT(dist%, 1000000, dist%), 1000)\n  xgravity% = DIVMULT(gravity%, dist%, -x%)\n  ygravity% = DIVMULT(gravity%, dist%, -y%)\n  xthrust% = SIN(d%, 1, thrust%)\n  ythrust% = -COS(d%, 1, thrust%)\n  xvel% = xvel% + xgravity% + xthrust%\n  yvel% = yvel% + ygravity% + ythrust%\n  x% = x% + xvel% / 1000\n  y% = y% + yvel% / 1000\n  IF yvel% > 0 THEN\n    d% = ANGLEPRECISION% / 2 - ATN(xvel%, yvel%, 1)\n  ELSE\n    d% = ATN(xvel%, -yvel%, 1)\n  ENDIF\n  INC(t%)\n  IF t% = THRUSTTIME% THEN thrust% = 0\nUNTIL (0 = 1) OR (dist% < EARTHRADIUS%) OR (dist% > 40000000)\nIF dist% < EARTHRADIUS% THEN\n  COLOUR(YELLOW)\n  FOR explosion% = 100 TO 200\n    BLOT(explosion%)\n    PAUSE(3)\n  NEXT\n  COLOUR(BLACK)\n  BLOT(200)\nENDIF\nEND\n\nDEF PROCdrawrocket\n  NOUPDATE\n  BLANK(BLACK)\n  COLOUR(TEAL)\n  SETXY(0, 0)\n  BLOT(EARTHRADIUS% / 1000)\n  SETXY(x% / 1000, y% / 1000)\n  DIRECTION(d%)\n  THICKNESS(4)\n  COLOUR(SILVER)\n  FORWARD(200)\n  BACK(200)\n  IF thrust% > 0 THEN\n    THICKNESS(8)\n    COLOUR(YELLOW)\n    BACK(200)\n    FORWARD(200)\n  ENDIF\n  UPDATE\nENDPROC\n\nDEF PROCreport\n  WRITELN("")\n  WRITELN("TIME = " + STR$(t%))\n  WRITELN(" Xposition = " + STR$(x%) + " metres")\n  WRITELN(" Yposition = " + STR$(y%) + " metres")\n  WRITELN(" Height = " + QSTR$(dist% - EARTHRADIUS%, 1000, 2) + " km")\n  WRITELN(" Direction = " + QSTR$(d%, 3600, 1) + " degrees")\n  WRITELN(" Thrust = " + QSTR$(thrust%, 1000, 1) + " newtons per kg")\n  WRITELN("  Xthrust = " + QSTR$(xthrust%, 1000, 1) + " newtons per kg")\n  WRITELN("  Ythrust = " + QSTR$(ythrust%, 1000, 1) + " newtons per kg")\n  WRITELN(" Gravity = " + QSTR$(gravity%, 1000, 1) + " newtons per kg")\n  WRITELN("  Xgravity = " + QSTR$(xgravity%, 1000, 1) + " newtons per kg")\n  WRITELN("  Ygravity = " + QSTR$(ygravity%, 1000, 1) + " newtons per kg")\n  WRITELN(" Xvelocity = " + QSTR$(xvel%, 1000, 1) + " metres per s")\n  WRITELN(" Yvelocity = " + QSTR$(yvel%, 1000, 1) + " metres per s")\nENDPROC\n',Disease:"REM Disease\n\nCONST WIDTH% = 100\nCONST HEIGHT% = 100\nCONST SUSCEPTIBLE% = LIGHTGREEN\nCONST INFECTED% = RED\nCONST RECOVERED% = BLUE\nCONST STARTRADIUS% = 10\nCONST INFECTPROB% = 1\nCONST IMMUNEPROB% = 2\nCONST RECOVERPROB% = 15\nCANVAS(0, 0, WIDTH%, HEIGHT%)\nRESOLUTION(WIDTH%, HEIGHT%)\nnuminfected% = 0\nNOUPDATE\nFOR x% = 0 TO WIDTH% - 1\n  FOR y% = 0 TO HEIGHT% - 1\n    IF (RND(100) - 1 < INFECTPROB%) AND (HYPOT(x% - WIDTH% / 2, y% - HEIGHT% / 2, 1) <= STARTRADIUS%) THEN\n      PROCinfect(x%, y%)\n    ELSE\n      IF RND(100) - 1 < IMMUNEPROB% THEN\n        PIXSET(x%, y%, RECOVERED%)\n      ELSE\n        PIXSET(x%, y%, SUSCEPTIBLE%)\n      ENDIF\n    ENDIF\n  NEXT\nNEXT\nUPDATE\nREPEAT\n  x% = RND(WIDTH%) - 1\n  y% = RND(HEIGHT%) - 1\n  IF PIXCOL(x%, y%) = INFECTED% THEN\n    IF RND(100) - 1 < RECOVERPROB% THEN\n      PIXSET(x%, y%, RECOVERED%)\n      DEC(numinfected%)\n    ELSE\n      n% = (RND(4) - 1) * 2 + 1\n      x% = x% + n% DIV 3 - 1\n      y% = y% + n% MOD 3 - 1\n      IF PIXCOL(x%, y%) = SUSCEPTIBLE% THEN PROCinfect(x%, y%)\n    ENDIF\n  ENDIF\nUNTIL numinfected% = 0\nEND\n\nDEF PROCinfect(x%, y%)\n  PIXSET(x%, y%, INFECTED%)\n  INC(numinfected%)\nENDPROC\n",GameOfLife:"REM GameOfLife\n\nCONST WIDTH% = 32\nCONST HEIGHT% = 32\nCANVAS(0, 0, WIDTH%, HEIGHT%)\nRESOLUTION(WIDTH%, HEIGHT%)\nFOR x% = 0 TO WIDTH% - 1\n  FOR y% = 0 TO HEIGHT% - 1\n    IF RND(7) = 1 THEN PIXSET(x%, y%, BLACK)\n  NEXT\nNEXT\nWHILE ?KEY <> \\ESCAPE\n  NOUPDATE\n  FOR x% = 0 TO WIDTH% - 1\n    FOR y% = 0 TO HEIGHT% - 1\n      dn% = 0\n      FOR i% = -1 TO 1\n        FOR j% = -1 TO 1\n          dn% = dn% + PIXCOL((x% + i% + WIDTH%) MOD WIDTH%, (y% + j% + HEIGHT%) MOD HEIGHT%) AND 1\n        NEXT\n      NEXT\n      IF ((PIXCOL(x%, y%) AND 1 = 0) AND ((dn% < 5) OR (dn% > 6))) OR ((PIXCOL(x%, y%) AND 1 = 1) AND (dn% = 6)) THEN\n        PIXSET(x%, y%, PIXCOL(x%, y%) EOR 2)\n      ENDIF\n    NEXT\n  NEXT\n  FOR x% = 0 TO WIDTH% - 1\n    FOR y% = 0 TO HEIGHT% - 1\n      IF (PIXCOL(x%, y%) AND 3) MOD 3 <> 0 THEN\n        PIXSET(x%, y%, PIXCOL(x%, y%) EOR &FFFFFD)\n      ENDIF\n    NEXT\n  NEXT\n  UPDATE\nENDWHILE\nEND\n",LifeArrays:"REM LifeArrays\n\nCONST WIDTH% = 32\nCONST HEIGHT% = 32\nDIM thisgen%(WIDTH%, HEIGHT%)\nDIM nextgen%(WIDTH%, HEIGHT%)\nCANVAS(0, 0, WIDTH%, HEIGHT%)\nRESOLUTION(WIDTH%, HEIGHT%)\nFOR x% = 0 TO WIDTH% - 1\n  FOR y% = 0 TO HEIGHT% - 1\n    nextgen%(x%, y%) = (RND(7) = 1)\n  NEXT\nNEXT\nWHILE ?KEY <> \\ESCAPE\n  NOUPDATE\n  FOR x% = 0 TO WIDTH% - 1\n    FOR y% = 0 TO HEIGHT% - 1\n      thisgen%(x%, y%) = nextgen%(x%, y%)\n      IF thisgen%(x%, y%) THEN\n        PIXSET(x%, y%, MAROON)\n      ELSE\n        PIXSET(x%, y%, LIGHTGREEN)\n      ENDIF\n    NEXT\n  NEXT\n  UPDATE\n  FOR x% = 0 TO WIDTH% - 1\n    FOR y% = 0 TO HEIGHT% - 1\n      livenb% = 0\n      FOR i% = -1 TO 1\n        FOR j% = -1 TO 1\n          IF thisgen%((x% + i% + WIDTH%) MOD WIDTH%, (y% + j% + HEIGHT%) MOD HEIGHT%) THEN\n            INC(livenb%)\n          ENDIF\n        NEXT\n      NEXT\n      IF thisgen%(x%, y%) THEN\n        nextgen%(x%, y%) = ((livenb% = 3) OR (livenb% = 4))\n      ELSE\n        nextgen%(x%, y%) = (livenb% = 3)\n      ENDIF\n    NEXT\n  NEXT\nENDWHILE\nEND\n",Automata:'REM Automata\n\nCONST WIDTH% = 100\nCONST HEIGHT% = 100\nDIM cellcol%(1)\nDIM nextstate%(7)\nCANVAS(0, 0, WIDTH%, HEIGHT%)\nRESOLUTION(WIDTH%, HEIGHT%)\ncellcol%(0) = &FFFFFE\ncellcol%(1) = &000001\nFOR n% = 4 TO 45\n  rule% = n% * 4 + 2\n  PROCsetup(rule%)\n  NOUPDATE\n  BLANK(WHITE)\n  FOR x% = 0 TO WIDTH% - 1\n    PIXSET(x%, 0, cellcol%(RND(2) - 1))\n  NEXT\n  FOR generation% = 1 TO HEIGHT% - 1\n    PROCnextgen(generation%)\n  NEXT\n  SETXY(0, HEIGHT% - 15)\n  BOX(25 + LEN(STR$(rule%)) * 7, 14, CREAM, FALSE)\n  PRINT("Rule " + STR$(rule%), 4, 8)\n  UPDATE\n  PAUSE(500)\nNEXT\nEND\n\nDEF PROCsetup(rulecode%)\n  LOCAL nhood%\n  FOR nhood% = 0 TO 7\n    nextstate%(nhood%) = rulecode% MOD 2\n    rulecode% = rulecode% DIV 2\n  NEXT\nENDPROC\n\nDEF PROCnextgen(g%)\n  LOCAL x%, xmod%, thispix%\n  LOCAL n1%, n2%, n3%\n  FOR x% = -1 TO WIDTH%\n    xmod% = (x% + WIDTH%) MOD WIDTH%\n    thispix% = PIXCOL(xmod%, g% - 1) AND 1\n    n3% = n2% * 2 + thispix%\n    n2% = n1% * 2 + thispix%\n    n1% = thispix%\n    IF x% > 0 THEN\n      PIXSET(x% - 1, g%, cellcol%(nextstate%(n3%)))\n    ENDIF\n  NEXT\nENDPROC\n',BrownianMotion:"REM BrownianMotion\n\nCONST POLRADIUS% = 80\nCONST MOLRADIUS% = 10\nCONST HITRADIUS% = 90\nCONST MOLECULES% = 400\nCONST SLOWSPEED% = 30\nCONST HIGHSPEED% = 50\nCONST SPEEDRATIO% = 10\nCONST POLCOLOUR% = BLUE\nCONST MOLCOLOUR% = RED\nCONST HALOCOLOUR% = &FFFFFE\nCONST DELAY% = 50\nDIM mx%(MOLECULES%)\nDIM my%(MOLECULES%)\nDIM ms%(MOLECULES%)\nDIM md%(MOLECULES%)\nNOUPDATE\nPROCsetup\nBLANK(WHITE)\nPROCdraw(TRUE)\nREPEAT\n  NOUPDATE\n  PROCdraw(FALSE)\n  FOR n% = 0 TO MOLECULES%\n    PROCmove(n%)\n  NEXT\n  px% = px% + pxvel% / SPEEDRATIO%\n  py% = py% + pyvel% / SPEEDRATIO%\n  PROCdraw(TRUE)\n  UPDATE\n  PAUSE(DELAY%)\nUNTIL (ABS(px% - 500) > 490) OR (ABS(py% - 500) > 480)\nEND\n\nDEF PROCsetup\n  LOCAL n%\n  PENUP\n  px% = 500\n  py% = 500\n  pxvel% = 0\n  pyvel% = 0\n  SETXY(px%, py%)\n  COLOUR(HALOCOLOUR%)\n  BLOT(HITRADIUS%)\n  FOR n% = 0 TO MOLECULES%\n    REPEAT\n      mx%(n%) = RND(1000 - 1 * MOLRADIUS%) + MOLRADIUS%\n      my%(n%) = RND(1000 - 1 * MOLRADIUS%) + MOLRADIUS%\n    UNTIL PIXCOL(mx%(n%), my%(n%)) = WHITE\n    ms%(n%) = RND(HIGHSPEED% - SLOWSPEED%) + SLOWSPEED%\n    md%(n%) = RND(360) - 1\n    SETXY(mx%(n%), my%(n%))\n    BLOT(2 * MOLRADIUS%)\n  NEXT\nENDPROC\n\nDEF PROCdraw(positive%)\n  LOCAL n%\n  IF positive% THEN\n    COLOUR(MOLCOLOUR%)\n    radius% = MOLRADIUS%\n  ELSE\n    COLOUR(WHITE)\n    radius% = MOLRADIUS% + 1\n  ENDIF\n  FOR n% = 0 TO MOLECULES%\n    SETXY(mx%(n%), my%(n%))\n    BLOT(radius%)\n  NEXT\n  SETXY(px%, py%)\n  IF positive% THEN\n    COLOUR(POLCOLOUR%)\n    BLOT(POLRADIUS%)\n  ELSE\n    BLOT(POLRADIUS% + 1)\n  ENDIF\nENDPROC\n\nDEF PROCmove(m%)\n  LOCAL degturn%, impact%\n  SETXY(mx%(m%), my%(m%))\n  DIRECTION(md%(m%))\n  FORWARD(ms%(m%))\n  IF HYPOT(turtx% - px%, turty% - py%, 1) <= HITRADIUS% THEN\n    WHILE HYPOT(turtx% - px%, turty% - py%, 1) < HITRADIUS%\n      BACK(1)\n    ENDWHILE\n    TURNXY(px% - turtx%, py% - turty%)\n    degturn% = turtd% - md%(m%)\n    md%(m%) = (180 + (turtd% + degturn%)) MOD 360\n    impact% = COS(degturn%, 1, ms%(m%))\n    pxvel% = pxvel% + SIN(turtd%, 1, impact%)\n    pyvel% = pyvel% - COS(turtd%, 1, impact%)\n  ENDIF\n  mx%(m%) = (turtx% + 1000) MOD 1000\n  my%(m%) = (turty% + 1000) MOD 1000\nENDPROC\n",Dendrites:'REM Dendrites\n\nCONST HALF% = 100\nCONST CRYSTAL% = CYAN\nCONST MOLECULE% = WHITE\nCONST SOLUTION% = TEAL\nCONST INITRANDOMRADIUS% = 10\nCONST MAXDISTANCE% = 75\nCONST CYCLEMOD% = 5\nCONST MODDELAY% = 0\nwhole% = HALF% * 2 + 3\nCANVAS(-HALF%, -HALF%, whole%, whole%)\nRESOLUTION(whole%, whole%)\nPENUP\nSETXY(-HALF%, -HALF%)\nBOX(whole%, whole%, SOLUTION%, TRUE)\nrandomradius% = INITRANDOMRADIUS%\nWRITELN("Initial randomradius = " + STR$(randomradius%))\nPIXSET(0, 0, CRYSTAL%)\nnumattached% = 1\nWRITELN("Counting molecules within growing crystal:")\nWRITE("1 ")\nmaxsofar% = 1\nTIMESET(0)\nREPEAT\n  HOME\n  DIRECTION(RND(360))\n  FORWARD(HALF%)\n  IF PIXCOL(turtx%, turty%) <> SOLUTION% THEN PROCrandomwalk\n  cycle% = 0\n  WHILE NOT(FNattached(turtx%, turty%))\n    PIXSET(turtx%, turty%, MOLECULE%)\n    IF cycle% MOD CYCLEMOD% = 0 THEN\n      UPDATE\n      IF MODDELAY% > 0 THEN\n        PAUSE(MODDELAY%)\n      ENDIF\n      NOUPDATE\n    ENDIF\n    INC(cycle%)\n    PIXSET(turtx%, turty%, SOLUTION%)\n    PROCbiasedwalk\n  ENDWHILE\n  IF numattached% MOD 10 = 0 THEN\n    WRITELN(STR$(numattached%))\n  ELSE\n    WRITE(STR$(numattached%) + " ")\n  ENDIF\n  IF maxsofar% > randomradius% THEN\n    randomradius% = maxsofar%\n    WRITELN("")\n    WRITELN("randomradius = " + STR$(randomradius%))\n  ENDIF\nUNTIL maxsofar% >= MAXDISTANCE%\nWRITELN("Simulation finished (" + QSTR$(TIME, 1000, 2) + " seconds)")\nEND\n\nDEF FNattached(x%, y%)\n  result% = FALSE\n  IF (PIXCOL(x% - 1, y%) = CRYSTAL%) OR (PIXCOL(x% + 1, y%) = CRYSTAL%) OR (PIXCOL(x%, y% - 1) = CRYSTAL%) OR (PIXCOL(x%, y% + 1) = CRYSTAL%) THEN\n    result% = TRUE\n    PIXSET(x%, y%, CRYSTAL%)\n    INC(numattached%)\n    IF HYPOT(x%, y%, 1) >= maxsofar% THEN\n      maxsofar% = HYPOT(x%, y%, 1)\n    ENDIF\n  ENDIF\n= result%\n\nDEF PROCrandomwalk\n  LOCAL n%\n  REPEAT\n    n% = RND(4) * 2\n    turtx% = turtx% + n% DIV 3 - 1\n    turty% = turty% + n% MOD 3 - 1\n    IF PIXCOL(turtx%, turty%) = BLACK THEN\n      turtx% = turtx% - 2 * (n% DIV 3 - 1)\n      turty% = turty% - 2 * (n% MOD 3 - 1)\n    ENDIF\n  UNTIL PIXCOL(turtx%, turty%) = SOLUTION%\nENDPROC\n\nDEF PROCbiasedwalk\n  LOCAL distance%, turn%, range%\n  TURNXY(-turtx%, -turty%)\n  distance% = HYPOT(turtx%, turty%, 1)\n  IF distance% < randomradius% THEN\n    DIRECTION(RND(360))\n  ELSE\n    range% = DIVMULT(HALF% - distance%, HALF% - randomradius%, 180)\n    turn% = RND(range% * 2) - range%\n    RIGHT(turn%)\n  ENDIF\n  REPEAT\n    FORWARD(1)\n  UNTIL PIXCOL(turtx%, turty%) = SOLUTION%\nENDPROC\n',Cheetahs:'REM Cheetahs\n\nCONST MAXANIMALS% = 500\nCONST MNGAZELLES% = 10\nCONST STARTCHEETAHS% = 50\nCONST STARTGAZELLES% = 50\nCONST MAXSPEED% = 1000\nCONST STARTSLOW% = 30\nCONST STARTFAST% = 70\nCONST RANDMARGINC% = 10\nCONST RANDMARGING% = 10\nCONST HUNTINGTRIES% = 100\nCONST CATCHMARGIN% = 5\nCONST CFOODADD% = 40\nCONST CBREEDFOOD% = 10\nCONST CMATINGRATIO% = 2\nCONST GMATINGRATIO% = 1\nCONST CHUNTINGRATIO% = 1\nCONST SLOWAGE% = 100\nCONST AGEFACTOR% = 0\nCONST GRAPHWIDTH% = 900\nCONST GRAPHLEFT% = 60\nCONST GRAPHHEIGHT% = 400\nCONST CGRAPHBASE% = 450\nCONST GGRAPHBASE% = 950\nCONST YMAX% = 20\nDIM cspeed%(MAXANIMALS%)\nDIM gspeed%(MAXANIMALS%)\nDIM cgenspeed%(MAXANIMALS%)\nDIM ggenspeed%(MAXANIMALS%)\nDIM cage%(MAXANIMALS%)\nDIM gage%(MAXANIMALS%)\nDIM cfood%(MAXANIMALS%)\nDIM cspeednum%(MAXSPEED%)\nDIM gspeednum%(MAXSPEED%)\nPROCsetup\nPROCgraph\ngen% = 0\nREPEAT\n  INC(gen%)\n  PROCgeneration\n  PROCgraph\nUNTIL 0 = 1\nEND\n\nDEF PROCsetup\n  LOCAL n%\n  FOR n% = 0 TO MAXSPEED%\n    cspeednum%(n%) = 0\n    gspeednum%(n%) = 0\n  NEXT\n  cnum% = STARTCHEETAHS% - 1\n  gnum% = STARTGAZELLES% - 1\n  FOR n% = 0 TO cnum%\n    cgenspeed%(n%) = RND(STARTFAST% - STARTSLOW%) + STARTSLOW%\n    cspeed%(n%) = cgenspeed%(n%)\n    cage%(n%) = RND(SLOWAGE%) - 1\n    cfood%(n%) = RND(CFOODADD%)\n    INC(cspeednum%(cspeed%(n%)))\n  NEXT\n  FOR n% = cnum% TO MAXANIMALS%\n    cspeed%(n%) = 0\n  NEXT\n  FOR n% = 0 TO gnum%\n    ggenspeed%(n%) = RND(STARTFAST% - STARTSLOW%) + STARTSLOW%\n    gspeed%(n%) = ggenspeed%(n%)\n    gage%(n%) = RND(SLOWAGE%) - 1\n    INC(gspeednum%(gspeed%(n%)))\n  NEXT\n  FOR n% = gnum% TO MAXANIMALS%\n    gspeed%(n%) = 0\n  NEXT\nENDPROC\n\nDEF PROCaxes(graphbase%)\n  LOCAL n%, scale%\n  COLOUR(BLACK)\n  SETXY(GRAPHLEFT%, graphbase% - GRAPHHEIGHT%)\n  DRAWXY(0, GRAPHHEIGHT%)\n  DRAWXY(GRAPHWIDTH%, 0)\n  FOR n% = 0 TO 10\n    SETXY(20, graphbase% - n% * GRAPHHEIGHT% / 10 - 19)\n    PRINT(STR$(n% * YMAX% / 10), 0, 20)\n  NEXT\n  FOR n% = 1 TO 10\n    SETXY(GRAPHLEFT% + n% * GRAPHWIDTH% / 10 - 20, graphbase%)\n    PRINT(STR$(n% * MAXSPEED% / 10), 0, 20)\n  NEXT\nENDPROC\n\nDEF PROCgraph\n  LOCAL n%, ctotal%, gtotal%\n  NOUPDATE\n  BLANK(WHITE)\n  PROCaxes(450)\n  PROCaxes(950)\n  SETXY(200, 20)\n  COLOUR(RED)\n  PRINT("Speed Distribution of Cheetahs", 4, 25)\n  SETXY(750, 20)\n  PRINT(STR$(cnum%), 4, 25)\n  ctotal% = 0\n  FOR n% = 1 TO MAXSPEED%\n    SETXY(GRAPHLEFT% + n% * GRAPHWIDTH% / MAXSPEED%, 450)\n    DRAWXY(0, -GRAPHHEIGHT% * cspeednum%(n%) / YMAX%)\n    ctotal% = ctotal% + n% * cspeednum%(n%)\n  NEXT\n  SETXY(200, 520)\n  COLOUR(GREEN)\n  PRINT("Speed Distribution of Gazelles", 4, 25)\n  SETXY(750, 520)\n  PRINT(STR$(gnum%), 4, 25)\n  gtotal% = 0\n  FOR n% = 1 TO MAXSPEED%\n    SETXY(GRAPHLEFT% + n% * GRAPHWIDTH% / MAXSPEED%, 950)\n    DRAWXY(0, -GRAPHHEIGHT% * gspeednum%(n%) / YMAX%)\n    gtotal% = gtotal% + n% * gspeednum%(n%)\n  NEXT\n  SETXY(850, 20)\n  IF cnum% < 1 THEN\n    SETXY(150, 200)\n    COLOUR(MAGENTA)\n    PRINT("All Cheetahs Have Died", 4, 50)\n    HALT\n  ENDIF\n  PRINT(QSTR$(ctotal%, cnum%, 2), 4, 25)\n  SETXY(850, 520)\n  PRINT(QSTR$(gtotal%, gnum%, 2), 4, 25)\n  UPDATE\n  WRITE(STR$(gen%))\n  WRITE(" - c=")\n  WRITE(STR$(cnum%))\n  WRITE(" (av=")\n  WRITE(QSTR$(ctotal%, cnum%, 2))\n  WRITELN(")")\n  UPDATE\n  NOUPDATE\n  WRITE("     g=")\n  WRITE(STR$(gnum%))\n  WRITE(" (av=")\n  WRITE(QSTR$(gtotal%, gnum%, 2))\n  WRITELN(")")\nENDPROC\n\nDEF PROCdeadcheetah(c%)\n  DEC(cspeednum%(cspeed%(c%)))\n  cspeed%(c%) = 0\n  DEC(cnum%)\nENDPROC\n\nDEF PROCdeadgazelle(g%)\n  DEC(gspeednum%(gspeed%(g%)))\n  gspeed%(g%) = 0\n  DEC(gnum%)\nENDPROC\n\nDEF PROCbabycheetah(speed%)\n  LOCAL b%\n  b% = 0\n  REPEAT\n    INC(b%)\n  UNTIL (cspeed%(b%) = 0) OR (b% = MAXANIMALS%)\n  IF cspeed%(b%) = 0 THEN\n    INC(cnum%)\n    cgenspeed%(b%) = speed% + RND(2 * RANDMARGINC%) - RANDMARGINC%\n    cgenspeed%(b%) = MAX(1, MIN(MAXSPEED%, cgenspeed%(b%)))\n    cspeed%(b%) = cgenspeed%(b%)\n    cage%(b%) = 0\n    cfood%(b%) = CFOODADD%\n    INC(cspeednum%(cspeed%(b%)))\n  ENDIF\nENDPROC\n\nDEF PROCbabygazelle(speed%)\n  LOCAL b%\n  b% = 0\n  REPEAT\n    INC(b%)\n  UNTIL (gspeed%(b%) = 0) OR (b% = MAXANIMALS%)\n  IF gspeed%(b%) = 0 THEN\n    INC(gnum%)\n    ggenspeed%(b%) = speed% + RND(2 * RANDMARGING%) - RANDMARGING%\n    ggenspeed%(b%) = MAX(1, MIN(MAXSPEED%, ggenspeed%(b%)))\n    gspeed%(b%) = ggenspeed%(b%)\n    gage%(b%) = 0\n    INC(gspeednum%(gspeed%(b%)))\n  ENDIF\nENDPROC\n\nDEF PROCgeneration\n  LOCAL n%, tries%\n  LOCAL c%, g%, s%, b%\n  FOR c% = 0 TO cnum% / CHUNTINGRATIO%\n    c% = RND(MAXANIMALS%)\n    IF (cspeed%(c%) > 0) AND (gnum% > MNGAZELLES%) THEN\n      tries% = 0\n      REPEAT\n        INC(tries%)\n        g% = RND(MAXANIMALS%)\n      UNTIL (gspeed%(g%) > 0) OR (tries% = HUNTINGTRIES%)\n      IF (gspeed%(g%) > 0) AND (cspeed%(c%) >= gspeed%(g%) + CATCHMARGIN%) THEN\n        PROCdeadgazelle(g%)\n        cfood%(c%) = cfood%(c%) + CFOODADD%\n      ENDIF\n    ENDIF\n  NEXT\n  FOR n% = 0 TO cnum% / CMATINGRATIO%\n    c% = RND(MAXANIMALS%)\n    IF (cnum% < MAXANIMALS%) AND (cspeed%(c%) > 0) AND (cfood%(c%) >= CBREEDFOOD%) THEN\n      PROCbabycheetah(cgenspeed%(c%))\n      cfood%(c%) = cfood%(c%) - CBREEDFOOD%\n    ENDIF\n  NEXT\n  FOR n% = 0 TO gnum% / GMATINGRATIO%\n    g% = RND(MAXANIMALS%)\n    IF (gnum% < MAXANIMALS%) AND (gspeed%(g%) > 0) THEN\n      PROCbabygazelle(ggenspeed%(g%))\n    ENDIF\n  NEXT\n  FOR n% = 0 TO MAXANIMALS%\n    IF cspeed%(n%) > 0 THEN\n      INC(cage%(n%))\n      IF cage%(n%) > SLOWAGE% THEN\n        DEC(cspeednum%(cspeed%(n%)))\n        cspeed%(n%) = cspeed%(n%) * AGEFACTOR% / 100\n        INC(cspeednum%(cspeed%(n%)))\n        IF cspeed%(n%) = 0 THEN\n          PROCdeadcheetah(n%)\n        ENDIF\n      ENDIF\n      DEC(cfood%(n%))\n      IF cfood%(n%) < 0 THEN\n        PROCdeadcheetah(n%)\n      ENDIF\n    ENDIF\n    IF gspeed%(n%) > 0 THEN\n      INC(gage%(n%))\n      IF gage%(n%) > SLOWAGE% THEN\n        DEC(gspeednum%(gspeed%(n%)))\n        gspeed%(n%) = gspeed%(n%) * AGEFACTOR% / 100\n        INC(gspeednum%(gspeed%(n%)))\n        IF gspeed%(n%) = 0 THEN\n          PROCdeadgazelle(n%)\n        ENDIF\n      ENDIF\n    ENDIF\n  NEXT\nENDPROC\n',SexRatio:'REM SexRatio\n\nCONST POPULATION% = 1000\nCONST MATEPERGEN% = 400\nCONST RANDOMVAR% = 1\nCONST LEFTMARGIN% = 70\nCONST TOPMARGIN% = 20\nDIM female%(POPULATION%)\nDIM fop%(POPULATION%)\nPROCaxes\nFOR n% = 0 TO POPULATION%\n  female%(n%) = (RND(2) = 1)\n  fop%(n%) = 900 + RND(100)\nNEXT\ngeneration% = 0\nREPEAT\n  PROCgraph\n  INC(generation%)\n  FOR n% = 0 TO MATEPERGEN%\n    PROCdomating\n  NEXT\nUNTIL generation% = 900\nEND\n\nDEF PROCaxes\n  LOCAL i%\n  FOR i% = 1 TO 9\n    SETXY(LEFTMARGIN% + i% * 100 - 25, TOPMARGIN% + 800)\n    PRINT(STR$(i% * 100), 4, 20)\n  NEXT\n  FOR i% = 2 TO 10\n    SETXY(0, 1000 - i% * 100)\n    COLOUR(BLACK)\n    PRINT(STR$(i% * 10) + "%", 4, 20)\n    MOVEXY(LEFTMARGIN%, TOPMARGIN%)\n    COLOUR(LIGHTGREY)\n    DRAWXY(1000 - LEFTMARGIN%, 0)\n  NEXT\n  SETXY(LEFTMARGIN%, TOPMARGIN%)\n  COLOUR(BLACK)\n  DRAWXY(0, 800)\n  DRAWXY(1000 - LEFTMARGIN%, 0)\n  COLOUR(RED)\n  SETXY(50, 880)\n  PRINT("Proportion of Females in Population, over 900 Generations", 4, 25)\n  SETXY(50, 930)\n  PRINT("with Female Offspring Probability genes initially set 90%+", 4, 25)\nENDPROC\n\nDEF PROCgraph\n  LOCAL females%, n%\n  females% = 0\n  FOR n% = 0 TO POPULATION%\n    IF female%(n%) THEN INC(females%)\n  NEXT\n  COLOUR(RED)\n  SETXY(LEFTMARGIN% + generation%, TOPMARGIN% + 1000 - females%)\n  IF generation% > 0 THEN POLYLINE(2)\nENDPROC\n\nDEF PROCdomating\n  LOCAL a%, b%, replace%\n  LOCAL inheritA%\n  REPEAT\n    a% = RND(POPULATION%)\n    b% = RND(POPULATION%)\n  UNTIL female%(a%) <> female%(b%)\n  inheritA% = (RND(2) = 1)\n  replace% = RND(POPULATION%)\n  IF inheritA% THEN\n    fop%(replace%) = fop%(a%)\n  ELSE\n    fop%(replace%) = fop%(b%)\n  ENDIF\n  female%(replace%) = fop%(replace%) > RND(1000) - 1\n  fop%(replace%) = fop%(replace%) + RND(RANDOMVAR% * 20) - RANDOMVAR% * 10\n  fop%(replace%) = MAX(0, MIN(1000, fop%(replace%)))\nENDPROC\n',Flocking:"REM Flocking\n\nCONST NUMBOIDS% = 30\nCONST BOIDRADIUS% = 20\nCONST MAXSPEED% = 50\nCONST BOIDCOLOUR% = LIGHTBROWN\nCONST HALOCOLOUR% = &FFFFFE\nCONST DELAY% = 50\nCONST POSFACTOR% = 50\nCONST VELFACTOR% = 50\nCONST NEARD% = 200\nCONST NEARFACTOR% = 10\nCONST TGTRADIUS% = 2000\nDIM boidx%(NUMBOIDS%)\nDIM boidy%(NUMBOIDS%)\nDIM boidvx%(NUMBOIDS%)\nDIM boidvy%(NUMBOIDS%)\nCANVAS(-2500, -2500, 5000, 5000)\nNOUPDATE\nPROCsetup\nBLANK(WHITE)\nPROCdraw(TRUE)\ncycle% = 0\nREPEAT\n  PROCaverages\n  PROCsettarget\n  NOUPDATE\n  PROCdraw(FALSE)\n  FOR n% = 0 TO NUMBOIDS%\n    PROCmove(n%)\n  NEXT\n  PROCdraw(TRUE)\n  UPDATE\n  PAUSE(DELAY%)\nUNTIL 0 = 1\nEND\n\nDEF PROCsetup\n  LOCAL n%\n  PENUP\n  COLOUR(HALOCOLOUR%)\n  FOR n% = 0 TO NUMBOIDS%\n    REPEAT\n      boidx%(n%) = RND(5000 - 2 * BOIDRADIUS%) + BOIDRADIUS% - 1\n      boidy%(n%) = RND(5000 - 2 * BOIDRADIUS%) + BOIDRADIUS% - 1\n    UNTIL PIXCOL(boidx%(n%), boidy%(n%)) = WHITE\n    boidvx%(n%) = RND(MAXSPEED% * 2 + 1) - MAXSPEED% - 1\n    boidvy%(n%) = RND(MAXSPEED% * 2 + 1) - MAXSPEED% - 1\n    SETXY(boidx%(n%), boidy%(n%))\n    BLOT(2 * BOIDRADIUS%)\n  NEXT\nENDPROC\n\nDEF PROCdraw(positive%)\n  LOCAL n%\n  IF positive% THEN\n    COLOUR(BOIDCOLOUR%)\n    radius% = BOIDRADIUS%\n  ELSE\n    COLOUR(WHITE)\n    radius% = BOIDRADIUS% + 10\n  ENDIF\n  FOR n% = 0 TO NUMBOIDS%\n    SETXY(boidx%(n%), boidy%(n%))\n    BLOT(radius%)\n  NEXT\nENDPROC\n\nDEF PROCaverages\n  LOCAL totalx%, totaly%, totalxv%, totalyv%\n  LOCAL n%\n  totalx% = 0\n  totaly% = 0\n  totalvx% = 0\n  totalvy% = 0\n  FOR n% = 0 TO NUMBOIDS%\n    totalx% = totalx% + boidx%(n%)\n    totaly% = totaly% + boidy%(n%)\n    totalvx% = totalvx% + boidvx%(n%)\n    totalvy% = totalvy% + boidvy%(n%)\n  NEXT\n  avgx% = totalx% / NUMBOIDS%\n  avgy% = totaly% / NUMBOIDS%\n  avgvx% = totalvx% / NUMBOIDS%\n  avgvy% = totalvy% / NUMBOIDS%\nENDPROC\n\nDEF PROCsettarget\n  IF cycle% MOD 100 = 0 THEN\n    tgtangvel% = RND(7) - 2\n  ENDIF\n  tgtx% = DIVMULT(SIN(cycle% * tgtangvel%, 1, 1000), 1000, TGTRADIUS%)\n  tgty% = -DIVMULT(COS(cycle% * tgtangvel%, 1, 1000), 1000, TGTRADIUS%)\n  INC(cycle%)\nENDPROC\n\nDEF PROCmove(b%)\n  LOCAL n%\n  LOCAL distx%, disty%, speed%\n  boidvx%(b%) = boidvx%(b%) + (avgx% - boidx%(b%)) / POSFACTOR% + (avgvx% - boidvx%(b%)) / VELFACTOR%\n  boidvy%(b%) = boidvy%(b%) + (avgy% - boidy%(b%)) / POSFACTOR% + (avgvy% - boidvy%(b%)) / VELFACTOR%\n  FOR n% = 0 TO NUMBOIDS%\n    IF n% <> b% THEN\n      distx% = boidx%(n%) - boidx%(b%)\n      disty% = boidy%(n%) - boidy%(b%)\n      IF HYPOT(distx%, disty%, 1) < NEARD% THEN\n        boidvx%(b%) = boidvx%(b%) - SGN(distx%) * (NEARD% - ABS(distx%)) / NEARFACTOR%\n        boidvy%(b%) = boidvy%(b%) - SGN(disty%) * (NEARD% - ABS(disty%)) / NEARFACTOR%\n      ENDIF\n    ENDIF\n  NEXT\n  IF RND(10) = 1 THEN\n    boidvx%(b%) = tgtx% - boidx%(b%)\n    boidvy%(b%) = tgty% - boidy%(b%)\n  ENDIF\n  speed% = HYPOT(boidvx%(b%), boidvy%(b%), 1)\n  IF speed% > MAXSPEED% THEN\n    boidvx%(b%) = DIVMULT(boidvx%(b%), speed%, MAXSPEED%)\n    boidvy%(b%) = DIVMULT(boidvy%(b%), speed%, MAXSPEED%)\n  ENDIF\n  boidx%(b%) = boidx%(b%) + boidvx%(b%)\n  boidy%(b%) = boidy%(b%) + boidvy%(b%)\nENDPROC\n",Roads:"REM Roads\n\nCONST MAXNODES% = 500\nCONST SUFFNODES% = 400\nCONST MAXEDGES% = 1000\nCONST MINDISTANCE% = 40\nCONST NODERADIUS% = 6\nCONST ROADRADIUS% = 4\nCONST NORMALROAD% = BLACK\nCONST LINKROAD% = BLUE\nDIM nodex%(MAXNODES%)\nDIM nodey%(MAXNODES%)\nDIM nodedist%(MAXNODES%)\nDIM edge1%(MAXEDGES%)\nDIM edge2%(MAXEDGES%)\nDIM edgelen%(MAXEDGES%)\nTHICKNESS(6)\nnumnodes% = 0\nnumedges% = 0\nWHILE numnodes% < SUFFNODES%\n  INC(numnodes%)\n  REPEAT\n    nodex%(numnodes%) = RND(1000)\n    nodey%(numnodes%) = RND(1000)\n    m% = FNclosest(numnodes%)\n  UNTIL m% >= 0\n  PROCmarknode(numnodes%, RED, NODERADIUS%)\n  IF m% > 0 THEN\n    PROClinkup(m%, numnodes%)\n  ENDIF\nENDWHILE\nFOR m% = 1 TO numnodes%\n  PROCjoinup(m%)\nNEXT\nEND\n\nDEF FNclosest(n%)\n  LOCAL i%, min%, d%\n  result% = 0\n  min% = MAXINT\n  FOR i% = 1 TO numnodes%\n    IF i% <> n% THEN\n      d% = HYPOT(nodex%(n%) - nodex%(i%), nodey%(n%) - nodey%(i%), 1)\n      IF d% < min% THEN\n        min% = d%\n        result% = i%\n      ENDIF\n    ENDIF\n  NEXT\n  IF min% < MINDISTANCE% THEN\n    result% = -1\n  ENDIF\n= result%\n\nDEF PROCmarknode(n%, col%, rad%)\n  SETXY(nodex%(n%), nodey%(n%))\n  COLOUR(col%)\n  BLOT(rad%)\nENDPROC\n\nDEF PROCmakeedge(nodea%, nodeb%, col%)\n  INC(numedges%)\n  edge1%(numedges%) = nodea%\n  edge2%(numedges%) = nodeb%\n  edgelen%(numedges%) = HYPOT(nodex%(nodea%) - nodex%(nodeb%), nodey%(nodea%) - nodey%(nodeb%), 1)\n  SETXY(nodex%(nodea%), nodey%(nodea%))\n  COLOUR(col%)\n  SETXY(nodex%(nodeb%), nodey%(nodeb%))\n  POLYLINE(2)\nENDPROC\n\nDEF PROClinkup(nodea%, nodeb%)\n  IF HYPOT(nodex%(nodea%) - nodex%(nodeb%), nodey%(nodea%) - nodey%(nodeb%), 1) < MINDISTANCE% * 2 THEN\n    PROCmakeedge(nodea%, nodeb%, NORMALROAD%)\n  ELSE\n    INC(numnodes%)\n    nodex%(numnodes%) = (nodex%(nodea%) + nodex%(nodeb%)) / 2\n    nodey%(numnodes%) = (nodey%(nodea%) + nodey%(nodeb%)) / 2\n    PROCmarknode(numnodes%, CYAN, ROADRADIUS%)\n    PROClinkup(nodea%, numnodes%)\n    PROClinkup(numnodes%, nodeb%)\n  ENDIF\nENDPROC\n\nDEF PROCjoinup(thisnode%)\n  LOCAL i%, j%, dist%, continue%\n  FOR i% = 1 TO numnodes%\n    nodedist%(i%) = MAXINT\n  NEXT\n  nodedist%(thisnode%) = 0\n  continue% = TRUE\n  WHILE continue%\n    continue% = FALSE\n    FOR i% = 1 TO numedges%\n      IF nodedist%(edge1%(i%)) < MAXINT THEN\n        IF nodedist%(edge1%(i%)) + edgelen%(i%) < nodedist%(edge2%(i%)) THEN\n          nodedist%(edge2%(i%)) = nodedist%(edge1%(i%)) + edgelen%(i%)\n          continue% = TRUE\n        ENDIF\n      ENDIF\n      IF nodedist%(edge2%(i%)) < MAXINT THEN\n        IF nodedist%(edge2%(i%)) + edgelen%(i%) < nodedist%(edge1%(i%)) THEN\n          nodedist%(edge1%(i%)) = nodedist%(edge2%(i%)) + edgelen%(i%)\n          continue% = TRUE\n        ENDIF\n      ENDIF\n    NEXT\n  ENDWHILE\n  i% = 0\n  continue% = TRUE\n  WHILE (i% < numnodes%) AND continue%\n    INC(i%)\n    dist% = HYPOT(nodex%(i%) - nodex%(thisnode%), nodey%(i%) - nodey%(thisnode%), 1)\n    IF (i% <> thisnode%) AND (nodedist%(i%) > 1000) AND (dist% < MINDISTANCE% * 2) THEN\n      PROCmakeedge(thisnode%, i%, LINKROAD%)\n      continue% = FALSE\n    ENDIF\n  ENDWHILE\nENDPROC\n",Schelling:"REM Schelling\n\nCONST WIDTH% = 50\nCONST HEIGHT% = 50\nCONST EMPTY% = GREEN\nCANVAS(-1, -1, WIDTH% + 2, HEIGHT% + 2)\nRESOLUTION(WIDTH% + 2, HEIGHT% + 2)\nNOUPDATE\nBLANK(EMPTY%)\nFOR i% = 0 TO WIDTH% - 1\n  FOR j% = 0 TO WIDTH% - 1\n    test% = RND(25)\n    IF test% = 1 THEN\n      PIXSET(i%, j%, EMPTY%)\n    ELSE\n      IF (i% + j%) MOD 2 = 0 THEN PIXSET(i%, j%, RED) ELSE PIXSET(i%, j%, BLUE)\n    ENDIF\n  NEXT\nNEXT\nPAUSE(2000)\nWHILE ?KEY <> \\ESCAPE\n  NOUPDATE\n  REPEAT\n    tryi% = RND(WIDTH%) - 1\n    tryj% = RND(HEIGHT%) - 1\n    this% = PIXCOL(tryi%, tryj%)\n  UNTIL (this% <> EMPTY%) AND (NOT(FNhappy(tryi%, tryj%, this%)))\n  PIXSET(tryi%, tryj%, EMPTY%)\n  REPEAT\n    tryi% = RND(WIDTH%) - 1\n    tryj% = RND(HEIGHT%) - 1\n  UNTIL (PIXCOL(tryi%, tryj%) = EMPTY%) AND FNhappy(tryi%, tryj%, this%)\n  PIXSET(tryi%, tryj%, this%)\n  UPDATE\nENDWHILE\nEND\n\nDEF FNhappy(x%, y%, c%)\n  LOCAL like%, unlike%, neighbour%, i%, j%\n  like% = 0\n  unlike% = 0\n  FOR i% = -1 TO 1\n    FOR j% = -1 TO 1\n      IF (i% <> 0) OR (j% <> 0) THEN\n        neighbour% = PIXCOL(x% + i%, y% + j%)\n        IF neighbour% <> EMPTY% THEN\n          IF neighbour% = c% THEN INC(like%) ELSE INC(unlike%)\n        ENDIF\n      ENDIF\n    NEXT\n  NEXT\n= (like% >= unlike% - 1)\n",IteratedPD:"REM IteratedPD\n\nCONST WIDTH% = 50\nCONST HEIGHT% = 50\nCONST N% = 10\nDIM util%(13)\nCANVAS(0, 0, WIDTH%, HEIGHT%)\nRESOLUTION(WIDTH%, HEIGHT%)\nPROCsetutilities\nNOUPDATE\nFOR i% = 0 TO WIDTH% - 1\n  FOR j% = 0 TO HEIGHT% - 1\n    IF RND(50) = 1 THEN\n      PIXSET(i%, j%, &0000FC)\n    ELSE\n      IF RND(7) = 1 THEN\n        PIXSET(i%, j%, &00FF02)\n      ELSE\n        PIXSET(i%, j%, &FF0001)\n      ENDIF\n    ENDIF\n  NEXT\nNEXT\nPAUSE(1000)\nWHILE ?KEY <> \\ESCAPE\n  TIMESET(0)\n  NOUPDATE\n  FOR i% = 0 TO WIDTH% - 1\n    FOR j% = 0 TO HEIGHT% - 1\n      PROCutility(i%, j%)\n    NEXT\n  NEXT\n  FOR i% = 0 TO WIDTH% - 1\n    FOR j% = 0 TO HEIGHT% - 1\n      PROCpickbest(i%, j%)\n    NEXT\n  NEXT\n  FOR i% = 0 TO WIDTH% - 1\n    FOR j% = 0 TO HEIGHT% - 1\n      PROCfixbest(i%, j%)\n    NEXT\n  NEXT\n  UPDATE\n  NOUPDATE\nENDWHILE\nEND\n\nDEF PROCutility(x%, y%)\n  LOCAL this%, utot%, i%, j%, flag%\n  this% = PIXCOL(x%, y%) AND &7\n  utot% = 0\n  FOR i% = -1 TO 1\n    FOR j% = -1 TO 1\n      IF (i% <> 0) OR (j% <> 0) THEN\n        flag% = this% OR (PIXCOL((x% + WIDTH% + i%) MOD WIDTH%, (y% + HEIGHT% + j%) MOD HEIGHT%)) AND &F\n        utot% = utot% + util%(flag% - 1)\n      ENDIF\n    NEXT\n  NEXT\n  PIXSET(x%, y%, utot% * &100 + PIXCOL(x%, y%) AND &F)\nENDPROC\n\nDEF PROCpickbest(x%, y%)\n  LOCAL i%, j%, bestsofar%\n  bestsofar% = PIXCOL(x%, y%)\n  IF RND(5) >= 0 THEN\n    FOR i% = -1 TO 1\n      FOR j% = -1 TO 1\n        thispix% = PIXCOL((x% + WIDTH% + i%) MOD WIDTH%, (y% + HEIGHT% + j%) MOD HEIGHT%)\n        IF (thispix% AND &FFFF00) > (bestsofar% AND &FFFF00) THEN\n          bestsofar% = thispix%\n        ENDIF\n      NEXT\n    NEXT\n  ENDIF\n  PIXSET(x%, y%, (PIXCOL(x%, y%) AND &FFFF0F) + (bestsofar% AND &F) * &10)\nENDPROC\n\nDEF PROCfixbest(x%, y%)\n  IF (PIXCOL(x%, y%) AND &10) > 0 THEN\n    PIXSET(x%, y%, &FF0001)\n  ELSE\n    IF (PIXCOL(x%, y%) AND &20) > 0 THEN\n      PIXSET(x%, y%, &00FF02)\n    ELSE\n      PIXSET(x%, y%, &0000FC)\n    ENDIF\n  ENDIF\nENDPROC\n\nDEF PROCsetutilities\n  util%(0) = 3 * N%\n  util%(1) = 3 * N%\n  util%(2) = 3 * N%\n  util%(4) = 5 * N%\n  util%(5) = N% + 4\n  util%(11) = N%\n  util%(12) = 0\n  util%(13) = N% - 1\nENDPROC\n",Interference:"REM Interference\n\nREM not yet available in Turtle BASIC\n",TwoSlits:"REM TwoSlits\n\nREM not yet available in Turtle BASIC\n",WaveSuperposer:"REM WaveSuperposer\n\nREM not available in Turtle BASIC\n",RecursionFactory:"REM RecursionFactory\n\nCONST NUMSIDES% = 6\nCONST INITSIZE% = 240\nCONST SHRINK% = 40\nCONST RANGLE% = 180\nCONST POLYGAP% = 0\nCONST LEVELS% = 5\nCONST SLOWDRAW% = 3\nCONST MODE% = 1\nCONST FIRSTCOL% = 1\nCONST COLINC% = 2\nCONST MINTHICK% = 2\nCONST ADDTHICK% = 6\nCONST CIRCSIZE% = 60\nBLANK(BLACK)\nIF 180 MOD NUMSIDES% = 0 THEN\n  halfangle% = 90 - (180 / NUMSIDES%)\n  slowlev% = LEVELS% + 1 - SLOWDRAW%\n  IF slowlev% > LEVELS% - 1 THEN slowlev% = LEVELS% - 1\n  MOVEXY(0, INITSIZE%)\n  PROCrecurse(1, INITSIZE%, LEVELS%, FIRSTCOL%)\nENDIF\nEND\n\nDEF PROCrecurse(flag%, size%, depth%, col%)\n  LOCAL storex%, storey%, sides%\n  IF depth% > 0 THEN\n    IF depth% < slowlev% THEN NOUPDATE ELSE UPDATE\n    IF flag% = 1 THEN\n      FOR flag% = 2 TO 3\n        storex% = turtx%\n        storey% = turty%\n        FOR sides% = 1 TO NUMSIDES%\n          PROCrecurse(flag%, size%, depth%, col%)\n        NEXT\n        turtx% = storex%\n        turty% = storey%\n      NEXT\n    ELSE\n      PENUP\n      IF flag% = 2 THEN\n        COLOUR(RGB(col%))\n        THICKNESS(MINTHICK% + ((depth% - 1) * ADDTHICK%) / 12)\n        IF MODE% = 1 THEN\n          PENDOWN\n        ELSE\n          IF MODE% = 2 THEN\n            BLOT(size% * CIRCSIZE% / 120)\n          ELSE\n            CIRCLE(size% * CIRCSIZE% / 120)\n          ENDIF\n        ENDIF\n      ENDIF\n      LEFT(halfangle%)\n      FORWARD(size%)\n      RIGHT(180 - halfangle% + RANGLE%)\n      IF flag% = 3 THEN\n        FORWARD(size% * POLYGAP% / 120)\n        PROCrecurse(1, (size% * SHRINK%) / 120, depth% - 1, ((col% + COLINC% - 1) MOD 7) + 1)\n        BACK(size% * POLYGAP% / 120)\n      ENDIF\n      LEFT(RANGLE%)\n    ENDIF\n  ENDIF\nENDPROC\n",RecursiveTree:"REM RecursiveTree\n\nBLANK(BLACK)\nMOVEXY(0, 400)\nCOLOUR(EMERALD)\nPROCrdraw(180, 10)\nEND\n\nDEF PROCrdraw(dist%, level%)\n  THICKNESS(level% * 2)\n  FORWARD(dist%)\n  LEFT(30)\n  IF level% > 0 THEN PROCrdraw(3 * dist% / 4, level% - 1)\n  RIGHT(30)\n  THICKNESS(level% * 2)\n  FORWARD(dist% / 3)\n  RIGHT(20)\n  IF level% > 0 THEN PROCrdraw(3 * dist% / 4, level% - 1)\n  LEFT(20)\n  BACK(dist% / 3)\n  BACK(dist%)\nENDPROC\n",KochSnowflake:"REM KochSnowflake\n\nBLANK(BLACK)\nMOVEXY(0, 430)\nLEFT(30)\nFOR count% = 1 TO 3\n  COLOUR(RGB(count% + 20))\n  PROCkdraw(729, 4)\n  RIGHT(120)\nNEXT\nEND\n\nDEF PROCkdraw(dist%, level%)\n  IF level% = 0 THEN\n    FORWARD(dist%)\n  ELSE\n    PROCkdraw(dist% / 3, level% - 1)\n    LEFT(60)\n    PROCkdraw(dist% / 3, level% - 1)\n    RIGHT(120)\n    PROCkdraw(dist% / 3, level% - 1)\n    LEFT(60)\n    PROCkdraw(dist% / 3, level% - 1)\n  ENDIF\nENDPROC\n",SquareKoch:"REM SquareKoch\n\nCONST MAXLEVEL% = 5\nBLANK(BLACK)\nMOVEXY(0, 486)\nLEFT(45)\nFOR count% = 1 TO 4\n  COLOUR(RGB(count% + 20))\n  PROCkdraw(729, MAXLEVEL%)\n  RIGHT(90)\nNEXT\nMOVEXY(0, -323)\nFOR count% = 1 TO 4\n  COLOUR(RGB(count% + 20))\n  PROCkdraw(243, MAXLEVEL% - 1)\n  RIGHT(90)\nNEXT\nEND\n\nDEF PROCkdraw(dist%, level%)\n  IF level% = 0 THEN\n    FORWARD(dist%)\n  ELSE\n    PROCkdraw(dist% / 3, level% - 1)\n    LEFT(90)\n    PROCkdraw(dist% / 3, level% - 1)\n    RIGHT(90)\n    PROCkdraw(dist% / 3, level% - 1)\n    RIGHT(90)\n    PROCkdraw(dist% / 3, level% - 1)\n    LEFT(90)\n    PROCkdraw(dist% / 3, level% - 1)\n  ENDIF\nENDPROC\n",Sierpinski:"REM Sierpinski\n\nBLANK(CREAM)\nTHICKNESS(1)\nPROCtriangle(400, 138, 843, 650, 179, 778)\nEND\n\nDEF PROCtriangle(x1%, y1%, x2%, y2%, x3%, y3%)\n  LOCAL x12%, y12%, x23%, y23%, x31%, y31%\n  SETXY(x1%, y1%)\n  SETXY(x2%, y2%)\n  SETXY(x3%, y3%)\n  SETXY(x1%, y1%)\n  COLOUR(BLACK)\n  POLYLINE(4)\n  IF HYPOT(x2% - x1%, y2% - y1%, 1) > 3 THEN\n    x12% = (x1% + x2%) / 2\n    y12% = (y1% + y2%) / 2\n    x23% = (x2% + x3%) / 2\n    y23% = (y2% + y3%) / 2\n    x31% = (x3% + x1%) / 2\n    y31% = (y3% + y1%) / 2\n    SETXY(x12%, y12%)\n    SETXY(x23%, y23%)\n    SETXY(x31%, y31%)\n    COLOUR(WHITE)\n    POLYGON(3)\n    PROCtriangle(x1%, y1%, x12%, y12%, x31%, y31%)\n    PROCtriangle(x2%, y2%, x23%, y23%, x12%, y12%)\n    PROCtriangle(x3%, y3%, x31%, y31%, x23%, y23%)\n  ENDIF\nENDPROC\n",SierpinskiDots:"REM SierpinskiDots\n\nDIM x%(2)\nDIM y%(2)\nx%(0) = 400\ny%(0) = 138\nx%(1) = 843\ny%(1) = 650\nx%(2) = 179\ny%(2) = 778\nthisx% = RND(200) + 399\nthisy% = RND(200) + 399\nREPEAT\n  thisc% = RND(3) - 1\n  thisx% = (thisx% + x%(thisc%)) / 2\n  thisy% = (thisy% + y%(thisc%)) / 2\n  PIXSET(thisx%, thisy%, PURPLE)\nUNTIL 0 = 1\nEND\n",IFSBackground:"REM IFSBackground\n\nCONST XLEFT% = 0\nCONST XRIGHT% = 999\nCONST YTOP% = 0\nCONST YBOTTOM% = 999\nCONST GRIDSCALE% = 5\nCONST GRIDTHICK% = 64\nCANVAS(XLEFT%, YTOP%, XRIGHT% - XLEFT% + 1, YBOTTOM% - YTOP% + 1)\nRESOLUTION(XRIGHT% - XLEFT% + 1, YBOTTOM% - YTOP% + 1)\nPROCbackground\nEND\n\nDEF PROCbackground\n  LOCAL x%, y%\n  LOCAL cx%, cy%, r%, g%, b%\n  THICKNESS(GRIDTHICK%)\n  COLOUR(DARKGREY)\n  FOR x% = 1 TO GRIDSCALE% - 1\n    SETXY(XLEFT% + DIVMULT(XRIGHT% - XLEFT%, GRIDSCALE%, x%), YTOP%)\n    DRAWXY(0, YBOTTOM% - YTOP%)\n  NEXT\n  FOR y% = 1 TO GRIDSCALE% - 1\n    SETXY(XLEFT% + GRIDTHICK% / 2, YTOP% + DIVMULT(YBOTTOM% - YTOP%, GRIDSCALE%, y%))\n    DRAWXY(XRIGHT% - XLEFT% - GRIDTHICK%, 0)\n  NEXT\n  COLOUR(BLACK)\n  SETXY(XLEFT%, YTOP%)\n  DRAWXY(XRIGHT% - XLEFT%, 0)\n  DRAWXY(0, YBOTTOM% - YTOP%)\n  DRAWXY(XLEFT% - XRIGHT%, 0)\n  DRAWXY(0, YTOP% - YBOTTOM%)\n  FOR x% = 0 TO GRIDSCALE% - 1\n    FOR y% = 0 TO GRIDSCALE% - 1\n      cx% = XLEFT% + DIVMULT(XRIGHT% - XLEFT%, GRIDSCALE%, x%) + GRIDTHICK%\n      cy% = YTOP% + DIVMULT(YBOTTOM% - YTOP%, GRIDSCALE%, y%) + GRIDTHICK%\n      r% = DIVMULT(255, GRIDSCALE% - 1, x%)\n      g% = DIVMULT(255, GRIDSCALE% - 1, y%)\n      b% = DIVMULT(255, 2 * GRIDSCALE% - 2, 2 * GRIDSCALE% - 2 - x% - y%)\n      RECOLOUR(cx%, cy%, (r% * &10000) + (g% * &100) + (b% * &1))\n    NEXT\n  NEXT\nENDPROC\n",IFSColour:'REM IFSColour\n\nCONST MAXMAPPINGS% = 4\nDIM mapxx%(MAXMAPPINGS%)\nDIM mapxy%(MAXMAPPINGS%)\nDIM mapxc%(MAXMAPPINGS%)\nDIM mapyx%(MAXMAPPINGS%)\nDIM mapyy%(MAXMAPPINGS%)\nDIM mapyc%(MAXMAPPINGS%)\nPROCstartprompt\nPROCsetscale\nCANVAS(xl%, yt%, xr% - xl% + 1, yb% - yt% + 1)\nRESOLUTION(xr% - xl% + 1, yb% - yt% + 1)\nPROCbackground\nFOR count% = 1 TO mappings%\n  PROCdomap(count%)\nNEXT\nEND\n\nDEF PROCsetsierpinski\n  xleft% = 0\n  xright% = 999\n  ytop% = 0\n  ybottom% = 999\n  scaledown% = 2\n  mappings% = 3\n  gridscale% = 5\n  gridthick% = 64\n  coeffdiv% = 100\n  mapxx%(1) = 50\n  mapyx%(1) = 0\n  mapxy%(1) = 0\n  mapyy%(1) = 50\n  mapxc%(1) = 250\n  mapyc%(1) = 0\n  mapxx%(2) = 50\n  mapyx%(2) = 0\n  mapxy%(2) = 0\n  mapyy%(2) = 50\n  mapxc%(2) = 0\n  mapyc%(2) = 500\n  mapxx%(3) = 50\n  mapyx%(3) = 0\n  mapxy%(3) = 0\n  mapyy%(3) = 50\n  mapxc%(3) = 500\n  mapyc%(3) = 500\nENDPROC\n\nDEF PROCsetbarnsley\n  xleft% = -236\n  xright% = 263\n  ytop% = 1\n  ybottom% = 1000\n  scaledown% = 2\n  mappings% = 4\n  gridscale% = 5\n  gridthick% = 32\n  coeffdiv% = 100\n  mapxx%(1) = 0\n  mapyx%(1) = 0\n  mapxy%(1) = 0\n  mapyy%(1) = 16\n  mapxc%(1) = 0\n  mapyc%(1) = 0\n  mapxx%(2) = 85\n  mapyx%(2) = -4\n  mapxy%(2) = 4\n  mapyy%(2) = 85\n  mapxc%(2) = 0\n  mapyc%(2) = 160\n  mapxx%(3) = 20\n  mapyx%(3) = 23\n  mapxy%(3) = -26\n  mapyy%(3) = 22\n  mapxc%(3) = 0\n  mapyc%(3) = 160\n  mapxx%(4) = -15\n  mapyx%(4) = 26\n  mapxy%(4) = 28\n  mapyy%(4) = 24\n  mapxc%(4) = 0\n  mapyc%(4) = 44\nENDPROC\n\nDEF PROCsetdragon\n  xleft% = 0\n  xright% = 999\n  ytop% = 0\n  ybottom% = 999\n  scaledown% = 4\n  mappings% = 3\n  gridscale% = 5\n  gridthick% = 64\n  coeffdiv% = 1000\n  mapxx%(1) = 0\n  mapyx%(1) = -577\n  mapxy%(1) = 577\n  mapyy%(1) = 0\n  mapxc%(1) = 95\n  mapyc%(1) = 589\n  mapxx%(2) = 0\n  mapyx%(2) = -577\n  mapxy%(2) = 577\n  mapyy%(2) = 0\n  mapxc%(2) = 441\n  mapyc%(2) = 789\n  mapxx%(3) = 0\n  mapyx%(3) = -577\n  mapxy%(3) = 577\n  mapyy%(3) = 0\n  mapxc%(3) = 95\n  mapyc%(3) = 989\nENDPROC\n\nDEF PROCstartprompt\n  OUTPUT(TRUE, CREAM, TRUE)\n  KEYECHO(FALSE)\n  WRITELN("ITERATED FUNCTIONS ON COLOURED BACKGROUND")\n  WRITELN("")\n  WRITE("Select Sierpinski, Barnsley fern, or Dragon curve? (S/B/D) ")\n  KEYECHO(FALSE)\n  REPEAT\n  UNTIL (ABS(?KEY) = \\s) OR (ABS(?KEY) = \\b) OR (ABS(?KEY) = \\d)\n  WRITELN(CHR$(ABS(?KEY)))\n  IF ABS(?KEY) = \\s THEN\n    WRITELN("Sierpinski mappings will be used")\n    PROCsetsierpinski\n  ELSE\n    IF ABS(?KEY) = \\b THEN\n      WRITELN("Barnsley fern mappings will be used")\n      PROCsetbarnsley\n    ELSE\n      WRITELN("Dragon curve mappings will be used")\n      PROCsetdragon\n    ENDIF\n  ENDIF\n  OUTPUT(FALSE, WHITE, FALSE)\nENDPROC\n\nDEF PROCsetscale\n  xl% = xleft% / scaledown%\n  xr% = xright% / scaledown%\n  yt% = ytop% / scaledown%\n  yb% = ybottom% / scaledown%\n  FOR i% = 1 TO mappings%\n    mapxc%(i%) = mapxc%(i%) / scaledown%\n    mapyc%(i%) = mapyc%(i%) / scaledown%\n  NEXT\n  gt% = gridthick% / scaledown%\nENDPROC\n\nDEF PROCbackground\n  LOCAL x%, y%\n  LOCAL cx%, cy%, r%, g%, b%\n  THICKNESS(gt%)\n  COLOUR(DARKGREY)\n  FOR x% = 1 TO gridscale% - 1\n    SETXY(xl% + DIVMULT(xr% - xl%, gridscale%, x%), yt%)\n    DRAWXY(0, yb% - yt%)\n  NEXT\n  FOR y% = 1 TO gridscale% - 1\n    SETXY(xl% + gt% / 2, yt% + DIVMULT(yb% - yt%, gridscale%, y%))\n    DRAWXY(xr% - xl% - gt%, 0)\n  NEXT\n  COLOUR(BLACK)\n  SETXY(xl%, yt%)\n  DRAWXY(xr% - xl%, 0)\n  DRAWXY(0, yb% - yt%)\n  DRAWXY(xl% - xr%, 0)\n  DRAWXY(0, yt% - yb%)\n  FOR x% = 0 TO gridscale% - 1\n    FOR y% = 0 TO gridscale% - 1\n      cx% = xl% + DIVMULT(xr% - xl%, gridscale%, x%) + gt%\n      cy% = yt% + DIVMULT(yb% - yt%, gridscale%, y%) + gt%\n      r% = DIVMULT(255, gridscale% - 1, x%)\n      g% = DIVMULT(255, gridscale% - 1, y%)\n      b% = DIVMULT(255, 2 * gridscale% - 2, 2 * gridscale% - 2 - x% - y%)\n      RECOLOUR(cx%, cy%, (r% * &10000) + (g% * &100) + (b% * &1))\n    NEXT\n  NEXT\nENDPROC\n\nDEF PROCmap(a%, x%, y%, RETURN newx%, RETURN newy%)\n  newx% = DIVMULT(x%, coeffdiv%, mapxx%(a%)) + DIVMULT(y%, coeffdiv%, mapxy%(a%)) + mapxc%(a%)\n  newy% = DIVMULT(x%, coeffdiv%, mapyx%(a%)) + DIVMULT(y%, coeffdiv%, mapyy%(a%)) + mapyc%(a%)\nENDPROC\n\nDEF PROCdomap(mapnum%)\n  LOCAL x%, y%, newx%, newy%\n  NOUPDATE\n  FOR y% = yt% TO yb%\n    FOR x% = xl% TO xr%\n      PROCmap(mapnum%, x%, y%, newx%, newy%)\n      PIXSET(newx%, newy%, PIXCOL(x%, y%))\n    NEXT\n  NEXT\n  UPDATE\nENDPROC\n',IFSDemonstrator:'REM IFSDemonstrator\n\nCONST MAXMAPPINGS% = 4\nCONST PAUSEVAL% = 2000\nDIM mapxx%(MAXMAPPINGS%)\nDIM mapxy%(MAXMAPPINGS%)\nDIM mapxc%(MAXMAPPINGS%)\nDIM mapyx%(MAXMAPPINGS%)\nDIM mapyy%(MAXMAPPINGS%)\nDIM mapyc%(MAXMAPPINGS%)\nPROCstartprompt\nPROCsetscale\nCANVAS(xl%, yt%, xr% - xl% + 1, yb% - yt% + 1)\nRESOLUTION(xr% - xl% + 1, yb% - yt% + 1)\nIF seedpixel% THEN\n  PIXSET(seedx%, seedy%, live%)\nELSE\n  BLANK(live%)\nENDIF\niteration% = 0\nTIMESET(0)\nREPEAT\n  starttime% = TIME\n  INC(iteration%)\n  WRITELN("")\n  WRITELN("Iteration " + STR$(iteration%) + ":")\n  numborn% = 0\n  FOR count% = 1 TO mappings%\n    PROCdomap(count%)\n  NEXT\n  numkilled% = 0\n  PROCcleanup\n  WRITELN("  " + STR$(numborn%) + " pixels born " + STR$(numkilled%) + " pixels killed")\n  WRITELN("  (took " + STR$((TIME - starttime%) / 1000) + " seconds - total " + STR$(TIME / 1000) + " seconds so far)")\n  IF (numborn% + numkilled% > 0) AND (PAUSEVAL% >= 1000) THEN\n    WRITE("  (now pausing " + QSTR$(PAUSEVAL%, 1000, 1) + " seconds to allow halting if desired ...)")\n    PAUSE(PAUSEVAL%)\n    WRITELN("")\n  ENDIF\nUNTIL numborn% + numkilled% = 0\nWRITELN("FINISH - fixed point of iterative mapping has been reached")\nFOR count% = 1 TO mappings%\n  PROCdomap(count%)\nNEXT\nEND\n\nDEF PROCsetsierpinski\n  xleft% = 0\n  xright% = 999\n  ytop% = 0\n  ybottom% = 999\n  scaledown% = 2\n  mappings% = 3\n  live% = BLACK\n  copied% = DARKGREY\n  seedx% = 250\n  seedy% = 0\n  coeffdiv% = 100\n  mapxx%(1) = 50\n  mapyx%(1) = 0\n  mapxy%(1) = 0\n  mapyy%(1) = 50\n  mapxc%(1) = 250\n  mapyc%(1) = 0\n  mapxx%(2) = 50\n  mapyx%(2) = 0\n  mapxy%(2) = 0\n  mapyy%(2) = 50\n  mapxc%(2) = 0\n  mapyc%(2) = 500\n  mapxx%(3) = 50\n  mapyx%(3) = 0\n  mapxy%(3) = 0\n  mapyy%(3) = 50\n  mapxc%(3) = 500\n  mapyc%(3) = 500\nENDPROC\n\nDEF PROCsetbarnsley\n  xleft% = -236\n  xright% = 263\n  ytop% = 1\n  ybottom% = 1000\n  scaledown% = 2\n  mappings% = 4\n  live% = SEAGREEN\n  copied% = EMERALD\n  seedx% = 1\n  seedy% = 1\n  coeffdiv% = 100\n  mapxx%(1) = 0\n  mapyx%(1) = 0\n  mapxy%(1) = 0\n  mapyy%(1) = 16\n  mapxc%(1) = 0\n  mapyc%(1) = 0\n  mapxx%(2) = 85\n  mapyx%(2) = -4\n  mapxy%(2) = 4\n  mapyy%(2) = 85\n  mapxc%(2) = 0\n  mapyc%(2) = 160\n  mapxx%(3) = 20\n  mapyx%(3) = 23\n  mapxy%(3) = -26\n  mapyy%(3) = 22\n  mapxc%(3) = 0\n  mapyc%(3) = 160\n  mapxx%(4) = -15\n  mapyx%(4) = 26\n  mapxy%(4) = 28\n  mapyy%(4) = 24\n  mapxc%(4) = 0\n  mapyc%(4) = 44\nENDPROC\n\nDEF PROCsetdragon\n  xleft% = 0\n  xright% = 999\n  ytop% = 0\n  ybottom% = 999\n  scaledown% = 4\n  mappings% = 3\n  live% = BLACK\n  copied% = SILVER\n  seedx% = 1\n  seedy% = 1\n  coeffdiv% = 1000\n  mapxx%(1) = 0\n  mapyx%(1) = -577\n  mapxy%(1) = 577\n  mapyy%(1) = 0\n  mapxc%(1) = 95\n  mapyc%(1) = 589\n  mapxx%(2) = 0\n  mapyx%(2) = -577\n  mapxy%(2) = 577\n  mapyy%(2) = 0\n  mapxc%(2) = 441\n  mapyc%(2) = 789\n  mapxx%(3) = 0\n  mapyx%(3) = -577\n  mapxy%(3) = 577\n  mapyy%(3) = 0\n  mapxc%(3) = 95\n  mapyc%(3) = 989\nENDPROC\n\nDEF PROCstartprompt\n  OUTPUT(TRUE, CREAM, TRUE)\n  KEYECHO(FALSE)\n  WRITELN("ITERATED FUNCTION SYSTEMS DEMONSTRATOR PROGRAM")\n  WRITELN("")\n  WRITE("Select Barnsley fern, Sierpinski, or Dragon curve? (B/S/D) ")\n  KEYECHO(FALSE)\n  REPEAT\n  UNTIL (ABS(?KEY) = \\b) OR (ABS(?KEY) = \\s) OR (ABS(?KEY) = \\d)\n  WRITELN(CHR$(ABS(?KEY)))\n  IF ABS(?KEY) = \\b THEN\n    WRITELN("Barnsley fern mappings will be used")\n    PROCsetbarnsley\n  ELSE\n    IF ABS(?KEY) = \\s THEN\n      WRITELN("Sierpinski mappings will be used")\n      PROCsetsierpinski\n    ELSE\n      WRITELN("Dragon curve mappings will be used")\n      PROCsetdragon\n    ENDIF\n  ENDIF\n  WRITELN("")\n  WRITE("Start with single Pixel or entire Canvas? (P/C) ")\n  KEYECHO(FALSE)\n  REPEAT\n  UNTIL (ABS(?KEY) = \\p) OR (ABS(?KEY) = \\c)\n  WRITELN(CHR$(ABS(?KEY)))\n  seedpixel% = (ABS(?KEY) = \\p)\n  WRITELN("")\n  WRITE("Use Uniform or Different colours for mappings? (U/D) ")\n  KEYECHO(FALSE)\n  REPEAT\n  UNTIL (ABS(?KEY) = \\u) OR (ABS(?KEY) = \\d)\n  WRITELN(CHR$(ABS(?KEY)))\n  uniform% = (ABS(?KEY) = \\u)\n  OUTPUT(FALSE, WHITE, FALSE)\nENDPROC\n\nDEF PROCsetscale\nLOCAL i%\n  xl% = xleft% / scaledown%\n  xr% = xright% / scaledown%\n  yt% = ytop% / scaledown%\n  yb% = ybottom% / scaledown%\n  FOR i% = 1 TO mappings%\n    mapxc%(i%) = mapxc%(i%) / scaledown%\n    mapyc%(i%) = mapyc%(i%) / scaledown%\n  NEXT\nENDPROC\n\nDEF PROCmap(a%, x%, y%, RETURN newx%, RETURN newy%)\n  newx% = DIVMULT(x%, coeffdiv%, mapxx%(a%)) + DIVMULT(y%, coeffdiv%, mapxy%(a%)) + mapxc%(a%)\n  newy% = DIVMULT(x%, coeffdiv%, mapyx%(a%)) + DIVMULT(y%, coeffdiv%, mapyy%(a%)) + mapyc%(a%)\nENDPROC\n\nDEF PROCdomap(mapnum%)\nLOCAL x%, y%, newx%, newy%\n  NOUPDATE\n  FOR y% = yt% TO yb%\n    FOR x% = xl% TO xr%\n      IF PIXCOL(x%, y%) <> WHITE THEN\n        PROCmap(mapnum%, x%, y%, newx%, newy%)\n        IF PIXCOL(newx%, newy%) = WHITE THEN INC(numborn%)\n        IF uniform% THEN\n          PIXSET(newx%, newy%, copied%)\n        ELSE\n          PIXSET(newx%, newy%, RGB(mapnum%))\n        ENDIF\n      ENDIF\n    NEXT\n  NEXT\n  UPDATE\nENDPROC\n\nDEF PROCcleanup\nLOCAL x%, y%\n  NOUPDATE\n  FOR y% = yt% TO yb%\n    FOR x% = xl% TO xr%\n      IF PIXCOL(x%, y%) = live% THEN\n        PIXSET(x%, y%, WHITE)\n        INC(numkilled%)\n      ELSE\n        IF PIXCOL(x%, y%) <> WHITE THEN\n          PIXSET(x%, y%, live%)\n        ENDIF\n      ENDIF\n    NEXT\n  NEXT\n  UPDATE\nENDPROC\n',Logistic:'REM Logistic\n\nCONST MAXPOP% = 100000\nCONST MAXGEN% = 100\nCONST LMARGIN% = 105\nCONST RMARGIN% = 40\nCONST TMARGIN% = 150\nCONST BMARGIN% = 200\nCONST OUTPUT% = FALSE\nCANVAS(-LMARGIN%, -TMARGIN%, 1000 + LMARGIN% + RMARGIN%, 1000 + TMARGIN% + BMARGIN%)\nRESOLUTION(1000 + LMARGIN% + RMARGIN%, 1000 + TMARGIN% + BMARGIN%)\nTHICKNESS(3)\nr% = 30\nREPEAT\n  NOUPDATE\n  BLANK(WHITE)\n  PROCaxes\n  PROCmenu\n  COLOUR(BLUE)\n  pop% = RND(MAXPOP% - 9) + 9\n  IF OUTPUT% THEN\n    WRITELN("")\n    WRITELN("r = " + QSTR$(r%, 10, 1) + " Initial population = " + STR$(pop%))\n  ENDIF\n  SETXY(0, 1000 - DIVMULT(pop%, MAXPOP%, 1000))\n  FOR gen% = 1 TO MAXGEN%\n    pop% = DIVMULT(pop%, 10 * MAXPOP%, r% * (MAXPOP% - pop%))\n    SETXY(DIVMULT(gen%, MAXGEN%, 1000), 1000 - DIVMULT(pop%, MAXPOP%, 1000))\n    POLYLINE(2)\n    IF OUTPUT% THEN\n      WRITE(STR$(pop%) + " ")\n      IF gen% MOD 10 = 0 THEN WRITELN("")\n    ENDIF\n  NEXT\n  UPDATE\n  REPEAT\n  UNTIL (?LMOUSE > 0) AND (?CLICKY < (100 - TMARGIN%)) AND (?CLICKX >= 130) AND (?CLICKX < 1030)\n  r% = ((?CLICKX - 130) DIV 90) + ((?CLICKY + TMARGIN% + 100) DIV 50) * 10 + 1\nUNTIL 0 = 1\nEND\n\nDEF PROCaxes\n  LOCAL i%\n  COLOUR(BLACK)\n  FOR i% = 0 TO 10\n    SETXY(i% * 100 - 25, 1000)\n    PRINT(STR$(i% * MAXGEN% / 10), 4, 20)\n  NEXT\n  FOR i% = 1 TO 10\n    SETXY(-LMARGIN% + 5, 1000 - i% * 100 - 20)\n    PRINT(STR$(i% * MAXPOP% / 10), 4, 20)\n  NEXT\n  SETXY(0, 0)\n  DRAWXY(0, 1000)\n  DRAWXY(1000, 0)\n  COLOUR(RED)\n  SETXY(0, 1060)\n  PRINT("Population over " + STR$(MAXGEN%) + " generations, where P (population/" + STR$(MAXPOP%) + ")", 4, 25)\n  SETXY(0, 1110)\n  PRINT("is determined by the logistic equation P\' = rP(1 - P), with r = " + QSTR$(r%, 10, 1), 4, 25)\nENDPROC\n\nDEF PROCmenu\n  LOCAL i%\n  COLOUR(BLACK)\n  SETXY(10, -TMARGIN% + 20)\n  PRINT("Set r:", 4, 25)\n  FOR i% = 21 TO 40\n    SETXY(((i% - 1) MOD 10) * 90 + 130, ((i% - 1) DIV 10) * 50 - 100 - TMARGIN%)\n    IF i% = r% THEN\n      BOX(90, 50, RED, TRUE)\n    ELSE\n      BOX(90, 50, CREAM, TRUE)\n    ENDIF\n    PRINT("  " + QSTR$(i%, 10, 1), 4, 25)\n  NEXT\nENDPROC\n',LogisticSpider:'REM LogisticSpider\n\nCONST MAXPOP% = 100000\nCONST MAXGEN% = 100\nCONST LMARGIN% = 60\nCONST RMARGIN% = 40\nCONST TMARGIN% = 150\nCONST BMARGIN% = 200\nCONST OUTPUT% = TRUE\nCANVAS(-LMARGIN%, -TMARGIN%, 1000 + LMARGIN% + RMARGIN%, 1000 + TMARGIN% + BMARGIN%)\nRESOLUTION(1000 + LMARGIN% + RMARGIN%, 1000 + TMARGIN% + BMARGIN%)\nTHICKNESS(3)\nr% = 30\nREPEAT\n  NOUPDATE\n  BLANK(WHITE)\n  PROCaxes\n  PROCmenu\n  PROCcurve\n  pop% = RND(MAXPOP% - 9) + 9\n  IF OUTPUT% THEN\n    WRITELN("")\n    WRITELN("r = " + QSTR$(r%, 10, 1) + " Initial population = " + STR$(pop%))\n  ENDIF\n  SETXY(DIVMULT(pop%, MAXPOP%, 1000), 1000)\n  FOR gen% = 1 TO MAXGEN%\n    pop% = DIVMULT(pop%, 10 * MAXPOP%, r% * (MAXPOP% - pop%))\n    COLOUR(MIXCOLS(LIGHTGREEN, GREEN, MAXGEN% - gen%, gen%))\n    DRAWXY(0, 1000 - DIVMULT(pop%, MAXPOP%, 1000) - turty%)\n    DRAWXY(DIVMULT(pop%, MAXPOP%, 1000) - turtx%, 0)\n    IF OUTPUT% THEN\n      WRITE(STR$(pop%) + " ")\n      IF gen% MOD 10 = 0 THEN WRITELN("")\n    ENDIF\n  NEXT\n  BLOT(3)\n  UPDATE\n  REPEAT\n  UNTIL (?LMOUSE > 0) AND (?CLICKY < (100 - TMARGIN%)) AND (?CLICKX >= 130) AND (?CLICKX < 1030)\n  r% = ((?CLICKX - 130) DIV 90) + ((?CLICKY + TMARGIN% + 100) DIV 50) * 10 + 1\nUNTIL 0 = 1\nEND\n\nDEF PROCaxes\n  LOCAL i%\n  COLOUR(BLACK)\n  FOR i% = 0 TO 10\n    SETXY(i% * 100 - 25, 1000)\n    PRINT(QSTR$(i%, 10, 1), 4, 20)\n  NEXT\n  FOR i% = 1 TO 10\n    SETXY(-LMARGIN% + 5, 1000 - i% * 100 - 20)\n    PRINT(QSTR$(i%, 10, 1), 4, 20)\n  NEXT\n  SETXY(0, 0)\n  DRAWXY(0, 1000)\n  DRAWXY(1000, 0)\n  COLOUR(RED)\n  SETXY(0, 1060)\n  PRINT("Population over " + STR$(MAXGEN%) + " generations, where P (population/" + STR$(MAXPOP%) + ")", 4, 25)\n  SETXY(0, 1110)\n  PRINT("is determined by the logistic equation P\' = rP(1 - P), with r = " + QSTR$(r%, 10, 1), 4, 25)\nENDPROC\n\nDEF PROCmenu\n  LOCAL i%\n  COLOUR(BLACK)\n  SETXY(10, -TMARGIN% + 20)\n  PRINT("Set k:", 4, 25)\n  FOR i% = 21 TO 40\n    SETXY(((i% - 1) MOD 10) * 90 + 130, ((i% - 1) DIV 10) * 50 - 100 - TMARGIN%)\n    IF i% = r% THEN\n      BOX(90, 50, RED, TRUE)\n    ELSE\n      BOX(90, 50, CREAM, TRUE)\n    ENDIF\n    PRINT("  " + QSTR$(i%, 10, 1), 4, 25)\n  NEXT\nENDPROC\n\nDEF PROCcurve\n  LOCAL i%, pop%, nextpop%\n  NOUPDATE\n  COLOUR(BLACK)\n  SETXY(0, 1000)\n  DRAWXY(1000, -1000)\n  COLOUR(BLUE)\n  SETXY(0, 1000)\n  FOR i% = 1 TO 1000\n    pop% = DIVMULT(i%, 1000, MAXPOP%)\n    nextpop% = DIVMULT(pop%, 10 * MAXPOP%, r% * (MAXPOP% - pop%))\n    SETXY(DIVMULT(pop%, MAXPOP%, 1000), 1000 - DIVMULT(nextpop%, MAXPOP%, 1000))\n    POLYLINE(2)\n  NEXT\n  UPDATE\nENDPROC\n',MandelbrotDemo:'REM MandelbrotDemo\n\nCONST MAXCOL% = 40\nPROCstartprompt\nxstart% = DIVMULT(xcentre%, 1000000, scale%) - pixels% / 2\nystart% = DIVMULT(ycentre%, 1000000, scale%) - pixels% / 2\nxfinish% = xstart% + pixels% - 1\nyfinish% = ystart% + pixels% - 1\nWRITELN("Mandelbrot will be plotted over the following real range:")\nWRITE(QSTR$(xstart%, scale%, 4) + " < x < " + QSTR$(xfinish%, scale%, 4) + "    ")\nWRITELN(QSTR$(ystart%, scale%, 4) + " < y < " + QSTR$(yfinish%, scale%, 4))\nWRITELN("Scaling factor: " + STR$(scale%) + "    Image resolution: " + STR$(pixels%) + "x" + STR$(pixels%))\nCANVAS(xstart%, ystart%, pixels%, pixels%)\nRESOLUTION(pixels%, pixels%)\nTIMESET(0)\nFOR a% = xstart% TO xfinish%\n  NOUPDATE\n  FOR b% = ystart% TO yfinish%\n    x% = a%\n    y% = b%\n    iterations% = 0\n    WHILE (HYPOT(x%, y%, 1) < 2 * scale%) AND (iterations% <= MAXCOL%)\n      temp% = DIVMULT(x% + y%, scale%, x% - y%)\n      y% = DIVMULT(2 * x%, scale%, y%) + b%\n      x% = temp% + a%\n      INC(iterations%)\n    ENDWHILE\n    IF iterations% > MAXCOL% THEN\n      PIXSET(a%, b%, BLACK)\n    ELSE\n      PIXSET(a%, b%, RGB(iterations% + 1))\n    ENDIF\n  NEXT\n  UPDATE\nNEXT\nWRITELN("Time taken: " + QSTR$(TIME, 1000, 1) + " seconds.")\nEND\n\nDEF PROCstartprompt\n  OUTPUT(TRUE, CREAM, TRUE)\n  KEYECHO(FALSE)\n  WRITELN("MANDELBROT SET DISPLAY PROGRAM")\n  WRITELN("")\n  WRITE("Select Whole set, or Zoom on mini ""lake"" at -0.1592,-1.0330 (W/Z)")\n  REPEAT\n  UNTIL (ABS(?KEY) = \\w) OR (ABS(?KEY) = \\z)\n  WRITELN(CHR$(ABS(?KEY)))\n  IF ABS(?KEY) = \\w THEN\n    xcentre% = -500000\n    ycentre% = 0\n  ELSE\n    xcentre% = -159200\n    ycentre% = -1033000\n  ENDIF\n  WRITELN("")\n  IF ycentre% = 0 THEN\n    WRITE("Select Fast/Medium/Slow, giving resolution 300/750/1500: (F/M/S) ")\n  ELSE\n    WRITE("Select Fast/Medium/Slow, giving resolution 300/600/1200: (F/M/S) ")\n  ENDIF\n  REPEAT\n  UNTIL (ABS(?KEY) = \\f) OR (ABS(?KEY) = \\m) OR (ABS(?KEY) = \\s)\n  WRITELN(CHR$(ABS(?KEY)))\n  IF ycentre% = 0 THEN\n    IF ABS(?KEY) = \\f THEN\n      scale% = 100\n    ELSE\n      IF ABS(?KEY) = \\m THEN\n        scale% = 250\n      ELSE\n        scale% = 500\n      ENDIF\n    ENDIF\n    pixels% = scale% * 3\n  ELSE\n    IF ABS(?KEY) = \\f THEN\n      scale% = 10000\n    ELSE\n      IF ABS(?KEY) = \\m THEN\n        scale% = 20000\n      ELSE\n        scale% = 40000\n      ENDIF\n    ENDIF\n    pixels% = scale% / 100 * 3\n  ENDIF\n  OUTPUT(FALSE, WHITE, FALSE)\nENDPROC\n',MandelbrotSpectrumDemo:'REM MandelbrotSpectrumDemo\n\nCONST MAXCOL% = 40\nCONST SPECTRUM% = 7\nDIM spectcol%(SPECTRUM%)\nDIM boundary%(SPECTRUM%)\nPROCstartprompt\nPROCcolsetup\nxstart% = DIVMULT(xcentre%, 1000000, scale%) - pixels% / 2\nystart% = DIVMULT(ycentre%, 1000000, scale%) - pixels% / 2\nxfinish% = xstart% + pixels% - 1\nyfinish% = ystart% + pixels% - 1\nWRITELN("Mandelbrot will be plotted over the following real range:")\nWRITE(QSTR$(xstart%, scale%, 4) + " < x < " + QSTR$(xfinish%, scale%, 4) + "    ")\nWRITELN(QSTR$(ystart%, scale%, 4) + " < y < " + QSTR$(yfinish%, scale%, 4))\nWRITELN("Scaling factor: " + STR$(scale%) + "    Image resolution: " + STR$(pixels%) + "x" + STR$(pixels%))\nCANVAS(xstart%, ystart%, pixels%, pixels%)\nRESOLUTION(pixels%, pixels%)\nTIMESET(0)\nFOR a% = xstart% TO xfinish%\n  NOUPDATE\n  FOR b% = ystart% TO yfinish%\n    x% = a%\n    y% = b%\n    iterations% = 0\n    WHILE (HYPOT(x%, y%, 1) < 2 * scale%) AND (iterations% <= MAXCOL%)\n      temp% = DIVMULT(x% + y%, scale%, x% - y%)\n      y% = DIVMULT(2 * x%, scale%, y%) + b%\n      x% = temp% + a%\n      INC(iterations%)\n    ENDWHILE\n    IF iterations% > MAXCOL% THEN\n      PIXSET(a%, b%, BLACK)\n    ELSE\n      PIXSET(a%, b%, FNmixcolour(iterations%))\n    ENDIF\n  NEXT\n  UPDATE\nNEXT\nWRITELN("Time taken: " + QSTR$(TIME, 1000, 1) + " seconds.")\nEND\n\nDEF PROCstartprompt\n  OUTPUT(TRUE, CREAM, TRUE)\n  KEYECHO(FALSE)\n  WRITELN("MANDELBROT SET DISPLAY PROGRAM")\n  WRITELN("")\n  WRITE("Select Whole set, or Zoom on mini ""lake"" at -0.1592,-1.0330 (W/Z)")\n  REPEAT\n  UNTIL (ABS(?KEY) = \\w) OR (ABS(?KEY) = \\z)\n  WRITELN(CHR$(ABS(?KEY)))\n  IF ABS(?KEY) = \\w THEN\n    xcentre% = -500000\n    ycentre% = 0\n  ELSE\n    xcentre% = -159200\n    ycentre% = -1033000\n  ENDIF\n  WRITELN("")\n  IF ycentre% = 0 THEN\n    WRITE("Select Fast/Medium/Slow, giving resolution 300/750/1500: (F/M/S) ")\n  ELSE\n    WRITE("Select Fast/Medium/Slow, giving resolution 300/600/1200: (F/M/S) ")\n  ENDIF\n  REPEAT\n  UNTIL (ABS(?KEY) = \\f) OR (ABS(?KEY) = \\m) OR (ABS(?KEY) = \\s)\n  WRITELN(CHR$(ABS(?KEY)))\n  IF ycentre% = 0 THEN\n    IF ABS(?KEY) = \\f THEN\n      scale% = 100\n    ELSE\n      IF ABS(?KEY) = \\m THEN\n        scale% = 250\n      ELSE\n        scale% = 500\n      ENDIF\n    ENDIF\n    pixels% = scale% * 3\n  ELSE\n    IF ABS(?KEY) = \\f THEN\n      scale% = 10000\n    ELSE\n      IF ABS(?KEY) = \\m THEN\n        scale% = 20000\n      ELSE\n        scale% = 40000\n      ENDIF\n    ENDIF\n    pixels% = scale% / 100 * 3\n  ENDIF\n  OUTPUT(FALSE, WHITE, FALSE)\nENDPROC\n\nDEF PROCcolsetup\n  spectcol%(0) = VIOLET\n  spectcol%(1) = BLUE\n  spectcol%(2) = CYAN\n  spectcol%(3) = LIME\n  spectcol%(4) = YELLOW\n  spectcol%(5) = ORANGE\n  spectcol%(6) = RED\n  spectcol%(7) = VIOLET\n  FOR n% = 0 TO SPECTRUM%\n    boundary%(n%) = DIVMULT(MAXCOL%, SPECTRUM%, n%)\n  NEXT\nENDPROC\n\nDEF FNmixcolour(n%)\n  col2% = 0\n  REPEAT\n    INC(col2%)\n  UNTIL (boundary%(col2%) >= n%) OR (col2% = SPECTRUM%)\n  col1% = col2% - 1\n= MIXCOLS(spectcol%(col1%), spectcol%(col2%), boundary%(col2%) - n%, n% - boundary%(col1%))\n',Quine:"REM Quine\n\nREM not available in Turtle BASIC\n",Syllogisms:"REM Syllogisms\n\nREM not available in Turtle BASIC\n",TuringMachines:"REM TuringMachines\n\nREM not available in Turtle BASIC\n",Sorting:'REM Sorting\n\nCONST METHODS% = 4\nCONST N% = 100\nCONST COLS% = 10\nCONST TRIES% = 10\nCONST CHECKING% = TRUE\nDIM a%(N%)\nDIM caption$(METHODS%)\nDIM comptotal%(METHODS%)\nDIM swaptotal%(METHODS%)\nOUTPUT(TRUE, WHITE, TRUE)\nPROCsetup\nPROCinit\nWRITELN(STR$(METHODS%) + " sorting methods will be compared, each of them being used to")\nWRITELN("sort randomised arrays of " + STR$(N%) + " items (" + STR$(TRIES%) + " times), while keeping")\nWRITELN("track of the numbers of comparisons and swaps required.")\nIF CHECKING% THEN\n  WRITELN("If sorting fails, the program will halt and show the array.")\n  WRITELN("")\nENDIF\nFOR round% = 1 TO TRIES%\n  FOR m% = 1 TO METHODS%\n    PROCrandomise\n    PROCsort(m%)\n    comptotal%(m%) = comptotal%(m%) + comps%\n    swaptotal%(m%) = swaptotal%(m%) + swaps%\n  NEXT\n  WRITELN("")\nNEXT\nOUTPUT(TRUE, CREAM, TRUE)\nWRITELN("Averages from sorting " + STR$(N%) + " items, over " + STR$(TRIES%) + " trials")\nWRITELN("")\nWRITELN("               COMPARISONS    SWAPS")\nFOR m% = 1 TO METHODS%\n  WRITE(PAD(caption$(m%), " ", -17) + PAD(QSTR$(comptotal%(m%), TRIES%, 1), " ", 7))\n  WRITELN(PAD(QSTR$(swaptotal%(m%), TRIES%, 1), " ", 11))\nNEXT\nEND\n\nDEF PROCsetup\n  caption$(1) = "Bubblesort:"\n  caption$(2) = "Selectionsort:"\n  caption$(3) = "Insertionsort:"\n  caption$(4) = "Quicksort:"\nENDPROC\n\nDEF PROCinit\n  LOCAL i%\n  FOR i% = 1 TO N%\n    a%(i%) = i%\n  NEXT\n  FOR i% = 1 TO METHODS%\n    comptotal%(i%) = 0\n    swaptotal%(i%) = 0\n  NEXT\nENDPROC\n\nDEF FNlessthan(x%, y%)\n  INC(comps%)\n= (x% < y%)\n\nDEF PROCswap(x%, y%)\n  LOCAL t%\n  t% = a%(x%)\n  a%(x%) = a%(y%)\n  a%(y%) = t%\n  INC(swaps%)\nENDPROC\n\nDEF FNordered\n  LOCAL i%, result%\n  result% = TRUE\n  FOR i% = 2 TO N%\n    IF a%(i% - 1) > a%(i%) THEN result% = FALSE\n  NEXT\n= result%\n\nDEF PROClist\n  LOCAL i%\n  WRITE("     ")\n  FOR i% = 1 TO N%\n    WRITE(STR$(a%(i%)) + " ")\n    IF i% MOD COLS% = 0 THEN\n      WRITELN("")\n      WRITE("     ")\n    ENDIF\n  NEXT\n  WRITELN("")\nENDPROC\n\nDEF PROCrandomise\n  LOCAL i%, j%\n  FOR i% = 1 TO N%\n    j% = RND(N%)\n    PROCswap(i%, j%)\n  NEXT\nENDPROC\n\nDEF PROCbubblesort\n  LOCAL i%, j%\n  FOR i% = 1 TO N%\n    FOR j% = 1 TO N% - 1\n      IF FNlessthan(a%(j% + 1), a%(j%)) THEN PROCswap(j%, j% + 1)\n    NEXT\n  NEXT\nENDPROC\n\nDEF PROCselectionsort\n  LOCAL i%, j%, lowsofar%\n  FOR i% = 1 TO N%\n    lowsofar% = i%\n    FOR j% = i% + 1 TO N%\n      IF FNlessthan(a%(j%), a%(lowsofar%)) THEN lowsofar% = j%\n    NEXT\n    IF lowsofar% <> i% THEN PROCswap(i%, lowsofar%)\n  NEXT\nENDPROC\n\nDEF PROCinsertionsort\n  LOCAL i%, j%\n  FOR i% = 2 TO N%\n    j% = i%\n    WHILE (j% > 1) AND FNlessthan(a%(j%), a%(j% - 1))\n      PROCswap(j% - 1, j%)\n      DEC(j%)\n    ENDWHILE\n  NEXT\nENDPROC\n\nDEF PROCqsort(left%, right%)\n  LOCAL m%, i%\n  IF left% < right% THEN\n    m% = left%\n    FOR i% = left% + 1 TO right%\n      IF FNlessthan(a%(i%), a%(left%)) THEN\n        INC(m%)\n        PROCswap(m%, i%)\n      ENDIF\n    NEXT\n    PROCswap(left%, m%)\n    PROCqsort(left%, m% - 1)\n    PROCqsort(m% + 1, right%)\n  ENDIF\nENDPROC\n\nDEF PROCquicksort\n  PROCqsort(1, N%)\nENDPROC\n\nDEF PROCsort(method%)\n  comps% = 0\n  swaps% = 0\n  IF method% = 1 THEN\n    PROCbubblesort\n  ELSE\n    IF method% = 2 THEN\n      PROCselectionsort\n    ELSE\n      IF method% = 3 THEN\n        PROCinsertionsort\n      ELSE\n        IF method% = 4 THEN\n          PROCquicksort\n        ENDIF\n      ENDIF\n    ENDIF\n  ENDIF\n  WRITE(PAD(caption$(method%), " ", -17) + PAD(STR$(comps%), " ", 4) + " comparisons")\n  WRITELN(PAD(STR$(swaps%), " ", 6) + " swaps%")\n  IF CHECKING% THEN\n    IF NOT(FNordered) THEN\n      WRITELN("     Sort failed:")\n      PROClist\n      HALT\n    ENDIF\n  ENDIF\nENDPROC\n',SortingStrings:'REM Sorting\n\nCONST METHODS% = 4\nCONST N% = 100\nCONST COLS% = 10\nCONST TRIES% = 10\nCONST CHECKING% = TRUE\nDIM a$(N%)\nDIM caption$(METHODS%)\nDIM comptotal%(METHODS%)\nDIM swaptotal%(METHODS%)\nOUTPUT(TRUE, WHITE, TRUE)\n\nOUTPUT(TRUE, WHITE, TRUE)\nPROCsetup\nPROCinit\nWRITELN(STR$(METHODS%) + " sorting methods will be compared, each of them being used to")\nWRITELN("sort randomised arrays of " + STR$(N%) + " items (" + STR$(TRIES%) + " times), while keeping")\nWRITELN("track of the numbers of comparisons and swaps required.")\nIF CHECKING% THEN\n  WRITELN("If sorting fails, the program will halt and show the array.")\n  WRITELN("")\nENDIF\nPROClist\nWRITELN("")\nFOR round% = 1 TO TRIES%\n  FOR m% = 1 TO METHODS%\n    PROCrandomise\n    PROCsort(m%)\n    comptotal%(m%) = comptotal%(m%) + comps%\n    swaptotal%(m%) = swaptotal%(m%) + swaps%\n  NEXT\n  WRITELN("")\nNEXT\nOUTPUT(TRUE, CREAM, TRUE)\nWRITELN("Averages from sorting " + STR$(N%) + " items, over " + STR$(TRIES%) + " trials")\nWRITELN("")\nWRITELN("               COMPARISONS    SWAPS")\nFOR m% = 1 TO METHODS%\n  WRITE(PAD(caption$(m%), " ", -17) + PAD(QSTR$(comptotal%(m%), TRIES%, 1), " ", 7))\n  WRITELN(PAD(QSTR$(swaptotal%(m%), TRIES%, 1), " ", 11))\nNEXT\nWRITELN("")\nPROClist\nEND\n\nDEF PROCsetup\n  caption$(1) = "Bubblesort:"\n  caption$(2) = "Selectionsort:"\n  caption$(3) = "Insertionsort:"\n  caption$(4) = "Quicksort:"\nENDPROC\n\nDEF FNrandword$\n  LOCAL i%, result$\n  result$ = ""\n  FOR i% = 1 TO 3\n    result$ = result$ + CHR$(ASC("a") + RND(26) - 1)\n  NEXT\n= result$\n\nDEF PROCinit\n  LOCAL i%\n  FOR i% = 1 TO N%\n    a$(i%) = FNrandword$\n  NEXT\n  FOR i% = 1 TO METHODS%\n    comptotal%(i%) = 0\n    swaptotal%(i%) = 0\n  NEXT\nENDPROC\n\nDEF FNlessthan(x$, y$)\n  INC(comps%)\n= (x$ < y$)\n\nDEF PROCswap(x%, y%)\n  LOCAL t$\n  t$ = a$(x%)\n  a$(x%) = a$(y%)\n  a$(y%) = t$\n  INC(swaps%)\nENDPROC\n\nDEF FNordered\n  LOCAL i%, result%\n  result% = TRUE\n  FOR i% = 2 TO N%\n    IF a$(i% - 1) > a$(i%) THEN result% = FALSE\n  NEXT\n= result%\n\nDEF PROClist\n  LOCAL i%\n  WRITE("     ")\n  FOR i% = 1 TO N%\n    WRITE(a$(i%) + " ")\n    IF i% MOD COLS% = 0 THEN\n      WRITELN("")\n      WRITE("     ")\n    ENDIF\n  NEXT\n  WRITELN("")\nENDPROC\n\nDEF PROCrandomise\n  LOCAL i%, j%\n  FOR i% = 1 TO N%\n    j% = RND(N%)\n    PROCswap(i%, j%)\n  NEXT\nENDPROC\n\nDEF PROCbubblesort\n  LOCAL i%, j%\n  FOR i% = 1 TO N%\n    FOR j% = 1 TO N% - 1\n      IF FNlessthan(a$(j% + 1), a$(j%)) THEN PROCswap(j%, j% + 1)\n    NEXT\n  NEXT\nENDPROC\n\nDEF PROCselectionsort\n  LOCAL i%, j%, lowsofar%\n  FOR i% = 1 TO N%\n    lowsofar% = i%\n    FOR j% = i% + 1 TO N%\n      IF FNlessthan(a$(j%), a$(lowsofar%)) THEN lowsofar% = j%\n    NEXT\n    IF lowsofar% <> i% THEN PROCswap(i%, lowsofar%)\n  NEXT\nENDPROC\n\nDEF PROCinsertionsort\n  LOCAL i%, j%\n  FOR i% = 2 TO N%\n    j% = i%\n    WHILE (j% > 1) AND FNlessthan(a$(j%), a$(j% - 1))\n      PROCswap(j% - 1, j%)\n      DEC(j%)\n    ENDWHILE\n  NEXT\nENDPROC\n\nDEF PROCqsort(left%, right%)\n  LOCAL m%, i%\n  IF left% < right% THEN\n    m% = left%\n    FOR i% = left% + 1 TO right%\n      IF FNlessthan(a$(i%), a$(left%)) THEN\n        INC(m%)\n        PROCswap(m%, i%)\n      ENDIF\n    NEXT\n    PROCswap(left%, m%)\n    PROCqsort(left%, m% - 1)\n    PROCqsort(m% + 1, right%)\n  ENDIF\nENDPROC\n\nDEF PROCquicksort\n  PROCqsort(1, N%)\nENDPROC\n\nDEF PROCsort(method%)\n  comps% = 0\n  swaps% = 0\n  IF method% = 1 THEN\n    PROCbubblesort\n  ELSE\n    IF method% = 2 THEN\n      PROCselectionsort\n    ELSE\n      IF method% = 3 THEN\n        PROCinsertionsort\n      ELSE\n        IF method% = 4 THEN\n          PROCquicksort\n        ENDIF\n      ENDIF\n    ENDIF\n  ENDIF\n  WRITE(PAD(caption$(method%), " ", -17) + PAD(STR$(comps%), " ", 4) + " comparisons")\n  WRITELN(PAD(STR$(swaps%), " ", 6) + " swaps%")\n  IF CHECKING% THEN\n    IF NOT(FNordered) THEN\n      WRITELN("     Sort failed:")\n      PROClist\n      HALT\n    ENDIF\n  ENDIF\nENDPROC\n',NimLearn:"REM NimLearn\n\nREM not available in Turtle BASIC\n",MultiNim:'REM MultiNim\nCONST PILES% = 5\nCONST MAXHEIGHT% = 8\nCONST MARGIN% = 20\nDIM pile%(PILES%)\nPROCsetup\nREPEAT\n  PROCfixpiles\n  REPEAT\n    PROCdomaths\n    PROCdrawpiles\n    REPEAT\n      CURSOR(2)\n      REPEAT\n        REPEAT\n        UNTIL ?LMOUSE > 0\n        PAUSE(200)\n        thiscolour% = PIXCOL(?CLICKX, ?CLICKY)\n      UNTIL (thiscolour% <> RGB(WHITE)) AND (thiscolour% <> RGB(BLACK))\n      CURSOR(11)\n      IF ?CLICKY >= 800 THEN\n        thiscoin% = MAXHEIGHT% + 1\n        showmaths% = NOT(showmaths%)\n        PROCdomaths\n        PROCdrawpiles\n      ELSE\n        thispile% = (?CLICKX - MARGIN% + radius%) DIV xgap% + 1\n        thiscoin% = (bottom% - radius% - ?CLICKY) DIV ygap% + 1\n      ENDIF\n    UNTIL (?CLICKY < 800)\n    pile%(thispile%) = thiscoin% - 1\n    PROCdomaths\n    IF totalcoins% = 0 THEN\n      BLANK(WHITE)\n      SETXY(330, 850)\n      COLOUR(BLUE)\n      PRINT("You Win!", 4, 60)\n      PAUSE(5000)\n    ELSE\n      PROCdrawpiles\n      PAUSE(1000)\n      PROCblackout(autopile%, autocoin%)\n      pile%(autopile%) = autocoin% - 1\n      PROCdomaths\n      IF (xorscore% = 0) AND NOT(showmaths%) THEN\n        COLOUR(PINK)\n        SETXY(400, 900)\n        PRINT("I\'m going to win!", 4, 30)\n      ENDIF\n      PAUSE(2500)\n      IF totalcoins% = 0 THEN\n        BLANK(WHITE)\n        SETXY(330, 850)\n        COLOUR(RED)\n        PRINT("I Win!", 4, 60)\n        PAUSE(5000)\n      ENDIF\n    ENDIF\n  UNTIL totalcoins% = 0\nUNTIL 0 = 1\nEND\n\nDEF PROCsetup\n  xgap% = (1000 - 2 * MARGIN%) DIV PILES%\n  ygap% = (800 - MARGIN%) DIV MAXHEIGHT%\n  IF ygap% * MAXHEIGHT% > 800 THEN ygap% = 800 DIV MAXHEIGHT%\n  radius% = (ygap% - MARGIN%) DIV 2\n  left% = MARGIN% + radius% - xgap%\n  bottom% = 800 - radius% + ygap%\n  showmaths% = FALSE\nENDPROC\n\nDEF PROCfixpiles\n  LOCAL p%\n  FOR p% = 1 TO PILES%\n    pile%(p%) = RND(MAXHEIGHT%)\n  NEXT\nENDPROC\n\nDEF PROCdomaths\n  LOCAL p%\n  totalcoins% = 0\n  xorscore% = 0\n  FOR p% = 1 TO PILES%\n    totalcoins% = totalcoins% + pile%(p%)\n    xorscore% = xorscore% EOR pile%(p%)\n  NEXT\nENDPROC\n\nDEF PROCdrawpiles\n  LOCAL p%, c%, autocount%\n  BLANK(WHITE)\n  autocount% = RND(totalcoins%)\n  FOR p% = 1 TO PILES%\n    c% = pile%(p%)\n    WHILE c% > 0\n      DEC(autocount%)\n      IF autocount% = 0 THEN\n        autopile% = p%\n        autocoin% = c%\n      ENDIF\n      SETXY(left% + xgap% * p%, bottom% - ygap% * c%)\n      COLOUR(RGB(p%))\n      BLOT(radius%)\n      IF xorscore% EOR pile%(p%) EOR (c% - 1) = 0 THEN\n        autopile% = p%\n        autocoin% = c%\n        autocount% = 0\n      ENDIF\n      IF showmaths% THEN\n        MOVEXY(radius% + MARGIN%, -radius% + 15)\n        COLOUR(BLACK)\n        PRINT(STR$(xorscore% EOR pile%(p%) EOR (c% - 1)), 4, 20)\n      ENDIF\n      DEC(c%)\n    ENDWHILE\n  NEXT\n  COLOUR(BLACK)\n  SETXY(MARGIN%, 900)\n  PRINT("Total Coins:  " + STR$(totalcoins%), 4, 30)\n  IF showmaths% THEN\n    COLOUR(BLACK)\n    SETXY(450, 900)\n    PRINT("XOR score:  " + STR$(xorscore%), 4, 30)\n    SETXY(850, 890)\n    COLOUR(MAROON)\n    BOX(140, 100, RED, TRUE)\n    PRINT(" HIDE", 4, 25)\n    SETXY(850, 940)\n    PRINT(" MATHS", 4, 25)\n  ELSE\n    COLOUR(MAROON)\n    SETXY(850, 890)\n    BOX(140, 100, RED, TRUE)\n    PRINT(" SHOW", 4, 25)\n    SETXY(850, 940)\n    PRINT(" MATHS", 4, 25)\n  ENDIF\nENDPROC\n\nDEF PROCblackout(p%, c%)\n  SETXY(left% + xgap% * p%, bottom% - ygap% * c%)\n  COLOUR(BLACK)\n  BLOT(radius%)\nENDPROC\n',KnightsTour:"REM KnightsTour\n\nREM not yet available in Turtle BASIC\n",LifeStart:"REM LifeStart\n\nCONST WIDTH% = 32\nCONST HEIGHT% = 32\nCANVAS(0, 0, WIDTH%, HEIGHT%)\nRESOLUTION(WIDTH%, HEIGHT%)\nFOR x% = 0 TO WIDTH% - 1\n  FOR y% = 0 TO HEIGHT% - 1\n    IF RND(7) = 1 THEN\n      PIXSET(x%, y%, BLACK)\n    ELSE\n      PIXSET(x%, y%, WHITE)\n    ENDIF\n  NEXT\nNEXT\nEND\n",Diffusion:"REM Diffusion\n\nREM not yet available in Turtle BASIC\n",Mandelbrot:'REM Mandelbrot\n\nCONST MAXCOL% = 40\nCONST SCALE% = 250\nCONST PIXELS% = 750\nCONST XCENTRE% = -500000\nCONST YCENTRE% = 0\nxstart% = DIVMULT(XCENTRE%, 1000000, SCALE%) - PIXELS% / 2\nystart% = DIVMULT(YCENTRE%, 1000000, SCALE%) - PIXELS% / 2\nxfinish% = xstart% + PIXELS% - 1\nyfinish% = ystart% + PIXELS% - 1\nCANVAS(xstart%, ystart%, PIXELS%, PIXELS%)\nRESOLUTION(PIXELS%, PIXELS%)\nTIMESET(0)\nFOR a% = xstart% TO xfinish%\n  NOUPDATE\n  FOR b% = ystart% TO yfinish%\n    x% = a%\n    y% = b%\n    iterations% = 0\n    WHILE (HYPOT(x%, y%, 1) < 2 * SCALE%) AND (iterations% <= MAXCOL%)\n      temp% = DIVMULT(x% + y%, SCALE%, x% - y%)\n      y% = DIVMULT(2 * x%, SCALE%, y%) + b%\n      x% = temp% + a%\n      INC(iterations%)\n    ENDWHILE\n    IF iterations% > MAXCOL% THEN\n      PIXSET(a%, b%, BLACK)\n    ELSE\n      PIXSET(a%, b%, RGB(iterations% + 1))\n    ENDIF\n  NEXT\n  UPDATE\nNEXT\nWRITELN("Resolution: " + STR$(SCALE% * 3) + " Time taken: " + QSTR$(TIME, 1000, 1) + " seconds.")\nEND\n',MandelbrotMini:'REM MandelbrotMini\n\nCONST MAXCOL% = 40\nCONST SCALE% = 10000\nCONST PIXELS% = 300\nCONST XCENTRE% = -159200\nCONST YCENTRE% = -1033000\nxstart% = DIVMULT(XCENTRE%, 1000000, SCALE%) - PIXELS% / 2\nystart% = DIVMULT(YCENTRE%, 1000000, SCALE%) - PIXELS% / 2\nxfinish% = xstart% + PIXELS% - 1\nyfinish% = ystart% + PIXELS% - 1\nCANVAS(xstart%, ystart%, PIXELS%, PIXELS%)\nRESOLUTION(PIXELS%, PIXELS%)\nTIMESET(0)\nFOR a% = xstart% TO xfinish%\n  NOUPDATE\n  FOR b% = ystart% TO yfinish%\n    x% = a%\n    y% = b%\n    iterations% = 0\n    WHILE (HYPOT(x%, y%, 1) < 2 * SCALE%) AND (iterations% <= MAXCOL%)\n      temp% = DIVMULT(x% + y%, SCALE%, x% - y%)\n      y% = DIVMULT(2 * x%, SCALE%, y%) + b%\n      x% = temp% + a%\n      INC(iterations%)\n    ENDWHILE\n    IF iterations% > MAXCOL% THEN\n      PIXSET(a%, b%, BLACK)\n    ELSE\n      PIXSET(a%, b%, RGB(iterations% + 1))\n    ENDIF\n  NEXT\n  UPDATE\nNEXT\nWRITELN("Resolution: " + STR$(SCALE% * 3) + " Time taken: " + QSTR$(TIME, 1000, 1) + " seconds.")\nEND\n',MandelbrotSpectrum:'REM MandelbrotSpectrum\n\nCONST MAXCOL% = 40\nCONST SCALE% = 250\nCONST PIXELS% = 750\nCONST XCENTRE% = -500000\nCONST YCENTRE% = 0\nCONST SPECTRUM% = 7\nDIM spectcol%(SPECTRUM%)\nDIM boundary%(SPECTRUM%)\nPROCcolsetup\nxstart% = DIVMULT(XCENTRE%, 1000000, SCALE%) - PIXELS% / 2\nystart% = DIVMULT(YCENTRE%, 1000000, SCALE%) - PIXELS% / 2\nxfinish% = xstart% + PIXELS% - 1\nyfinish% = ystart% + PIXELS% - 1\nCANVAS(xstart%, ystart%, PIXELS%, PIXELS%)\nRESOLUTION(PIXELS%, PIXELS%)\nTIMESET(0)\nFOR a% = xstart% TO xfinish%\n  NOUPDATE\n  FOR b% = ystart% TO yfinish%\n    x% = a%\n    y% = b%\n    iterations% = 0\n    WHILE (HYPOT(x%, y%, 1) < 2 * SCALE%) AND (iterations% <= MAXCOL%)\n      temp% = DIVMULT(x% + y%, SCALE%, x% - y%)\n      y% = DIVMULT(2 * x%, SCALE%, y%) + b%\n      x% = temp% + a%\n      INC(iterations%)\n    ENDWHILE\n    IF iterations% > MAXCOL% THEN\n      PIXSET(a%, b%, BLACK)\n    ELSE\n      PIXSET(a%, b%, FNmixcolour(iterations%))\n    ENDIF\n  NEXT\n  UPDATE\nNEXT\nWRITELN("Resolution: " + STR$(SCALE% * 3) + " Time taken: " + QSTR$(TIME, 1000, 1) + " seconds.")\nEND\n\nDEF PROCcolsetup\n  spectcol%(0) = VIOLET\n  spectcol%(1) = BLUE\n  spectcol%(2) = CYAN\n  spectcol%(3) = LIME\n  spectcol%(4) = YELLOW\n  spectcol%(5) = ORANGE\n  spectcol%(6) = RED\n  spectcol%(7) = VIOLET\n  FOR n% = 0 TO SPECTRUM%\n    boundary%(n%) = DIVMULT(MAXCOL%, SPECTRUM%, n%)\n  NEXT\nENDPROC\n\nDEF FNmixcolour(n%)\n  col2% = 0\n  REPEAT\n    INC(col2%)\n  UNTIL (boundary%(col2%) >= n%) OR (col2% = SPECTRUM%)\n  col1% = col2% - 1\n= MIXCOLS(spectcol%(col1%), spectcol%(col2%), boundary%(col2%) - n%, n% - boundary%(col1%))\n',MandelbrotMiniSpectrum:"REM MandelbrotMiniSpectrum\n\nREM not yet available in Turtle BASIC\n",SierpinskiColour:"REM SierpinskiColour\n\nREM not yet available in Turtle BASIC\n",SierpinskiIFS:"REM SierpinskiIFS\n\nREM not yet available in Turtle BASIC\n",BarnsleyColour:"REM BarnsleyColour\n\nREM not yet available in Turtle BASIC\n",BarnsleyIFS:"REM BarnsleyIFS\n\nREM not yet available in Turtle BASIC\n",DragonColour:"REM DragonColour\n\nREM not yet available in Turtle BASIC\n",DragonIFS:"REM DragonIFS\n\nREM not yet available in Turtle BASIC\n",TreeIFS:"REM TreeIFS\n\nREM not yet available in Turtle BASIC\n"};const Ln={BASIC:An,Pascal:{DrawPause:"PROGRAM DrawPause;\nBEGIN\n  colour(green);\n  blot(100);\n  pause(1000);\n  colour(red);\n  forward(450);\n  pause(1000);\n  right(90);\n  thickness(9);\n  colour(blue);\n  pause(1000);\n  forward(300)\nEND.\n",SmileyFace:"PROGRAM SmileyFace;\nBEGIN\n  colour(peach);\n  blot(200);\n  colour(darkred);\n  blot(140);\n  forward(30);\n  colour(peach);\n  blot(150);\n  back(60);\n  colour(royal);\n  blot(30);\n  penup;\n  forward(90);\n  left(90);\n  forward(80);\n  colour(white);\n  ellblot(30, 20);\n  colour(emerald);\n  blot(18);\n  colour(black);\n  blot(8);\n  back(160);\n  colour(white);\n  ellblot(30, 20);\n  colour(emerald);\n  blot(18);\n  colour(black);\n  blot(8)\nEND.\n",ThePlough:"PROGRAM ThePlough;\nBEGIN\n  blank(black);\n  colour(lightblue);\n  setxy(100, 200);\n  blot(10);\n  setxy(300, 250);\n  blot(10);\n  setxy(420, 350);\n  blot(10);\n  setxy(570, 490);\n  blot(10);\n  setxy(900, 560);\n  blot(10);\n  setxy(840, 720);\n  blot(10);\n  setxy(590, 660);\n  blot(10);\n  setxy(570, 490);\n  colour(silver);\n  polyline(8)\nEND.\n",OlympicRings:"PROGRAM OlympicRings;\nVAR ringsize: integer;\nBEGIN\n  ringsize := 130;\n  thickness(20);\n  penup;\n  forward(50);\n  circle(ringsize);\n  left(90);\n  forward(300);\n  colour(blue);\n  circle(ringsize);\n  back(600);\n  colour(red);\n  circle(ringsize);\n  forward(150);\n  right(90);\n  back(125);\n  colour(lime);\n  circle(ringsize);\n  left(90);\n  forward(300);\n  colour(yellow);\n  circle(ringsize)\nEND.\n",ForLoop:"PROGRAM ForLoop;\nVAR count: integer;\nBEGIN\n  for count := 1 to 200 do\n    begin\n      forward(count div 3);\n      right(5);\n      colour(red);\n      blot(200);\n      colour(black);\n      circle(200)\n    end\nEND.\n",TriangleSpin:"PROGRAM TriangleSpin;\nVAR i: integer;\nBEGIN\n  movexy(30, 20);\n  for i := 1 to 300 do\n    begin\n      forward(i * 3);\n      right(121)\n    end\nEND.\n",Circles:"PROGRAM Circles;\nVAR count: integer;\nBEGIN\n  thickness(6);\n  penup;\n  blank(black);\n  colour(orange);\n  for count := 1 to 36 do\n    begin\n      forward(200);\n      circle(200);\n      back(200);\n      right(10);\n      pause(25)\n    end\nEND.\n",NestedLoops:"PROGRAM NestedLoops;\nVAR countblot: integer;\n    countcirc: integer;\nBEGIN\n  penup;\n  for countblot := 1 to 10 do\n    begin\n      forward(260);\n      colour(black);\n      blot(150);\n      colour(rgb(countblot));\n      for countcirc := 1 to 25 do\n        circle(countcirc * 8);\n      back(260);\n      right(36)\n    end\nEND.\n",RandomLines:"PROGRAM RandomLines;\nVAR count: integer;\n    x, y: integer;\nBEGIN\n  for count := 1 to 30 do\n    begin\n      x := random(1000);\n      y := random(1000);\n      setxy(x, y);\n      turtd := random(360);\n      forward(1500);\n      back(3000)\n    end;\n  for count := 1 to 10000 do\n    begin\n      x := random(1000);\n      y := random(1000);\n      if pixcol(x, y) = white then\n        recolour(x, y, rgb(random(20) + 1))\n    end\nEND.\n",RandomEllipses:"PROGRAM RandomEllipses;\nVAR count: integer;\n    x, y, rx, ry: integer;\n    nextcol: integer;\nBEGIN\n  for count := 1 to 10 do\n    begin\n      x := random(1500) - 250;\n      y := random(1500) - 250;\n      rx := random(500) + 500;\n      ry := random(500) + 500;\n      setxy(x, y);\n      ellipse(rx, ry)\n    end;\n  nextcol := 0;\n  for count := 1 to 10000 do\n    begin\n      x := random(1000);\n      y := random(1000);\n      if pixcol(x, y) = white then\n        begin\n          nextcol := nextcol mod 20 + 1;\n          recolour(x, y, rgb(nextcol))\n        end\n    end\nEND.\n",ColourSpiral:"PROGRAM ColourSpiral;\nVAR len: integer;\n\n  Procedure lineturn;\n  Begin\n    forward(len);\n    right(60)\n  End;\n\nBEGIN\n  blank(black);\n  forward(15);\n  thickness(27);\n  len := 20;\n  repeat\n    randcol(40);\n    lineturn;\n    len := len + 10\n  until len > 500\nEND.\n",SimpleProc:"PROGRAM SimpleProc;\n\n  Procedure prong;\n  Begin\n    forward(400);\n    blot(20);\n    back(400)\n  End;\n\nBEGIN\n  repeat\n    randcol(10);\n    prong;\n    right(61)\n  until turtd = 0\nEND.\n",ParameterProc:"PROGRAM ParameterProc;\nVAR count: integer;\n\n  Procedure prong(len: integer);\n  Begin\n    forward(len);\n    blot(len / 20);\n    back(len)\n  End;\n\nBEGIN\n  for count := 360 downto 1 do\n    begin\n      randcol(10);\n      prong(count + 100);\n      right(61)\n    end\nEND.\n",ResizableFace:"PROGRAM ResizableFace;\n\n  Procedure face(size: integer);\n\n    procedure eye;\n    begin\n      colour(white);\n      ellblot(size * 3 / 20, size / 10);\n      colour(emerald);\n      blot(size * 9 / 100);\n      colour(black);\n      blot(size / 25)\n    end;\n\n  Begin\n    colour(peach);\n    blot(size);\n    colour(darkred);\n    blot(size * 7 / 10);\n    forward(size * 3 / 20);\n    colour(peach);\n    blot(size * 3 / 4);\n    back(size * 3 / 10);\n    colour(royal);\n    blot(size * 3 / 20);\n    penup;\n    forward(size * 9 / 20);\n    left(90);\n    forward(size * 2 / 5);\n    eye;\n    back(size * 4 / 5);\n    eye\n  End;\n\nBEGIN\n  face(400)\nEND.\n",Polygons:"PROGRAM Polygons;\n\n  Procedure poly(points, col: integer);\n  Var count: integer;\n  Begin\n    direction(90);\n    for count := 1 to points do\n      begin\n        forward(600 div points);\n        left(360 div points)\n      end;\n    colour(col);\n    polygon(points);\n    colour(black);\n    polyline(points + 1)\n  End;\n\nBEGIN\n  penup;\n  thickness(4);\n  setxy(100, 400);\n  poly(3, blue);\n  setxy(400, 400);\n  poly(4, red);\n  setxy(700, 400);\n  poly(5, yellow);\n  setxy(150, 750);\n  poly(6, pink);\n  setxy(440, 750);\n  poly(7, green);\n  setxy(740, 750);\n  poly(8, turquoise)\nEND.\n",Stars:"PROGRAM Stars;\nVAR n: integer;\n\n  Procedure star(points, col: integer);\n  Var count: integer;\n  Begin\n    angles(points * 2);\n    for count := 1 to points do\n      begin\n        forward(450);\n        back(450);\n        forget(1);\n        right(1);\n        forward(200);\n        back(200);\n        forget(1);\n        right(1)\n      end;\n    colour(col);\n    polygon(points * 2)\n  End;\n\nBEGIN\n  penup;\n  for n := 3 to 12 do\n    begin\n      star(n, rgb(n - 2));\n      pause(500)\n    end\nEND.\n",PolygonRings:"PROGRAM PolygonRings;\n\n  Procedure annulus(inner, width, angle: integer);\n  Var count: integer;\n  Begin\n    for count := 0 to 360 div angle do\n      begin\n        forward(inner + width);\n        back(width);\n        back(inner);\n        forget(1);\n        right(angle);\n        forward(inner);\n        forward(width);\n        colour(rgb(count mod 20 + 1));\n        polygon(4);\n        back(inner + width)\n      end\n  End;\n\nBEGIN\n  penup;\n  blot(500);\n  randcol(6);\n  annulus(410, 80, 2);\n  annulus(310, 80, 3);\n  annulus(210, 80, 5);\n  annulus(110, 80, 7);\n  annulus(10, 80, 1)\nEND.\n",Triangle1:"PROGRAM Triangle1;\nBEGIN\n  movexy(-100, 150);\n  forward(256);\n  right(120);\n  forward(256);\n  right(120);\n  forward(256);\n  right(120)\nEND.\n",Triangle2:"PROGRAM Triangle2;\n\n  Procedure triangle(size: integer);\n  Begin\n    forward(size);\n    right(120);\n    forward(size);\n    right(120);\n    forward(size);\n    right(120)\n  End;\n\nBEGIN\n  movexy(-100, 150);\n  triangle(256)\nEND.\n",Triangle3:"PROGRAM Triangle3;\n\n  Procedure triangle(size: integer);\n  Begin\n    if size > 1 then\n      begin\n        forward(size);\n        right(120);\n        forward(size);\n        right(120);\n        forward(size);\n        right(120)\n      end\n  End;\n\nBEGIN\n  movexy(-100, 150);\n  triangle(256)\nEND.\n",Triangles:"PROGRAM Triangles;\n\n  Procedure triangle(size: integer);\n  Begin\n    if size > 1 then\n      begin\n        forward(size);\n        triangle(size / 2);\n        right(120);\n        forward(size);\n        triangle(size / 2);\n        right(120);\n        forward(size);\n        triangle(size / 2);\n        right(120)\n      end\n  End;\n\nBEGIN\n  movexy(-100, 150);\n  triangle(256)\nEND.\n",Factorials:"PROGRAM Factorials;\nVAR count: integer;\n\n  Function fact(n: integer): integer;\n  Begin\n    if n = 0 then\n      result := 1\n    else\n      result := n * fact(n - 1)\n  End;\n\nBEGIN\n  output(true, cream, true);\n  for count := 1 to 10 do\n    writeln(str(count) + '! = ' + str(fact(count)))\nEND.\n",Fibonaccis:"PROGRAM Fibonaccis;\nCONST lastnum = 25;\nVAR count: integer;\n    fibsave: array[1..lastnum] of integer;\n\n  Function fibrec(n: integer): integer;\n  Begin\n    if (n = 1) or (n = 2) then\n      result := 1\n    else\n      result := fibrec(n - 1) + fibrec(n - 2)\n  End;\n\n  Function fibiter(n: integer): integer;\n  Begin\n    if (n = 1) or (n = 2) then\n      fibsave[n] := 1\n    else\n      fibsave[n] := fibsave[n - 1] + fibsave[n - 2];\n    result := fibsave[n]\n  End;\n\nBEGIN\n  output(true, cream, true);\n  writeln('First, by recursion:');\n  timeset(0);\n  for count := 1 to lastnum do\n    writeln('fib(' + str(count) + ') = ' + str(fibrec(count)));\n  writeln('Time taken: ' + qstr(time, 1000, 2) + ' seconds');\n  writeln('');\n  writeln('Then, by iteration:');\n  timeset(0);\n  for count := 1 to lastnum do\n    writeln('fib(' + str(count) + ') = ' + str(fibiter(count)));\n  writeln('Time taken: ' + qstr(time, 1000, 2) + ' seconds')\nEND.\n",YouAreHere:"PROGRAM YouAreHere;\nBEGIN\n  colour(red);\n  blot(20);\n  colour(violet);\n  print('You are here', 2, 35);\n  setxy(790, 540);\n  colour(blue);\n  drawxy(40, 0);\n  drawxy(28, -28);\n  drawxy(0, -40);\n  drawxy(-28, -28);\n  drawxy(-40, 0);\n  setxy(500, 500);\n  setxy(530, 480);\n  setxy(535, 505);\n  setxy(500, 500);\n  polyline(5);\n  polygon(3)\nEND.\n",CycleColours:"PROGRAM CycleColours;\nVAR len: integer;\n    colinc, colcode: integer;\nBEGIN\n  blank(black);\n  colinc := random(5);\n  colcode := random(20) + 1;\n  len := 0;\n  thickness(16);\n  repeat\n    colcode := (colcode + colinc) mod 20 + 1;\n    colour(rgb(colcode));\n    len := len + 1;\n    forward(len);\n    right(30)\n  until len > 250\nEND.\n",Clock:"PROGRAM Clock;\nVAR hours: integer;\n    minutes: integer;\n\n  Procedure showhands;\n  Begin\n    colour(white);\n    blot(360);\n    colour(red);\n    direction(hours * 30);\n    thickness(10);\n    forward(250);\n    back(250);\n    direction(minutes * 6);\n    thickness(6);\n    forward(350);\n    back(350)\n  End;\n\nBEGIN\n  thickness(10);\n  circle(400);\n  hours := 0;\n  minutes := 0;\n  repeat\n    repeat\n      showhands;\n      pause(600);\n      inc(minutes)\n    until minutes = 60;\n    inc(hours);\n    minutes := 0\n  until hours = 12;\n  showhands\nEND.\n",DigitalClock:"PROGRAM DigitalClock;\nVAR hours: integer;\n    minutes: integer;\n\n  Procedure showtime;\n  Var hstring, mstring: string;\n  Begin\n    setxy(300, 430);\n    box(400, 130, white, false);\n    if hours < 10 then\n      hstring := '0' + str(hours)\n    else\n      hstring := str(hours);\n    if minutes < 10 then\n      mstring := '0' + str(minutes)\n    else\n      mstring := str(minutes);\n    print(hstring + ':' + mstring, 19, 100)\n  End;\n\nBEGIN\n  blank(lightgreen);\n  setxy(250, 390);\n  colour(maroon);\n  thickness(10);\n  box(500, 210, lightbrown, true);\n  colour(black);\n  hours := 0;\n  minutes := 0;\n  while hours < 12 do\n    begin\n      showtime;\n      pause(600);\n      inc(minutes);\n      if minutes = 60 then\n        begin\n          inc(hours);\n          minutes := 0\n        end\n    end;\n  showtime\nEND.\n",Flashlights:"PROGRAM Flashlights;\n\n  Procedure drawit(doblot: boolean);\n  Begin\n    if doblot then\n      begin\n        randcol(10);\n        blot(25)\n      end\n    else\n      begin\n        colour(black);\n        blot(30);\n        randcol(10);\n        circle(25)\n      end\n  End;\n\nBEGIN\n  blot(1000);\n  thickness(8);\n  repeat\n    setx((random(8) + 1) * 111);\n    sety((random(8) + 1) * 111);\n    drawit(random(2) = 1)\n  until false\nEND.\n",RefParams:"PROGRAM RefParams;\n\n  Procedure lines(var style: integer; convert: boolean);\n  Var count: integer;\n  Begin\n    for count := 1 to 8 do\n      begin\n        if convert then\n          style := rgb(count)\n        else\n          style := count;\n        forward(50);\n        pause(100)\n      end\n  End;\n\n  Procedure dots(var coord: integer);\n  Var count: integer;\n  Begin\n    for count := 1 to 8 do\n      begin\n        coord := coord + 100;\n        blot(40);\n        pause(100)\n      end\n  End;\n\nBEGIN\n  setxy(100, 900);\n  lines(turtt, false);\n  lines(turtc, true);\n  dots(turtx);\n  dots(turty)\nEND.\n",Balls3D:"PROGRAM Balls3D;\nVAR count: integer;\nBEGIN\n  setxy(250, 250);\n  colour($00FFFF);\n  for count := 240 downto 1 do\n    begin\n      blot(count);\n      turtc := turtc + $10000\n    end;\n  right(60);\n  setxy(750, 250);\n  colour($D2691E);\n  for count := 40 downto 1 do\n    begin\n      blot(count * 6);\n      forward(3);\n      turtc := turtc + $10102\n    end;\n  setxy(250, 750);\n  colour($D2691E);\n  for count := 40 downto 1 do\n    begin\n      blot(count * 6);\n      forward(3);\n      turtc := turtc + $10102\n    end;\n  setxy(750, 750);\n  colour($FFA500);\n  for count := 80 downto 1 do\n    begin\n      blot(count * 3);\n      forward(2);\n      turtc := turtc + $101\n    end\nEND.\n",StringFunctions:"PROGRAM StringFunctions;\nCONST delay = 500;\nVAR s1, s2, s3, s4, s5: string;\n    posn, n: integer;\nBEGIN\n  output(true, cream, true);\n  s1 := 'Turtle Pascal';\n  s2 := copy(s1, 1, 6);\n  writeln(s2 + ' is the name of a small animal.');\n  pause(delay);\n  s3 := copy(s1, 8, 6);\n  writeln(s3 + ' was a French philosopher.');\n  pause(delay);\n  s4 := insert('eter R', s3, 2);\n  writeln('''' + s4 + ''' is a silly name.');\n  pause(delay);\n  writeln('\"' + s1 + '\" has ' + str(length(s1)) + ' characters.');\n  pause(delay);\n  writeln('In lower case it is \"' + lowercase(s1) + '\".');\n  writeln('In upper case it is \"' + uppercase(s1) + '\".');\n  pause(delay);\n  posn := pos(s3, s1);\n  if posn > 0 then\n    writeln('\"' + s3 + '\" occurs within \"' + s1 + '\" at position ' + str(posn) + '.');\n  pause(delay);\n  s5 := '3.14159';\n  writeln(s5 + ' times 100000 = ' + str(qval(s5, 100000, -1)) + '.');\n  pause(delay);\n  n := qval(s5, 100000, -1);\n  writeln(str(n) + ' divided by 100000 = ' + qstr(n, 100000, 5) + '.');\n  writeln('');\n  pause(delay * 5);\n  writeln('Now back to the Canvas and Console ...');\n  output(false, peach, true);\n  pause(delay * 5);\n  output(false, lightred, false);\n  pause(delay * 5);\n  console(true, lightblue);\n  writeln('You will see this on a clear light blue Console')\nEND.\n",UserStringFunctions:"PROGRAM UserStringFunctions;\n\n  Function reverse(s: string): string;\n  Var posn: integer;\n      t: string;\n  Begin\n    t := '';\n    for posn := length(s) downto 1 do\n      t := t + copy(s, posn, 1);\n    result := t\n  End;\n\n  Function revrecurse(s: string): string;\n  Begin\n    if s = '' then\n      result := s\n    else\n      result := reverse(delete(s, 1, 1)) + copy(s, 1, 1)\n  End;\n\n  Function initcaps(s: string): string;\n  Var posn: integer;\n      t: string;\n  Begin\n    s := lowercase(s);\n    t := chr(ord(copy(s, 1, 1)) - 32);\n    for posn := 2 to length(s) do\n      if (copy(s, posn - 1, 1) = ' ') then\n        t := t + chr(ord(copy(s, posn, 1)) - 32)\n      else\n        t := t + copy(s, posn, 1);\n    result := t\n  End;\n\n  Function caesar(s: string; n: integer): string;\n  Var posn: integer;\n      c, t: string;\n  Begin\n    t := '';\n    for posn := 1 to length(s) do\n      begin\n        c := copy(s, posn, 1);\n        if (c >= 'A') and (c <= 'Z') then\n          begin\n            c := chr(ord(c) + n);\n            if c > 'Z' then\n              c := chr(ord(c) - 26)\n          end;\n        if (c >= 'a') and (c <= 'z') then\n          begin\n            c := chr(ord(c) + n);\n            if c > 'z' then\n              c := chr(ord(c) - 26)\n          end;\n        t := t + c\n      end;\n    result := t\n  End;\n\n  Procedure process(s: string);\n  Begin\n    writeln('');\n    writeln('ORIGINAL STRING:            \"' + s + '\"');\n    writeln('REVERSED (by iteration):    \"' + reverse(s) + '\"');\n    writeln('REVERSED (by recursion):    \"' + revrecurse(s) + '\"');\n    writeln('INITIAL CAPITAL ALL WORDS:  \"' + initcaps(s) + '\"');\n    writeln('CAESAR CIPHER (1 letter):   \"' + caesar(s, 1) + '\"');\n    writeln('CAESAR DECRYPT (1+25 = 26): \"' + caesar(caesar(s, 1), 25) + '\"');\n    writeln('CAESAR CIPHER (4 letters):  \"' + caesar(s, 4) + '\"');\n    writeln('CAESAR DECRYPT (4+22 = 26): \"' + caesar(caesar(s, 4), 22) + '\"')\n  End;\n\nBEGIN\n  output(true, cream, true);\n  writeln('Some User-Defined String Functions');\n  process('the quick brown fox jumps,');\n  process('OVER THE LAZY DOG.')\nEND.\n",MathFunctions:"PROGRAM MathFunctions;\nCONST decimals = 4;\n      denominator = 1000000;\nVAR count: integer;\n    a, b, c: integer;\n\n  Procedure show(s: string; n: integer);\n  Begin\n    writeln(s + '(' + str(a) + '/' + str(b) + ') = ' + qstr(n, denominator, decimals))\n  End;\n\n  Procedure selectab;\n  Begin\n    a := random(900) + 100;\n    b := random(900) + 100\n  End;\n\nBEGIN\n  output(true, white, true);\n  writeln('This program selects two random numbers a and b, in the');\n  writeln('range 100-999, and then outputs various mathematical');\n  writeln('functions of the fraction a/b. The results are expressed');\n  writeln('to ' + str(decimals) + ' decimal places, and a denominator of ' + str(denominator) + ' is');\n  writeln('used in the calculations to provide precision, even');\n  writeln('though the Turtle functions strictly operate only on');\n  writeln('integers and produce integer results.');\n  writeln('');\n  selectab;\n  writeln('a=' + str(a) + '; b=' + str(b));\n  writeln('a/b = ' + str(a) + '/' + str(b) + ' = ' + qstr(a, b, decimals));\n  writeln('');\n  show('square', power(a, b, 2, denominator));\n  show('square root', root(a, b, 2, denominator));\n  show('cube', power(a, b, 3, denominator));\n  show('cube root', root(a, b, 3, denominator));\n  writeln('');\n  show('hypot', hypot(a, b, denominator));\n  show('calculated hypot', sqrt(a * a + b * b, denominator));\n  writeln('');\n  show('sin', sin(a, b, denominator));\n  show('cos', cos(a, b, denominator));\n  show('tan', tan(a, b, denominator));\n  writeln('');\n  show('ln', ln(a, b, denominator));\n  if divmult(a, b, 1000) + ln(denominator, 1, 1000) > ln(maxint, 1, 1000) then\n    begin\n      writeln('EXP(' + str(a) + '/' + str(b) + ') would give numerical overflow, because');\n      writeln('the result*' + str(denominator) + ' would be greater than ' + str(maxint))\n    end\n  else\n    show('exp', exp(a, b, denominator));\n  show('log10', log10(a, b, denominator));\n  if divmult(a, b, 1000) + log10(denominator, 1, 1000) > log10(maxint, 1, 1000) then\n    begin\n      writeln('ANTILOG(' + str(a) + '/' + str(b) + ') would give numerical overflow, because');\n      writeln('the result*' + str(denominator) + ' would be greater than ' + str(maxint))\n    end\n  else\n    show('antilog', antilog(a, b, denominator));\n  writeln('');\n  if a > b then\n    writeln('ARCCOS and ARCSIN are not defined for ' + str(a) + '/' + str(b) + ' = ' + qstr(a, b, decimals))\n  else\n    begin\n      show('arccos', arccos(a, b, denominator));\n      show('arcsin', arcsin(a, b, denominator))\n    end;\n  show('arctan', arctan(a, b, denominator))\nEND.\n",TrigGraphs:"PROGRAM TrigGraphs;\nCONST xorigin = 500;\n      yorigin = 500;\n      halfwidth = 400;\n      yscale = 200;\n      radians = false;\nVAR degrees: integer;\n    x, y: integer;\n\n  Procedure axes;\n  Begin\n    thickness(3);\n    setxy(xorigin - halfwidth, yorigin);\n    drawxy(halfwidth * 2, 0);\n    setxy(xorigin, 0);\n    drawxy(0, 1000);\n    setxy(xorigin, yorigin);\n    circle(15);\n    thickness(2);\n    setxy(xorigin - halfwidth, yorigin - yscale);\n    drawxy(halfwidth * 2, 0);\n    setxy(xorigin - halfwidth, yorigin + yscale);\n    drawxy(halfwidth * 2, 0);\n    setxy(xorigin + halfwidth + 10, yorigin - yscale - 18);\n    print('+1', 0, 20);\n    setxy(xorigin + halfwidth + 10, yorigin + yscale - 18);\n    print('-1', 0, 20);\n    if radians then\n      begin\n        setxy(xorigin - halfwidth - 44, yorigin - 4);\n        print('-p', 29, 28);\n        setxy(xorigin - halfwidth div 2 - 2, yorigin - 4);\n        print('-p/2', 29, 28);\n        setxy(xorigin + halfwidth div 2 - 50, yorigin - 4);\n        print('p/2', 29, 28);\n        setxy(xorigin + halfwidth, yorigin - 4);\n        print('p', 29, 28)\n      end\n    else\n      begin\n        setxy(xorigin - halfwidth - 64, yorigin + 2);\n        print('-180', 0, 24);\n        setxy(xorigin - halfwidth div 2 - 2, yorigin + 2);\n        print('-90', 0, 24);\n        setxy(xorigin + halfwidth div 2 - 36, yorigin + 2);\n        print('90', 0, 24);\n        setxy(xorigin + halfwidth, yorigin + 2);\n        print('180', 0, 24)\n      end\n  End;\n\n  Procedure sinecurve;\n  Begin\n    for degrees := -180 to 180 do\n      begin\n        x := xorigin + divmult(degrees, 180, halfwidth);\n        y := yorigin - sin(degrees, 1, yscale);\n        setxy(x, y)\n      end;\n    polyline(361)\n  End;\n\n  Procedure cosinecurve;\n  Begin\n    for degrees := -180 to 180 do\n      begin\n        x := xorigin + divmult(degrees, 180, halfwidth);\n        y := yorigin - cos(degrees, 1, yscale);\n        setxy(x, y)\n      end;\n    polyline(361)\n  End;\n\n  Procedure tancurve;\n  Begin\n    for degrees := -180 to 180 do\n      if degrees = -90 then\n        polyline(90)\n      else\n      if degrees = 90 then\n        polyline(179)\n      else\n        begin\n          x := xorigin + divmult(degrees, 180, halfwidth);\n          y := yorigin - tan(degrees, 1, yscale);\n          setxy(x, y)\n        end;\n    polyline(90)\n  End;\n\nBEGIN\n  axes;\n  noupdate;\n  thickness(4);\n  colour(red);\n  setxy(20, 700);\n  print('cosine', 16, 40);\n  cosinecurve;\n  colour(green);\n  setxy(100, 810);\n  print('sine', 16, 40);\n  setxy(205, 820);\n  drawxy(70, -110);\n  drawxy(0, 20);\n  movexy(0, -20);\n  drawxy(-18, 11);\n  sinecurve;\n  colour(blue);\n  setxy(140, 920);\n  print('tangent', 16, 40);\n  tancurve\nEND.\n",MovingBall:"PROGRAM MovingBall;\nVAR x, y, count: integer;\nBEGIN\n  x := 100;\n  y := 700;\n  for count := 1 to 100 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      x := x + 8;\n      y := y - 4;\n      setxy(x, y);\n      colour(red);\n      blot(50);\n      update;\n      pause(10)\n    end\nEND.\n",BouncingBall:"PROGRAM BouncingBall;\nVAR x, y: integer;\n    xvel, yvel: integer;\nBEGIN\n  x := 100;\n  y := 700;\n  xvel := 8;\n  yvel := -4;\n  while 0 < 1 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      x := x + xvel;\n      y := y + yvel;\n      setxy(x, y);\n      colour(red);\n      blot(50);\n      update;\n      pause(10);\n      if (x < 50) or (x > 949) then\n        xvel := -xvel;\n      if (y < 50) or (y > 949) then\n        yvel := -yvel\n    end\nEND.\n",TurtleMove:"PROGRAM TurtleMove;\nVAR count: integer;\nBEGIN\n  setxy(100, 700);\n  for count := 1 to 100 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      movexy(8, -4);\n      colour(red);\n      blot(50);\n      update;\n      pause(10)\n    end\nEND.\n",TurtleBounce:"PROGRAM TurtleBounce;\nVAR xvel, yvel: integer;\nBEGIN\n  setxy(100, 700);\n  xvel := 8;\n  yvel := -4;\n  while 0 < 1 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      movexy(xvel, yvel);\n      colour(red);\n      blot(50);\n      update;\n      pause(10);\n      if (turtx < 50) or (turtx > 949) then\n        xvel := -xvel;\n      if (turty < 50) or (turty > 949) then\n        yvel := -yvel\n    end\nEND.\n",BouncingFace:"PROGRAM BouncingFace;\nCONST facesize = 100;\nVAR x, y: integer;\n    xvel, yvel: integer;\n\n  Procedure face(size: integer);\n\n    procedure eye;\n    begin\n      colour(white);\n      ellblot(size * 3 / 20, size / 10);\n      colour(emerald);\n      blot(size * 9 / 100);\n      colour(black);\n      blot(size / 25)\n    end;\n\n  Begin\n    direction(0);\n    colour(peach);\n    blot(size);\n    colour(darkred);\n    blot(size * 7 / 10);\n    forward(size * 3 / 20);\n    colour(peach);\n    blot(size * 3 / 4);\n    back(size * 3 / 10);\n    colour(royal);\n    blot(size * 3 / 20);\n    penup;\n    forward(size * 9 / 20);\n    left(90);\n    forward(size * 2 / 5);\n    eye;\n    back(size * 4 / 5);\n    eye\n  End;\n\nBEGIN\n  x := 300;\n  y := 700;\n  xvel := 8;\n  yvel := -4;\n  while 0 < 1 do\n    begin\n     noupdate;\n     colour(white);\n     blot(facesize + 1);\n     x := x + xvel;\n     y := y + yvel;\n     setxy(x, y);\n     face(facesize);\n     setxy(x, y);\n     update;\n     pause(10);\n     if (x < facesize) or (x > 999 - facesize) then\n       xvel := -xvel;\n     if (y < facesize) or (y > 999 - facesize) then\n       yvel := -yvel\n    end\nEND.\n",MultiBounce:"PROGRAM MultiBounce;\nCONST minsize = 70;\n      maxsize = 130;\n      balls = 10;\nVAR x, y: array[1..balls] of integer;\n    xvel, yvel: array[1..balls] of integer;\n    size, colr: array[1..balls] of integer;\n    n: integer;\nBEGIN\n  for n := 1 to balls do\n    begin\n      size[n] := minsize + random(maxsize - minsize);\n      colr[n] := rgb(n);\n      x[n] := random(1000 - 2 * size[n]) + size[n];\n      y[n] := random(1000 - 2 * size[n]) + size[n];\n      xvel[n] := random(15) - 7;\n      yvel[n] := random(15) - 7\n    end;\n  repeat\n    noupdate;\n    blank(white);\n    for n := 1 to balls do\n      begin\n       x[n] := x[n] + xvel[n];\n       y[n] := y[n] + yvel[n];\n       setxy(x[n], y[n]);\n       colour(colr[n]);\n       blot(size[n]);\n       if (x[n] < size[n]) or (x[n] > 1000 - size[n]) then\n         xvel[n] := -xvel[n];\n       if (y[n] < size[n]) or (y[n] > 1000 - size[n]) then\n         yvel[n] := -yvel[n]\n      end;\n    update;\n    pause(5)\n  until 1 = 0\nEND.\n",BouncingTriangle:"PROGRAM BouncingTriangle;\nCONST size = 100;\nVAR x, y, d: integer;\n    xvel, yvel, dvel: integer;\n    bouncex, bouncey: boolean;\n\n  Procedure triangle(col: integer);\n  Var count: integer;\n  Begin\n    bouncex := false;\n    bouncey := false;\n    setxy(x, y);\n    direction(d);\n    colour(col);\n    for count := 1 to 3 do\n      begin\n        forward(size);\n        if abs(turtx - 500) > 495 then\n          bouncex := true;\n        if abs(turty - 500) > 495 then\n          bouncey := true;\n        back(size);\n        forget(1);\n        right(120)\n      end;\n    polygon(3)\n  End;\n\nBEGIN\n  x := 300;\n  y := 700;\n  d := 0;\n  xvel := 8;\n  yvel := -4;\n  dvel := 5;\n  while 0 < 1 do\n    begin\n      noupdate;\n      blank(white);\n      x := x + xvel;\n      y := y + yvel;\n      d := (d + dvel) mod 360;\n      triangle(red);\n      update;\n      pause(10);\n      if bouncex then\n        begin\n          xvel := -xvel;\n          dvel := -dvel\n        end;\n      if bouncey then\n        begin\n          yvel := -yvel;\n          dvel := -dvel\n        end\n   end\nEND.\n",BouncingShapes:"PROGRAM BouncingShapes;\nCONST minsize = 70;\n      maxsize = 130;\n      shapes = 6;\nVAR x, y, d: array[1..shapes] of integer;\n    xvel, yvel, dvel: array[1..shapes] of integer;\n    sides, size, colr: array[1..shapes] of integer;\n    bouncex, bouncey: boolean;\n    n: integer;\n\n Procedure drawshape(sid, siz, col: integer);\n Var count: integer;\n Begin\n  bouncex := false;\n  bouncey := false;\n  colour(col);\n  for count := 1 to sid do\n   begin\n    forward(siz);\n    if abs(turtx - 500) > 495 then\n     bouncex := true;\n    if abs(turty - 500) > 495 then\n     bouncey := true;\n    back(siz);\n    forget(1);\n    right(360 / sid)\n   end;\n  polygon(sid)\n End;\n\nBEGIN\n for n := 1 to shapes do\n  begin\n   sides[n] := n + 2;\n   size[n] := minsize + random(maxsize - minsize);\n   colr[n] := rgb(n);\n   x[n] := random(1000 - 2 * size[n]) + size[n];\n   y[n] := random(1000 - 2 * size[n]) + size[n];\n   d[n] := random(360);\n   xvel[n] := random(15) - 7;\n   yvel[n] := random(15) - 7;\n   dvel[n] := random(4) + 3\n  end;\n while 0 < 1 do\n  begin\n   noupdate;\n   blank(white);\n   for n := 1 to shapes do\n    begin\n     x[n] := x[n] + xvel[n];\n     y[n] := y[n] + yvel[n];\n     d[n] := (d[n] + dvel[n]) mod 360;\n     setxy(x[n], y[n]);\n     direction(d[n]);\n     drawshape(sides[n], size[n], colr[n]);\n     if bouncex then\n      begin\n       xvel[n] := -xvel[n];\n       dvel[n] := -dvel[n]\n      end;\n     if bouncey then\n      begin\n       yvel[n] := -yvel[n];\n       dvel[n] := -dvel[n]\n      end\n    end;\n   update;\n   pause(5)\n  end\nEND.\n",GravitySteps:"PROGRAM GravitySteps;\nVAR bounce: integer;\n\n  Procedure steps(s: integer);\n  Var size, count: integer;\n  Begin\n    size := 1000 / s;\n    setxy(0, 1000);\n    thickness(1);\n    for count := 1 to s * 2 do\n      if count mod 2 = 0 then\n        movexy(0, -size)\n      else\n        movexy(size, 0);\n    movexy(0, s * size);\n    movexy(-s * size, 0);\n    colour(blue);\n    polygon(s * 2 + 2)\n  End;\n\n  Procedure throwball(xvel, yvel, gravity, floor: integer);\n  Begin\n    repeat\n      colour(white);\n      blot(25);\n      movexy(xvel, yvel);\n      yvel := yvel + gravity;\n      if turty > floor then\n        turty := floor;\n      colour(red);\n      blot(24);\n      update;\n      pause(10);\n      noupdate\n    until turty = floor\n  End;\n\nBEGIN\n  steps(10);\n  setxy(950, 75);\n  repeat\n    throwball(-2, -22, 1, turty + 100)\n  until turtx < 75;\n  for bounce := 1 to 10 do\n    throwball(0, bounce * 2 - 20, 1, turty)\nEND.\n",SolarSystem:"PROGRAM SolarSystem;\nCONST sunradius = 50000;\nVAR radius, distancefromsun, design, rotation, speed: array[1..8] of integer;\nVAR i: integer;\nBEGIN\n  radius[1] := 2433;\n  distancefromsun[1] := 5795;\n  speed[1] := 1607;\n  design[1] := white;\n  radius[2] := 6053;\n  distancefromsun[2] := 10811;\n  speed[2] := 1174;\n  design[2] := ochre;\n  radius[3] := 6371;\n  distancefromsun[3] := 14957;\n  speed[3] := 1000;\n  design[3] := blue;\n  radius[4] := 3380;\n  distancefromsun[4] := 22784;\n  speed[4] := 802;\n  design[4] := orangered;\n  radius[5] := 71492;\n  distancefromsun[5] := 77814;\n  speed[5] := 434;\n  design[5] := lightred;\n  radius[6] := 58219;\n  distancefromsun[6] := 142700;\n  speed[6] := 323;\n  design[6] := cream;\n  radius[7] := 23470;\n  distancefromsun[7] := 287030;\n  speed[7] := 182;\n  design[7] := cyan;\n  radius[8] := 23716;\n  distancefromsun[8] := 449990;\n  speed[8] := 159;\n  design[8] := royal;\n  angles(360000);\n  canvas(0, 0, 1000000, 1000000);\n  resolution(500, 500);\n  thickness(1);\n  penup;\n  while true do\n    begin\n      blank(black);\n      home;\n      colour(yellow);\n      blot(sunradius);\n      for i := 1 to 8 do\n        begin\n          home;\n          colour(white);\n          circle(distancefromsun[i] + sunradius);\n          right(rotation[i]);\n          forward(distancefromsun[i] + sunradius);\n          rotation[i] := (rotation[i] + speed[i]) mod 360000;\n          colour(design[i]);\n          if i <= 4 then\n            blot(radius[i] * 2)\n          else\n            blot(radius[i] / 2)\n        end;\n      update;\n      noupdate\n    end\nEND.\n",AskInput:"PROGRAM AskInput;\nVAR s: string;\nBEGIN\n  write('What is your name?  ');\n  s := readln;\n  writeln('');\n  write('Hello, ' + s + ', ...  ');\n  pause(500);\n  writeln('How are you?')\nEND.\n",QuickClick:"PROGRAM QuickClick;\nVAR x, y: integer;\n    count: integer;\n    clickcol: integer;\nBEGIN\n  blank(cream);\n  setxy(15, 200);\n  print('This reaction game will display a sequence', 4, 36);\n  setxy(20, 270);\n  print('of 10 coloured circles on the Canvas.  Try', 4, 36);\n  setxy(20, 340);\n  print('to click the mouse on each circle as quickly', 4, 36);\n  setxy(20, 410);\n  print('as you can, and see how short a total time', 4, 36);\n  setxy(20, 480);\n  print('you can achieve for all 10.', 4, 36);\n  setxy(100, 620);\n  print('Now press the \"Esc\" key to start ...', 4, 36);\n  keyecho(false);\n  repeat\n  until (abs(?key) = \\escape);\n  timeset(0);\n  for count := 1 to 10 do\n    begin\n      x := random(900) + 50;\n      y := random(900) + 50;\n      blank(black);\n      setxy(x, y);\n      colour(rgb(count));\n      blot(50);\n      repeat\n        repeat\n          update\n        until ?lmouse > 0;\n        clickcol := pixcol(?mousex, ?mousey)\n      until clickcol = turtc\n    end;\n  blank(lightblue);\n  setxy(60, 460);\n  colour(lightred);\n  print('Your time was ' + qstr(time, 1000, 2) + ' seconds', 4, 50)\nEND.\n",TypingTest:"PROGRAM TypingTest;\nVAR count: integer;\n    letters: string;\n    c, m, n: integer;\n    temp: char;\n    x, y: integer;\nBEGIN\n  blank(cream);\n  setxy(15, 200);\n  print('In this typing test,  you will be shown the', 4, 36);\n  setxy(20, 270);\n  print('letters of the alphabet in a random order,', 4, 36);\n  setxy(20, 340);\n  print('and in a mixture of upper- and lower-case.', 4, 36);\n  setxy(20, 410);\n  print('Type them as fast as you can, and see how', 4, 36);\n  setxy(20, 480);\n  print('quickly you can finish the entire alphabet.', 4, 36);\n  setxy(100, 620);\n  print('Now press the \"Esc\" key to start ...', 4, 36);\n  keyecho(false);\n  repeat\n  until (abs(?key) = \\escape);\n  letters := '';\n  for c := 65 to 90 do\n    if random(2) = 0 then\n      letters := letters + chr(c)\n    else\n      letters := letters + chr(c + 32);\n  for count := 1 to 50 do\n    begin\n      m := random(26) + 1;\n      n := random(26) + 1;\n      if m <> n then\n        begin\n          temp := letters[m];\n          letters[m] := letters[n];\n          letters[n] := temp\n        end\n    end;\n  timeset(0);\n  for count := 1 to 26 do\n    begin\n      blank(black);\n      setxy(100 + random(300), random(250));\n      colour(yellow);\n      print(letters[count], 3, 450);\n      repeat\n      until read(1) = letters[count]\n    end;\n  blank(lightblue);\n  setxy(60, 460);\n  colour(lightred);\n  print('Your time was ' + qstr(time, 1000, 2) + ' seconds', 4, 50)\nEND.\n",TypingTestKeys:"PROGRAM TypingTestKeys;\nVAR count: integer;\n    letters: string;\n    c, m, n: integer;\n    temp: char;\n    lowcase, shiftok: boolean;\n    x, y: integer;\nBEGIN\n  blank(cream);\n  setxy(15, 200);\n  print('In this typing test, you will be shown the', 4, 36);\n  setxy(20, 270);\n  print('letters of the alphabet in a random order,', 4, 36);\n  setxy(20, 340);\n  print('and in a mixture of upper- and lower-case.', 4, 36);\n  setxy(20, 410);\n  print('Type them as fast as you can, and see how', 4, 36);\n  setxy(20, 480);\n  print('quickly you can finish the entire alphabet.', 4, 36);\n  setxy(100, 620);\n  print('Now press the \"Esc\" key to start ...', 4, 36);\n  keyecho(false);\n  repeat\n  until (abs(?key) = \\escape);\n  letters := '';\n  for c := 65 to 90 do\n    letters := letters + chr(c);\n  for count := 1 to 50 do\n    begin\n     m := random(26) + 1;\n     n := random(26) + 1;\n     if m <> n then\n       begin\n         temp := letters[m];\n         letters[m] := letters[n];\n         letters[n] := temp\n       end\n    end;\n  timeset(0);\n  for count := 1 to 26 do\n    begin\n      c := ord(letters[count]);\n      lowcase := (random(2) = 0);\n      blank(black);\n      setxy(100 + random(300), random(250));\n      colour(yellow);\n      if lowcase then\n        print(chr(c + 32), 3, 450)\n      else\n        print(chr(c), 3, 450);\n      repeat\n        shiftok := ((abs(?kshift) and 8) > 0) xor lowcase\n      until (abs(?key) = c) and shiftok;\n      reset(?kshift)\n    end;\n  blank(lightblue);\n  setxy(60, 460);\n  colour(lightred);\n  print('Your time was ' + qstr(time, 1000, 2) + ' seconds', 4, 50)\nEND.\n",IterationGame:"PROGRAM IterationGame;\nVAR s: string;\n    first, count, latest: integer;\nBEGIN\n  keyecho(false);\n  repeat\n    blank(white);\n    setxy(50, 20);\n    colour(blue);\n    print('Type in a starting integer (>1):', 4, 36);\n    setxy(800, 20);\n    colour(black);\n    repeat\n      reset(\\keybuffer);\n      repeat\n        box(200, 60, white, false);\n        print(read(0), 4, 36);\n        pause(100)\n      until abs(?key) = \\return;\n      s := readln;\n      reset(?key);\n      first := valdef(s, -1)\n    until first > 1;\n    latest := first;\n    count := 0;\n    colour(blue);\n    repeat\n      setxy((count mod 10) * 100 + 20, (count div 10) * 45 + 300);\n      print(str(latest), 4, 24);\n      if latest mod 2 = 0 then\n        latest := latest / 2\n      else\n        latest := 3 * latest + 1;\n      inc(count);\n      colour(green)\n    until latest = 1;\n    setxy((count mod 10) * 100 + 20, (count div 10) * 45 + 300);\n    colour(red);\n    print(str(latest), 4, 24);\n    setxy(100, 100);\n    print('That took ' + str(count) + ' iterations to reach 1', 4, 36);\n    colour(black);\n    setxy(250, 200);\n    print('[Press a key to continue]', 4, 30);\n    repeat\n    until ?key > 0;\n    reset(?key)\n  until false\nEND.\n",SpongeThrow:"PROGRAM SpongeThrow;\nCONST facesize = 100;\n      spongesize = 40;\nVAR x, y: integer;\n    xvel, yvel: integer;\n\n  Procedure face(size: integer);\n\n    procedure eye;\n    begin\n      colour(white);\n      ellblot(size * 3 / 20, size / 10);\n      colour(emerald);\n      blot(size * 9 / 100);\n      colour(black);\n      blot(size / 25)\n    end;\n\n  Begin\n    direction(0);\n    colour(peach);\n    blot(size);\n    colour(darkred);\n    blot(size * 7 / 10);\n    forward(size * 3 / 20);\n    colour(peach);\n    blot(size * 3 / 4);\n    back(size * 3 / 10);\n    colour(royal);\n    blot(size * 3 / 20);\n    penup;\n    forward(size * 9 / 20);\n    left(90);\n    forward(size * 2 / 5);\n    eye;\n    back(size * 4 / 5);\n    eye\n  End;\n\nBEGIN\n  x := 300;\n  y := 700;\n  xvel := 8;\n  yvel := -4;\n  while 0 < 1 do\n    begin\n      noupdate;\n      colour(white);\n      setxy(x, y);\n      blot(facesize + spongesize);\n      x := x + xvel;\n      y := y + yvel;\n      setxy(x, y);\n      face(facesize);\n      update;\n      pause(10);\n      if (?lmouse > 0) and (hypot(?mousex - x, ?mousey - y, 1) < facesize) then\n        begin\n          setxy(?mousex, ?mousey);\n          randcol(4);\n          blot(spongesize);\n          pause(100)\n        end;\n      if (x < facesize) or (x > 999 - facesize) then\n        xvel := -xvel;\n      if (y < facesize) or (y > 999 - facesize) then\n        yvel := -yvel\n    end\nEND.\n",Arcade:"PROGRAM Arcade;\nCONST targets = 10;\nVAR facex, facey: integer;\n    facexspeed, faceyspeed: integer;\n    hits, i: integer;\n\n  Procedure bottle(x, y: integer);\n  Begin\n    setxy(x, y);\n    colour(cyan);\n    movexy(0, -15);\n    thickness(40);\n    drawxy(0, -50);\n    thickness(10);\n    drawxy(0, -40);\n    thickness(2);\n    movexy(-20, 90);\n    movexy(40, 0);\n    movexy(0, -20);\n    movexy(-40, 0);\n    colour(purple);\n    polygon(4);\n    movexy(20, 35)\n  End;\n\n  Procedure addhat;\n  Begin\n    setxy(facex, facey - 80);\n    colour(darkgrey);\n    ellblot(90, 30);\n    thickness(2);\n    colour(black);\n    ellipse(90, 30);\n    movexy(-70, 0);\n    thickness(4);\n    drawxy(35, -70);\n    drawxy(70, 0);\n    drawxy(35, 70);\n    colour(darkgrey);\n    thickness(1);\n    polygon(4)\n  End;\n\n  Procedure face;\n  Begin\n    thickness(1);\n    colour($FF8899);\n    blot(100);\n    colour(white);\n    setxy(facex - 20, facey - 20);\n    blot(10);\n    colour(black);\n    blot(4);\n    thickness(4);\n    movexy(0, -22);\n    colour($663300);\n    drawxy(15, 15);\n    thickness(1);\n    colour(white);\n    setxy(facex + 20, facey - 20);\n    blot(10);\n    colour(black);\n    blot(4);\n    thickness(4);\n    movexy(0, -22);\n    colour($663300);\n    drawxy(-15, 15);\n    addhat;\n    setxy(facex, facey + 13);\n    colour(red);\n    blot(10);\n    movexy(0, 32);\n    ellblot(30, 6);\n    colour(white);\n    ellblot(20, 4)\n  End;\n\n  Procedure background;\n  Begin\n    blank(coffee);\n    bottle(100, 500);\n    bottle(200, 500);\n    bottle(450, 500);\n    bottle(500, 500);\n    bottle(565, 500);\n    bottle(865, 500);\n    colour(darkbrown);\n    thickness(20);\n    setxy(0, 125);\n    drawxy(1000, 0);\n    setxy(0, 325);\n    drawxy(1000, 0);\n    setxy(0, 525);\n    drawxy(1000, 0);\n    colour(brown);\n    thickness(30);\n    setxy(0, 100);\n    drawxy(1000, 0);\n    setxy(0, 300);\n    drawxy(1000, 0);\n    setxy(0, 500);\n    drawxy(1000, 0)\n  End;\n\n  Procedure gunsight;\n  Begin\n    colour(black);\n    thickness(6);\n    setxy(?mousex - 50, ?mousey);\n    drawxy(100, 0);\n    setxy(?mousex, ?mousey - 50);\n    drawxy(0, 100)\n  End;\n\nBEGIN\n  facex := -100;\n  facey := 625;\n  facexspeed := 5;\n  faceyspeed := 0;\n  hits := 0;\n  cursor(0);\n  while hits < targets do\n    begin\n      noupdate;\n      background;\n      setxy(facex, facey);\n      face;\n      for i := 1 to hits do\n        bottle(50 * i - 35, 740);\n      colour(brown);\n      thickness(272);\n      setxy(0, 863);\n      drawxy(1000, 0);\n      gunsight;\n      thickness(2);\n      update;\n      facex := facex + facexspeed;\n      facey := facey + faceyspeed;\n      if facex > 1100 then\n        facex := -100;\n      if facex < -100 then\n        facex := 1100;\n      if (facey < 100) or (facey > 625) then\n        faceyspeed := faceyspeed * -1;\n      if ((?lmouse > 0) and (((?mousex - facex) * (?mousex - facex)) + ((?mousey - facey) * (?mousey - facey)) < 10000)) then\n        begin\n          facex := -100;\n          facexspeed := random(5) + 2;\n          faceyspeed := random(9) - 4;\n          facey := random(550) + 50;\n          inc(hits)\n        end\n    end;\n  blank(black);\n  setxy(200, 450);\n  colour(green);\n  print('  Well done!  ', 4, 75)\nEND.\n",SnakeGame:"PROGRAM SnakeGame;\nCONST boardsize = 30;\n      snakecolour = purple;\n      applecolour = green;\nVAR snakelength: integer;\n    crash: boolean;\n\n  Procedure newapple;\n  Var x, y: integer;\n  Begin\n    repeat\n      x := random(boardsize);\n      y := random(boardsize)\n    until (pixcol(x, y) <> snakecolour);\n    pixset(x, y, applecolour)\n  End;\n\nBEGIN\n  canvas(0, 0, boardsize, boardsize);\n  resolution(boardsize, boardsize);\n  angles(4);\n  blank(lightblue);\n  cursor(0);\n  colour(snakecolour);\n  thickness(1);\n  penup;\n  forward(1);\n  snakelength := 2;\n  newapple;\n  crash := false;\n  repeat\n    noupdate;\n    if (abs(?key) = \\up) and (turtd <> 2) then\n      direction(0);\n    if (abs(?key) = \\right) and (turtd <> 3) then\n      direction(1);\n    if (abs(?key) = \\down) and (turtd <> 0) then\n      direction(2);\n    if (abs(?key) = \\left) and (turtd <> 1) then\n      direction(3);\n    forward(1);\n    if (turtx < 0) or (turtx >= boardsize) or (turty < 0) or (turty >= boardsize) then\n      crash := true;\n    if pixcol(turtx, turty) = snakecolour then\n      crash := true;\n    if pixcol(turtx, turty) = applecolour then\n      begin\n        inc(snakelength);\n        pixset(turtx, turty, snakecolour);\n       newapple\n      end;\n    colour(lightblue);\n    polyline(snakelength + 2);\n    colour(snakecolour);\n    polyline(snakelength);\n    update;\n    pause(250 - (snakelength * 3))\n  until crash;\n  resolution(1000, 1000);\n  blank(lilac);\n  setxy(boardsize / 4, 2 * boardsize / 5);\n  print('Score ' + str(snakelength - 2), 20, 100)\nEND.\n",NoughtsAndCrosses:"PROGRAM NoughtsAndCrosses;\nCONST cross = 33;\n      nought = 2;\nVAR board: array[0..11] of integer;\n    numgames: integer;\n    randfirst: boolean;\n    i, column, row: integer;\n\n  Procedure doblot(x, y, col: integer);\n  Begin\n    setxy(x * 250 + 250, y * 250 + 175);\n    colour(rgb(col));\n    blot(70)\n  End;\n\n  Procedure copy(var fromarray, toarray: array of integer);\n  Var i: integer;\n  Begin\n    for i := 0 to fromarray.length - 1 do\n      toarray[i] := fromarray[i]\n  End;\n\n  Procedure evaluate(var b1: array of integer; jm, depth: integer);\n  Var mover: integer;\n      replyscore: integer;\n      b2: array[0..11] of integer;\n      m: integer;\n  Begin\n    mover := cross + nought - jm;\n    replyscore := -2;\n    b1[9] := 0;\n    b1[10] := -1;\n    b1[11] := depth;\n    if (((b1[0] = jm) and (b1[1] = jm) and (b1[2] = jm))\n        or ((b1[3] = jm) and (b1[4] = jm) and (b1[5] = jm))\n        or ((b1[6] = jm) and (b1[7] = jm) and (b1[8] = jm))\n        or ((b1[0] = jm) and (b1[3] = jm) and (b1[6] = jm))\n        or ((b1[1] = jm) and (b1[4] = jm) and (b1[7] = jm))\n        or ((b1[2] = jm) and (b1[5] = jm) and (b1[8] = jm))\n        or ((b1[0] = jm) and (b1[4] = jm) and (b1[8] = jm))\n        or ((b1[2] = jm) and (b1[4] = jm) and (b1[6] = jm))) then\n      b1[9] := 1\n    else\n      begin\n        m := 0;\n        repeat\n          if (b1[m] = 0) then\n            begin\n              copy(b1, b2);\n              b2[m] := mover;\n              evaluate(b2, mover, depth + 1);\n              if (b2[9] > replyscore) then\n                begin\n                  replyscore := b2[9];\n                  b1[10] := m;\n                  b1[11] := b2[11]\n                end\n            end;\n          m := m + 1\n        until (m > 8) or (replyscore > 0);\n        if (replyscore <> -2) then\n         b1[9] := -replyscore\n      end\n  End;\n\nBEGIN\n  numgames := 0;\n  repeat\n    numgames := numgames + 1;\n    randfirst := (numgames mod 2 = 1);\n    blank(lightgreen);\n    thickness(10);\n    colour(black);\n    setxy(375, 50);\n    drawxy(0, 750);\n    setxy(625, 50);\n    drawxy(0, 750);\n    setxy(125, 300);\n    drawxy(750, 0);\n    setxy(125, 550);\n    drawxy(750, 0);\n    for i := 0 to 10 do\n      board[i] := 0;\n    board[11] := 8;\n    repeat\n      if (randfirst) then\n        begin\n          board[10] := random(9);\n          randfirst := false\n        end\n      else\n        begin\n          cursor(2);\n          repeat\n            repeat\n              repeat\n              until ?lmouse > 0;\n              pause(200)\n            until ((?clickx >= 125) and (?clickx <= 875) and (?clicky >= 50) and (?clicky <= 800));\n            column := (?clickx - 125) div 250;\n            row := (?clicky - 50) div 250\n          until board[column + row * 3] = 0;\n          doblot(column, row, cross);\n          board[column + row * 3] := cross;\n          cursor(11);\n          evaluate(board, cross, 0)\n        end;\n      if (board[10] <> -1) then\n        begin\n          doblot(board[10] mod 3, board[10] div 3, nought);\n          board[board[10]] := nought\n        end\n    until (board[11] <= 1);\n    setxy(350, 850);\n    colour(black);\n    if (board[9] = 0) then\n      print('  Draw!  ', 4, 60)\n    else\n      print('  I win!  ', 4, 60);\n    pause(2500)\n  until (1 <> 1)\nEND.\n",SimpleDraw:"PROGRAM SimpleDraw;\n\n  Procedure palette;\n  Var col: integer;\n  Begin\n    for col := 1 to 10 do\n      begin\n        setxy(col * 100 - 50, 950);\n        colour(rgb(col));\n        blot(50)\n      end\n  End;\n\nBEGIN\n  palette;\n  home;\n  thickness(10);\n  blot(2);\n  repeat\n    repeat\n    until (?lmouse > 0) or (?rmouse > 0);\n    if ?mousey > 900 then\n      colour(rgb(?mousex div 100 + 1))\n    else\n      if ?lmouse > 0 then\n      drawxy(?mousex - turtx, ?mousey - turty)\n    else\n      setxy(?mousex, ?mousey)\n  until false\nEND.\n",PaintApp:"PROGRAM PaintApp;\nVAR brushwidth: integer;\n    brushcolour: integer;\n\n  Procedure setbrushwidth(wdth: integer);\n  Var count: integer;\n  Begin\n    brushwidth := wdth;\n    noupdate;\n    colour(black);\n    for count := 0 to 4 do\n      begin\n        setxy(625 + count * 50, 875);\n        blot(8 + count * 2)\n      end;\n    colour(brushcolour);\n    recolour(((brushwidth + 16) * 25) + 25, 875, lightred);\n    update\n  End;\n\n  Procedure setbrushcolour(clr: integer);\n  Begin\n    brushcolour := clr;\n    colour(clr);\n    setxy(975, 875);\n    blot(16)\n  End;\n\n  Procedure paintbrush(x: integer; y: integer);\n  Begin\n    setxy(x, y);\n    blot(brushwidth)\n  End;\n\n  Procedure paintcan(x: integer; y: integer);\n  Begin\n    recolour(x, y, brushcolour)\n  End;\n\n  Procedure setup;\n  Var count: integer;\n\n    procedure square(col: integer);\n    begin\n      movexy(50, 0);\n      movexy(0, 50);\n      movexy(-50, 0);\n      movexy(0, -50);\n      colour(col);\n      polygon(4)\n    end;\n\n  Begin\n    colour(lightred);\n    setxy(0, 850);\n    drawxy(1000, 0);\n    setxy(0, 900);\n    drawxy(1000, 0);\n    setxy(450, 850);\n    drawxy(0, 50);\n    setxy(850, 850);\n    drawxy(0, 50);\n    colour(black);\n    setxy(10, 858);\n    print('Left-click to draw, right-click to fill', 0, 20);\n    setxy(450 + 10, 858);\n    print('Brush width:', 0, 20);\n    setxy(850 + 10, 858);\n    print('Colour:', 0, 20);\n    setxy(0, 900);\n    for count := 1 to 20 do\n      begin\n        square(rgb(count));\n        movexy(0, 50);\n        square(rgb(count + 30));\n        movexy(50, -50)\n      end;\n    setbrushwidth(8);\n    setbrushcolour(black)\n  End;\n\nBEGIN\n  setup;\n  repeat\n    if ?lmouse > 0 then\n      begin\n        if ?mousey > 900 then\n          setbrushcolour(pixcol(?mousex, ?mousey))\n        else\n        if (?mousey > 850) and ((?mousex > 600) and (?mousex < 850)) then\n          setbrushwidth(((?mousex div 50) * 2) - 16)\n        else\n        if ?mousey < 850 - brushwidth then\n          paintbrush(?mousex, ?mousey)\n      end;\n    if (?rmouse > 0) and (?mousey < 850) then\n      paintcan(?mousex, ?mousey)\n  until false\nEND.\n",MultipleTurtles:"PROGRAM MultipleTurtles;\nCONST numturtles = 5;\n      x = 1;\n      y = 2;\n      d = 3;\n      a = 4;\n      t = 5;\n      c = 6;\nVAR turtles: array[1..numturtles, x..c] of integer;\n    i: integer;\n\n  Procedure setupturtles;\n  Var i: integer;\n  Begin\n    for i := 1 to numturtles do\n      begin\n        turtles[i, x] := 10000;\n        turtles[i, y] := 70000;\n        turtles[i, d] := 35 + i * 10;\n        turtles[i, a] := 360;\n        turtles[i, t] := 5 + i;\n        turtles[i, c] := rgb(i)\n      end\n  End;\n\n  Procedure menu;\n  Var i: integer;\n  Begin\n    for i := 1 to numturtles do\n      begin\n        setxy(5000, i * 10000);\n        colour(rgb(i));\n        blot(5000)\n      end\n  End;\n\n  Procedure handleclick;\n  Var col, i, thist: integer;\n      inita, initd, nexta, nextd: integer;\n  Begin\n    col := pixcol(?mousex, ?mousey);\n    thist := 0;\n    for i := 1 to numturtles do\n      if col = rgb(i) then\n        thist := i;\n    if thist > 0 then\n      begin\n        newturtle(turtles[thist]);\n        write('Turtle ' + str(thist) + ' changing direction,');\n        write('  from ' + str(turtles[thist, d]) + '/' + str(turtles[thist, a]));\n        angles(random(46) + 45);\n        writeln('  to ' + str(turtles[thist, d]) + '/' + str(turtles[thist, a]));\n        pause(200)\n      end\n  End;\n\nBEGIN\n  canvas(0, 0, 100000, 100000);\n  setxy(2500, 80000);\n  print('Click on a circle to alter the ANGLES setting', 0, 36);\n  setxy(2500, 86000);\n  print('of the corresponding turtle. Its direction will', 0, 36);\n  setxy(2500, 92000);\n  print('then change to the closest possible angle.', 0, 36);\n  for i := 1 to numturtles do\n    begin\n      setxy(10000, 70000);\n      direction(35 + i * 10);\n      forward(110000)\n    end;\n  menu;\n  setupturtles;\n  repeat\n    for i := 1 to numturtles do\n      begin\n       newturtle(turtles[i]);\n       forward(100)\n      end;\n    pause(50);\n    if ?click > 128 then\n      handleclick\n  until ?key = \\escape\nEND.\n",AimCannon:"PROGRAM AimCannon;\nCONST gunlength = 1000;\n      distancecol = green;\n      timecol = red;\nVAR n: integer;\n    steps: integer;\n\n  Procedure graphaxes;\n  Var n: integer;\n  Begin\n    thickness(5);\n    setxy(9700, 600);\n    drawxy(0, 3900);\n    drawxy(-9000, 0);\n    drawxy(0, -3900);\n    for n := 0 to 90 do\n      if n mod 5 = 0 then\n        begin\n          setxy(650 + n * 100, 4600);\n          print(str(n), 2, 16)\n        end;\n    for n := 0 to 9 do\n      begin\n        setxy(100, 4350 - n * 400);\n        print(str(n * 1000), 2, 16)\n      end;\n    for n := 0 to 9 do\n      begin\n        setxy(9900, 4380 - n * 400);\n        print(str(n * 20), 2, 16)\n      end;\n    setxy(4000, 4900);\n    print('Angle of elevation', 2, 24);\n    colour(distancecol);\n    setxy(0, 100);\n    print('Distance', 2, 24);\n    colour(timecol);\n    setxy(9600, 100);\n    print('Time', 2, 24)\n  End;\n\n  Procedure plot(x, y, col: integer);\n  Begin\n    setxy(700 + x * 100, 4500 - y * 2 / 5);\n    colour(col);\n    blot(40)\n  End;\n\n  Procedure aim;\n  Begin\n    repeat\n      noupdate;\n      setxy(0, 10000);\n      colour(cream);\n      blot(1600);\n      colour(yellowgreen);\n      blot(1400);\n      colour(maroon);\n      setxy(250, 9750);\n      blot(250);\n      forward(gunlength);\n      setxy(250, 9750);\n      colour(red);\n      blot(100);\n      update;\n      repeat\n      until (?lmouse > 0);\n      if pixcol(?mousex, ?mousey) = cream then\n        turnxy(?mousex - 250, ?mousey - 9750)\n    until pixcol(?mousex, ?mousey) = red\n  End;\n\n  Procedure fire(xvel, yvel, gravity, floor: integer);\n  Begin\n    setxy(250, 9750);\n    steps := 0;\n    repeat\n      inc(steps);\n      if pixcol(turtx, turty) = black then\n        begin\n          colour(white);\n          blot(90)\n        end;\n      movexy(xvel, yvel);\n      yvel := yvel + gravity;\n      if turty > floor then\n        turty := floor;\n      if (pixcol(turtx, turty) = white) or (turty = floor) then\n        begin\n          colour(black);\n          blot(75)\n        end;\n      update;\n      pause(10);\n      noupdate\n    until turty = floor\n  End;\n\nBEGIN\n  canvas(0, 0, 10500, 10000);\n  graphaxes;\n  turtd := 45;\n  thickness(20);\n  repeat\n    aim;\n    write('Elevation: ' + str(90 - turtd));\n    fire(cos(90 - turtd, 1, 96), sin(90 - turtd, 1, -96), 1, 9950);\n    write('  Distance: ' + str(turtx));\n    writeln('  Time: ' + str(steps));\n    plot(90 - turtd, turtx, distancecol);\n    plot(90 - turtd, steps * 50, timecol)\n  until 0 = 1\nEND.\n",AutoCannon:"PROGRAM AutoCannon;\nCONST gunlength = 1000;\n      distancecol = green;\n      timecol = red;\nVAR n: integer;\n    steps: integer;\n\n  Procedure graphaxes;\n  Var n: integer;\n  Begin\n    thickness(5);\n    setxy(9700, 600);\n    drawxy(0, 3900);\n    drawxy(-9000, 0);\n    drawxy(0, -3900);\n    for n := 0 to 90 do\n      if n mod 5 = 0 then\n        begin\n          setxy(650 + n * 100, 4600);\n          print(str(n), 2, 16)\n        end;\n    for n := 0 to 9 do\n      begin\n        setxy(100, 4350 - n * 400);\n        print(str(n * 1000), 2, 16)\n      end;\n    for n := 0 to 9 do\n      begin\n        setxy(9900, 4380 - n * 400);\n        print(str(n * 20), 2, 16)\n      end;\n    setxy(4000, 4900);\n    print('Angle of elevation', 2, 24);\n    colour(distancecol);\n    setxy(0, 100);\n    print('Distance', 2, 24);\n    colour(timecol);\n    setxy(9600, 100);\n    print('Time', 2, 24)\n  End;\n\n  Procedure plot(x, y, col: integer);\n  Begin\n    setxy(700 + x * 100, 4500 - y * 2 / 5);\n    colour(col);\n    blot(40)\n  End;\n\n  Procedure aim(elevation: integer);\n  Begin\n    noupdate;\n    setxy(0, 10000);\n    colour(cream);\n    blot(1600);\n    colour(yellowgreen);\n    blot(1400);\n    colour(maroon);\n    setxy(250, 9750);\n    blot(250);\n    direction(90 - elevation);\n    forward(gunlength);\n    setxy(250, 9750);\n    colour(red);\n    blot(100);\n    update\n  End;\n\n  Procedure fire(xvel, yvel, gravity, floor: integer);\n  Begin\n    setxy(250, 9750);\n    steps := 0;\n    repeat\n      inc(steps);\n      if pixcol(turtx, turty) = black then\n        begin\n          colour(white);\n          blot(90)\n        end;\n      movexy(xvel, yvel);\n      yvel := yvel + gravity;\n      if turty > floor then\n        turty := floor;\n      if (pixcol(turtx, turty) = white) or (turty = floor) then\n        begin\n          colour(black);\n          blot(75)\n        end;\n      update;\n      pause(10);\n      noupdate\n    until turty = floor\n  End;\n\nBEGIN\n  canvas(0, 0, 10500, 10000);\n  graphaxes;\n  turtd := 45;\n  thickness(20);\n  for n := 0 to 90 do\n    begin\n      aim(n);\n      write('Elevation: ' + str(90 - turtd));\n      fire(cos(90 - turtd, 1, 96), sin(90 - turtd, 1, -96), 1, 9950);\n      write('  Distance: ' + str(turtx));\n      writeln('  Time: ' + str(steps));\n      plot(90 - turtd, turtx, distancecol);\n      plot(90 - turtd, steps * 50, timecol)\n    end\nEND.\n",Launch:"PROGRAM Launch;\nCONST earthradius = 6371000;\n      earthgm = 398600442;\n      initdirection = 2000;\n      initthrust = 20000;\n      thrusttime = 500;\n      angleprecision = 1296000;\nVAR x, y, d, xvel, yvel: integer;\n    thrust, xthrust, ythrust: integer;\n    gravity, xgravity, ygravity: integer;\n    xacc, yacc: integer;\n    dist, prevdist, prevdiff, t: integer;\n    explosion: integer;\n\n  Procedure drawrocket;\n  Begin\n    noupdate;\n    blank(black);\n    colour(teal);\n    setxy(0, 0);\n    blot(earthradius / 1000);\n    setxy(x / 1000, y / 1000);\n    direction(d);\n    thickness(4);\n    colour(silver);\n    forward(200);\n    back(200);\n    if thrust > 0 then\n      begin\n        thickness(8);\n        colour(yellow);\n        back(200);\n        forward(200)\n      end;\n    update\n  End;\n\n  Procedure report;\n  Begin\n    writeln('');\n    writeln('TIME = ' + str(t));\n    writeln(' Xposition = ' + str(x) + ' metres');\n    writeln(' Yposition = ' + str(y) + ' metres');\n    writeln(' Height = ' + qstr(dist - earthradius, 1000, 2) + ' km');\n    writeln(' Direction = ' + qstr(d, 3600, 1) + ' degrees');\n    writeln(' Thrust = ' + qstr(thrust, 1000, 1) + ' newtons per kg');\n    writeln('  Xthrust = ' + qstr(xthrust, 1000, 1) + ' newtons per kg');\n    writeln('  Ythrust = ' + qstr(ythrust, 1000, 1) + ' newtons per kg');\n    writeln(' Gravity = ' + qstr(gravity, 1000, 1) + ' newtons per kg');\n    writeln('  Xgravity = ' + qstr(xgravity, 1000, 1) + ' newtons per kg');\n    writeln('  Ygravity = ' + qstr(ygravity, 1000, 1) + ' newtons per kg');\n    writeln(' Xvelocity = ' + qstr(xvel, 1000, 1) + ' metres per s');\n    writeln(' Yvelocity = ' + qstr(yvel, 1000, 1) + ' metres per s')\n  End;\n\nBEGIN\n  canvas(-20000, -20000, 40000, 40000);\n  angles(angleprecision);\n  x := 0;\n  y := -earthradius;\n  xvel := 0;\n  yvel := 0;\n  d := initdirection;\n  t := 0;\n  prevdiff := 1;\n  thrust := initthrust;\n  repeat\n    drawrocket;\n    prevdist := dist;\n    dist := hypot(x, y ,1);\n    if (dist - prevdist) * prevdiff <= 0 then\n      report;\n    prevdiff := dist - prevdist;\n    gravity := divmult(earthgm, divmult(dist, 1000000, dist), 1000);\n    xgravity := divmult(gravity, dist, -x);\n    ygravity := divmult(gravity, dist, -y);\n    xthrust := sin(d, 1, thrust);\n    ythrust := -cos(d, 1, thrust);\n    xvel := xvel + xgravity + xthrust;\n    yvel := yvel + ygravity + ythrust;\n    x := x + xvel / 1000;\n    y := y + yvel / 1000;\n    if yvel > 0 then\n      d := angleprecision / 2 - arctan(xvel, yvel, 1)\n    else\n      d := arctan(xvel, -yvel, 1);\n    inc(t);\n    if t = thrusttime then\n      thrust := 0\n  until (0 = 1) or (dist < earthradius) or (dist > 40000000);\n  if dist < earthradius then\n    begin\n      colour(yellow);\n      for explosion := 100 to 200 do\n        begin\n          blot(explosion);\n          pause(3)\n        end;\n      colour(black);\n      blot(200)\n    end\nEND.\n",Disease:"PROGRAM Disease;\nCONST width = 100;\n      height = 100;\n      susceptible = lightgreen;\n      infected = red;\n      recovered = blue;\n      startradius = 10;\n      infectprob = 1;\n      immuneprob = 2;\n      recoverprob = 15;\nVAR x, y, n: integer;\n    numinfected: integer;\n\n  Procedure infect(x, y: integer);\n  Begin\n    pixset(x, y, infected);\n    inc(numinfected)\n  End;\n\nBEGIN\n  canvas(0, 0, width, height);\n  resolution(width, height);\n  numinfected := 0;\n  noupdate;\n  for x := 0 to width - 1 do\n    for y := 0 to height - 1 do\n      if (random(100) < infectprob) and (hypot(x - width / 2, y - height / 2, 1) <= startradius) then\n        infect(x, y)\n      else\n      if random(100) < immuneprob then\n        pixset(x, y, recovered)\n      else\n        pixset(x, y, susceptible);\n  update;\n  repeat\n    x := random(width);\n    y := random(height);\n    if pixcol(x, y) = infected then\n      begin\n        if random(100) < recoverprob then\n          begin\n            pixset(x, y, recovered);\n            dec(numinfected)\n          end\n        else\n          begin\n            n := random(4) * 2 + 1;\n            x := x + n div 3 - 1;\n            y := y + n mod 3 - 1;\n            if pixcol(x, y) = susceptible then\n              infect(x, y)\n          end\n      end\n  until numinfected = 0\nEND.\n",GameOfLife:"PROGRAM GameOfLife;\nCONST width = 32;\n      height = 32;\nVAR x, y, i, j, dn: integer;\nBEGIN\n  canvas(0, 0, width, height);\n  resolution(width, height);\n  for x := 0 to width - 1 do\n    for y := 0 to height - 1 do\n      if random(7) = 0 then\n        pixset(x, y, black);\n  while ?key <> \\escape do\n    begin\n      noupdate;\n      for x := 0 to width - 1 do\n        for y := 0 to height - 1 do\n          begin\n            dn := 0;\n            for i := -1 to 1 do\n              for j := -1 to 1 do\n                dn := dn + pixcol((x + i + width) mod width, (y + j + height) mod height) and 1;\n            if ((pixcol(x, y) and 1 = 0) and ((dn < 5) or (dn > 6)))\n                or ((pixcol(x, y) and 1 = 1) and (dn = 6)) then\n              pixset(x, y, pixcol(x, y) xor 2)\n          end;\n      for x := 0 to width - 1 do\n        for y := 0 to height - 1 do\n          if (pixcol(x, y) and 3) mod 3 <> 0 then\n            pixset(x, y, pixcol(x, y) xor $FFFFFD);\n      update\n    end\nEND.\n",LifeArrays:"PROGRAM LifeArrays;\nCONST width = 32;\n      height = 32;\nVAR x, y, i, j, livenb: integer;\n    thisgen: array[0..width, 0..height] of boolean;\n    nextgen: array[0..width, 0..height] of boolean;\nBEGIN\n  canvas(0, 0, width, height);\n  resolution(width, height);\n  for x := 0 to width - 1 do\n    for y := 0 to height - 1 do\n      nextgen[x, y] := (random(7) = 0);\n  while ?key <> \\escape do\n    begin\n      noupdate;\n      for x := 0 to width - 1 do\n        for y := 0 to height - 1 do\n          begin\n            thisgen[x, y] := nextgen[x, y];\n            if thisgen[x, y] then\n              pixset(x, y, maroon)\n            else\n              pixset(x, y, lightgreen)\n          end;\n      update;\n      for x := 0 to width - 1 do\n        for y := 0 to height - 1 do\n          begin\n            livenb := 0;\n            for i := -1 to 1 do\n              for j := -1 to 1 do\n                if thisgen[(x + i + width) mod width, (y + j + height) mod height] then\n                  inc(livenb);\n            if thisgen[x, y] then\n              nextgen[x, y] := ((livenb = 3) or (livenb = 4))\n            else\n              nextgen[x, y] := (livenb = 3)\n          end\n    end\nEND.\n",Automata:"PROGRAM Automata;\nCONST width = 100;\n      height = 100;\nVAR n, rule: integer;\n    x, generation: integer;\n    cellcol: array[0..1] of integer;\n    nextstate: array[0..7] of integer;\n\n  Procedure setup(rulecode: integer);\n  Var nhood: integer;\n  Begin\n    for nhood := 0 to 7 do\n      begin\n        nextstate[nhood] := rulecode mod 2;\n        rulecode := rulecode div 2\n      end\n  End;\n\n  Procedure nextgen(g: integer);\n  Var x, xmod, thispix: integer;\n      n1, n2, n3: integer;\n  Begin\n    for x := -1 to width do\n      begin\n        xmod := (x + width) mod width;\n        thispix := pixcol(xmod, g - 1) and 1;\n        n3 := n2 * 2 + thispix;\n        n2 := n1 * 2 + thispix;\n        n1 := thispix;\n        if x > 0 then\n          pixset(x - 1, g, cellcol[nextstate[n3]])\n      end\n  End;\n\nBEGIN\n  canvas(0, 0, width, height);\n  resolution(width, height);\n  cellcol[0] := $FFFFFE;\n  cellcol[1] := $000001;\n  for n := 4 to 45 do\n    begin\n      rule := n * 4 + 2;\n      setup(rule);\n      noupdate;\n      blank(white);\n      for x := 0 to width - 1 do\n        pixset(x, 0, cellcol[random(2)]);\n      for generation := 1 to height - 1 do\n        nextgen(generation);\n      setxy(0, height - 15);\n      box(25 + length(str(rule)) * 7, 14, cream, false);\n      print('Rule ' + str(rule), 4, 8);\n      update;\n      pause(500)\n    end\nEND.\n",BrownianMotion:"PROGRAM BrownianMotion;\nCONST polradius = 80;\n      molradius = 10;\n      hitradius = 90;\n      molecules = 400;\n      slowspeed = 30;\n      highspeed = 50;\n      speedratio = 10;\n      polcolour = blue;\n      molcolour = red;\n      halocolour = $FFFFFE;\n      delay = 50;\nVAR px, py: integer;\n    pxvel, pyvel: integer;\n    mx, my, ms, md: array[1..molecules] of integer;\n    n: integer;\n\n  Procedure setup;\n  Var n: integer;\n  Begin\n    penup;\n    px := 500;\n    py := 500;\n    pxvel := 0;\n    pyvel := 0;\n    setxy(px, py);\n    colour(halocolour);\n    blot(hitradius);\n    for n := 1 to molecules do\n      begin\n        repeat\n          mx[n] := random(1000 - 2 * molradius) + molradius;\n          my[n] := random(1000 - 2 * molradius) + molradius\n        until pixcol(mx[n], my[n]) = white;\n        ms[n] := random(highspeed - slowspeed + 1) + slowspeed;\n        md[n] := random(360);\n        setxy(mx[n], my[n]);\n        blot(2 * molradius)\n      end\n  End;\n\n  Procedure draw(positive: boolean);\n  Var n: integer;\n      radius: integer;\n  Begin\n    if positive then\n      begin\n        colour(molcolour);\n        radius := molradius\n      end\n    else\n      begin\n        colour(white);\n        radius := molradius + 1\n      end;\n    for n := 1 to molecules do\n      begin\n        setxy(mx[n], my[n]);\n        blot(radius)\n      end;\n    setxy(px, py);\n    if positive then\n      begin\n        colour(polcolour);\n        blot(polradius)\n      end\n    else\n      blot(polradius + 1)\n  End;\n\n  Procedure move(m: integer);\n  Var degturn: integer;\n      impact: integer;\n  Begin\n    setxy(mx[m], my[m]);\n    direction(md[m]);\n    forward(ms[m]);\n    if hypot(turtx - px, turty - py, 1) <= hitradius then\n      begin\n        while hypot(turtx - px, turty - py, 1) < hitradius do\n          back(1);\n        turnxy(px - turtx, py - turty);\n        degturn := turtd - md[m];\n        md[m] := (180 + (turtd + degturn)) mod 360;\n        impact := cos(degturn, 1, ms[m]);\n        pxvel := pxvel + sin(turtd, 1, impact);\n        pyvel := pyvel - cos(turtd, 1, impact)\n      end;\n    mx[m] := (turtx + 1000) mod 1000;\n    my[m] := (turty + 1000) mod 1000\n  End;\n\nBEGIN\n  noupdate;\n  setup;\n  blank(white);\n  draw(true);\n  repeat\n    noupdate;\n    draw(false);\n    for n := 1 to molecules do\n      move(n);\n    px := px + pxvel / speedratio;\n    py := py + pyvel / speedratio;\n    draw(true);\n    update;\n    pause(delay)\n  until (abs(px - 500) > 490) or (abs(py - 500) > 480)\nEND.\n",Dendrites:"PROGRAM Dendrites;\nCONST half = 100;\n      crystal = cyan;\n      molecule = white;\n      solution = teal;\n      initrandomradius = 10;\n      maxdistance = 75;\n      cyclemod = 5;\n      moddelay = 0;\nVAR whole, randomradius, maxsofar: integer;\n    cycle: integer;\n    numattached: integer;\n\n  Function attached(x, y: integer): boolean;\n  Begin\n    result := false;\n    if (pixcol(x - 1, y) = crystal)\n      or (pixcol(x + 1, y) = crystal)\n      or (pixcol(x, y - 1) = crystal)\n      or (pixcol(x, y + 1) = crystal) then\n      begin\n        result := true;\n        pixset(x, y, crystal);\n        inc(numattached);\n        if hypot(x, y, 1) >= maxsofar then\n          maxsofar := hypot(x, y, 1)\n      end\n  End;\n\n  Procedure randomwalk;\n  Var n: integer;\n  Begin\n    repeat\n      n := random(4) * 2 + 1;\n      turtx := turtx + n div 3 - 1;\n      turty := turty + n mod 3 - 1;\n      if pixcol(turtx, turty) = black then\n        begin\n          turtx := turtx - 2 * (n div 3 - 1);\n          turty := turty - 2 * (n mod 3 - 1)\n        end\n    until pixcol(turtx, turty) = solution\n  End;\n\n  Procedure biasedwalk;\n  Var distance, turn, range: integer;\n  Begin\n    turnxy(-turtx, -turty);\n    distance := hypot(turtx, turty, 1);\n    if distance < randomradius then\n      direction(random(360))\n    else\n      begin\n        range := divmult(half - distance, half - randomradius, 180);\n        turn := random(range * 2) - range;\n        right(turn)\n      end;\n    repeat\n      forward(1)\n    until pixcol(turtx, turty) = solution\n  End;\n\nBEGIN\n  whole := half * 2 + 3;\n  canvas(-half, -half, whole, whole);\n  resolution(whole, whole);\n  penup;\n  setxy(-half, -half);\n  box(whole, whole, solution, true);\n  randomradius := initrandomradius;\n  writeln('Initial randomradius = ' + str(randomradius));\n  pixset(0, 0, crystal);\n  numattached := 1;\n  writeln('Counting molecules within growing crystal:');\n  write('1 ');\n  maxsofar := 1;\n  timeset(0);\n  repeat\n    home;\n    direction(random(360));\n    forward(half);\n    if pixcol(turtx, turty) <> solution then\n      randomwalk;\n    cycle := 0;\n    while not(attached(turtx, turty)) do\n      begin\n        pixset(turtx, turty, molecule);\n        if cycle mod cyclemod = 0 then\n          begin\n            update;\n            if moddelay > 0 then\n              pause(moddelay);\n            noupdate\n          end;\n        inc(cycle);\n        pixset(turtx, turty, solution);\n        biasedwalk\n      end;\n    if numattached mod 10 = 0 then\n      writeln(str(numattached))\n    else\n      write(str(numattached) + ' ');\n    if maxsofar > randomradius then\n      begin\n        randomradius := maxsofar;\n        writeln('');\n        writeln('randomradius = ' + str(randomradius))\n      end\n  until maxsofar >= maxdistance;\n  writeln('Simulation finished (' + qstr(time, 1000, 2) + ' seconds)')\nEND.\n",Cheetahs:"PROGRAM Cheetahs;\nCONST maxanimals = 500;\n      mingazelles = 10;\n      startcheetahs = 50;\n      startgazelles = 50;\n      maxspeed = 1000;\n      startslow = 30;\n      startfast = 70;\n      randmarginc = 10;\n      randmarging = 10;\n      huntingtries = 100;\n      catchmargin = 5;\n      cfoodadd = 40;\n      cbreedfood = 10;\n      cmatingratio = 2;\n      gmatingratio = 1;\n      chuntingratio = 1;\n      slowage = 100;\n      agefactor = 0;\n      graphleft = 60;\n      graphwidth = 900;\n      graphheight = 400;\n      cgraphbase = 450;\n      ggraphbase = 950;\n      ymax = 20;\nVAR gen, cnum, gnum: integer;\n    cspeed, gspeed, cgenspeed, ggenspeed, cage, gage, cfood: array[1..maxanimals] of integer;\n    cspeednum, gspeednum: array[0..maxspeed] of integer;\n\n  Procedure setup;\n  Var n: integer;\n  Begin\n    for n := 0 to maxspeed do\n      begin\n        cspeednum[n] := 0;\n        gspeednum[n] := 0\n      end;\n    cnum := startcheetahs;\n    gnum := startgazelles;\n    for n := 1 to cnum do\n      begin\n        cgenspeed[n] := random(startfast + 1 - startslow) + startslow;\n        cspeed[n] := cgenspeed[n];\n        cage[n] := random(slowage);\n        cfood[n] := random(cfoodadd) + 1;\n        inc(cspeednum[cspeed[n]])\n      end;\n    for n := cnum + 1 to maxanimals do\n      cspeed[n] := 0;\n    for n := 1 to gnum do\n      begin\n        ggenspeed[n] := random(startfast + 1 - startslow) + startslow;\n        gspeed[n] := ggenspeed[n];\n        gage[n] := random(slowage);\n        inc(gspeednum[gspeed[n]])\n      end;\n    for n := gnum + 1 to maxanimals do\n      gspeed[n] := 0\n  End;\n\n  Procedure axes(graphbase: integer);\n  Var n: integer;\n      scale: integer;\n  Begin\n    colour(black);\n    setxy(graphleft, graphbase - graphheight);\n    drawxy(0, graphheight);\n    drawxy(graphwidth, 0);\n    for n := 0 to 10 do\n      begin\n        setxy(20, graphbase - n * graphheight / 10 - 19);\n        print(str(n * ymax / 10), 0, 20)\n      end;\n    for n := 1 to 10 do\n      begin\n        setxy(graphleft + n * graphwidth / 10 - 20, graphbase);\n        print(str(n * maxspeed / 10), 0, 20)\n      end\n  End;\n\n  Procedure graph;\n  Var n, ctotal, gtotal: integer;\n  Begin\n    noupdate;\n    blank(white);\n    axes(450);\n    axes(950);\n    setxy(200, 20);\n    colour(red);\n    print('Speed Distribution of Cheetahs', 4, 25);\n    setxy(750, 20);\n    print(str(cnum), 4, 25);\n    ctotal := 0;\n    for n := 1 to maxspeed do\n      begin\n        setxy(graphleft + n * graphwidth / maxspeed, 450);\n        drawxy(0, -graphheight * cspeednum[n] / ymax);\n        ctotal := ctotal + n * cspeednum[n]\n      end;\n    setxy(200, 520);\n    colour(green);\n    print('Speed Distribution of Gazelles', 4, 25);\n    setxy(750, 520);\n    print(str(gnum), 4, 25);\n    gtotal := 0;\n    for n := 1 to maxspeed do\n      begin\n        setxy(graphleft + n * graphwidth / maxspeed, 950);\n        drawxy(0, -graphheight * gspeednum[n] / ymax);\n        gtotal := gtotal + n * gspeednum[n]\n      end;\n    setxy(850, 20);\n    if cnum < 1 then\n      begin\n        setxy(150, 200);\n        colour(magenta);\n        print('All Cheetahs Have Died', 4, 50);\n        halt\n      end;\n    print(qstr(ctotal, cnum, 2), 4, 25);\n    setxy(850, 520);\n    print(qstr(gtotal, gnum, 2), 4, 25);\n    update;\n    write(str(gen));\n    write(' - c=');\n    write(str(cnum));\n    write(' (av=');\n    write(qstr(ctotal, cnum, 2));\n    writeln(')');\n    update;\n    noupdate;\n    write('     g=');\n    write(str(gnum));\n    write(' (av=');\n    write(qstr(gtotal, gnum, 2));\n    writeln(')')\n  End;\n\n  Procedure deadcheetah(c: integer);\n  Begin\n    dec(cspeednum[cspeed[c]]);\n    cspeed[c] := 0;\n    dec(cnum)\n  End;\n\n  Procedure deadgazelle(g: integer);\n  Begin\n    dec(gspeednum[gspeed[g]]);\n    gspeed[g] := 0;\n    dec(gnum)\n  End;\n\n  Procedure babycheetah(speed: integer);\n  Var b: integer;\n  Begin\n    b := 0;\n    repeat\n      inc(b)\n    until (cspeed[b] = 0) or (b = maxanimals);\n    if cspeed[b] = 0 then\n      begin\n        inc(cnum);\n        cgenspeed[b] := speed + random(2 * randmarginc + 1) - randmarginc;\n        cgenspeed[b] := max(1, min(maxspeed, cgenspeed[b]));\n        cspeed[b] := cgenspeed[b];\n        cage[b] := 0;\n        cfood[b] := cfoodadd;\n        inc(cspeednum[cspeed[b]])\n      end\n  End;\n\n  Procedure babygazelle(speed: integer);\n  Var b: integer;\n  Begin\n    b := 0;\n    repeat\n      inc(b)\n    until (gspeed[b] = 0) or (b = maxanimals);\n    if gspeed[b] = 0 then\n      begin\n        inc(gnum);\n        ggenspeed[b] := speed + random(2 * randmarging + 1) - randmarging;\n        ggenspeed[b] := max(1, min(maxspeed, ggenspeed[b]));\n        gspeed[b] := ggenspeed[b];\n        gage[b] := 0;\n        inc(gspeednum[gspeed[b]])\n      end\n  End;\n\n  Procedure generation;\n  Var n: integer;\n      c, g, s, b: integer;\n      tries: integer;\n  Begin\n    for c := 1 to cnum / chuntingratio do\n      begin\n        c := random(maxanimals) + 1;\n        if (cspeed[c] > 0) and (gnum > mingazelles) then\n          begin\n            tries := 0;\n            repeat\n              inc(tries);\n              g := random(maxanimals) + 1\n            until (gspeed[g] > 0) or (tries = huntingtries);\n            if (gspeed[g] > 0) and (cspeed[c] >= gspeed[g] + catchmargin) then\n              begin\n                deadgazelle(g);\n                cfood[c] := cfood[c] + cfoodadd\n              end\n          end\n      end;\n    for n := 1 to cnum / cmatingratio do\n      begin\n        c := random(maxanimals) + 1;\n        if (cnum < maxanimals) and (cspeed[c] > 0) and (cfood[c] >= cbreedfood) then\n          begin\n            babycheetah(cgenspeed[c]);\n            cfood[c] := cfood[c] - cbreedfood\n          end\n      end;\n    for n := 1 to gnum / gmatingratio do\n      begin\n        g := random(maxanimals) + 1;\n        if (gnum < maxanimals) and (gspeed[g] > 0) then\n          babygazelle(ggenspeed[g])\n      end;\n    for n := 1 to maxanimals do\n      begin\n        if cspeed[n] > 0 then\n          begin\n            inc(cage[n]);\n            if cage[n] > slowage then\n              begin\n                dec(cspeednum[cspeed[n]]);\n                cspeed[n] := cspeed[n] * agefactor / 100;\n                inc(cspeednum[cspeed[n]]);\n                if cspeed[n] = 0 then\n                  deadcheetah(n)\n              end;\n            dec(cfood[n]);\n            if cfood[n] < 0 then\n              deadcheetah(n)\n          end;\n        if gspeed[n] > 0 then\n          begin\n            inc(gage[n]);\n            if gage[n] > slowage then\n              begin\n               dec(gspeednum[gspeed[n]]);\n               gspeed[n] := gspeed[n] * agefactor / 100;\n               inc(gspeednum[gspeed[n]]);\n               if gspeed[n] = 0 then\n                 deadgazelle(n)\n              end\n          end\n      end\n  End;\n\nBEGIN\n  setup;\n  graph;\n  gen := 0;\n  repeat\n    inc(gen);\n    generation;\n    graph\n  until 0 = 1\nEND.\n",SexRatio:"PROGRAM SexRatio;\nCONST population = 1000;\n      matepergen = 400;\n      randomvar = 1;\n      leftmargin = 70;\n      topmargin = 20;\nVAR female: array[1..population] of boolean;\n    fop: array[1..population] of integer;\n    generation: integer;\n    n: integer;\n\n  Procedure axes;\n  Var i: integer;\n  Begin\n    for i := 1 to 9 do\n      begin\n        setxy(leftmargin + i * 100 - 25, topmargin + 800);\n        print(str(i * 100), 4, 20)\n      end;\n    for i := 2 to 10 do\n      begin\n        setxy(0, 1000 - i * 100);\n        colour(black);\n        print(str(i * 10) + '%', 4, 20);\n        movexy(leftmargin, topmargin);\n        colour(lightgrey);\n        drawxy(1000 - leftmargin, 0)\n      end;\n    setxy(leftmargin, topmargin);\n    colour(black);\n    drawxy(0, 800);\n    drawxy(1000 - leftmargin, 0);\n    colour(red);\n    setxy(50, 880);\n    print('Proportion of Females in Population, over 900 Generations', 4, 25);\n    setxy(50, 930);\n    print('with Female Offspring Probability genes initially set 90%+', 4, 25)\n  End;\n\n  Procedure graph;\n  Var females, n: integer;\n  Begin\n    females := 0;\n    for n := 1 to population do\n      if female[n] then\n        inc(females);\n    colour(red);\n    setxy(leftmargin + generation, topmargin + 1000 - females);\n    if generation > 0 then\n      polyline(2)\n  End;\n\n  Procedure domating;\n  Var A, B, replace: integer;\n      inheritA: boolean;\n  Begin\n    repeat\n      A := random(population) + 1;\n      B := random(population) + 1\n    until female[A] <> female[B];\n    inheritA := (random(2) = 0);\n    replace := random(population) + 1;\n    if inheritA then\n      fop[replace] := fop[A]\n    else\n      fop[replace] := fop[B];\n    female[replace] := fop[replace] > random(1000);\n    fop[replace] := fop[replace] + random(randomvar * 20 + 1) - randomvar * 10;\n    fop[replace] := max(0, min(1000, fop[replace]))\n  End;\n\nBEGIN\n  axes;\n  for n := 1 to population do\n    begin\n      female[n] := (random(2) = 0);\n      fop[n] := 900 + random(101)\n    end;\n  generation := 0;\n  repeat\n    graph;\n    inc(generation);\n    for n := 1 to matepergen do\n      domating\n  until generation = 900\nEND.\n",Flocking:"PROGRAM Flocking;\nCONST numboids = 30;\n      boidradius = 20;\n      maxspeed = 50;\n      boidcolour = lightbrown;\n      halocolour = $FFFFFE;\n      delay = 50;\n      posfactor = 50;\n      velfactor = 50;\n      neard = 200;\n      nearfactor = 10;\n      tgtradius = 2000;\nVAR boidx, boidy, boidvx, boidvy: array[1..numboids] of integer;\n    avgx, avgy, avgvx, avgvy: integer;\n    tgtx, tgty, tgtangvel: integer;\n    n: integer;\n    cycle: integer;\n\n  Procedure setup;\n  Var n: integer;\n  Begin\n    penup;\n    colour(halocolour);\n    for n := 1 to numboids do\n      begin\n        repeat\n          boidx[n] := random(5000 - 2 * boidradius) + boidradius;\n          boidy[n] := random(5000 - 2 * boidradius) + boidradius\n        until pixcol(boidx[n], boidy[n]) = white;\n        boidvx[n] := random(maxspeed * 2 + 1) - maxspeed;\n        boidvy[n] := random(maxspeed * 2 + 1) - maxspeed;\n        setxy(boidx[n], boidy[n]);\n        blot(2 * boidradius)\n      end\n  End;\n\n  Procedure draw(positive: boolean);\n  Var n, radius: integer;\n  Begin\n    if positive then\n      begin\n        colour(boidcolour);\n        radius := boidradius\n      end\n    else\n      begin\n        colour(white);\n        radius := boidradius + 10\n      end;\n    for n := 1 to numboids do\n      begin\n        setxy(boidx[n], boidy[n]);\n        blot(radius)\n      end\n  End;\n\n  Procedure averages;\n  Var totalx, totaly, totalvx, totalvy: integer;\n      n: integer;\n  Begin\n    totalx := 0;\n    totaly := 0;\n    totalvx := 0;\n    totalvy := 0;\n    for n := 1 to numboids do\n      begin\n        totalx := totalx + boidx[n];\n        totaly := totaly + boidy[n];\n        totalvx := totalvx + boidvx[n];\n        totalvy := totalvy + boidvy[n]\n      end;\n    avgx := totalx / numboids;\n    avgy := totaly / numboids;\n    avgvx := totalvx / numboids;\n    avgvy := totalvy / numboids\n  End;\n\n  Procedure settarget;\n  Begin\n    if cycle mod 100 = 0 then\n      tgtangvel := random(7) - 3;\n    tgtx := divmult(sin(cycle * tgtangvel, 1, 1000), 1000, tgtradius);\n    tgty := -divmult(cos(cycle * tgtangvel, 1, 1000), 1000, tgtradius);\n    inc(cycle)\n  End;\n\n  Procedure move(b: integer);\n  Var n: integer;\n      distx, disty, speed: integer;\n  Begin\n    boidvx[b] := boidvx[b] + (avgx - boidx[b]) / posfactor + (avgvx - boidvx[b]) / velfactor;\n    boidvy[b] := boidvy[b] + (avgy - boidy[b]) / posfactor + (avgvy - boidvy[b]) / velfactor;\n    for n := 1 to numboids do\n      if n <> b then\n        begin\n          distx := boidx[n] - boidx[b];\n          disty := boidy[n] - boidy[b];\n          if hypot(distx, disty, 1) < neard then\n            begin\n              boidvx[b] := boidvx[b] - sign(distx) * (neard - abs(distx)) / nearfactor;\n              boidvy[b] := boidvy[b] - sign(disty) * (neard - abs(disty)) / nearfactor\n            end\n        end;\n    if random(10) = 0 then\n      begin\n        boidvx[b] := tgtx - boidx[b];\n        boidvy[b] := tgty - boidy[b]\n      end;\n    speed := hypot(boidvx[b], boidvy[b], 1);\n    if speed > maxspeed then\n      begin\n        boidvx[b] := divmult(boidvx[b], speed, maxspeed);\n        boidvy[b] := divmult(boidvy[b], speed, maxspeed)\n      end;\n    boidx[b] := boidx[b] + boidvx[b];\n    boidy[b] := boidy[b] + boidvy[b]\n  End;\n\nBEGIN\n  canvas(-2500, -2500, 5000, 5000);\n  noupdate;\n  setup;\n  blank(white);\n  draw(true);\n  cycle := 0;\n  repeat\n    averages;\n    settarget;\n    noupdate;\n    draw(false);\n    for n := 1 to numboids do\n      move(n);\n    draw(true);\n    update;\n    pause(delay)\n  until 0 = 1\nEND.\n",Roads:"PROGRAM Roads;\nCONST maxnodes = 500;\n      suffnodes = 400;\n      maxedges = 1000;\n      mindistance = 40;\n      noderadius = 6;\n      roadradius = 4;\n      normalroad = black;\n      linkroad = blue;\nVAR nodex, nodey: array[1..maxnodes] of integer;\n    nodedist: array[1..maxnodes] of integer;\n    numnodes: integer;\n    edge1, edge2, edgelen: array[1..maxedges] of integer;\n    numedges: integer;\n    m: integer;\n\n  Function closest(n: integer): integer;\n  Var i, min, d: integer;\n  Begin\n    result := 0;\n    min := maxint;\n    for i := 1 to numnodes do\n      if i <> n then\n        begin\n          d := hypot(nodex[n] - nodex[i], nodey[n] - nodey[i], 1);\n          if d < min then\n            begin\n              min := d;\n              result := i\n            end\n        end;\n    if min < mindistance then\n      result := -1\n  End;\n\n  Procedure marknode(n, col, rad: integer);\n  Begin\n    setxy(nodex[n], nodey[n]);\n    colour(col);\n    blot(rad)\n  End;\n\n  Procedure makeedge(nodea, nodeb, col: integer);\n  Begin\n    inc(numedges);\n    edge1[numedges] := nodea;\n    edge2[numedges] := nodeb;\n    edgelen[numedges] := hypot(nodex[nodea] - nodex[nodeb], nodey[nodea] - nodey[nodeb], 1);\n    setxy(nodex[nodea], nodey[nodea]);\n    colour(col);\n    setxy(nodex[nodeb], nodey[nodeb]);\n    polyline(2)\n  End;\n\n  Procedure linkup(nodea, nodeb: integer);\n  Begin\n    if hypot(nodex[nodea] - nodex[nodeb], nodey[nodea] - nodey[nodeb], 1) < mindistance * 2 then\n      makeedge(nodea, nodeb, normalroad)\n    else\n      begin\n        inc(numnodes);\n        nodex[numnodes] := (nodex[nodea] + nodex[nodeb]) / 2;\n        nodey[numnodes] := (nodey[nodea] + nodey[nodeb]) / 2;\n        marknode(numnodes, cyan, roadradius);\n        linkup(nodea, numnodes);\n        linkup(numnodes, nodeb)\n      end\n  End;\n\n  Procedure joinup(thisnode: integer);\n  Var i, j, dist: integer;\n      continue: boolean;\n  Begin\n    for i := 1 to numnodes do\n      nodedist[i] := maxint;\n    nodedist[thisnode] := 0;\n    continue := true;\n    while continue do\n      begin\n        continue := false;\n        for i := 1 to numedges do\n          begin\n            if nodedist[edge1[i]] < maxint then\n              begin\n                if nodedist[edge1[i]] + edgelen[i] < nodedist[edge2[i]] then\n                  begin\n                    nodedist[edge2[i]] := nodedist[edge1[i]] + edgelen[i];\n                    continue := true\n                  end\n              end;\n            if nodedist[edge2[i]] < maxint then\n              begin\n                if nodedist[edge2[i]] + edgelen[i] < nodedist[edge1[i]] then\n                  begin\n                    nodedist[edge1[i]] := nodedist[edge2[i]] + edgelen[i];\n                    continue := true\n                  end\n              end\n          end\n      end;\n    i := 0;\n    continue := true;\n    while (i < numnodes) and continue do\n      begin\n        inc(i);\n        dist := hypot(nodex[i] - nodex[thisnode], nodey[i] - nodey[thisnode], 1);\n        if (i <> thisnode) and (nodedist[i] > 1000) and (dist < mindistance * 2) then\n          begin\n            makeedge(thisnode, i, linkroad);\n            continue := false\n          end\n      end\n  End;\n\nBEGIN\n  thickness(6);\n  numnodes := 0;\n  numedges := 0;\n  while numnodes < suffnodes do\n    begin\n      inc(numnodes);\n      repeat\n        nodex[numnodes] := random(1000);\n        nodey[numnodes] := random(1000);\n        m := closest(numnodes)\n      until m >= 0;\n      marknode(numnodes, red, noderadius);\n      if m > 0 then\n        linkup(m, numnodes)\n    end;\n  for m := 1 to numnodes do\n    joinup(m)\nEND.\n",Schelling:"PROGRAM Schelling;\nCONST width = 50;\n      height = 50;\n      empty = green;\nVAR test, tryi, tryj: integer;\n    this, i, j: integer;\n\n  Function happy(x, y, c: integer): boolean;\n  Var like, unlike, neighbour, i, j: integer;\n  Begin\n    like := 0;\n    unlike := 0;\n    for i := -1 to 1 do\n      for j := -1 to 1 do\n        if (i <> 0) or (j <> 0) then\n          begin\n            neighbour := pixcol(x + i, y + j);\n            if neighbour <> empty then\n              begin\n                if neighbour = c then\n                  inc(like)\n                else\n                  inc(unlike)\n              end\n          end;\n    result := (like >= unlike - 1)\n  End;\n\nBEGIN\n  canvas(-1, -1, width + 2, height + 2);\n  resolution(width + 2, height + 2);\n  noupdate;\n  blank(empty);\n  for i := 0 to width - 1 do\n    for j := 0 to height - 1 do\n      begin\n        test := random(25);\n        if test = 0 then\n          pixset(i, j, empty)\n        else\n          begin\n            if (i + j) mod 2 = 0 then\n              pixset(i, j, red)\n            else\n              pixset(i, j, blue)\n          end\n      end;\n  pause(2000);\n  while ?key <> \\escape do\n    begin\n      noupdate;\n      repeat\n        tryi := random(width);\n        tryj := random(height);\n        this := pixcol(tryi, tryj)\n      until (this <> empty) and (not(happy(tryi, tryj, this)));\n      pixset(tryi, tryj, empty);\n      repeat\n        tryi := random(width);\n        tryj := random(height)\n      until (pixcol(tryi, tryj) = empty) and happy(tryi, tryj, this);\n      pixset(tryi, tryj, this);\n      update\n    end\nEND.\n",IteratedPD:"PROGRAM IteratedPD;\nCONST width = 50;\n      height = 50;\n      n = 10;\nVAR i, j: integer;\n    util: array[1..14] of integer;\n\n  Procedure utility(x, y: integer);\n  Var this, utot, i, j, flag: integer;\n  Begin\n    this := pixcol(x, y) and $7;\n    utot := 0;\n    for i := -1 to 1 do\n      for j := -1 to 1 do\n        if (i <> 0) or (j <> 0) then\n          begin\n            flag := this or (pixcol((x + width + i) mod width, (y + height + j) mod height)) and $F;\n            utot := utot + util[flag]\n          end;\n    pixset(x, y, utot * $100 + pixcol(x, y) and $F)\n  End;\n\n  Procedure pickbest(x, y: integer);\n  Var i, j, bestsofar: integer;\n  Begin\n    bestsofar := pixcol(x, y);\n    if random(5) > 0 then\n      for i := -1 to 1 do\n        for j := -1 to 1 do\n          if (pixcol((x + width + i) mod width, (y + height + j) mod height) and $FFFF00) > (bestsofar and $FFFF00) then\n            bestsofar := pixcol((x + width + i) mod width, (y + height + j) mod height);\n    pixset(x, y, (pixcol(x, y) and $FFFF0F) + (bestsofar and $F) * $10)\n  End;\n\n  Procedure fixbest(x, y: integer);\n  Begin\n    if (pixcol(x, y) and $10) > 0 then\n      pixset(x, y, $FF0001)\n    else\n    if (pixcol(x, y) and $20) > 0 then\n      pixset(x, y, $00FF02)\n    else\n     pixset(x, y, $0000FC)\n  End;\n\n  Procedure setutilities;\n  Begin\n    util[1] := 3 * n;\n    util[2] := 3 * n;\n    util[3] := 3 * n;\n    util[5] := 5 * n;\n    util[6] := n + 4;\n    util[12] := n;\n    util[13] := 0;\n    util[14] := n - 1\n  End;\n\nBEGIN\n  canvas(0, 0, width, height);\n  resolution(width, height);\n  setutilities;\n  noupdate;\n  for i := 0 to width - 1 do\n    for j := 0 to height - 1 do\n      if random(50) = 0 then\n        pixset(i, j, $0000FC)\n      else\n      if random(7) = 0 then\n        pixset(i, j, $00FF02)\n      else\n        pixset(i, j, $FF0001);\n  pause(1000);\n  while ?key <> \\escape do\n    begin\n      timeset(0);\n      noupdate;\n      for i := 0 to width - 1 do\n        for j := 0 to height - 1 do\n          utility(i, j);\n      for i := 0 to width - 1 do\n        for j := 0 to height - 1 do\n          pickbest(i, j);\n      for i := 0 to width - 1 do\n        for j := 0 to height - 1 do\n          fixbest(i, j);\n      update;\n      noupdate\n    end\nEND.\n",Interference:"PROGRAM Interference;\nCONST sectors = 7;\n      wavecol1 = red;\n      wavecol2 = skyblue;\n      waveaddcol = indigo;\n      clocks = 16;\n      report = false;\nVAR x, y: integer;\n    sectcol: array[0..sectors] of integer;\n    boundary: array[0..sectors] of integer;\n    clockx: array[1..clocks] of integer;\n    cradius, hand: integer;\n    leftx, rightx: integer;\n    dimensions: integer;\n    wavelength1, wavelength2: integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    sectcol[0] := violet;\n    sectcol[1] := blue;\n    sectcol[2] := cyan;\n    sectcol[3] := lime;\n    sectcol[4] := yellow;\n    sectcol[5] := orange;\n    sectcol[6] := red;\n    sectcol[7] := violet;\n    for n := 0 to sectors do\n      boundary[n] := divmult(360, sectors, n)\n  End;\n\n  Function wavecolour(n: integer): integer;\n  Var col1, col2: integer;\n      mix1, mix2: integer;\n  Begin\n    col2 := 0;\n    repeat\n      inc(col2)\n    until boundary[col2] >= n;\n    col1 := col2 - 1;\n    result := mixcols(sectcol[col1], sectcol[col2], boundary[col2] - n, n - boundary[col1])\n  End;\n\n  Procedure clocksetup;\n  Var n: integer;\n  Begin\n    for n := 1 to clocks do\n      clockx[n] := divmult(1000, clocks * 2 + 2, n * 2);\n    leftx := clockx[1];\n    rightx := clockx[clocks];\n    cradius := (rightx - leftx) / clocks / 2;\n    hand := cradius * 6 / 7\n  End;\n\n  Procedure drawwave(s: string; top, wavelength, wavecol: integer);\n  Var n, turn: integer;\n  Begin\n    if dimensions = 1 then\n      begin\n        setxy(leftx, top + 25);\n        colour(black);\n        drawxy(rightx - leftx, 0);\n        setxy(leftx, top);\n        colour(wavecol)\n      end;\n    for n := 0 to rightx - leftx do\n      if dimensions = 1 then\n        begin\n          setxy(leftx + n, top + 25 - cos(divmult(n mod wavelength, wavelength, 360), 1, 25));\n          polyline(2)\n        end\n      else\n        begin\n          setxy(leftx + n, top);\n          colour(wavecolour(divmult(n mod wavelength, wavelength, 360)));\n          drawxy(0, 50)\n        end;\n    for n := 1 to clocks do\n      begin\n        setxy(clockx[n], top + 70 + cradius);\n        colour(black);\n        circle(cradius);\n        blot(5);\n        turn := divmult((clockx[n] - leftx) mod wavelength, wavelength, 360);\n        if report then\n          writeln(s + ', clock ' + str(n) + ': dist=' + str(clockx[n]) + '; turn=' + str(turn));\n        turnxy(sin(turn, 1, 1000), -cos(turn, 1, 1000));\n        colour(wavecol);\n        forward(hand)\n      end\n  End;\n\n  Procedure drawresult(top: integer);\n  Var n: integer;\n      turn1, turn2: integer;\n      waveaddi, waveaddj, waveadd: integer;\n  Begin\n    if dimensions = 1 then\n      begin\n        setxy(leftx, top + 50);\n        colour(black);\n        drawxy(rightx - leftx, 0);\n        setxy(leftx, top);\n        colour(waveaddcol)\n      end;\n    for n := 0 to rightx - leftx do\n      begin\n        turn1 := divmult(n mod wavelength1, wavelength1, 360);\n        turn2 := divmult(n mod wavelength2, wavelength2, 360);\n        waveaddi := sin(turn1, 1, 500) + sin(turn2, 1, 500);\n        waveaddj := cos(turn1, 1, 500) + cos(turn2, 1, 500);\n        waveadd := hypot(waveaddi, waveaddj, 1);\n        if dimensions = 1 then\n          begin\n            setxy(leftx + n, top + 50 - divmult(waveaddj, 1000, 50));\n            polyline(2)\n          end\n        else\n          begin\n            setxy(leftx + n, top);\n            turnxy(waveaddi, -waveaddj);\n            colour(mixcols(wavecolour(turtd), black, waveadd, 1000 - waveadd));\n            if mixcols(wavecolour(turtd), black, waveadd, 1000 - waveadd) < 51 then\n              colour(black);\n            drawxy(0, 100)\n          end\n      end;\n    for n := 1 to clocks do\n      begin\n        setxy(clockx[n], top + 280 + 2 * cradius - (150 * (n mod 2)));\n        colour(black);\n        circle(cradius * 2);\n        blot(5);\n        turn1 := divmult((clockx[n] - leftx) mod wavelength1, wavelength1, 360);\n        turn2 := divmult((clockx[n] - leftx) mod wavelength2, wavelength2, 360);\n        waveaddi := sin(turn1, 1, 500) + sin(turn2, 1, 500);\n        waveaddj := cos(turn1, 1, 500) + cos(turn2, 1, 500);\n        waveadd := hypot(waveaddi, waveaddj, 1);\n        turnxy(waveaddi, -waveaddj);\n        thickness(6);\n        colour(waveaddcol);\n        forward(divmult(waveadd, 1000, hand * 2));\n        setxy(clockx[n], top + 280 + 2 * cradius - (150 * (n mod 2)));\n        thickness(4);\n        direction(turn1);\n        colour(wavecol1);\n        forward(hand);\n        direction(turn2);\n        colour(wavecol2);\n        forward(hand);\n        thickness(2)\n      end\n  End;\n\n  Procedure randomwaves;\n  Begin\n    wavelength1 := random(30) * 10 + 200;\n    wavelength2 := random(30) * 10 + 200\n  End;\n\n  Procedure changeprompt;\n  Begin\n    console(true, white);\n    writeln('Press \"1\" or \"2\" for the dimensionality required,');\n    write('or press \"R\" to pick random new wavelengths: ');\n    repeat\n    until (abs(?key) = \\1) or (abs(?key) = \\2) or (abs(?key) = \\r);\n    if abs(?key) = \\1 then\n      dimensions := 1\n    else\n    if abs(?key) = \\2 then\n      dimensions := 2\n    else\n      randomwaves;\n    reset(?key);\n    reset(\\keybuffer)\n  End;\n\nBEGIN\n  colsetup;\n  clocksetup;\n  dimensions := 1;\n  wavelength1 := 300;\n  wavelength2 := 420;\n  repeat\n    blank(white);\n    noupdate;\n    setxy(leftx, 25);\n    colour(black);\n    print('Component waves (wavelengths ' + str(wavelength1) + ', ' + str(wavelength2) + ')', 4, 30);\n    drawwave('Wave 1', 100, wavelength1, wavecol1);\n    drawwave('Wave 2', 300, wavelength2, wavecol2);\n    setxy(leftx, 505);\n    colour(black);\n    print('Resultant wave', 4, 30);\n    drawresult(580);\n    changeprompt\n  until 0 = 1\nEND.\n",TwoSlits:"PROGRAM TwoSlits;\nCONST sectors = 7;\n      wavelength = 100;\n      sourcey = 730;\n      source1x = 275;\n      source2x = 725;\nVAR lampx: integer;\n    x, y: integer;\n    disty, dist1, dist2: integer;\n    wave1, wave2: integer;\n    waveaddi, waveaddj, waveadd: integer;\n    angleadd: integer;\n    sectcol: array[0..sectors] of integer;\n    boundary: array[0..sectors] of integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    sectcol[0] := violet;\n    sectcol[1] := blue;\n    sectcol[2] := cyan;\n    sectcol[3] := lime;\n    sectcol[4] := yellow;\n    sectcol[5] := orange;\n    sectcol[6] := red;\n    sectcol[7] := violet;\n    for n := 0 to sectors do\n      boundary[n] := divmult(360, sectors, n)\n  End;\n\n  Function wavecolour(n: integer): integer;\n  Var col1, col2: integer;\n      mix1, mix2: integer;\n  Begin\n    col2 := 0;\n    repeat\n      inc(col2)\n    until boundary[col2] >= n;\n    col1 := col2 - 1;\n    result := mixcols(sectcol[col1], sectcol[col2], boundary[col2] - n, n - boundary[col1])\n  End;\n\n  Procedure background;\n  Var n: integer;\n      diagx, diag: integer;\n  Begin\n    lampx := (source1x + source2x) / 2;\n    blank(black);\n    colour(white);\n    thickness(5);\n    setxy(0, 733);\n    drawxy(1000, 0);\n    setxy(source1x, 732);\n    for dist1 := 1 to 4 do\n      begin\n        colour(wavecolour(wavelength - dist1));\n        drawxy(0, 1)\n      end;\n    diagx := lampx - source1x;\n    diag := hypot(diagx, 250, 1);\n    for n := 1 to 250 do\n      begin\n        dist1 := divmult(diag, 250, n);\n        wave1 := wavelength - ((dist1 + 5) mod wavelength);\n        colour(wavecolour(divmult(wave1, wavelength, 360)));\n        drawxy(source1x + divmult(diagx, 250, n) - turtx, 1)\n      end;\n    setxy(source2x, 732);\n    for dist2 := 1 to 4 do\n      begin\n        colour(wavecolour(wavelength - dist2));\n        drawxy(0, 1)\n      end;\n    diagx := source2x - lampx;\n    diag := hypot(diagx, 250, 1);\n    for n := 1 to 250 do\n      begin\n        dist2 := divmult(diag, 250, n);\n        wave2 := wavelength - ((dist2 + 5) mod wavelength);\n        colour(wavecolour(divmult(wave2, wavelength, 360)));\n        drawxy(source2x - divmult(diagx, 250, n) - turtx, 1)\n      end;\n    colour(yellow);\n    setxy(lampx, 984);\n    blot(10)\n  End;\n\nBEGIN\n  colsetup;\n  background;\n  noupdate;\n  for y := 0 to sourcey do\n   begin\n    disty := sourcey - y;\n    for x := 0 to 999 do\n      begin\n        dist1 := hypot(x - source1x, disty, 1);\n        dist2 := hypot(x - source2x, disty, 1);\n        wave1 := dist1 mod wavelength;\n        wave2 := dist2 mod wavelength;\n        waveaddi := sin(wave1 * 360, wavelength, 500) + sin(wave2 * 360, wavelength, 500);\n        waveaddj := cos(wave1 * 360, wavelength, 500) + cos(wave2 * 360, wavelength, 500);\n        waveadd := hypot(waveaddi, waveaddj, 1);\n        angleadd := (arctan(waveaddi, waveaddj, 1) + 360) mod 360;\n        pixset(x, y, mixcols(wavecolour(angleadd), black, waveadd, 1000 - waveadd))\n      end\n    end\nEND.\n",WaveSuperposer:"PROGRAM WaveSuperposer;\nCONST textrow = 0;\n      tvalrow = 1;\n      spinrow = 2;\n      buttrow = 3;\n      fine = 1;\n      course = 0;\nCONST normtext = 0;\n      boldtext = 1;\n      large = 1;\n      small = 0;\n      noborder = 0;\n      withborder = 1;\nCONST nobackground = 0;\n      withbackground = 1;\nCONST maxwaves = 60;\n      maxamplitude = 500;\n      maxphase = 360;\n      amplitudeinc = 5;\n      phaseinc = 2;\n      maxdecayrate = 10;\nCONST precdecay = 100;\nVAR exitflag, count, numwaves, selectedwave, multsumwaves, decayrate, infoflag: integer;\nVAR divideby, granularity: integer;\nVAR keypressed: string;\nVAR wavesshown, buttontext: string;\nVAR amplitudes, phases, onoff, decaymult: array[1..maxwaves] of integer;\n\n Function getnumdigits(num: integer): integer;\n Var numdigits: integer;\n Begin\n  num := abs(num);\n  if (num = 0) then\n   numdigits := 1\n  else\n   begin\n    numdigits := 0;\n    while num > 0 do\n     begin\n      num := num / 10;\n      inc(numdigits)\n     end\n   end;\n  result := numdigits\n End;\n\n Procedure outtext(x, y, texttype, textcolour: integer;text: string);\n Var height: integer;\n Begin\n  if texttype = boldtext then\n   y := y - 3\n  else\n   y := y - 1;\n  setxy(x + 5, y);\n  colour(textcolour);\n  if texttype = boldtext then\n   print(text, 16, 18)\n  else\n   print(text, 0, 18)\n End;\n\n Procedure outvalue(x, y, numwidth, value, textcolour: integer);\n Var width, height, minusshift, charwidth: integer;\n Var valuestr: string;\n Begin\n  charwidth := 13;\n  minusshift := 8;\n  width := 12 + charwidth * numwidth;\n  height := 24;\n  pendown;\n  setxy(x + width, y);\n  colour(midgrey);\n  drawxy(0, height);\n  drawxy(-width, 0);\n  colour(darkgrey);\n  drawxy(0, -height - 1);\n  drawxy(width, 0);\n  setxy(x + 1, y + 1);\n  setxy(x + width - 2, y + 1);\n  setxy(x + width - 2, y + height - 2);\n  setxy(x + 1, y + height - 2);\n  colour(black);\n  polygon(4);\n  if (value < 0) then\n   setxy(x + 5 + charwidth * (numwidth - getnumdigits(value)) - minusshift, y - 2)\n  else\n   setxy(x + 5 + charwidth * (numwidth - getnumdigits(value)), y - 2);\n  colour(textcolour);\n  valuestr := str(value);\n  print(valuestr, 0, 18)\n End;\n\n Procedure spinbutton(x, y: integer;symbol: char;buttoncolour: integer);\n Var width, height: integer;\n Begin\n  width := 24;\n  height := 24;\n  pendown;\n  setxy(x + width, y);\n  colour(darkgrey);\n  drawxy(0, height);\n  drawxy(-width, 0);\n  colour(lightgrey);\n  drawxy(0, -height - 1);\n  drawxy(width, 0);\n  recolour(x + 1, y + 1, buttoncolour);\n  setxy(x + 6, y - 14);\n  colour(black);\n  print(symbol, 4, 24)\n End;\n\n Procedure button(x, y, numchars: integer;btext: string;buttoncolour, textcolour: integer);\n Var width, height: integer;\n Begin\n  width := 8 + 13 * numchars;\n  height := 30;\n  y := y - 2;\n  pendown;\n  setxy(x + width, y);\n  colour(darkgrey);\n  drawxy(0, height);\n  drawxy(-width, 0);\n  colour(lightgrey);\n  drawxy(0, -height - 1);\n  drawxy(width, 0);\n  recolour(x + 1, y + 1, buttoncolour);\n  setxy(x + 8, y - 2);\n  colour(textcolour);\n  print(btext, 0, 22)\n End;\n\n Procedure smallbutton(x, y, numchars: integer;btext: string;buttoncolour, textcolour: integer);\n Var width, height: integer;\n Begin\n  width := 8 + 13 * numchars;\n  height := 24;\n  pendown;\n  setxy(x + width, y);\n  colour(darkgrey);\n  drawxy(0, height);\n  drawxy(-width, 0);\n  colour(lightgrey);\n  drawxy(0, -height - 1);\n  drawxy(width, 0);\n  recolour(x + 1, y + 1, buttoncolour);\n  setxy(x + 4, y - 1);\n  colour(textcolour);\n  print(btext, 0, 18)\n End;\n\n Procedure border(x, y, width, height, highcolour, lowcolour, backcolour, backflag: integer);\n Begin\n  pendown;\n  if (backflag = withbackground) then\n   begin\n    setxy(x + 1, y + 1);\n    setxy(x - 2 + width, y + 1);\n    setxy(x - 2 + width, y - 2 + height);\n    setxy(x + 1, y - 2 + height);\n    colour(backcolour);\n    polygon(4)\n   end;\n  setxy(x + width, y);\n  colour(lowcolour);\n  drawxy(0, height);\n  drawxy(-width, 0);\n  colour(highcolour);\n  drawxy(0, -height - 1);\n  drawxy(width, 0)\n End;\n\n Procedure borders(x, y, numchars, numdigits, numrows, highcolour, lowcolour, backcolour, borderflag,\n     backflag: integer);\n Var width, height, spinnershift: integer;\n Begin\n  spinnershift := 34;\n  height := 8 + numrows * spinnershift;\n  width := 8 + (numchars + numdigits + 6) * 13;\n  if borderflag = withborder then\n   begin\n    border(x, y, width, height, highcolour, lowcolour, silver, nobackground);\n    border(x + 2, y + 2, width - 4, height - 4, lowcolour, highcolour, silver, nobackground)\n   end;\n  if backflag = withbackground then\n   begin\n    if borderflag = noborder then\n     begin\n      x := x - 2;\n      y := y - 8\n     end\n    else\n     begin\n      x := x + 2;\n      y := y + 2\n     end;\n    setxy(x, y);\n    setxy(x - 6 + width, y);\n    setxy(x - 6 + width, y - 6 + height);\n    setxy(x, y - 6 + height);\n    colour(backcolour);\n    polygon(4)\n   end\n End;\n\n Procedure spinner(row, spintype, texttype, x, y, numchars, numdigits: integer;text: string;value,\n     textcolour, digitcolour, buttoncolour: integer);\n Var charwidth, textshift, buttonshift, numshift, spinnershift: integer;\n Begin\n  spinnershift := 34;\n  charwidth := 13;\n  buttonshift := 30;\n  textshift := charwidth * numchars;\n  numshift := 18 + charwidth * numdigits;\n  y := y + (row - 1) * spinnershift;\n  outtext(x, y, texttype, textcolour, text);\n  if spintype = spinrow then\n   spinbutton(x + textshift, y, '<', buttoncolour);\n  if spintype <> textrow then\n   outvalue(x + textshift + buttonshift, y, numdigits, value, digitcolour);\n  if spintype = spinrow then\n   spinbutton(x + textshift + buttonshift + numshift, y, '>', buttoncolour)\n End;\n\n Procedure incdecspinner(row, x, y, numchars, numdigits: integer;var value: integer;min, max, mult:\n     integer);\n Var charwidth, textshift, buttonshift, numshift, spinnershift: integer;\n Begin\n  spinnershift := 34;\n  charwidth := 13;\n  buttonshift := 30;\n  textshift := charwidth * numchars;\n  numshift := 18 + charwidth * numdigits;\n  y := y + (row - 1) * spinnershift;\n  if (?mousex > (x + textshift)) and (?mousex < (x + textshift + buttonshift)) and (?mousey > y) and (?mousey\n     < y + spinnershift) then\n   if (value >= (min + mult)) then\n    value := value - mult;\n  if (?mousex > (x + textshift + buttonshift + numshift)) and (?mousex < (x + textshift + 2 * buttonshift\n     + numshift)) and (?mousey > y) and (?mousey < y + spinnershift) then\n   if (value <= (max - mult)) then\n    value := value + mult\n End;\n\n Procedure loaddecaymults(decayrate: integer);\n Var count, count2: integer;\n Begin\n  for count := 1 to maxwaves do\n   decaymult[count] := precdecay;\n  for count := 2 to maxwaves do\n   begin\n    for count2 := count to maxwaves do\n     begin\n      decaymult[count2] := ((precdecay - decayrate) * decaymult[count2]) / precdecay\n     end\n   end\n End;\n\n Procedure incdecdecay(row, x, y, numchars, numdigits: integer;var value: integer;min, max, mult: integer);\n Var charwidth, textshift, buttonshift, numshift, spinnershift: integer;\n Var count, count2: integer;\n Begin\n  spinnershift := 34;\n  charwidth := 13;\n  buttonshift := 30;\n  textshift := charwidth * numchars;\n  numshift := 18 + charwidth * numdigits;\n  y := y + (row - 1) * spinnershift;\n  if (?mousex > (x + textshift)) and (?mousex < (x + textshift + buttonshift)) and (?mousey > y) and (?mousey\n     < y + spinnershift) then\n   if (value >= (min + mult)) then\n    value := value - mult;\n  if (?mousex > (x + textshift + buttonshift + numshift)) and (?mousex < (x + textshift + 2 * buttonshift\n     + numshift)) and (?mousey > y) and (?mousey < y + spinnershift) then\n   if (value <= (max - mult)) then\n    value := value + mult;\n  loaddecaymults(decayrate)\n End;\n\n Procedure incdecdivideby(row, x, y, numchars, numdigits: integer;var value: integer;min, max, mult:\n     integer);\n Var charwidth, textshift, buttonshift, numshift, spinnershift: integer;\n Var count, count2: integer;\n Begin\n  spinnershift := 34;\n  charwidth := 13;\n  buttonshift := 30;\n  textshift := charwidth * numchars;\n  numshift := 18 + charwidth * numdigits;\n  y := y + (row - 1) * spinnershift;\n  if (?mousex > (x + textshift)) and (?mousex < (x + textshift + buttonshift)) and (?mousey > y) and (?mousey\n     < y + spinnershift) then\n   if (value >= (min + mult)) then\n    begin\n     value := value - mult;\n     wavesshown := 'Divide by';\n     for count := 1 to maxwaves do\n      begin\n       if (count) mod divideby = 0 then\n        onoff[count] := 1\n       else\n        onoff[count] := 0\n      end\n    end;\n  if (?mousex > (x + textshift + buttonshift + numshift)) and (?mousex < (x + textshift + 2 * buttonshift\n     + numshift)) and (?mousey > y) and (?mousey < y + spinnershift) then\n   if (value <= (max - mult)) then\n    begin\n     value := value + mult;\n     wavesshown := 'Divide by';\n     for count := 1 to maxwaves do\n      begin\n       if (count) mod divideby = 0 then\n        onoff[count] := 1\n       else\n        onoff[count] := 0\n      end\n    end;\n  loaddecaymults(decayrate)\n End;\n\n Procedure updatevaluebutton(x, y, numchars: integer;var value: integer;newvalue, size: integer);\n Var width, height: integer;\n Begin\n  width := 8 + 13 * numchars;\n  if size = large then\n   height := 30\n  else\n   height := 22;\n  if (?mousex > x) and (?mousex < (x + width)) and (?mousey > y) and (?mousey < y + height) then\n   begin\n    value := newvalue\n   end\n End;\n\n Procedure updatetogglebutton(x, y, numchars: integer;var value: integer;size: integer);\n Var width, height: integer;\n Begin\n  width := 8 + 13 * numchars;\n  if size = large then\n   height := 30\n  else\n   height := 22;\n  if (?mousex > x) and (?mousex < (x + width)) and (?mousey > y) and (?mousey < y + height) then\n   begin\n    if (value = 0) then\n     value := 1\n    else\n     value := 0\n   end\n End;\n\n Procedure updatewavebutton(x, y, numchars, size: integer);\n Var width, height: integer;\n Begin\n  width := 8 + 13 * numchars;\n  if size = large then\n   height := 30\n  else\n   height := 34;\n  if (?mousex > x) and (?mousex < (x + width)) and (?mousey > y) and (?mousey < y + height) then\n   begin\n    amplitudes[selectedwave] := 100;\n    phases[selectedwave] := 0\n   end\n End;\n\n Procedure initwaves;\n Var count: integer;\n Begin\n  for count := 1 to maxwaves do\n   begin\n    amplitudes[count] := 100;\n    phases[count] := 0;\n    onoff[count] := 1\n   end;\n  decayrate := 10;\n  loaddecaymults(decayrate);\n  multsumwaves := 1\n End;\n\n Procedure initallwavesbutton(x, y, numchars, size: integer);\n Var width, height: integer;\n Begin\n  width := 8 + 13 * numchars;\n  if size = large then\n   height := 30\n  else\n   height := 34;\n  if (?mousex > x) and (?mousex < (x + width)) and (?mousey > y) and (?mousey < y + height) then\n   begin\n    initwaves;\n    wavesshown := 'All waves'\n   end\n End;\n\n Procedure updateshowbuttons(showtype, x, y, numchars, size: integer);\n Var width, height, count, prevcount, temp: integer;\n Begin\n  width := 8 + 13 * numchars;\n  if size = large then\n   height := 30\n  else\n   height := 22;\n  if (?mousex > x) and (?mousex < (x + width)) and (?mousey > y) and (?mousey < y + height) then\n   begin\n    if showtype = 1 then\n     begin\n      wavesshown := 'All waves';\n      for count := 1 to maxwaves do\n       begin\n        onoff[count] := 1\n       end\n     end;\n    if (showtype = 2) then\n     begin\n      wavesshown := 'Evens';\n      for count := 1 to maxwaves do\n       begin\n        if count mod 2 = 0 then\n         onoff[count] := 1\n        else\n         onoff[count] := 0\n       end\n     end;\n    if showtype = 3 then\n     begin\n      wavesshown := 'Odds';\n      for count := 1 to maxwaves do\n       begin\n        if count mod 2 = 0 then\n         onoff[count] := 0\n        else\n         onoff[count] := 1\n       end\n     end;\n    if showtype = 4 then\n     begin\n      wavesshown := 'Fibonacci';\n      for count := 1 to maxwaves do\n       begin\n        onoff[count] := 0\n       end;\n      onoff[1] := 1;\n      count := 2;\n      prevcount := 1;\n      repeat\n       onoff[count] := 1;\n       temp := count;\n       count := count + prevcount;\n       prevcount := temp\n      until count > maxwaves\n     end;\n    if showtype = 5 then\n     begin\n      wavesshown := 'None';\n      for count := 1 to maxwaves do\n       begin\n        onoff[count] := 0\n       end\n     end\n   end\n End;\n\n Procedure fibonacci;\n Var count, prevcount, temp: integer;\n Begin\n  for count := 1 to maxwaves do\n   begin\n    onoff[count] := 0\n   end;\n  onoff[1] := 1;\n  count := 2;\n  prevcount := 1;\n  repeat\n   onoff[count] := 1;\n   temp := count;\n   count := count + prevcount;\n   prevcount := temp\n  until count > maxwaves\n End;\n\n Procedure updatepresetbuttons(showtype, x, y, numchars, size: integer);\n Var width, height, count, prevcount, temp: integer;\n Begin\n  width := 8 + 13 * numchars;\n  if size = large then\n   height := 30\n  else\n   height := 26;\n  if (?mousex > x) and (?mousex < (x + width)) and (?mousey > y) and (?mousey < y + height) then\n   begin\n    initwaves;\n    if showtype = 0 then\n     begin\n      for count := 1 to (selectedwave - 1) do\n       begin\n        onoff[count] := 0\n       end;\n      onoff[selectedwave] := 1;\n      for count := selectedwave + 1 to maxwaves do\n       begin\n        if (count - selectedwave) mod divideby = 0 then\n         onoff[count] := 1\n        else\n         onoff[count] := 0\n       end;\n      wavesshown := 'Lim Divide';\n      loaddecaymults(decayrate);\n      multsumwaves := 1\n     end;\n    if showtype = 1 then\n     begin\n      initwaves;\n      for count := 1 to maxwaves do\n       begin\n        if count mod 2 = 0 then\n         onoff[count] := 1\n        else\n         onoff[count] := 0;\n        amplitudes[count] := 200\n       end;\n      wavesshown := 'Sawtooth';\n      decayrate := 30;\n      loaddecaymults(decayrate);\n      numwaves := 12;\n      multsumwaves := 1\n     end;\n    if showtype = 2 then\n     begin\n      initwaves;\n      for count := 1 to maxwaves do\n       begin\n        if count mod 2 = 0 then\n         onoff[count] := 0\n        else\n         onoff[count] := 1;\n        amplitudes[count] := 150\n       end;\n      wavesshown := 'Square';\n      decayrate := 40;\n      loaddecaymults(decayrate);\n      numwaves := 11;\n      amplitudes[3] := 115;\n      amplitudes[5] := 130;\n      amplitudes[7] := 130;\n      amplitudes[9] := 190;\n      multsumwaves := 1\n     end;\n    if showtype = 3 then\n     begin\n      initwaves;\n      fibonacci;\n      wavesshown := 'Shortstock';\n      decayrate := 3;\n      loaddecaymults(decayrate);\n      numwaves := 40;\n      multsumwaves := 1;\n      granularity := fine\n     end;\n    if showtype = 4 then\n     begin\n      initwaves;\n      fibonacci;\n      wavesshown := 'Longstock';\n      decayrate := 3;\n      loaddecaymults(decayrate);\n      numwaves := 60;\n      multsumwaves := 1;\n      granularity := fine;\n      onoff[1] := 0;\n      onoff[2] := 0;\n      onoff[3] := 0;\n      onoff[5] := 0\n     end;\n    if showtype = 5 then\n     begin\n      initwaves;\n      for count := 1 to maxwaves do\n       begin\n        if count mod 2 = 0 then\n         onoff[count] := 0\n        else\n         onoff[count] := 1;\n        amplitudes[count] := 100\n       end;\n      wavesshown := 'Pulse';\n      decayrate := 3;\n      loaddecaymults(decayrate);\n      numwaves := 60;\n      onoff[3] := 0;\n      multsumwaves := 3\n     end;\n    if showtype = 6 then\n     begin\n      initwaves;\n      for count := 1 to maxwaves do\n       begin\n        if count mod 2 = 0 then\n         onoff[count] := 1\n        else\n         onoff[count] := 0;\n        amplitudes[count] := 100\n       end;\n      wavesshown := 'Relaxed';\n      decayrate := 2;\n      loaddecaymults(decayrate);\n      numwaves := 60;\n      onoff[1] := 0;\n      onoff[3] := 0;\n      onoff[5] := 0;\n      onoff[7] := 0;\n      onoff[9] := 0;\n      phases[2] := 90;\n      multsumwaves := 4\n     end;\n    if showtype = 7 then\n     begin\n      initwaves;\n      for count := 1 to maxwaves do\n       begin\n        onoff[count] := 0;\n        amplitudes[count] := 100\n       end;\n      wavesshown := 'One beat';\n      decayrate := 1;\n      loaddecaymults(decayrate);\n      numwaves := 40;\n      onoff[28] := 1;\n      onoff[30] := 1;\n      granularity := fine;\n      multsumwaves := 1\n     end;\n    if showtype = 8 then\n     begin\n      initwaves;\n      for count := 1 to maxwaves do\n       begin\n        onoff[count] := 0;\n        amplitudes[count] := 100\n       end;\n      wavesshown := 'Two beats';\n      decayrate := 1;\n      loaddecaymults(decayrate);\n      numwaves := 40;\n      onoff[34] := 1;\n      onoff[36] := 1;\n      onoff[38] := 1;\n      granularity := fine;\n      multsumwaves := 1\n     end\n   end\n End;\n\n Procedure controlboard(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var t1, t2: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := 'No. Waves';\n  spinner(1, spinrow, boldtext, x, y, numchars, numdigits, t1, numwaves, black, white, red);\n  t2 := ' 2';\n  smallbutton(x + 10, y + 34, 2, t2, red, black);\n  t2 := '10';\n  smallbutton(x + 54, y + 34, 2, t2, red, black);\n  t2 := '20';\n  smallbutton(x + 98, y + 34, 2, t2, red, black);\n  t2 := '40';\n  smallbutton(x + 142, y + 34, 2, t2, red, black);\n  t2 := '60';\n  smallbutton(x + 186, y + 34, 2, t2, red, black);\n  t2 := 'Initialise all waves';\n  smallbutton(x + 8, y + 68, 16, t2, lightgreen, black)\n End;\n\n Procedure controlboard2(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var t1, t2: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := 'Select Wave';\n  t2 := '';\n  spinner(1, spinrow, boldtext, x, y, numchars, numdigits, t1, selectedwave, black, white, lime);\n  spinner(2, tvalrow, normtext, x, y, numchars, numdigits, t2, onoff[selectedwave], black, white, emerald);\n  t2 := 'Wave On/Off';\n  smallbutton(x + 28, y + 34, 11, t2, emerald, black)\n End;\n\n Procedure controlboard2a(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var t1, t2: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := ' Amplitude';\n  t2 := '       Phase';\n  spinner(1, spinrow, normtext, x, y, numchars, numdigits, t1, amplitudes[selectedwave], black, white,\n     lightgreen);\n  spinner(2, spinrow, normtext, x, y, numchars, numdigits, t2, phases[selectedwave], black, white,\n     lightgreen);\n  t2 := 'X';\n  smallbutton(x + 14, y + 34, 1, t2, lightgreen, black)\n End;\n\n Procedure controlboard3(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var t1: string;\n Var xshift: integer;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  xshift := 32;\n  t1 := 'All';\n  smallbutton(x + xshift, y, 2, t1, emerald, black);\n  t1 := 'Evens';\n  smallbutton(x + xshift + 55, y, 5, t1, emerald, black);\n  t1 := 'Odds';\n  smallbutton(x + xshift + 150, y, 5, t1, emerald, black);\n  t1 := 'Fibonacci';\n  smallbutton(x + xshift + 245, y, 8, t1, emerald, black);\n  t1 := 'None';\n  smallbutton(x + xshift + 380, y, 5, t1, emerald, black)\n End;\n\n Procedure controlboard4(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var dummy: integer;\n Var t1, t2: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := 'Decay Rate';\n  t2 := '%';\n  spinner(1, textrow, boldtext, x, y, numchars, numdigits, t1, dummy, black, white, darkblue);\n  spinner(2, spinrow, boldtext, x, y, numchars, numdigits, t2, decayrate, black, white, skyblue)\n End;\n\n Procedure controlboard5(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var dummy: integer;\n Var t1: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, ochre, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := 'Shrink Y';\n  spinner(1, spinrow, normtext, x, y, numchars, numdigits, t1, multsumwaves, black, white, ochre)\n End;\n\n Procedure controlboard6(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var dummy: integer;\n Var t1: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, ochre, darkbrown, gold, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := '  Superposed Wave';\n  spinner(1, textrow, boldtext, x, y, numchars, numdigits, t1, dummy, black, white, ochre)\n End;\n\n Procedure controlboard7(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var dummy: integer;\n Var t1: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, ochre, darkbrown, gold, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := ' Component Waves';\n  spinner(1, textrow, boldtext, x, y, numchars, numdigits, t1, dummy, black, white, ochre)\n End;\n\n Procedure controlboard8(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var t1: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := 'Coarse';\n  smallbutton(x + 22, y + 2, 6, t1, ochre, black);\n  t1 := 'Fine';\n  smallbutton(x + 130, y + 2, 4, t1, ochre, black)\n End;\n\n Procedure infoboard(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var dummy: integer;\n Var t1, t2: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, blue, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := 'Showing:  ' + wavesshown;\n  t2 := '        Divide by';\n  spinner(1, textrow, boldtext, x, y, numchars, numdigits, t1, dummy, black, white, emerald);\n  spinner(2, spinrow, normtext, x, y, numchars, numdigits, t2, divideby, black, white, emerald);\n  t2 := 'Lim';\n  smallbutton(x + 8, y + 1 * 34, 3, t2, emerald, black);\n  t2 := '  Square';\n  smallbutton(x + 8, y + 2 * 34, 9, t2, emerald, black);\n  t2 := '    Pulse';\n  smallbutton(x + 8, y + 3 * 34, 9, t2, emerald, black);\n  t2 := 'One beat';\n  smallbutton(x + 8, y + 4 * 34, 9, t2, emerald, black);\n  t2 := 'Shortstock';\n  smallbutton(x + 8, y + 5 * 34, 9, t2, emerald, black);\n  t2 := ' Sawtooth';\n  smallbutton(x + 142, y + 2 * 34, 9, t2, emerald, black);\n  t2 := '  Relaxed';\n  smallbutton(x + 142, y + 3 * 34, 9, t2, emerald, black);\n  t2 := 'Two beats';\n  smallbutton(x + 142, y + 4 * 34, 9, t2, emerald, black);\n  t2 := 'Longstock';\n  smallbutton(x + 142, y + 5 * 34, 9, t2, emerald, black)\n End;\n\n Procedure helpexitboard(x, y, numchars, numdigits, numrows, borderflag, backflag: integer);\n Var t1: string;\n Begin\n  borders(x, y, numchars, numdigits, numrows, gold, darkbrown, ochre, borderflag, backflag);\n  if borderflag = withborder then\n   begin\n    x := x + 4;\n    y := y + 8\n   end;\n  t1 := ' Menu';\n  smallbutton(x + 3, y, 5, t1, blue, cream);\n  t1 := ' Exit';\n  smallbutton(x + 81, y, 4, t1, red, white)\n End;\n\n Procedure updatecontrolboard(x, y, numchars, numdigits, borderflag: integer);\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  incdecspinner(1, x, y, numchars, numdigits, numwaves, 1, maxwaves, 1);\n  updatevaluebutton(x + 10, y + 40, 2, numwaves, 2, small);\n  updatevaluebutton(x + 54, y + 40, 2, numwaves, 10, small);\n  updatevaluebutton(x + 98, y + 40, 2, numwaves, 20, small);\n  updatevaluebutton(x + 142, y + 40, 2, numwaves, 40, small);\n  updatevaluebutton(x + 186, y + 40, 2, numwaves, 60, small);\n  initallwavesbutton(x + 8, y + 68, 16, small)\n End;\n\n Procedure updatecontrolboard2(x, y, numchars, numdigits, borderflag: integer);\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  incdecspinner(1, x, y, numchars, numdigits, selectedwave, 1, maxwaves, 1);\n  updatetogglebutton(x + 28, y + 34, 11, onoff[selectedwave], small)\n End;\n\n Procedure updatecontrolboard2a(x, y, numchars, numdigits, borderflag: integer);\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  incdecspinner(1, x, y, numchars, numdigits, amplitudes[selectedwave], -maxamplitude, maxamplitude,\n     amplitudeinc);\n  incdecspinner(2, x, y, numchars, numdigits, phases[selectedwave], -maxphase, maxphase, phaseinc);\n  updatewavebutton(x + 14, y + 34, 1, small)\n End;\n\n Procedure updatecontrolboard3(x, y, numchars, numdigits, borderflag: integer);\n Var xshift: integer;\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  xshift := 32;\n  updateshowbuttons(1, x + xshift, y, 2, small);\n  updateshowbuttons(2, x + xshift + 55, y, 5, small);\n  updateshowbuttons(3, x + xshift + 150, y, 5, small);\n  updateshowbuttons(4, x + xshift + 245, y, 8, small);\n  updateshowbuttons(5, x + xshift + 380, y, 5, small)\n End;\n\n Procedure updatecontrolboard4(x, y, numchars, numdigits, borderflag: integer);\n Var dummy: integer;\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  incdecdecay(2, x, y, numchars, numdigits, decayrate, 0, precdecay - 1, 1)\n End;\n\n Procedure updatecontrolboard5(x, y, numchars, numdigits, borderflag: integer);\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  incdecspinner(1, x, y, numchars, numdigits, multsumwaves, 1, 20, 1)\n End;\n\n Procedure updatecontrolboard8(x, y, numchars, numdigits, borderflag: integer);\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  updatevaluebutton(x + 22, y + 8, 6, granularity, course, small);\n  updatevaluebutton(x + 130, y + 8, 4, granularity, fine, small)\n End;\n\n Procedure updateinfoboard(x, y, numchars, numdigits, borderflag: integer);\n Var dummy: integer;\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  incdecdivideby(2, x, y, numchars, numdigits, divideby, 1, 20, 1);\n  updatepresetbuttons(0, x + 8, y + 1 * 36, 3, small);\n  updatepresetbuttons(2, x + 8, y + 2 * 36, 9, small);\n  updatepresetbuttons(5, x + 8, y + 3 * 36, 9, small);\n  updatepresetbuttons(7, x + 8, y + 4 * 36, 9, small);\n  updatepresetbuttons(3, x + 8, y + 5 * 36, 9, small);\n  updatepresetbuttons(1, x + 142, y + 2 * 36, 9, small);\n  updatepresetbuttons(6, x + 142, y + 3 * 36, 9, small);\n  updatepresetbuttons(8, x + 142, y + 4 * 36, 9, small);\n  updatepresetbuttons(4, x + 142, y + 5 * 36, 9, small)\n End;\n\n Procedure updatehelpexitboard(x, y, numchars, numdigits, borderflag: integer);\n Var dummy: integer;\n Begin\n  if borderflag = noborder then\n   begin\n    x := x - 4;\n    y := y - 8\n   end;\n  updatetogglebutton(x + 8, y, 4, infoflag, small);\n  updatevaluebutton(x + 76, y, 4, exitflag, 1, small)\n End;\n\n Procedure displaycontrolboards;\n Begin\n  controlboard(36, 6, 10, 2, 3, withborder, withbackground);\n  borders(280, 2, 34, 0, 2, gold, darkbrown, ochre, withborder, withbackground);\n  controlboard2(286, 10, 12, 2, 3, noborder, nobackground);\n  controlboard2a(546, 10, 10, 4, 3, noborder, nobackground);\n  controlboard3(280, 74, 33, 1, 1, withborder, withbackground);\n  controlboard4(810, 40, 2, 3, 2, withborder, withbackground);\n  controlboard5(34, 954, 8, 2, 1, withborder, withbackground);\n  controlboard6(372, 956, 11, 2, 1, withborder, withbackground);\n  controlboard7(372, 414, 11, 2, 1, withborder, withbackground);\n  controlboard8(750, 954, 10, 0, 1, withborder, withbackground);\n  helpexitboard(810, 2, 5, 0, 1, withborder, withbackground);\n  if infoflag = 1 then\n   infoboard(684, 122, 13, 2, 6, withborder, withbackground)\n End;\n\n Procedure updatecontrolboards;\n Begin\n  updatecontrolboard(36, 6, 10, 2, withborder);\n  updatecontrolboard2(286, 14, 12, 2, noborder);\n  updatecontrolboard2a(546, 14, 10, 4, noborder);\n  updatecontrolboard3(280, 80, 33, 1, withborder);\n  updatecontrolboard4(810, 36, 2, 3, withborder);\n  updatecontrolboard5(34, 954, 8, 2, withborder);\n  updatecontrolboard8(750, 954, 10, 0, withborder);\n  updatehelpexitboard(810, 7, 5, 0, withborder);\n  if infoflag = 1 then\n   updateinfoboard(684, 122, 13, 2, withborder)\n End;\n\n Procedure sinecurve(period, gwidth, scolour, xstart, ystart: integer);\n Var x, y, gran, step, xdiv: integer;\n Begin\n  if onoff[period] = 1 then\n   begin\n    if granularity = fine then\n     begin\n      gran := 180;\n      step := 5;\n      xdiv := 2;\n      xstart := xstart + 4\n     end\n    else\n     begin\n      gran := 90;\n      step := 10;\n      xdiv := 1\n     end;\n    colour(scolour);\n    setxy(xstart, ystart);\n    direction(90);\n    x := 0;\n    for x := 0 to gran do\n     begin\n      penup;\n      forward(step);\n      forget(1);\n      left(90);\n      y := (decaymult[period] * sin((4 * x / xdiv + phases[period]) * period, 1, amplitudes[period])) /\n     precdecay;\n      forward(y);\n      back(y);\n      forget(1);\n      right(90)\n     end;\n    if period = selectedwave then\n     thickness(4);\n    polyline(gran + 1);\n    if period = selectedwave then\n     thickness(2)\n   end\n End;\n\n Procedure addsinecurves(maxperiod, amplitude, phase, scolour, xstart, ystart: integer);\n Var x, period, y, gran, step, xdiv: integer;\n Begin\n  colour(scolour);\n  if granularity = fine then\n   begin\n    gran := 180;\n    step := 5;\n    xdiv := 2;\n    xstart := xstart + 4;\n    thickness(2);\n    colour(black)\n   end\n  else\n   begin\n    gran := 90;\n    step := 10;\n    xdiv := 1;\n    thickness(2)\n   end;\n  setxy(xstart, ystart);\n  direction(90);\n  x := 0;\n  for x := 0 to gran do\n   begin\n    penup;\n    forward(step);\n    forget(1);\n    pendown;\n    left(90);\n    y := 0;\n    for period := 1 to maxperiod do\n     begin\n      if onoff[period] = 1 then\n       y := y + (decaymult[period] * sin((4 * x / xdiv + phases[period]) * period, 1, amplitudes[period]))\n     / precdecay\n     end;\n    if multsumwaves > 0 then\n     y := y / multsumwaves\n    else\n    if multsumwaves < 0 then\n     begin\n      y := y * abs(multsumwaves)\n     end;\n    if granularity = fine then\n     penup;\n    forward(y);\n    back(y);\n    pendown;\n    forget(1);\n    right(90)\n   end;\n  polyline(gran + 1)\n End;\n\n Procedure verticalgrid(startx, starty, gwidth, gheight: integer);\n Var count: integer;\n Begin\n  setxy(startx, starty + gheight);\n  colour(lightgrey);\n  direction(0);\n  for count := 1 to 9 do\n   begin\n    pendown;\n    if count = 1 then\n     thickness(4)\n    else\n     thickness(2);\n    forward(2 * gheight);\n    back(2 * gheight);\n    right(90);\n    penup;\n    forward(gwidth / 8);\n    if count mod 2 = 1 then\n     forward(1);\n    pendown;\n    left(90)\n   end\n End;\n\n Procedure horizontalgrid(startx, starty, gwidth, gheight: integer);\n Var count, steps: integer;\n Begin\n  steps := 50;\n  setxy(startx, starty - gheight);\n  colour(lightgrey);\n  direction(90);\n  for count := 1 to 2 * (gheight / steps) + 1 do\n   begin\n    if count = gheight / steps + 1 then\n     thickness(4)\n    else\n     thickness(2);\n    pendown;\n    forward(gwidth);\n    back(gwidth);\n    right(90);\n    penup;\n    forward(steps);\n    pendown;\n    left(90)\n   end\n End;\n\n Procedure initialise;\n Var count: integer;\n Begin\n  keyecho(false);\n  numwaves := 2;\n  selectedwave := 1;\n  multsumwaves := 1;\n  decayrate := 10;\n  infoflag := 0;\n  divideby := 1;\n  granularity := course;\n  wavesshown := 'All waves';\n  loaddecaymults(decayrate);\n  for count := 1 to maxwaves do\n   begin\n    amplitudes[count] := 100;\n    phases[count] := 0;\n    onoff[count] := 1\n   end\n End;\n\n Procedure displaygraphs;\n Var count: integer;\n Begin\n  border(30, 460, 940, 540, ochre, black, silver, withbackground);\n  border(32, 462, 936, 536, black, ochre, white, withbackground);\n  verticalgrid(50, 730, 900, 250);\n  horizontalgrid(50, 730, 900, 250);\n  addsinecurves(numwaves, 100, 0, darkgrey, 40, 730);\n  border(30, 118, 940, 340, ochre, darkbrown, silver, nobackground);\n  border(32, 120, 936, 336, darkbrown, ochre, cream, withbackground);\n  verticalgrid(50, 288, 900, 150);\n  horizontalgrid(50, 288, 900, 150);\n  for count := 1 to numwaves do\n   sinecurve(count, 900, count, 40, 288)\n End;\n\nBEGIN\n initialise;\n exitflag := 0;\n repeat\n  noupdate;\n  blank(coffee);\n  displaygraphs;\n  displaycontrolboards;\n  update;\n  repeat\n   pause(30)\n  until ?click > 0;\n  updatecontrolboards\n until exitflag = 1\nEND.\n",RecursionFactory:"PROGRAM RecursionFactory;\nCONST numsides = 6;\n      initsize = 240;\n      shrink = 40;\n      rangle = 180;\n      polygap = 0;\n      levels = 5;\n      slowdraw = 3;\n      mode = 1;\n      firstcol = 1;\n      colinc = 2;\n      minthick = 2;\n      addthick = 6;\n      circsize = 60;\nVAR halfangle: integer;\n    slowlev: integer;\n\n  Procedure recurse(flag, size, depth, col: integer);\n  Var storex, storey: integer;\n      sides: integer;\n  Begin\n    if depth > 0 then\n      begin\n        if depth < slowlev then\n          noupdate\n        else\n          update;\n        if flag = 1 then\n          for flag := 2 to 3 do\n            begin\n              storex := turtx;\n              storey := turty;\n              for sides := 1 to numsides do\n                recurse(flag, size, depth, col);\n              turtx := storex;\n              turty := storey\n            end\n        else\n          begin\n            penup;\n            if flag = 2 then\n              begin\n                colour(rgb(col));\n                thickness(minthick + ((depth - 1) * addthick) / 12);\n                if mode = 1 then\n                  pendown\n                else\n                 if mode = 2 then\n                   blot(size * circsize / 120)\n                else\n                  circle(size * circsize / 120)\n              end;\n            left(halfangle);\n            forward(size);\n            right(180 - halfangle + rangle);\n            if flag = 3 then\n              begin\n                forward(size * polygap / 120);\n                recurse(1, (size * shrink) / 120, depth - 1, ((col + colinc - 1) mod 7) + 1);\n                back(size * polygap / 120)\n              end;\n            left(rangle)\n          end\n      end\n  End;\n\nBEGIN\n  blank(black);\n  if 180 mod numsides = 0 then\n    begin\n      halfangle := 90 - (180 / numsides);\n      slowlev := levels + 1 - slowdraw;\n      if slowlev > levels - 1 then\n        slowlev := levels - 1;\n      movexy(0, initsize);\n      recurse(1, initsize, levels, firstcol)\n    end\nEND.\n",RecursiveTree:"PROGRAM RecursiveTree;\nVAR count: integer;\n\n  Procedure rdraw(dist, level: integer);\n  Begin\n    thickness(level * 2);\n    forward(dist);\n    left(30);\n    if level > 0 then\n      rdraw(3 * dist / 4, level - 1);\n    right(30);\n    thickness(level * 2);\n    forward(dist / 3);\n    right(20);\n    if level > 0 then\n      rdraw(3 * dist / 4, level - 1);\n    left(20);\n    back(dist / 3);\n    back(dist)\n  End;\n\nBEGIN\n  blank(black);\n  movexy(0, 400);\n  colour(emerald);\n  rdraw(180, 10)\nEND.\n",KochSnowflake:"PROGRAM KochSnowflake;\nVAR count: integer;\n\n  Procedure kdraw(dist, level: integer);\n  Begin\n    if level = 0 then\n      forward(dist)\n    else\n      begin\n        kdraw(dist / 3, level - 1);\n        left(60);\n        kdraw(dist / 3, level - 1);\n        right(120);\n        kdraw(dist / 3, level - 1);\n        left(60);\n        kdraw(dist / 3, level - 1)\n      end\n  End;\n\nBEGIN\n  blank(black);\n  movexy(0, 430);\n  left(30);\n  for count := 1 to 3 do\n    begin\n      colour(rgb(count + 20));\n      kdraw(729, 4);\n      right(120)\n    end\nEND.\n",SquareKoch:"PROGRAM SquareKoch;\nCONST maxlevel = 5;\nVAR count: integer;\n\n  Procedure kdraw(dist, level: integer);\n  Begin\n    if level = 0 then\n      forward(dist)\n    else\n      begin\n        kdraw(dist / 3, level - 1);\n        left(90);\n        kdraw(dist / 3, level - 1);\n        right(90);\n        kdraw(dist / 3, level - 1);\n        right(90);\n        kdraw(dist / 3, level - 1);\n        left(90);\n        kdraw(dist / 3, level - 1)\n      end\n  End;\n\nBEGIN\n  blank(black);\n  movexy(0, 486);\n  left(45);\n  for count := 1 to 4 do\n    begin\n      colour(rgb(count + 20));\n      kdraw(729, maxlevel);\n      right(90)\n    end;\n  movexy(0, -323);\n  for count := 1 to 4 do\n    begin\n      colour(rgb(count + 20));\n      kdraw(243, maxlevel - 1);\n      right(90)\n    end\nEND.\n",Sierpinski:"PROGRAM Sierpinski;\n\n  Procedure triangle(x1, y1, x2, y2, x3, y3: integer);\n  Var x12, y12, x23, y23, x31, y31: integer;\n  Begin\n    setxy(x1, y1);\n    setxy(x2, y2);\n    setxy(x3, y3);\n    setxy(x1, y1);\n    colour(black);\n    polyline(4);\n    if hypot(x2 - x1, y2 - y1, 1) > 3 then\n      begin\n        x12 := (x1 + x2) / 2;\n        y12 := (y1 + y2) / 2;\n        x23 := (x2 + x3) / 2;\n        y23 := (y2 + y3) / 2;\n        x31 := (x3 + x1) / 2;\n        y31 := (y3 + y1) / 2;\n        setxy(x12, y12);\n        setxy(x23, y23);\n        setxy(x31, y31);\n        colour(white);\n        polygon(3);\n        triangle(x1, y1, x12, y12, x31, y31);\n        triangle(x2, y2, x23, y23, x12, y12);\n        triangle(x3, y3, x31, y31, x23, y23)\n      end\n  End;\n\nBEGIN\n  blank(cream);\n  thickness(1);\n  triangle(400, 138, 843, 650, 179, 778)\nEND.\n",SierpinskiDots:"PROGRAM SierpinskiDots;\nVAR x: array[0..2] of integer;\n    y: array[0..2] of integer;\n    thisx, thisy, thisc: integer;\nBEGIN\n  x[0] := 400;\n  y[0] := 138;\n  x[1] := 843;\n  y[1] := 650;\n  x[2] := 179;\n  y[2] := 778;\n  thisx := random(200) + 400;\n  thisy := random(200) + 400;\n  repeat\n    thisc := random(3);\n    thisx := (thisx + x[thisc]) / 2;\n    thisy := (thisy + y[thisc]) / 2;\n    pixset(thisx, thisy, purple)\n  until 0 = 1\nEND.\n",IFSBackground:"PROGRAM IFSBackground;\nCONST xleft = 0;\n      xright = 999;\n      ytop = 0;\n      ybottom = 999;\n      gridscale = 5;\n      gridthick = 64;\n\n  Procedure background;\n  Var x, y: integer;\n      cx, cy, r, g, b: integer;\n  Begin\n    thickness(gridthick);\n    colour(darkgrey);\n    for x := 1 to gridscale - 1 do\n      begin\n        setxy(xleft + divmult(xright - xleft, gridscale, x), ytop);\n        drawxy(0, ybottom - ytop)\n      end;\n    for y := 1 to gridscale - 1 do\n      begin\n        setxy(xleft + gridthick / 2, ytop + divmult(ybottom - ytop, gridscale, y));\n        drawxy(xright - xleft - gridthick, 0)\n      end;\n    colour(black);\n    setxy(xleft, ytop);\n    drawxy(xright - xleft, 0);\n    drawxy(0, ybottom - ytop);\n    drawxy(xleft - xright, 0);\n    drawxy(0, ytop - ybottom);\n    for x := 0 to gridscale - 1 do\n      for y := 0 to gridscale - 1 do\n        begin\n          cx := xleft + divmult(xright - xleft, gridscale, x) + gridthick;\n          cy := ytop + divmult(ybottom - ytop, gridscale, y) + gridthick;\n          r := divmult(255, gridscale - 1, x);\n          g := divmult(255, gridscale - 1, y);\n          b := divmult(255, 2 * gridscale - 2, 2 * gridscale - 2 - x - y);\n          recolour(cx, cy, (r * $10000) + (g * $100) + (b * $1))\n        end\n  End;\n\nBEGIN\n  canvas(xleft, ytop, xright - xleft + 1, ybottom - ytop + 1);\n  resolution(xright - xleft + 1, ybottom - ytop + 1);\n  background\nEND.\n",IFSColour:"PROGRAM IFSColour;\nCONST maxmappings = 4;\nVAR xleft, xright, ytop, ybottom: integer;\n    scaledown, mappings: integer;\n    gridscale, gridthick: integer;\n    xl, xr, yt, yb, gt: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..maxmappings] of integer;\n    mapyx, mapyy, mapyc: array[1..maxmappings] of integer;\n    count: integer;\n\n  Procedure setsierpinski;\n  Begin\n    xleft := 0;\n    xright := 999;\n    ytop := 0;\n    ybottom := 999;\n    scaledown := 2;\n    mappings := 3;\n    gridscale := 5;\n    gridthick := 64;\n    coeffdiv := 100;\n    mapxx[1] := 50;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 50;\n    mapxc[1] := 250;\n    mapyc[1] := 0;\n    mapxx[2] := 50;\n    mapyx[2] := 0;\n    mapxy[2] := 0;\n    mapyy[2] := 50;\n    mapxc[2] := 0;\n    mapyc[2] := 500;\n    mapxx[3] := 50;\n    mapyx[3] := 0;\n    mapxy[3] := 0;\n    mapyy[3] := 50;\n    mapxc[3] := 500;\n    mapyc[3] := 500\n  End;\n\n  Procedure setbarnsley;\n  Begin\n    xleft := -236;\n    xright := 263;\n    ytop := 1;\n    ybottom := 1000;\n    scaledown := 2;\n    mappings := 4;\n    gridscale := 5;\n    gridthick := 32;\n    coeffdiv := 100;\n    mapxx[1] := 0;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 16;\n    mapxc[1] := 0;\n    mapyc[1] := 0;\n    mapxx[2] := 85;\n    mapyx[2] := -4;\n    mapxy[2] := 4;\n    mapyy[2] := 85;\n    mapxc[2] := 0;\n    mapyc[2] := 160;\n    mapxx[3] := 20;\n    mapyx[3] := 23;\n    mapxy[3] := -26;\n    mapyy[3] := 22;\n    mapxc[3] := 0;\n    mapyc[3] := 160;\n    mapxx[4] := -15;\n    mapyx[4] := 26;\n    mapxy[4] := 28;\n    mapyy[4] := 24;\n    mapxc[4] := 0;\n    mapyc[4] := 44\n  End;\n\n  Procedure setdragon;\n  Begin\n    xleft := 0;\n    xright := 999;\n    ytop := 0;\n    ybottom := 999;\n    scaledown := 4;\n    mappings := 3;\n    gridscale := 5;\n    gridthick := 64;\n    coeffdiv := 1000;\n    mapxx[1] := 0;\n    mapyx[1] := -577;\n    mapxy[1] := 577;\n    mapyy[1] := 0;\n    mapxc[1] := 95;\n    mapyc[1] := 589;\n    mapxx[2] := 0;\n    mapyx[2] := -577;\n    mapxy[2] := 577;\n    mapyy[2] := 0;\n    mapxc[2] := 441;\n    mapyc[2] := 789;\n    mapxx[3] := 0;\n    mapyx[3] := -577;\n    mapxy[3] := 577;\n    mapyy[3] := 0;\n    mapxc[3] := 95;\n    mapyc[3] := 989\n  End;\n\n  Procedure startprompt;\n  Begin\n    output(true, cream, true);\n    keyecho(false);\n    writeln('ITERATED FUNCTIONS ON COLOURED BACKGROUND');\n    writeln('');\n    write('Select Sierpinski, Barnsley fern, or Dragon curve? (S/B/D) ');\n    keyecho(false);\n    repeat\n    until (abs(?key) = \\s) or (abs(?key) = \\b) or (abs(?key) = \\d);\n    writeln(chr(abs(?key)));\n    if abs(?key) = \\s then\n      begin\n        writeln('Sierpinski mappings will be used');\n        setsierpinski\n      end\n    else\n    if abs(?key) = \\b then\n      begin\n        writeln('Barnsley fern mappings will be used');\n        setbarnsley\n      end\n    else\n      begin\n        writeln('Dragon curve mappings will be used');\n        setdragon\n      end;\n    output(false, white, false)\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end;\n    gt := gridthick / scaledown\n  End;\n\n  Procedure background;\n  Var x, y: integer;\n      cx, cy, r, g, b: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x := 1 to gridscale - 1 do\n      begin\n        setxy(xl + divmult(xr - xl, gridscale, x), yt);\n        drawxy(0, yb - yt)\n      end;\n    for y := 1 to gridscale - 1 do\n      begin\n        setxy(xl + gt / 2, yt + divmult(yb - yt, gridscale, y));\n        drawxy(xr - xl - gt, 0)\n      end;\n    colour(black);\n    setxy(xl, yt);\n    drawxy(xr - xl, 0);\n    drawxy(0, yb - yt);\n    drawxy(xl - xr, 0);\n    drawxy(0, yt - yb);\n    for x := 0 to gridscale - 1 do\n      for y := 0 to gridscale - 1 do\n        begin\n          cx := xl + divmult(xr - xl, gridscale, x) + gt;\n          cy := yt + divmult(yb - yt, gridscale, y) + gt;\n          r := divmult(255, gridscale - 1, x);\n          g := divmult(255, gridscale - 1, y);\n          b := divmult(255, 2 * gridscale - 2, 2 * gridscale - 2 - x - y);\n          recolour(cx, cy, (r * #10000) + (g * #100) + (b * #1))\n        end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n       for x := xl to xr do\n         begin\n           map(mapnum, x, y, newx, newy);\n           pixset(newx, newy, pixcol(x, y))\n         end;\n    update\n  End;\n\nBEGIN\n  startprompt;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  background;\n  for count := 1 to mappings do\n    domap(count)\nEND.\n",IFSDemonstrator:"PROGRAM IFSDemonstrator;\nCONST maxmappings = 4;\n      pauseval = 2000;\nVAR xleft, xright, ytop, ybottom: integer;\n    scaledown, mappings: integer;\n    live, copied: integer;\n    uniform, seedpixel: boolean;\n    seedx, seedy: integer;\n    xl, xr, yt, yb: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..maxmappings] of integer;\n    mapyx, mapyy, mapyc: array[1..maxmappings] of integer;\n    iteration, starttime: integer;\n    count, numborn, numkilled: integer;\n\n  Procedure setsierpinski;\n  Begin\n    xleft := 0;\n    xright := 999;\n    ytop := 0;\n    ybottom := 999;\n    scaledown := 2;\n    mappings := 3;\n    live := black;\n    copied := darkgrey;\n    seedx := 250;\n    seedy := 0;\n    coeffdiv := 100;\n    mapxx[1] := 50;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 50;\n    mapxc[1] := 250;\n    mapyc[1] := 0;\n    mapxx[2] := 50;\n    mapyx[2] := 0;\n    mapxy[2] := 0;\n    mapyy[2] := 50;\n    mapxc[2] := 0;\n    mapyc[2] := 500;\n    mapxx[3] := 50;\n    mapyx[3] := 0;\n    mapxy[3] := 0;\n    mapyy[3] := 50;\n    mapxc[3] := 500;\n    mapyc[3] := 500\n  End;\n\n  Procedure setbarnsley;\n  Begin\n    xleft := -236;\n    xright := 263;\n    ytop := 1;\n    ybottom := 1000;\n    scaledown := 2;\n    mappings := 4;\n    live := seagreen;\n    copied := emerald;\n    seedx := 1;\n    seedy := 1;\n    coeffdiv := 100;\n    mapxx[1] := 0;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 16;\n    mapxc[1] := 0;\n    mapyc[1] := 0;\n    mapxx[2] := 85;\n    mapyx[2] := -4;\n    mapxy[2] := 4;\n    mapyy[2] := 85;\n    mapxc[2] := 0;\n    mapyc[2] := 160;\n    mapxx[3] := 20;\n    mapyx[3] := 23;\n    mapxy[3] := -26;\n    mapyy[3] := 22;\n    mapxc[3] := 0;\n    mapyc[3] := 160;\n    mapxx[4] := -15;\n    mapyx[4] := 26;\n    mapxy[4] := 28;\n    mapyy[4] := 24;\n    mapxc[4] := 0;\n    mapyc[4] := 44\n  End;\n\n  Procedure setdragon;\n  Begin\n    xleft := 0;\n    xright := 999;\n    ytop := 0;\n    ybottom := 999;\n    scaledown := 4;\n    mappings := 3;\n    live := black;\n    copied := silver;\n    seedx := 1;\n    seedy := 1;\n    coeffdiv := 1000;\n    mapxx[1] := 0;\n    mapyx[1] := -577;\n    mapxy[1] := 577;\n    mapyy[1] := 0;\n    mapxc[1] := 95;\n    mapyc[1] := 589;\n    mapxx[2] := 0;\n    mapyx[2] := -577;\n    mapxy[2] := 577;\n    mapyy[2] := 0;\n    mapxc[2] := 441;\n    mapyc[2] := 789;\n    mapxx[3] := 0;\n    mapyx[3] := -577;\n    mapxy[3] := 577;\n    mapyy[3] := 0;\n    mapxc[3] := 95;\n    mapyc[3] := 989\n  End;\n\n  Procedure startprompt;\n  Begin\n    output(true, cream, true);\n    keyecho(false);\n    writeln('ITERATED FUNCTION SYSTEMS DEMONSTRATOR PROGRAM');\n    writeln('');\n    write('Select Barnsley fern, Sierpinski, or Dragon curve? (B/S/D) ');\n    keyecho(false);\n    repeat\n    until (abs(?key) = \\b) or (abs(?key) = \\s) or (abs(?key) = \\d);\n    writeln(chr(abs(?key)));\n    if abs(?key) = \\b then\n      begin\n        writeln('Barnsley fern mappings will be used');\n        setbarnsley\n      end\n    else\n    if abs(?key) = \\s then\n      begin\n        writeln('Sierpinski mappings will be used');\n        setsierpinski\n      end\n    else\n      begin\n        writeln('Dragon curve mappings will be used');\n        setdragon\n      end;\n    writeln('');\n    write('Start with single Pixel or entire Canvas? (P/C) ');\n    keyecho(false);\n    repeat\n    until (abs(?key) = \\p) or (abs(?key) = \\c);\n    writeln(chr(abs(?key)));\n    seedpixel := (abs(?key) = \\p);\n    writeln('');\n    write('Use Uniform or Different colours for mappings? (U/D) ');\n    keyecho(false);\n    repeat\n    until (abs(?key) = \\u) or (abs(?key) = \\d);\n    writeln(chr(abs(?key)));\n    uniform := (abs(?key) = \\u);\n    output(false, white, false)\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) <> white then\n          begin\n            map(mapnum, x, y, newx, newy);\n            if pixcol(newx, newy) = white then\n              inc(numborn);\n            if uniform then\n              pixset(newx, newy, copied)\n            else\n              pixset(newx, newy, rgb(mapnum))\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x, y: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) = live then\n          begin\n            pixset(x, y, white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x, y) <> white then\n          pixset(x, y, live);\n    update\n  End;\n\nBEGIN\n  startprompt;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  if seedpixel then\n    pixset(seedx, seedy, live)\n  else\n    blank(live);\n  iteration := 0;\n  timeset(0);\n  repeat\n    starttime := time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration ' + str(iteration) + ':');\n    numborn := 0;\n    for count := 1 to mappings do\n      domap(count);\n    numkilled := 0;\n    cleanup;\n    writeln('  ' + str(numborn) + ' pixels born; ' + str(numkilled) + ' pixels killed');\n    writeln('  (took ' + str((time - starttime) / 1000) + ' seconds - total ' + str(time / 1000) + ' seconds so far)');\n    if (numborn + numkilled > 0) and (pauseval >= 1000) then\n      begin\n        write('  (now pausing ' + qstr(pauseval, 1000, 1) + ' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn + numkilled = 0;\n  writeln('FINISH - fixed point of iterative mapping has been reached');\n  for count := 1 to mappings do\n    domap(count)\nEND.\n",Logistic:"PROGRAM Logistic;\nCONST maxpop = 100000;\n      maxgen = 100;\n      lmargin = 105;\n      rmargin = 40;\n      tmargin = 150;\n      bmargin = 200;\n      output = false;\n\nVAR gen, pop: integer;\n    r: integer;\n\n  Procedure axes;\n  Var i: integer;\n  Begin\n    colour(black);\n    for i := 0 to 10 do\n      begin\n        setxy(i * 100 - 25, 1000);\n        print(str(i * maxgen / 10), 4, 20)\n      end;\n    for i := 1 to 10 do\n      begin\n        setxy(-lmargin + 5, 1000 - i * 100 - 20);\n        print(str(i * maxpop / 10), 4, 20)\n      end;\n    setxy(0, 0);\n    drawxy(0, 1000);\n    drawxy(1000, 0);\n    colour(red);\n    setxy(0, 1060);\n    print('Population over ' + str(maxgen) + ' generations, where P (population/' + str(maxpop) + ')', 4, 25);\n    setxy(0, 1110);\n    print('is determined by the logistic equation P'' = rP(1 - P), with r = ' + qstr(r, 10, 1), 4, 25)\n  End;\n\n  Procedure menu;\n  Var i: integer;\n  Begin\n    colour(black);\n    setxy(10, -tmargin + 20);\n    print('Set r:', 4, 25);\n    for i := 21 to 40 do\n      begin\n        setxy(((i - 1) mod 10) * 90 + 130, ((i - 1) div 10) * 50 - 100 - tmargin);\n        if i = r then\n          box(90, 50, red, true)\n        else\n          box(90, 50, cream, true);\n        print('  ' + qstr(i, 10, 1), 4, 25)\n      end\n  End;\n\nBEGIN\n  canvas(-lmargin, -tmargin, 1000 + lmargin + rmargin, 1000 + tmargin + bmargin);\n  resolution(1000 + lmargin + rmargin, 1000 + tmargin + bmargin);\n  thickness(3);\n  r := 30;\n  repeat\n    noupdate;\n    blank(white);\n    axes;\n    menu;\n    colour(blue);\n    pop := random(maxpop - 9) + 10;\n    if output then\n      begin\n        writeln('');\n        writeln('r = ' + qstr(r, 10, 1) + '; Initial population = ' + str(pop))\n      end;\n    setxy(0, 1000 - divmult(pop, maxpop, 1000));\n    for gen := 1 to maxgen do\n      begin\n        pop := divmult(pop, 10 * maxpop, r * (maxpop - pop));\n        setxy(divmult(gen, maxgen, 1000), 1000 - divmult(pop, maxpop, 1000));\n        polyline(2);\n        if output then\n          begin\n            write(str(pop) + ' ');\n            if gen mod 10 = 0 then\n              writeln('')\n          end\n      end;\n    update;\n    repeat\n    until (?lmouse > 0) and (?clicky < (100 - tmargin)) and (?clickx >= 130) and (?clickx < 1030);\n    r := ((?clickx - 130) div 90) + ((?clicky + tmargin + 100) div 50) * 10 + 1\n  until 0 = 1\nEND.\n",LogisticSpider:"PROGRAM LogisticSpider;\nCONST maxpop = 100000;\n      maxgen = 100;\n      lmargin = 60;\n      rmargin = 40;\n      tmargin = 150;\n      bmargin = 200;\n      output = true;\n\nVAR gen, pop: integer;\n    r: integer;\n\n  Procedure axes;\n  Var i: integer;\n  Begin\n    colour(black);\n    for i := 0 to 10 do\n      begin\n        setxy(i * 100 - 25, 1000);\n        print(qstr(i, 10, 1), 4, 20)\n      end;\n    for i := 1 to 10 do\n      begin\n        setxy(-lmargin + 5, 1000 - i * 100 - 20);\n        print(qstr(i, 10, 1), 4, 20)\n      end;\n    setxy(0, 0);\n    drawxy(0, 1000);\n    drawxy(1000, 0);\n    colour(red);\n    setxy(0, 1060);\n    print('Population over ' + str(maxgen) + ' generations, where P (population/' + str(maxpop) + ')', 4, 25);\n    setxy(0, 1110);\n    print('is determined by the logistic equation P'' = rP(1 - P), with r = ' + qstr(r, 10, 1), 4, 25)\n  End;\n\n  Procedure menu;\n  Var i: integer;\n  Begin\n    colour(black);\n    setxy(10, -tmargin + 20);\n    print('Set k:', 4, 25);\n    for i := 21 to 40 do\n      begin\n        setxy(((i - 1) mod 10) * 90 + 130, ((i - 1) div 10) * 50 - 100 - tmargin);\n        if i = r then\n          box(90, 50, red, true)\n        else\n          box(90, 50, cream, true);\n        print('  ' + qstr(i, 10, 1), 4, 25)\n      end\n  End;\n\n  Procedure curve;\n  Var i, pop, nextpop: integer;\n  Begin\n    noupdate;\n    colour(black);\n    setxy(0, 1000);\n    drawxy(1000, -1000);\n    colour(blue);\n    setxy(0, 1000);\n    for i := 1 to 1000 do\n      begin\n        pop := divmult(i, 1000, maxpop);\n        nextpop := divmult(pop, 10 * maxpop, r * (maxpop - pop));\n        setxy(divmult(pop, maxpop, 1000), 1000 - divmult(nextpop, maxpop, 1000));\n        polyline(2)\n      end;\n    update\n  End;\n\nBEGIN\n  canvas(-lmargin, -tmargin, 1000 + lmargin + rmargin, 1000 + tmargin + bmargin);\n  resolution(1000 + lmargin + rmargin, 1000 + tmargin + bmargin);\n  thickness(3);\n  r := 30;\n  repeat\n    noupdate;\n    blank(white);\n    axes;\n    menu;\n    curve;\n    pop := random(maxpop - 9) + 10;\n    if output then\n      begin\n        writeln('');\n        writeln('r = ' + qstr(r, 10, 1) + '; Initial population = ' + str(pop))\n      end;\n    setxy(divmult(pop, maxpop, 1000), 1000);\n    for gen := 1 to maxgen do\n      begin\n        pop := divmult(pop, 10 * maxpop, r * (maxpop - pop));\n        colour(mixcols(lightgreen, green, maxgen - gen, gen));\n        drawxy(0, 1000 - divmult(pop, maxpop, 1000) - turty);\n        drawxy(divmult(pop, maxpop, 1000) - turtx, 0);\n        if output then\n          begin\n            write(str(pop) + ' ');\n            if gen mod 10 = 0 then\n              writeln('')\n          end\n      end;\n    blot(3);\n    update;\n    repeat\n    until (?lmouse > 0) and (?clicky < (100 - tmargin)) and (?clickx >= 130) and (?clickx < 1030);\n    r := ((?clickx - 130) div 90) + ((?clicky + tmargin + 100) div 50) * 10 + 1\n  until 0 = 1\nEND.\n",MandelbrotDemo:"PROGRAM MandelbrotDemo;\nCONST maxcol = 40;\nVAR xcentre, ycentre: integer;\n    xstart, xfinish, ystart, yfinish: integer;\n    a, b, x, y: integer;\n    iterations, temp: integer;\n    scale, pixels: integer;\n\n  Procedure startprompt;\n  Begin\n    output(true, cream, true);\n    keyecho(false);\n    writeln('MANDELBROT SET DISPLAY PROGRAM');\n    writeln('');\n    write('Select Whole set, or Zoom on mini \"lake\" at -0.1592,-1.0330 (W/Z)');\n    repeat\n    until (abs(?key) = \\w) or (abs(?key) = \\z);\n    writeln(chr(abs(?key)));\n    if abs(?key) = \\w then\n      begin\n        xcentre := -500000;\n        ycentre := 0\n      end\n    else\n      begin\n        xcentre := -159200;\n        ycentre := -1033000\n      end;\n    writeln('');\n    if ycentre = 0 then\n      write('Select Fast/Medium/Slow, giving resolution 300/750/1500: (F/M/S) ')\n    else\n      write('Select Fast/Medium/Slow, giving resolution 300/600/1200: (F/M/S) ');\n    repeat\n    until (abs(?key) = \\f) or (abs(?key) = \\m) or (abs(?key) = \\s);\n    writeln(chr(abs(?key)));\n    if ycentre = 0 then\n      begin\n        if abs(?key) = \\f then\n          scale := 100\n        else\n        if abs(?key) = \\m then\n          scale := 250\n        else\n          scale := 500;\n        pixels := scale * 3\n      end\n    else\n      begin\n        if abs(?key) = \\f then\n          scale := 10000\n        else\n        if abs(?key) = \\m then\n          scale := 20000\n        else\n          scale := 40000;\n        pixels := scale / 100 * 3\n      end;\n    output(false, white, false)\n  End;\n\nBEGIN\n  startprompt;\n  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;\n  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;\n  xfinish := xstart + pixels - 1;\n  yfinish := ystart + pixels - 1;\n  writeln('Mandelbrot will be plotted over the following real range:');\n  write(qstr(xstart, scale, 4) + ' < x < ' + qstr(xfinish, scale, 4) + '    ');\n  writeln(qstr(ystart, scale, 4) + ' < y < ' + qstr(yfinish, scale, 4));\n  writeln('Scaling factor: ' + str(scale) + '    Image resolution: ' + str(pixels) + 'x' + str(pixels));\n  canvas(xstart, ystart, pixels, pixels);\n  resolution(pixels, pixels);\n  timeset(0);\n  for a := xstart to xfinish do\n    begin\n      noupdate;\n      for b := ystart to yfinish do\n        begin\n          x := a;\n          y := b;\n          iterations := 0;\n          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do\n            begin\n              temp := divmult(x + y, scale, x - y);\n              y := divmult(2 * x, scale, y) + b;\n              x := temp + a;\n              inc(iterations)\n            end;\n          if iterations > maxcol then\n            pixset(a, b, black)\n          else\n            pixset(a, b, rgb(iterations + 1))\n        end;\n      update\n    end;\n  writeln('Time taken: ' + qstr(time, 1000, 1) + ' seconds.')\nEND.\n",MandelbrotSpectrumDemo:"PROGRAM MandelbrotSpectrumDemo;\nCONST maxcol = 40;\n      spectrum = 7;\nVAR xcentre, ycentre: integer;\n    xstart, xfinish, ystart, yfinish: integer;\n    a, b, x, y: integer;\n    iterations, temp: integer;\n    scale, pixels: integer;\n    spectcol: array[0..spectrum] of integer;\n    boundary: array[0..spectrum] of integer;\n\n  Procedure startprompt;\n  Begin\n    output(true, cream, true);\n    keyecho(false);\n    writeln('MANDELBROT SET DISPLAY PROGRAM');\n    writeln('');\n    write('Select Whole set, or Zoom on mini \"lake\" at -0.1592,-1.0330 (W/Z)');\n    repeat\n    until (abs(?key) = \\w) or (abs(?key) = \\z);\n    writeln(chr(abs(?key)));\n    if abs(?key) = \\w then\n      begin\n        xcentre := -500000;\n        ycentre := 0\n      end\n    else\n      begin\n        xcentre := -159200;\n        ycentre := -1033000\n      end;\n    writeln('');\n    if ycentre = 0 then\n      write('Select Fast/Medium/Slow, giving resolution 300/750/1500: (F/M/S) ')\n    else\n      write('Select Fast/Medium/Slow, giving resolution 300/600/1200: (F/M/S) ');\n    repeat\n    until (abs(?key) = \\f) or (abs(?key) = \\m) or (abs(?key) = \\s);\n    writeln(chr(abs(?key)));\n    if ycentre = 0 then\n      begin\n        if abs(?key) = \\f then\n          scale := 100\n        else\n        if abs(?key) = \\m then\n          scale := 250\n        else\n          scale := 500;\n        pixels := scale * 3\n      end\n    else\n      begin\n        if abs(?key) = \\f then\n          scale := 10000\n        else\n        if abs(?key) = \\m then\n          scale := 20000\n        else\n          scale := 40000;\n        pixels := scale / 100 * 3\n      end;\n    output(false, white, false)\n  End;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    spectcol[0] := violet;\n    spectcol[1] := blue;\n    spectcol[2] := cyan;\n    spectcol[3] := lime;\n    spectcol[4] := yellow;\n    spectcol[5] := orange;\n    spectcol[6] := red;\n    spectcol[7] := violet;\n    for n := 0 to spectrum do\n      boundary[n] := divmult(maxcol, spectrum, n)\n  End;\n\n  Function mixcolour(n: integer): integer;\n  Var col1, col2: integer;\n      mix1, mix2: integer;\n  Begin\n    col2 := 0;\n    repeat\n      inc(col2)\n    until (boundary[col2] >= n) or (col2 = spectrum);\n    col1 := col2 - 1;\n    result := mixcols(spectcol[col1], spectcol[col2], boundary[col2] - n, n - boundary[col1])\n  End;\n\nBEGIN\n  startprompt;\n  colsetup;\n  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;\n  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;\n  xfinish := xstart + pixels - 1;\n  yfinish := ystart + pixels - 1;\n  writeln('Mandelbrot will be plotted over the following real range:');\n  write(qstr(xstart, scale, 4) + ' < x < ' + qstr(xfinish, scale, 4) + '    ');\n  writeln(qstr(ystart, scale, 4) + ' < y < ' + qstr(yfinish, scale, 4));\n  writeln('Scaling factor: ' + str(scale) + '    Image resolution: ' + str(pixels) + 'x' + str(pixels));\n  canvas(xstart, ystart, pixels, pixels);\n  resolution(pixels, pixels);\n  timeset(0);\n  for a := xstart to xfinish do\n    begin\n      noupdate;\n      for b := ystart to yfinish do\n        begin\n          x := a;\n          y := b;\n          iterations := 0;\n          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do\n            begin\n              temp := divmult(x + y, scale, x - y);\n              y := divmult(2 * x, scale, y) + b;\n              x := temp + a;\n              inc(iterations)\n            end;\n          if iterations > maxcol then\n            pixset(a, b, black)\n          else\n            pixset(a, b, mixcolour(iterations))\n        end;\n      update\n    end;\n  writeln('Time taken: ' + qstr(time, 1000, 1) + ' seconds.')\nEND.\n",Quine:"PROGRAM Quine;\nVAR lines: array[0..14] of string[97];\n    i: integer;\nBEGIN\n  output(true, cream, true);\n  lines[0] := 'PROGRAM Quine;';\n  lines[1] := 'VAR lines: array[0..14] of string[97];';\n  lines[2] := '    i: integer;';\n  lines[3] := 'BEGIN';\n  lines[4] := '  output(true, cream, true);';\n  lines[5] := '  for i := 0 to 4 do';\n  lines[6] := '    writeln(lines[i]);';\n  lines[7] := '  for i := 0 to 14 do';\n  lines[8] := '    writeln(chr(32) + lines[12] + str(i) + lines[13] + chr(39) + lines[i] + chr(39) + lines[14]);';\n  lines[9] := '  for i := 5 to 11 do';\n  lines[10] := '    writeln(lines[i])';\n  lines[11] := 'END.';\n  lines[12] := ' lines[';\n  lines[13] := '] := ';\n  lines[14] := ';';\n  for i := 0 to 4 do\n    writeln(lines[i]);\n  for i := 0 to 14 do\n    writeln(chr(32) + lines[12] + str(i) + lines[13] + chr(39) + lines[i] + chr(39) + lines[14]);\n  for i := 5 to 11 do\n    writeln(lines[i])\nEND.\n",Syllogisms:"PROGRAM Syllogisms;\nCONST lastsyll = 255;\n      maxpop = 8;\n      randpop = 4;\n      randomtries = 1000;\n      systemtries = 256;\n      qorder = 'AEIO';\nVAR qcode: array[0..3] of char;\n    qstr1: array[0..3] of string[5];\n    qstr2: array[0..3] of string[8];\n    majors, majorp, minors, minorp, concls, conclp: array[0..lastsyll] of char;\n    majormp, minorsm, conclsp: array[0..lastsyll] of string[3];\n    syllcode: array[0..lastsyll] of string[5];\n    m, p, s: array[0..maxpop] of boolean;\n    majortrue, minortrue, concltrue: array[0..lastsyll] of boolean;\n    refutecount: array[0..lastsyll] of integer;\n    i, try, count: integer;\n    aristotle: boolean;\n    showpops: boolean;\n    thispop: integer;\n\n Procedure initialise;\n Var i: integer;\n Begin\n  for i := 0 to 3 do\n   qcode[i] := qorder[i + 1];\n  qstr1[0] := 'All ';\n  qstr1[1] := 'No ';\n  qstr1[2] := 'Some ';\n  qstr1[3] := 'Some ';\n  qstr2[0] := 's are ';\n  qstr2[1] := ' is ';\n  qstr2[2] := ' is ';\n  qstr2[3] := ' is not '\n End;\n\n Procedure setupsyllogisms;\n Var syl: integer;\n Begin\n  for syl := 0 to lastsyll do\n   begin\n    if (syl and 64) = 0 then\n     begin\n      majors[syl] := 'M';\n      majorp[syl] := 'P'\n     end\n    else\n     begin\n      majors[syl] := 'P';\n      majorp[syl] := 'M'\n     end;\n    if (syl and 128) = 0 then\n     begin\n      minors[syl] := 'S';\n      minorp[syl] := 'M'\n     end\n    else\n     begin\n      minors[syl] := 'M';\n      minorp[syl] := 'S'\n     end;\n    concls[syl] := 'S';\n    conclp[syl] := 'P';\n    majormp[syl] := qcode[syl mod 4] + majors[syl] + majorp[syl];\n    minorsm[syl] := qcode[(syl / 4) mod 4] + minors[syl] + minorp[syl];\n    conclsp[syl] := qcode[(syl / 16) mod 4] + concls[syl] + conclp[syl];\n    syllcode[syl] := str(syl / 64 + 1) + ' ' + qcode[syl mod 4] + qcode[(syl / 4) mod 4] + qcode[(syl /\n     16) mod 4]\n   end\n End;\n\n Function systempop(b: integer): integer;\n Var bit: integer;\n Begin\n  result := 0;\n  bit := 1;\n  repeat\n   if (bit and b) > 0 then\n    begin\n     m[result] := (bit and #AA) > 0;\n     p[result] := (bit and #CC) > 0;\n     s[result] := (bit and #F0) > 0;\n     result := result + 1\n    end;\n   bit := bit * 2\n  until bit > 128\n End;\n\n Procedure showpop(n: integer);\n Var i: integer;\n     preds: string[5];\n Begin\n  write(str(n) + ' - population ' + str(thispop) + ': ');\n  for i := 0 to thispop - 1 do\n   begin\n    if m[i] then\n     preds := 'M'\n    else\n     preds := '';\n    if p[i] then\n     preds := preds + 'P';\n    if s[i] then\n     preds := preds + 'S';\n    write(' [' + preds + '] ')\n   end;\n  writeln('')\n End;\n\n Function common(var property1, property2: array of boolean): integer;\n Var i: integer;\n Begin\n  result := 0;\n  for i := 0 to thispop - 1 do\n   if property1[i] then\n    begin\n     if property2[i] then\n      result := result or 8\n     else\n      result := result or 2\n    end\n   else\n    begin\n     if property2[i] then\n      result := result or 4\n     else\n      result := result or 1\n    end\n End;\n\n Procedure fixtruth(prop: string;b: boolean);\n Var syl: integer;\n Begin\n  for syl := 0 to lastsyll do\n   begin\n    if majormp[syl] = prop then\n     majortrue[syl] := b\n    else\n    if minorsm[syl] = prop then\n     minortrue[syl] := b\n    else\n    if conclsp[syl] = prop then\n     concltrue[syl] := b\n   end\n End;\n\n Procedure checkoverlap(var property1, property2: array of boolean;c1, c2: char);\n Var overlap: integer;\n Begin\n  overlap := common(property1, property2);\n  fixtruth('A' + c1 + c2, (overlap and 2) = 0);\n  fixtruth('A' + c2 + c1, (overlap and 4) = 0);\n  fixtruth('E' + c1 + c2, (overlap and 8) = 0);\n  fixtruth('E' + c2 + c1, (overlap and 8) = 0);\n  fixtruth('I' + c1 + c2, (overlap and 8) > 0);\n  fixtruth('I' + c2 + c1, (overlap and 8) > 0);\n  fixtruth('O' + c1 + c2, (overlap and 2) > 0);\n  fixtruth('O' + c2 + c1, (overlap and 4) > 0)\n End;\n\n Procedure fixrefutes;\n Var syl: integer;\n Begin\n  for syl := 0 to lastsyll do\n   begin\n    if (majortrue[syl] and minortrue[syl]) and not(concltrue[syl]) then\n     inc(refutecount[syl])\n   end\n End;\n\nBEGIN\n output(true, cream, true);\n writeln('          ARISTOTELIAN SYLLOGISM TESTING PROGRAM');\n writeln('Aristotelian syllogisms consist of two premises followed by a');\n writeln('conclusion. The first (Major) premise connects the predicates M');\n writeln('and P, the second (Minor) premise connects the predicates S and');\n writeln('M, while the Conclusion connects the predicates S and P. Four');\n writeln('different types of logical connection are available, with a');\n writeln('traditional shorthand code using the vowels A, E, I and O:');\n writeln('    A     All Fs are G.       E     No F is G.');\n writeln('    I     Some F is G.        O     Some F is not G.');\n writeln('There are thus 4 possible relations in the Major Premise, 4 in');\n writeln('the Minor Premise, and 4 in the Conclusion (so 64 combinations');\n writeln('overall), but in addition, there are four different \"Figures\",');\n writeln('which indicate the order of the predicates in each proposition:');\n writeln('   Figure 1   Major: M-P   Minor: S-M   Conclusion: S-P');\n writeln('   Figure 2   Major: P-M   Minor: S-M   Conclusion: S-P');\n writeln('   Figure 3   Major: M-P   Minor: M-S   Conclusion: S-P');\n writeln('   Figure 4   Major: P-M   Minor: M-S   Conclusion: S-P');\n writeln('Hence there are 256 possible syllogisms altogether. Here is the');\n writeln('syllogism of Figure 1 coded \"EIO\":');\n writeln('   No M is P;  Some S is M;  therefore  Some S is not P.');\n writeln('And here is the syllogism of Figure 4 coded \"AEO\":');\n writeln('   All Ps are M;  No M is S;  therefore  Some S is not P.');\n writeln('The vowel codes were used in the Middle Ages as mnemonics for');\n writeln('the forms of syllogism that were accepted as valid - in these');\n writeln('cases \"Ferio\" (1:EIO) and \"Calemos\" (4:AEO) respectively. But');\n writeln('note that Calemos is invalid (i.e. its premises can be true and');\n writeln('yet its conclusion turn out false) if we allow a world in which');\n writeln('there is no S at all. Aristotle''s theory takes for granted that');\n writeln('all three predicates are at least satisfied by something.');\n writeln('');\n cursor(11);\n writeln('Now press \"f\" or \"F\" for Fregean validity testing, which does not');\n writeln('assume that the relevant predicates M, P and S are satisfied');\n writeln('by anything; press \"a\" or \"A\" for Aristotelian validity testing.');\n writeln('Capital \"F\" or \"A\" will display all 256 possible population types');\n write('as they are generated and tested.  ');\n repeat\n until (?key = -\\a) or (?key = -\\f);\n aristotle := (?key = -\\a);\n showpops := (abs(?kshift) and 8) > 0;\n writeln('');\n writeln('');\n output(true, cream, true);\n if aristotle then\n  writeln('ARISTOTELIAN conditions assumed ...')\n else\n  writeln('FREGEAN truth-conditions assumed ... ');\n writeln('');\n writeln('Now all 256 possible syllogisms will be tested against ' + str(systemtries));\n writeln('populations of individuals, whose number and characteristics');\n writeln('are systematically generated to cover all relevant possibilities:');\n writeln('');\n cursor(11);\n initialise;\n setupsyllogisms;\n for i := 0 to lastsyll do\n  refutecount[i] := 0;\n if not(showpops) then\n  write('(256) ');\n try := systemtries;\n while try > 0 do\n  begin\n   if (try mod 50 = 0) and not(showpops) then\n    begin\n     writeln('');\n     write('(' + str(try) + ') ')\n    end;\n   dec(try);\n   thispop := systempop(try);\n   if showpops then\n    showpop(try)\n   else\n    write('.');\n   if not(aristotle) or (((try and #AA) > 0) and ((try and #CC) > 0) and ((try and #F0) > 0)) then\n    begin\n     checkoverlap(m, p, 'M', 'P');\n     checkoverlap(s, m, 'S', 'M');\n     checkoverlap(s, p, 'S', 'P');\n     fixrefutes\n    end\n  end;\n cursor(1);\n output(false, lightgreen, true);\n writeln('');\n writeln('');\n writeln('After systematically testing all relevant possibilities');\n if aristotle then\n  writeln('(in which some Ms, some Ps, and some Ss exist),')\n else\n  writeln('(without requiring that any Ms, Ps or Ss exist),');\n writeln('these are the unrefuted (and thus valid)');\n writeln('Aristotelian Forms of Syllogism:');\n writeln('');\n count := 0;\n for i := 0 to lastsyll do\n  if refutecount[i] = 0 then\n   begin\n    writeln('  ' + syllcode[i] + ':  ' + qstr1[pos(majormp[i, 1], qorder) - 1] + majormp[i, 2] + qstr2[pos(majormp[i,\n     1], qorder) - 1] + majormp[i, 3] + '  ' + qstr1[pos(minorsm[i, 1], qorder) - 1] + minorsm[i, 2] +\n     qstr2[pos(minorsm[i, 1], qorder) - 1] + minorsm[i, 3] + '  =>  ' + qstr1[pos(conclsp[i, 1], qorder)\n     - 1] + conclsp[i, 2] + qstr2[pos(conclsp[i, 1], qorder) - 1] + conclsp[i, 3]);\n    inc(count)\n   end;\n writeln('');\n writeln('(' + str(count) + ' forms altogether)')\nEND.\n",TuringMachines:"PROGRAM TuringMachines;\nCONST margin = 35;\n      tapelabel = 25;\n      tapetop = 100;\n      cycleindent = 200;\n      cyclelabel = 200;\n      tablelabel = 350;\n      tabletop = 425;\n      rowheight = 48;\n      headspace = 6;\n      fontsize = 23;\n      menusize = 36;\n      fonttype = 16;\n      menutype = 4;\n      leftend = -1000;\n      rightend = 1000;\n      showcells = 20;\n      showleftmin = 1;\n      showleft = 4;\n      showright = 2;\n      maxstates = 30;\n      maxbehaviour = 100;\n      maxtriggers = 5;\nVAR tape: array[leftend..rightend] of char;\n    numstates: integer;\n    state: integer;\n    machinetitle: string[64];\n    pausetime: integer;\n    statecodes: string[maxstates];\n    behaviour: array[1..maxstates] of string[maxbehaviour];\n    triggerstring: array[1..maxstates] of string[maxtriggers];\n    transitionstring: array[1..maxstates] of string[maxtriggers];\n    cycles: integer;\n    headpos: integer;\n    leftmost, rightmost: integer;\n    leftshown: integer;\n    lmargin, cellwidth, cmargin: integer;\n\n Procedure initialise;\n Var i: integer;\n Begin\n  statecodes := '';\n  for i := 1 to maxstates do\n   begin\n    behaviour[i] := '';\n    triggerstring[i] := '';\n    transitionstring[i] := ''\n   end;\n  for i := leftend to rightend do\n   tape[i] := ' ';\n  headpos := 0;\n  leftmost := 0;\n  rightmost := 0;\n  leftshown := -showleftmin;\n  cellwidth := 998 / showcells;\n  cmargin := cellwidth / 4;\n  lmargin := (1000 - showcells * cellwidth) / 2\n End;\n\n Procedure definemachine(choice: integer);\n Begin\n  pausetime := 200;\n  if choice = 1 then\n   begin\n    machinetitle := 'Petzold p. 81, 0 1 0 1 ...  4 states';\n    numstates := 4;\n    behaviour[1] := 'b; cP0,R';\n    behaviour[2] := 'c; eR';\n    behaviour[3] := 'e; fP1,R';\n    behaviour[4] := 'f; bR'\n   end\n  else\n  if choice = 2 then\n   begin\n    machinetitle := 'Petzold p. 84, 0 1 0 1 ...  1 state';\n    numstates := 1;\n    behaviour[1] := 'b; bP0;0bR,R,P1;1bR,R,P0;'\n   end\n  else\n  if choice = 3 then\n   begin\n    machinetitle := 'Petzold p. 87, transcendental';\n    numstates := 5;\n    behaviour[1] := 'b;*oP@,R,P@,R,P0,R,R,P0,L,L';\n    behaviour[2] := 'o;1oR,Px,L,L,L;0q';\n    behaviour[3] := 'q; pP1,L;*qR,R';\n    behaviour[4] := 'p;xqP ,R;@fR; pL,L';\n    behaviour[5] := 'f; oP0,L,L;*fR,R'\n   end\n  else\n  if choice = 4 then\n   begin\n    machinetitle := 'Petzold p. 99, binary counting';\n    numstates := 3;\n    behaviour[1] := 'b; iP0';\n    behaviour[2] := 'i;0rP1;1iP0,L; rP1';\n    behaviour[3] := 'r; iL;*rR'\n   end\n  else\n  if choice = 5 then\n   begin\n    machinetitle := 'Petzold pp. 102-8, root of 2';\n    numstates := 27;\n    behaviour[1] := 'b; nP@,R,P1';\n    behaviour[2] := 'n;@mR;*nL';\n    behaviour[3] := 'm;0mR,Px,R;1mR,Px,R; xR,Pz,R,R,Pr';\n    behaviour[4] := 'x;xrP ;@sN;*xL,L';\n    behaviour[5] := 'r;rRR,R;*rR,R';\n    behaviour[6] := 'R;rRR,R; xPr,R,R,Pr';\n    behaviour[7] := 's;@fR,R;*sL,L';\n    behaviour[8] := 'f;xFL;yFL;zDL; fR,R';\n    behaviour[9] := 'F;00R;1dR,R,R';\n    behaviour[10] := 'd;xDL;yDL; dR,R';\n    behaviour[11] := 'D;00R;11R; 1R';\n    behaviour[12] := '0;raPs;uaPv;*0R,R';\n    behaviour[13] := '1;raPv;ucPs,R,R;*1R,R';\n    behaviour[14] := 'c;raPu; zPu;ucPr,R,R';\n    behaviour[15] := 'a;@eR,R;*aL,L';\n    behaviour[16] := 'e;xyP ,L,L;zyPy,L,L;*eR,R';\n    behaviour[17] := 'y;@ER,R;ysPz; sPx';\n    behaviour[18] := 'E;yYP ,L,L;*ER,R';\n    behaviour[19] := 'Y;@oR;*XPy,R';\n    behaviour[20] := 'X; uR,Px;*XR,R';\n    behaviour[21] := 'u;sUPt,R,R;vUPw,R,R;*uR,R';\n    behaviour[22] := 'U;sUPr,R,R;vUPu,R,R;*sN';\n    behaviour[23] := 'z;@pR;*zL';\n    behaviour[24] := 'p;0pR,P ,R;1pR,P ,R; CP0,R,R,R';\n    behaviour[25] := 'o;@PR;*oL';\n    behaviour[26] := 'P;0PR,P ,R;1PR,P ,R; CP1,R,R,R';\n    behaviour[27] := 'C; nN;*CP ,R,R'\n   end\n End;\n\n Function statestr(i: integer): string;\n Begin\n  result := str(i) + ' (''' + statecodes[i] + ''')'\n End;\n\n Function analysemachine: boolean;\n Var i, j, posn: integer;\n     s: string;\n Begin\n  result := true;\n  i := 1;\n  while i <= numstates do\n   begin\n    if behaviour[i] = '' then\n     begin\n      for j := i + 1 to numstates do\n       behaviour[j - 1] := behaviour[j];\n      dec(numstates)\n     end\n    else\n     begin\n      s := behaviour[i];\n      statecodes := statecodes + s[1];\n      posn := pos(';', s);\n      while posn > 0 do\n       begin\n        s := delete(s, 1, posn);\n        if length(s) > 1 then\n         begin\n          if pos(s[1], triggerstring[i]) > 0 then\n           begin\n            writeln('State ' + statestr(i) + ' has multiple actions for character \"' + s[1] + '\"');\n            result := false\n           end;\n          triggerstring[i] := triggerstring[i] + s[1];\n          transitionstring[i] := transitionstring[i] + s[2]\n         end;\n        posn := pos(';', s)\n       end;\n      inc(i)\n     end\n   end;\n  for i := 1 to numstates - 1 do\n   for j := i + 1 to numstates do\n    if statecodes[i] = statecodes[j] then\n     begin\n      writeln('States ' + str(i) + ' and ' + str(j) + ' both have code \"' + statecodes[i] + '\".');\n      result := false\n     end;\n  if result then\n   for i := 1 to numstates do\n    for j := 1 to length(transitionstring[i]) do\n     begin\n      posn := pos(transitionstring[i, j], statecodes);\n      if posn = 0 then\n       begin\n        writeln('Transition state code \"' + transitionstring[i, j] + '\" is not recognised.');\n        result := false\n       end\n      else\n       transitionstring[i, j] := chr(posn)\n     end\n End;\n\n Function getactstring(state: integer; c: char): string;\n Var posn: integer;\n Begin\n  posn := pos(';' + c, behaviour[state]);\n  if posn = 0 then\n   posn := pos(';*', behaviour[state]);\n  if posn = 0 then\n   begin\n    writeln('Inconsistent data or analysis for \"' + c + '\" in state ' + statestr(state));\n    result := 'HALT'\n   end\n  else\n   begin\n    result := copy(behaviour[state], posn + 3, maxint);\n    posn := pos(';', result);\n    if posn > 0 then\n     result := copy(result, 1, posn - 1)\n   end\n End;\n\n Procedure menu;\n Var keyok: boolean;\n     choice: integer;\n Begin\n  blank(white);\n  colour(brown);\n  setxy(margin, 50);\n  print('TURING MACHINE SIMULATOR', menutype or 16, 42);\n  colour(darkred);\n  setxy(margin + 30, 175);\n  print('(Examples are taken from Charles Petzold''s', menutype, 30);\n  setxy(margin + 30, 225);\n  print('excellent book, \"The Annotated Turing\")', menutype, 30);\n  colour(black);\n  setxy(margin, 350);\n  print('Choose from the following:', menutype or 16, menusize);\n  setxy(margin, 450);\n  print('  1.  Petzold p.81 (0 1 0 1 ...  4 states)', menutype, menusize);\n  setxy(margin, 550);\n  print('  2.  Petzold p.84 (0 1 0 1 ...  1 state)', menutype, menusize);\n  setxy(margin, 650);\n  print('  3.  Petzold p.87 (transcendental)', menutype, menusize);\n  setxy(margin, 750);\n  print('  4.  Petzold p.99 (binary counting)', menutype, menusize);\n  setxy(margin, 850);\n  print('  5.  Petzold pp. 102-8, root of 2', menutype, menusize);\n  repeat\n   choice := abs(?key) - 48\n  until (choice > 0) and (choice < 6);\n  definemachine(choice);\n  blank(white)\n End;\n\n Procedure dolabels;\n Begin\n  colour(red);\n  setxy(margin, tapelabel);\n  print('TAPE:', fonttype, fontsize);\n  setxy(margin, cyclelabel);\n  print('CYCLES:', fonttype, fontsize);\n  setxy(margin, tablelabel);\n  print('MACHINE TABLE (' + machinetitle + '):', fonttype, fontsize);\n  colour(lightgrey);\n  setxy(400, cyclelabel);\n  print('(press ESCAPE to return to menu)', fonttype, fontsize)\n End;\n\n Procedure drawtable;\n Var i, j: integer;\n\n  procedure heading(s: string; width: integer);\n  begin\n   colour(black);\n   box(width, rowheight + headspace * 2, brown, true);\n   colour(white);\n   movexy(0, headspace + 4);\n   print(s, fonttype or 32, fontsize);\n   movexy(width, -headspace - 4)\n  end;\n\n  procedure entry(s: string; width: integer);\n  begin\n   box(width, rowheight, white, true);\n   movexy(0, 4);\n   print(s, fonttype, fontsize);\n   movexy(width, -4)\n  end;\n\n Begin\n  setxy(margin, tabletop);\n  heading(' m-config. ', 150);\n  heading(' symbol ', 130);\n  heading('              operations ', 420);\n  heading(' final m-config. ', 230);\n  colour(black);\n  movexy(0, headspace * 2);\n  for i := 1 to numstates do\n   for j := 1 to length(triggerstring[i]) do\n    begin\n     setxy(margin, turty + rowheight);\n     if j = 1 then\n      entry('   ' + statestr(i), 150)\n     else\n      entry('', 150);\n     if triggerstring[i, j] = ' ' then\n      entry('   None', 130)\n     else\n     if triggerstring[i, j] = '*' then\n      entry('    Any', 130)\n     else\n      entry('      ' + triggerstring[i, j], 130);\n     entry(' ' + getactstring(i, triggerstring[i, j]), 420);\n     entry('        ' + statestr(ord(transitionstring[i, j])), 230)\n    end\n End;\n\n Procedure drawtape;\n Var i: integer;\n Begin\n  noupdate;\n  setxy(0, tapetop - 5);\n  box(1000, 2 * cellwidth + 10, white, false);\n  if headpos < leftshown + showleft then\n   begin\n    leftshown := headpos - showleft;\n    if leftshown < leftmost - showleftmin then\n     leftshown := leftmost - showleftmin\n   end\n  else\n  if headpos >= leftshown + showcells - showright then\n   leftshown := headpos - showcells + showright + 1;\n  setxy(lmargin - cellwidth, tapetop);\n  for i := leftshown - 1 to leftshown + showcells do\n   begin\n    box(cellwidth, cellwidth, cream, true);\n    movexy(cmargin, 0);\n    print(tape[i], 1, cellwidth / 2);\n    if i mod 5 = 0 then\n     begin\n      movexy(-cmargin + 2, -12);\n      print('.', 1, 12);\n      movexy(cmargin - 2, 12)\n     end;\n    movexy(cellwidth - cmargin, 0)\n   end;\n  setxy(lmargin + cellwidth * (headpos - leftshown), tapetop);\n  thickness(10);\n  box(cellwidth, cellwidth, cyan, true);\n  thickness(2);\n  movexy(cmargin, 0);\n  print(tape[headpos], 1, cellwidth / 2);\n  movexy(0, cellwidth + 8);\n  colour(brown);\n  print(str(state), fonttype, cellwidth / 2);\n  setxy(cycleindent, cyclelabel);\n  box(200, 100, white, false);\n  print(str(cycles), fonttype, cellwidth / 2);\n  colour(black);\n  update\n End;\n\n Procedure dostep;\n Var thischar: char;\n     posn: integer;\n     actstring: string;\n\n  procedure process(var s: string);\n  var posn: integer;\n  begin\n   if s[1] = 'L' then\n    begin\n     dec(headpos);\n     if headpos < leftmost then\n      leftmost := headpos\n    end\n   else\n   if s[1] = 'R' then\n    begin\n     inc(headpos);\n     if headpos > rightmost then\n      rightmost := headpos\n    end\n   else\n   if s[1] = 'P' then\n    begin\n     if length(s) > 1 then\n      begin\n       tape[headpos] := s[2];\n       if (s[2] = '0') or (s[2] = '1') then\n        writeln('Cycle = ' + str(cycles) + '; Position = ' + str(headpos) + '; State = ' + statestr(state) +\n     '; Printed = \"' + s[2] + '\"')\n      end\n     else\n      writeln('Null Print instruction for \"' + thischar + '\" in state ' + statestr(state))\n    end;\n   posn := pos(',', s);\n   if posn = 0 then\n    s := ''\n   else\n    s := delete(s, 1, posn)\n  end;\n\n Begin\n  inc(cycles);\n  thischar := tape[headpos];\n  if pausetime = 200 then\n   writeln('Cycle = ' + str(cycles) + '; Position = ' + str(headpos) + '; State = ' + statestr(state) +\n     '; Symbol = \"' + thischar + '\"');\n  posn := pos(thischar, triggerstring[state]);\n  if posn = 0 then\n   posn := pos('*', triggerstring[state]);\n  if posn = 0 then\n   begin\n    writeln('Action for \"' + thischar + '\" is not defined for state ' + statestr(state));\n    state := 0\n   end\n  else\n   begin\n    actstring := getactstring(state, thischar);\n    if pausetime = 200 then\n     writeln('Processing \"' + actstring + '\"');\n    if actstring = 'HALT' then\n     state := 0\n    else\n     begin\n      while actstring <> '' do\n       process(actstring);\n      state := ord(transitionstring[state, posn])\n     end\n   end\n End;\n\n Procedure showspeed;\n Begin\n  setxy(870, tapelabel);\n  colour(brown);\n  box(95, 32, cream, true);\n  if pausetime = 200 then\n   print('SLOW', fonttype, fontsize)\n  else\n   print(' FAST', fonttype, fontsize)\n End;\n\nBEGIN\n repeat\n  initialise;\n  menu;\n  if analysemachine then\n   begin\n    cycles := 0;\n    dolabels;\n    drawtable;\n    drawtape;\n    showspeed;\n    state := 1;\n    repeat\n     dostep;\n     drawtape;\n     pause(pausetime);\n     if (?click > 0) and (?clickx > 870) and (?clicky < 100) then\n      begin\n       pausetime := 200 - pausetime;\n       showspeed;\n       update;\n       pause(500)\n      end\n    until abs(?key) = \\escape\n   end\n until state = 0\nEND.\n",Sorting:"PROGRAM Sorting;\nCONST methods = 4;\n      n = 100;\n      cols = 10;\n      tries = 10;\n      checking = true;\nVAR a: array[0..n] of integer;\n    comps, swaps: integer;\n    caption: array[1..methods] of string;\n    comptotal, swaptotal: array[1..methods] of integer;\n    round, m: integer;\n\n Procedure setup;\n Begin\n  caption[1] := 'Bubblesort:';\n  caption[2] := 'Selectionsort:';\n  caption[3] := 'Insertionsort:';\n  caption[4] := 'Quicksort:'\n End;\n\n Procedure init;\n Var i: integer;\n Begin\n  for i := 1 to n do\n   a[i] := i;\n  for i := 1 to methods do\n   begin\n    comptotal[i] := 0;\n    swaptotal[i] := 0\n   end\n End;\n\n Function lessthan(x, y: integer): boolean;\n Begin\n  result := (x < y);\n  inc(comps)\n End;\n\n Procedure swap(x, y: integer);\n Var t: integer;\n Begin\n  t := a[x];\n  a[x] := a[y];\n  a[y] := t;\n  inc(swaps)\n End;\n\n Function ordered: boolean;\n Var i: integer;\n Begin\n  result := true;\n  for i := 2 to n do\n   if a[i - 1] > a[i] then\n    result := false\n End;\n\n Procedure list;\n Var i: integer;\n Begin\n  write('     ');\n  for i := 1 to n do\n   begin\n    write(str(a[i]) + ' ');\n    if i mod cols = 0 then\n     begin\n      writeln('');\n      write('     ')\n     end\n   end;\n  writeln('')\n End;\n\n Procedure randomise;\n Var i, j: integer;\n Begin\n  for i := 1 to n do\n   begin\n    j := random(n) + 1;\n    swap(i, j)\n   end\n End;\n\n Procedure bubblesort;\n Var i, j: integer;\n Begin\n  for i := 1 to n do\n   for j := 1 to n - 1 do\n    if lessthan(a[j + 1], a[j]) then\n     swap(j, j + 1)\n End;\n\n Procedure selectionsort;\n Var i, j: integer;\n     lowsofar: integer;\n Begin\n  for i := 1 to n do\n   begin\n    lowsofar := i;\n    for j := i + 1 to n do\n     if lessthan(a[j], a[lowsofar]) then\n      lowsofar := j;\n    if lowsofar <> i then\n     swap(i, lowsofar)\n   end\n End;\n\n Procedure insertionsort;\n Var i, j: integer;\n Begin\n  for i := 2 to n do\n   begin\n    j := i;\n    while (j > 1) and lessthan(a[j], a[j - 1]) do\n     begin\n      swap(j - 1, j);\n      dec(j)\n     end\n   end\n End;\n\n Procedure quicksort;\n\n  procedure qsort(left, right: integer);\n  var m, i: integer;\n  begin\n   if left < right then\n    begin\n     m := left;\n     for i := left + 1 to right do\n      if lessthan(a[i], a[left]) then\n       begin\n        inc(m);\n        swap(m, i)\n       end;\n     swap(left, m);\n     qsort(left, m - 1);\n     qsort(m + 1, right)\n    end\n  end;\n\n Begin\n  qsort(1, n)\n End;\n\n Procedure sort(method: integer);\n Begin\n  comps := 0;\n  swaps := 0;\n  if method = 1 then\n   bubblesort\n  else\n  if method = 2 then\n   selectionsort\n  else\n  if method = 3 then\n   insertionsort\n  else\n  if method = 4 then\n   quicksort;\n  write(pad(caption[method], ' ', -17) + pad(str(comps), ' ', 4) + ' comparisons');\n  writeln(pad(str(swaps), ' ', 6) + ' swaps');\n  if checking then\n   if not(ordered) then\n    begin\n     writeln('     Sort failed:');\n     list;\n     halt\n    end\n End;\n\nBEGIN\n output(true, white, true);\n setup;\n init;\n writeln(str(methods) + ' sorting methods will be compared, each of them being used to');\n writeln('sort randomised arrays of ' + str(n) + ' items (' + str(tries) + ' times), while keeping');\n writeln('track of the numbers of comparisons and swaps required.');\n if checking then\n  writeln('If sorting fails, the program will halt and show the array.');\n writeln('');\n for round := 1 to tries do\n  begin\n   for m := 1 to methods do\n    begin\n     randomise;\n     sort(m);\n     comptotal[m] := comptotal[m] + comps;\n     swaptotal[m] := swaptotal[m] + swaps\n    end;\n   writeln('')\n  end;\n output(true, cream, true);\n writeln('Averages from sorting ' + str(n) + ' items, over ' + str(tries) + ' trials');\n writeln('');\n writeln('               COMPARISONS    SWAPS');\n for m := 1 to methods do\n  begin\n   write(pad(caption[m], ' ', -17) + pad(qstr(comptotal[m], tries, 1), ' ', 7));\n   writeln(pad(qstr(swaptotal[m], tries, 1), ' ', 11))\n  end\nEND.\n",SortingStrings:"PROGRAM SortingStrings;\nCONST methods = 4;\n      n = 100;\n      cols = 10;\n      tries = 10;\n      checking = true;\nVAR a: array[0..n] of string[3];\n    comps, swaps: integer;\n    caption: array[1..methods] of string;\n    comptotal, swaptotal: array[1..methods] of integer;\n    round, m: integer;\n\n Procedure setup;\n Begin\n  caption[1] := 'Bubblesort:';\n  caption[2] := 'Selectionsort:';\n  caption[3] := 'Insertionsort:';\n  caption[4] := 'Quicksort:'\n End;\n\n Procedure init;\n Var i: integer;\n\n  function randword: string;\n  var i: integer;\n  begin\n   result := '';\n   for i := 1 to 3 do\n    result := result + chr(ord('a') + random(26))\n  end;\n\n Begin\n  for i := 1 to n do\n   a[i] := randword;\n  for i := 1 to methods do\n   begin\n    comptotal[i] := 0;\n    swaptotal[i] := 0\n   end\n End;\n\n Function lessthan(x, y: string[3]): boolean;\n Begin\n  result := (x < y);\n  inc(comps)\n End;\n\n Procedure swap(x, y: integer);\n Var t: string[3];\n Begin\n  t := a[x];\n  a[x] := a[y];\n  a[y] := t;\n  inc(swaps)\n End;\n\n Function ordered: boolean;\n Var i: integer;\n Begin\n  result := true;\n  for i := 2 to n do\n   if a[i - 1] > a[i] then\n    result := false\n End;\n\n Procedure list;\n Var i: integer;\n Begin\n  write('     ');\n  for i := 1 to n do\n   begin\n    write(a[i] + ' ');\n    if i mod cols = 0 then\n     begin\n      writeln('');\n      write('     ')\n     end\n   end;\n  writeln('')\n End;\n\n Procedure randomise;\n Var i, j: integer;\n Begin\n  for i := 1 to n do\n   begin\n    j := random(n) + 1;\n    swap(i, j)\n   end\n End;\n\n Procedure bubblesort;\n Var i, j: integer;\n Begin\n  for i := 1 to n do\n   for j := 1 to n - 1 do\n    if lessthan(a[j + 1], a[j]) then\n     swap(j, j + 1)\n End;\n\n Procedure selectionsort;\n Var i, j: integer;\n     lowsofar: integer;\n Begin\n  for i := 1 to n do\n   begin\n    lowsofar := i;\n    for j := i + 1 to n do\n     if lessthan(a[j], a[lowsofar]) then\n      lowsofar := j;\n    if lowsofar <> i then\n     swap(i, lowsofar)\n   end\n End;\n\n Procedure insertionsort;\n Var i, j: integer;\n Begin\n  for i := 2 to n do\n   begin\n    j := i;\n    while (j > 1) and lessthan(a[j], a[j - 1]) do\n     begin\n      swap(j - 1, j);\n      dec(j)\n     end\n   end\n End;\n\n Procedure quicksort;\n\n  procedure qsort(left, right: integer);\n  var m, i: integer;\n  begin\n   if left < right then\n    begin\n     m := left;\n     for i := left + 1 to right do\n      if lessthan(a[i], a[left]) then\n       begin\n        inc(m);\n        swap(m, i)\n       end;\n     swap(left, m);\n     qsort(left, m - 1);\n     qsort(m + 1, right)\n    end\n  end;\n\n Begin\n  qsort(1, n)\n End;\n\n Procedure sort(method: integer);\n Begin\n  comps := 0;\n  swaps := 0;\n  if method = 1 then\n   bubblesort\n  else\n  if method = 2 then\n   selectionsort\n  else\n  if method = 3 then\n   insertionsort\n  else\n  if method = 4 then\n   quicksort;\n  write(pad(caption[method], ' ', -17) + pad(str(comps), ' ', 4) + ' comparisons');\n  writeln(pad(str(swaps), ' ', 6) + ' swaps');\n  if checking then\n   if not(ordered) then\n    begin\n     writeln('     Sort failed:');\n     list;\n     halt\n    end\n End;\n\nBEGIN\n output(true, white, true);\n setup;\n init;\n writeln(str(methods) + ' sorting methods will be compared, each of them being used to');\n writeln('sort randomised arrays of ' + str(n) + ' items (' + str(tries) + ' times), while keeping');\n writeln('track of the numbers of comparisons and swaps required.');\n if checking then\n  writeln('If sorting fails, the program will halt and show the array.');\n writeln('');\n list;\n writeln('');\n for round := 1 to tries do\n  begin\n   for m := 1 to methods do\n    begin\n     randomise;\n     sort(m);\n     comptotal[m] := comptotal[m] + comps;\n     swaptotal[m] := swaptotal[m] + swaps\n    end;\n   writeln('')\n  end;\n output(true, cream, true);\n writeln('Averages from sorting ' + str(n) + ' items, over ' + str(tries) + ' trials');\n writeln('');\n writeln('               COMPARISONS    SWAPS');\n for m := 1 to methods do\n  begin\n   write(pad(caption[m], ' ', -17) + pad(qstr(comptotal[m], tries, 1), ' ', 7));\n   writeln(pad(qstr(swaptotal[m], tries, 1), ' ', 11))\n  end;\n writeln('');\n list\nEND.\n",NimLearn:"PROGRAM NimLearn;\nCONST maxcoins = 20;\n      maxtake = 3;\n      columns = 10;\n      margin = 35;\n      menutype = 4;\n      menusize = 36;\nVAR prob: array[1..maxcoins, 1..maxtake] of integer;\n    taken: array[1..maxcoins] of integer;\n    numcoins, move: integer;\n    h, v, r, font: integer;\n    max: integer;\n    youwin: integer;\n    myscore, yourscore: integer;\n    opponent: integer;\n    total, count: integer;\n\n Procedure menu;\n Var choice: integer;\n Begin\n  blank(white);\n  setxy(margin, 50);\n  colour(brown);\n  print('   NIM LEARNING PROGRAM', menutype or 16, 42);\n  colour(darkred);\n  setxy(margin, 150);\n  print('This program learns to play NIM, and can be', menutype, 32);\n  setxy(margin, 200);\n  print('configured to play either against you (human', menutype, 32);\n  setxy(margin, 250);\n  print('opponent), or against a simulated computer', menutype, 32);\n  setxy(margin, 300);\n  print('opponent, which either plays randomly or', menutype, 32);\n  setxy(margin, 350);\n  print('itself learns from experience.', menutype, 32);\n  colour(black);\n  setxy(margin, 525);\n  print('Choose from the following:', menutype or 16, menusize);\n  setxy(margin, 650);\n  print('  1.  Human opponent', menutype, menusize);\n  setxy(margin, 750);\n  print('  2.  Random opponent', menutype, menusize);\n  setxy(margin, 850);\n  print('  3.  Opponent that also learns', menutype, menusize);\n  repeat\n   choice := abs(?key) - 48\n  until (choice > 0) and (choice < 4);\n  opponent := choice;\n  blank(white)\n End;\n\n Procedure initialise;\n Var i, j: integer;\n Begin\n  for i := 1 to maxcoins do\n   for j := 1 to maxtake do\n    if j > i then\n     prob[i, j] := 0\n    else\n     prob[i, j] := 5;\n  numcoins := maxcoins;\n  h := 1000 / (columns + 1);\n  v := 50;\n  r := (h * 3) / 8;\n  font := 28;\n  myscore := 0;\n  yourscore := 0\n End;\n\n Procedure display;\n Var i, j: integer;\n Begin\n  noupdate;\n  blank(white);\n  for i := 0 to maxcoins - 1 do\n   begin\n    setxy(3 * h / 2 + (i mod columns) * h, v + (i div columns) * v * (maxtake + 3));\n    if i < numcoins then\n     begin\n      colour(red);\n      blot(r)\n     end\n    else\n     begin\n      colour(white);\n      blot(r)\n     end;\n    movexy(-3 * font / 4, 0);\n    for j := 1 to maxtake do\n     begin\n      movexy(0, v);\n      colour(black);\n      box(h / 2, v, cream, true);\n      if taken[i + 1] = j then\n       box(h / 2, v, lime, true)\n      else\n      if taken[i + 1] = -j then\n       box(h / 2, v, cyan, true)\n      else\n       box(h / 2, v, cream, true);\n      print(' ' + str(prob[i + 1, j]), 4, font)\n     end;\n    if i mod columns = 0 then\n     begin\n      setxy(h / 2 - font / 2, v + (i / columns) * v * (maxtake + 3));\n      colour(blue);\n      for j := 1 to maxtake do\n       begin\n        movexy(0, v);\n        print(str(j), 4, font)\n       end\n     end\n   end;\n  update\n End;\n\n Function coins(n: integer): string;\n Begin\n  if n = 1 then\n   result := '1 coin'\n  else\n   result := str(n) + ' coins'\n End;\n\n Function usermove(max: integer): integer;\n Var n: integer;\n Begin\n  colour(black);\n  setxy(h, v + (((maxcoins - 1) div columns) + 1) * v * (maxtake + 3));\n  box(1000, 500, white, false);\n  if numcoins = 1 then\n   begin\n    print('Since there is only one coin left, you must take it', 4, font);\n    pause(2000);\n    result := 1\n   end\n  else\n   begin\n    print('There are ' + coins(numcoins) + ', of which you may take up to ' + str(max) + '.', 4, font);\n    movexy(0, v);\n    print('How many would you like to take? ', 4, font);\n    reset(\\keybuffer);\n    repeat\n     n := val(read(1))\n    until (n > 0) and (n <= max);\n    reset(\\keybuffer);\n    movexy(0, v * 2);\n    print('OK - you are taking ' + coins(n) + ' ...', 4, font);\n    movexy(0, v);\n    result := n\n   end\n End;\n\n Function randommove(max: integer): integer;\n Begin\n  result := random(max) + 1\n End;\n\n Function machinemove: integer;\n Var i, total, choose: integer;\n Begin\n  total := 0;\n  for i := 1 to maxtake do\n   total := total + prob[numcoins, i];\n  choose := random(total);\n  i := 0;\n  repeat\n   inc(i);\n   choose := choose - prob[numcoins, i]\n  until choose < 0;\n  result := i\n End;\n\n Procedure showresult;\n Var s: string;\n Begin\n  if opponent = 1 then\n   begin\n    colour(black);\n    setxy(200, v + (((maxcoins - 1) div columns) + 1) * v * (maxtake + 3));\n    if youwin > 0 then\n     print('YOU WIN!!', 4, font * 3)\n    else\n     print(' I WIN!!', 4, font * 3);\n    movexy(0, 4 * v);\n    print('Press <RETURN> or <ENTER> to continue ...', 4, font);\n    s := readln\n   end\n  else\n   writeln('PROGRAM: ' + str(myscore) + ';  OPPONENT: ' + str(yourscore))\n End;\n\n Procedure startgame;\n Var i: integer;\n Begin\n  for i := 1 to maxcoins do\n   taken[i] := 0;\n  numcoins := maxcoins\n End;\n\n Procedure adjustweights;\n Var i, j: integer;\n     add: integer;\n Begin\n  for i := 1 to maxcoins do\n   if taken[i] <> 0 then\n    begin\n     if taken[i] * youwin > 0 then\n      add := 1\n     else\n      add := -1;\n     for j := 1 to maxtake do\n      begin\n       if j <= i then\n        begin\n         if (j = abs(taken[i])) then\n          prob[i, j] := prob[i, j] + add\n         else\n          prob[i, j] := prob[i, j] - add;\n         if prob[i, j] < 0 then\n          prob[i, j] := 0;\n         if prob[i, j] > 9 then\n          prob[i, j] := 9\n        end\n      end\n    end\n End;\n\nBEGIN\n keyecho(false);\n menu;\n initialise;\n repeat\n  startgame;\n  repeat\n   display;\n   if numcoins > maxtake then\n    max := maxtake\n   else\n    max := numcoins;\n   if opponent = 1 then\n    move := usermove(max)\n   else\n   if opponent = 2 then\n    move := randommove(max)\n   else\n    move := machinemove;\n   taken[numcoins] := move;\n   numcoins := numcoins - move;\n   if numcoins = 0 then\n    youwin := 1\n   else\n    begin\n     youwin := -1;\n     move := machinemove;\n     if opponent = 1 then\n      begin\n       pause(2000);\n       display;\n       setxy(h, v + (((maxcoins - 1) div columns) + 1) * v * (maxtake + 3));\n       print('The computer will choose on these probabilities:', 4, font);\n       movexy(0, v / 2);\n       total := prob[numcoins, 1] + prob[numcoins, 2] + prob[numcoins, 3];\n       for count := 1 to 3 do\n        begin\n         movexy(0, v);\n         print('     ' + coins(count) + ': ' + str(prob[numcoins, count]) + '/' + str(total), 4, font)\n        end;\n       pause(2000);\n       movexy(0, 3 * v / 2);\n       print('OK, in response, the computer takes ' + coins(move) + ' ...', 4, font);\n       pause(2000)\n      end;\n     taken[numcoins] := -move;\n     numcoins := numcoins - move\n    end;\n   display\n  until numcoins = 0;\n  if youwin > 0 then\n   inc(yourscore)\n  else\n   inc(myscore);\n  showresult;\n  adjustweights\n until 0 = 1\nEND.\n",MultiNim:"PROGRAM MultiNim;\nCONST piles = 5;\n      maxheight = 8;\n      margin = 20;\nVAR pile: array[1..piles] of integer;\n    xgap, ygap, left, bottom, radius: integer;\n    totalcoins: integer;\n    xorscore: integer;\n    showmaths: boolean;\n    thiscolour, thispile, thiscoin: integer;\n    autopile, autocoin: integer;\n\n Procedure setup;\n Begin\n  xgap := (1000 - 2 * margin) div piles;\n  ygap := (800 - margin) div maxheight;\n  if ygap * maxheight > 800 then\n   ygap := 800 div maxheight;\n  radius := (ygap - margin) div 2;\n  left := margin + radius - xgap;\n  bottom := 800 - radius + ygap;\n  showmaths := false\n End;\n\n Procedure fixpiles;\n Var p: integer;\n Begin\n  for p := 1 to piles do\n   pile[p] := random(maxheight) + 1\n End;\n\n Procedure domaths;\n Var p: integer;\n Begin\n  totalcoins := 0;\n  xorscore := 0;\n  for p := 1 to piles do\n   begin\n    totalcoins := totalcoins + pile[p];\n    xorscore := xorscore xor pile[p]\n   end\n End;\n\n Procedure drawpiles;\n Var p, c, autocount: integer;\n Begin\n  blank(white);\n  autocount := random(totalcoins) + 1;\n  for p := 1 to piles do\n   begin\n    c := pile[p];\n    while c > 0 do\n     begin\n      dec(autocount);\n      if autocount = 0 then\n       begin\n        autopile := p;\n        autocoin := c\n       end;\n      setxy(left + xgap * p, bottom - ygap * c);\n      colour(rgb(p));\n      blot(radius);\n      if xorscore xor pile[p] xor (c - 1) = 0 then\n       begin\n        autopile := p;\n        autocoin := c;\n        autocount := 0\n       end;\n      if showmaths then\n       begin\n        movexy(radius + margin, -radius + 15);\n        colour(black);\n        print(str(xorscore xor pile[p] xor (c - 1)), 4, 20)\n       end;\n      dec(c)\n     end\n   end;\n  colour(black);\n  setxy(margin, 900);\n  print('Total Coins:  ' + str(totalcoins), 4, 30);\n  if showmaths then\n   begin\n    colour(black);\n    setxy(450, 900);\n    print('XOR score:  ' + str(xorscore), 4, 30);\n    setxy(850, 890);\n    colour(maroon);\n    box(140, 100, red, true);\n    print(' HIDE', 4, 25);\n    setxy(850, 940);\n    print(' MATHS', 4, 25)\n   end\n  else\n   begin\n    colour(maroon);\n    setxy(850, 890);\n    box(140, 100, red, true);\n    print(' SHOW', 4, 25);\n    setxy(850, 940);\n    print(' MATHS', 4, 25)\n   end\n End;\n\n Procedure blackout(p, c: integer);\n Begin\n  setxy(left + xgap * p, bottom - ygap * c);\n  colour(black);\n  blot(radius)\n End;\n\nBEGIN\n setup;\n repeat\n  fixpiles;\n  repeat\n   domaths;\n   drawpiles;\n   repeat\n    cursor(2);\n    repeat\n     repeat\n     until ?lmouse > 0;\n     pause(200);\n     thiscolour := pixcol(?clickx, ?clicky)\n    until (thiscolour <> rgb(white)) and (thiscolour <> rgb(black));\n    cursor(11);\n    if ?clicky >= 800 then\n     begin\n      thiscoin := maxheight + 1;\n      showmaths := not(showmaths);\n      domaths;\n      drawpiles\n     end\n    else\n     begin\n      thispile := (?clickx - margin + radius) div xgap + 1;\n      thiscoin := (bottom - radius - ?clicky) div ygap + 1\n     end\n   until (?clicky < 800);\n   pile[thispile] := thiscoin - 1;\n   domaths;\n   if totalcoins = 0 then\n    begin\n     blank(white);\n     setxy(330, 850);\n     colour(blue);\n     print('You Win!', 4, 60);\n     pause(5000)\n    end\n   else\n    begin\n     drawpiles;\n     pause(1000);\n     blackout(autopile, autocoin);\n     pile[autopile] := autocoin - 1;\n     domaths;\n     if (xorscore = 0) and not(showmaths) then\n      begin\n       colour(pink);\n       setxy(400, 900);\n       print('I''m going to win!', 4, 30)\n      end;\n     pause(2500);\n     if totalcoins = 0 then\n      begin\n       blank(white);\n       setxy(330, 850);\n       colour(red);\n       print('I Win!', 4, 60);\n       pause(5000)\n      end\n    end\n  until totalcoins = 0\n until 0 = 1\nEND.\n",KnightsTour:"PROGRAM KnightsTour;\nCONST width = 10;\n      height = 10;\n      maxlast = 255;\n      delay = 0;\n      margin = 20;\n      timelimit = 500;\n      pauseonbest = 1000;\n      drawall = false;\nVAR vectorx, vectory: array[0..8] of integer;\n    squarestatus, cleverrank: array[0..maxlast] of integer;\n    lastsquare: integer;\n    xgap, ygap, radius: integer;\n    countsquares, attempts, total, best: integer;\n    clever, pausenow: boolean;\n\n Procedure setup;\n Begin\n  vectorx[0] := 1;\n  vectory[0] := -2;\n  vectorx[1] := 2;\n  vectory[1] := -1;\n  vectorx[2] := 2;\n  vectory[2] := 1;\n  vectorx[3] := 1;\n  vectory[3] := 2;\n  vectorx[4] := -1;\n  vectory[4] := 2;\n  vectorx[5] := -2;\n  vectory[5] := 1;\n  vectorx[6] := -2;\n  vectory[6] := -1;\n  vectorx[7] := -1;\n  vectory[7] := -2;\n  xgap := (1000 - 2 * margin) / width;\n  ygap := (1000 - 2 * margin) / height;\n  if xgap <= ygap then\n   radius := xgap * 2 / 5\n  else\n   radius := ygap * 2 / 5;\n  lastsquare := width * height - 1\n End;\n\n Function findx(s: integer): integer;\n Begin\n  result := s mod width\n End;\n\n Function findy(s: integer): integer;\n Begin\n  result := s div width\n End;\n\n Function findsquare(x, y: integer): integer;\n Begin\n  result := y * width + x\n End;\n\n Procedure drawsquare(s: integer);\n Begin\n  setxy(margin + xgap * findx(s) + xgap / 2, margin + ygap * findy(s) + ygap / 2);\n  if squarestatus[s] = 0 then\n   begin\n    colour(salmon);\n    blot(radius)\n   end\n  else\n   begin\n    colour(white);\n    blot(radius);\n    if width > 10 then\n     begin\n      if squarestatus[s] < 10 then\n       movexy(-8, -20)\n      else\n      if squarestatus[s] < 100 then\n       movexy(-15, -20)\n      else\n       movexy(-22, -20);\n      colour(black);\n      print(str(squarestatus[s]), 4, 20)\n     end\n    else\n     begin\n      if squarestatus[s] < 10 then\n       movexy(-10, -24)\n      else\n      if squarestatus[s] < 100 then\n       movexy(-20, -24)\n      else\n       movexy(-30, -24);\n      colour(black);\n      print(str(squarestatus[s]), 4, 25)\n     end\n   end\n End;\n\n Procedure drawboard;\n Var s: integer;\n Begin\n  blank(darkgreen);\n  for s := 0 to lastsquare do\n   drawsquare(s)\n End;\n\n Function goodmove(s, direction: integer): integer;\n Var newx, newy: integer;\n Begin\n  newx := findx(s) + vectorx[direction];\n  newy := findy(s) + vectory[direction];\n  if (newx >= 0) and (newx < width) and (newy >= 0) and (newy < height) then\n   begin\n    result := findsquare(newx, newy);\n    if squarestatus[result] > 0 then\n     result := -1\n   end\n  else\n   result := -1\n End;\n\n Function moveto(s, direction: integer): integer;\n Var newx, newy: integer;\n     newn: integer;\n     d: integer;\n Begin\n  newx := findx(s) + vectorx[direction];\n  newy := findy(s) + vectory[direction];\n  result := findsquare(newx, newy);\n  if clever then\n   for d := 0 to 7 do\n    begin\n     newn := goodmove(result, d);\n     if newn > -1 then\n      dec(cleverrank[newn])\n    end\n End;\n\n Procedure clearboard;\n Var s, d: integer;\n Begin\n  for s := 0 to lastsquare do\n   squarestatus[s] := 0;\n  if clever then\n   for s := 0 to lastsquare do\n    begin\n     cleverrank[s] := 0;\n     for d := 0 to 7 do\n      if goodmove(s, d) > -1 then\n       inc(cleverrank[s])\n    end\n End;\n\n Function randommove(s: integer): integer;\n Var d: integer;\n Begin\n  repeat\n   d := random(8)\n  until (goodmove(s, d) > -1) or (time >= timelimit);\n  result := d\n End;\n\n Function clevermove(s: integer): integer;\n Var chosen, d, news: integer;\n     bestrank, numbest: integer;\n Begin\n  chosen := -1;\n  bestrank := 9;\n  for d := 0 to 8 do\n   begin\n    news := goodmove(s, d);\n    if news > -1 then\n     if cleverrank[news] < bestrank then\n      begin\n       chosen := d;\n       bestrank := cleverrank[news];\n       numbest := 1\n      end\n     else\n     if cleverrank[news] = bestrank then\n      begin\n       inc(numbest);\n       if random(numbest) = 0 then\n        chosen := d\n      end\n   end;\n  result := chosen\n End;\n\n Procedure findroute;\n Var thiss, s, d: integer;\n Begin\n  countsquares := 1;\n  thiss := random(lastsquare + 1);\n  squarestatus[thiss] := countsquares;\n  timeset(0);\n  while time < timelimit do\n   begin\n    if clever then\n     d := clevermove(thiss)\n    else\n     d := randommove(thiss);\n    if (time < timelimit) and (d > -1) then\n     begin\n      thiss := moveto(thiss, d);\n      inc(countsquares);\n      squarestatus[thiss] := countsquares;\n      if drawall then\n       drawsquare(thiss)\n     end\n   end\n End;\n\nBEGIN\n write('Random search or Clever search? (R/C) ');\n repeat\n until (abs(?key) = \\r) or (abs(?key) = \\c);\n clever := (abs(?key) = \\c);\n if clever then\n  writeln('  Clever ...')\n else\n  writeln('  Random ...');\n setup;\n if lastsquare > maxlast then\n  writeln('Error: maximum board size is ' + str(maxlast + 1) + ' squares')\n else\n  begin\n   attempts := 0;\n   total := 0;\n   best := 0;\n   repeat\n    inc(attempts);\n    clearboard;\n    if drawall then\n     drawboard;\n    findroute;\n    total := total + countsquares;\n    pausenow := (countsquares > best);\n    if countsquares > best then\n     begin\n      drawboard;\n      best := countsquares;\n      write('Attempt ');\n      write(str(attempts));\n      write(', score: ');\n      write(str(countsquares));\n      if attempts > 1 then\n       begin\n        write('   (average of all attempts: ');\n        write(qstr(total, attempts, 2));\n        writeln(')')\n       end\n      else\n       writeln('');\n      update\n     end;\n    if pausenow then\n     pause(pauseonbest);\n    noupdate\n   until best = width * height\n  end\nEND.\n",LifeStart:"PROGRAM LifeStart;\nCONST width = 32;\n      height = 32;\nVAR x, y: integer;\nBEGIN\n  canvas(0, 0, width, height);\n  resolution(width, height);\n  for x := 0 to width - 1 do\n    for y := 0 to height - 1 do\n      if random(7) = 0 then\n        pixset(x, y, black)\n      else\n        pixset(x, y, white)\nEND.\n",Diffusion:"PROGRAM Diffusion;\nCONST width = 100;\n      leftaxis = 21;\n      rightaxis = 15;\n      topmargin = 20;\n      gap = 10;\n      concbottom = 80;\n      concwidth = 50;\n      colour1 = red;\n      colour2 = blue;\n      edgecol = black;\n      molcol = red;\n      conccol = seagreen;\nVAR xorval: integer;\n    bottom: integer;\n    boundary: integer;\n    x1, y1: integer;\n    x2, y2: integer;\n    temp: integer;\n    num1: array[0..width] of integer;\n\n  Procedure setup;\n  Begin\n    canvas(0, 0, width + leftaxis + rightaxis, width * 2 + topmargin + gap);\n    resolution(width + leftaxis + rightaxis, width * 2 + topmargin + gap);\n    bottom := width * 2 + topmargin + gap - 1;\n    boundary := divmult(width, 1000, 707);\n    xorval := colour1 xor colour2;\n    thickness(1);\n    colour(colour2);\n    setxy(boundary + leftaxis, bottom - boundary);\n    drawxy(0, boundary);\n    setxy(boundary + leftaxis, bottom - boundary - 10);\n    drawxy(0, 5);\n    setxy(boundary + leftaxis, topmargin);\n    drawxy(0, 5);\n    colour(colour1);\n    setxy(boundary + leftaxis - 1, bottom - boundary - 10);\n    drawxy(0, 5);\n    setxy(boundary + leftaxis - 1, topmargin);\n    drawxy(0, 5);\n    colour(edgecol);\n    setxy(leftaxis - 1, bottom);\n    drawxy(width + 1, -width - 1);\n    colour(edgecol);\n    drawxy(0, width + 1);\n    recolour(leftaxis + 2, bottom, colour1);\n    recolour(width + leftaxis - 4, bottom, colour2);\n    for x1 := 0 to boundary - 1 do\n      num1[x1] := x1 + 1;\n    for x1 := boundary to width - 1 do\n      num1[x1] := 0;\n    colour(black);\n    setxy(0, 0);\n    print('Diffusion in a Tapering Tube', 2, width / 10)\n  End;\n\n  Procedure drawaxes;\n  Var n: integer;\n  Begin\n    for n := -1 to concwidth do\n      pixset(leftaxis - 1, concbottom - n, black);\n    for n := 0 to width do\n      pixset(leftaxis + 100, topmargin + n, black);\n    for n := 0 to 100 do\n      begin\n        if (n < 31) or (n mod 5 = 0) then\n          pixset(leftaxis + n, concbottom + 1, black);\n        pixset(leftaxis + n, topmargin + 101, black)\n      end;\n    drawxy(0, -concwidth);\n    colour(conccol);\n    setxy(0, concbottom - concwidth - width / 15);\n    print('100%', 2, width / 15);\n    setxy(0, concbottom - width / 15);\n    print('  0%', 2, width / 15);\n    setxy(0, topmargin + width * 11 / 10);\n    print('Red concentration', 2, width / 12);\n    colour(molcol);\n    setxy(width + leftaxis + 2, topmargin + width - boundary + 1 - width / 15);\n    print(str(boundary - 1), 2, width / 15);\n    setxy(width + leftaxis + 2, topmargin + width - width / 15);\n    print('  0', 2, width / 15);\n    setxy(0, topmargin + width * 12 / 10);\n    print('Red molecule count', 2, width / 12);\n    colour(black);\n    setxy(0, topmargin + width * 13 / 10 + 5);\n    print('(at horizontal position', 2, width / 15);\n    setxy(0, topmargin + width * 14 / 10 + 5);\n    print('in tapering tube)', 2, width / 15);\n  End;\n\n  Procedure graphit(x: integer; show: boolean);\n  Begin\n    if show then\n      begin\n        pixset(x + leftaxis, topmargin + width - num1[x], molcol);\n        pixset(x + leftaxis, concbottom - divmult(num1[x], x + 1, concwidth), conccol)\n      end\n    else\n      begin\n        pixset(x + leftaxis, topmargin + width - num1[x], white);\n        pixset(x + leftaxis, concbottom - divmult(num1[x], x + 1, concwidth), white)\n      end\n  End;\n\n  Procedure showswap(x, origcol: integer);\n  Begin\n    graphit(x1, false);\n    graphit(x1 + 1, false);\n    if origcol = colour1 then\n      begin\n        dec(num1[x1]);\n        inc(num1[x1 + 1])\n      end\n    else\n      begin\n        inc(num1[x1]);\n        dec(num1[x1 + 1])\n      end;\n    graphit(x1, true);\n    graphit(x1 + 1, true)\n  End;\n\nBEGIN\n  setup;\n  drawaxes;\n  for x1 := 0 to width - 1 do\n    graphit(x1, true);\n  pause(2500);\n  repeat\n    x1 := random(width);\n    y1 := random(width);\n    if y1 <= x1 then\n      begin\n        y1 := bottom - y1;\n        x2 := x1;\n        y2 := y1;\n        if random(2) = 0 then\n          inc(x2)\n        else\n          dec(y2);\n        temp := pixcol(x1 + leftaxis, y1);\n        if (pixcol(x2 + leftaxis, y2) xor temp) = xorval then\n          begin\n            noupdate;\n            pixset(x1 + leftaxis, y1, pixcol(x2 + leftaxis, y2));\n            pixset(x2 + leftaxis, y2, temp);\n            if (x2 <> x1) then\n              showswap(x1, temp);\n            update\n          end\n      end\n  until 0 = 1\nEND.\n",Mandelbrot:"PROGRAM Mandelbrot;\nCONST maxcol = 40;\n      scale = 250;\n      pixels = 750;\n      xcentre = -500000;\n      ycentre = 0;\nVAR xstart, xfinish, ystart, yfinish: integer;\n    a, b, x, y: integer;\n    iterations, temp: integer;\n\nBEGIN\n  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;\n  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;\n  xfinish := xstart + pixels - 1;\n  yfinish := ystart + pixels - 1;\n  canvas(xstart, ystart, pixels, pixels);\n  resolution(pixels, pixels);\n  timeset(0);\n  for a := xstart to xfinish do\n    begin\n      noupdate;\n      for b := ystart to yfinish do\n        begin\n          x := a;\n          y := b;\n          iterations := 0;\n          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do\n            begin\n              temp := divmult(x + y, scale, x - y);\n              y := divmult(2 * x, scale, y) + b;\n              x := temp + a;\n              inc(iterations)\n            end;\n          if iterations > maxcol then\n            pixset(a, b, black)\n          else\n            pixset(a, b, rgb(iterations + 1))\n        end;\n      update\n    end;\n  writeln('Resolution: ' + str(scale * 3) + '; Time taken: ' + qstr(time, 1000, 1) + ' seconds.')\nEND.\n",MandelbrotMini:"PROGRAM MandelbrotMini;\nCONST maxcol = 40;\n      scale = 10000;\n      pixels = 300;\n      xcentre = -159200;\n      ycentre = -1033000;\nVAR xstart, xfinish, ystart, yfinish: integer;\n    a, b, x, y: integer;\n    iterations, temp: integer;\n\nBEGIN\n  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;\n  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;\n  xfinish := xstart + pixels - 1;\n  yfinish := ystart + pixels - 1;\n  canvas(xstart, ystart, pixels, pixels);\n  resolution(pixels, pixels);\n  timeset(0);\n  for a := xstart to xfinish do\n    begin\n      noupdate;\n      for b := ystart to yfinish do\n        begin\n          x := a;\n          y := b;\n          iterations := 0;\n          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do\n            begin\n              temp := divmult(x + y, scale, x - y);\n              y := divmult(2 * x, scale, y) + b;\n              x := temp + a;\n              inc(iterations)\n            end;\n          if iterations > maxcol then\n            pixset(a, b, black)\n          else\n            pixset(a, b, rgb(iterations + 1))\n        end;\n      update\n    end;\n  writeln('Resolution: ' + str(scale * 3) + '; Time taken: ' + qstr(time, 1000, 1) + ' seconds.')\nEND.\n",MandelbrotSpectrum:"PROGRAM MandelbrotSpectrum;\nCONST maxcol = 40;\n      scale = 250;\n      pixels = 750;\n      xcentre = -500000;\n      ycentre = 0;\n      spectrum = 7;\nVAR xstart, xfinish, ystart, yfinish: integer;\n    a, b, x, y: integer;\n    iterations, temp: integer;\n    spectcol: array[0..spectrum] of integer;\n    boundary: array[0..spectrum] of integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    spectcol[0] := violet;\n    spectcol[1] := blue;\n    spectcol[2] := cyan;\n    spectcol[3] := lime;\n    spectcol[4] := yellow;\n    spectcol[5] := orange;\n    spectcol[6] := red;\n    spectcol[7] := violet;\n    for n := 0 to spectrum do\n      boundary[n] := divmult(maxcol, spectrum, n)\n  End;\n\n  Function mixcolour(n: integer): integer;\n  Var col1, col2: integer;\n      mix1, mix2: integer;\n  Begin\n    col2 := 0;\n    repeat\n      inc(col2)\n    until (boundary[col2] >= n) or (col2 = spectrum);\n    col1 := col2 - 1;\n    result := mixcols(spectcol[col1], spectcol[col2], boundary[col2] - n, n - boundary[col1])\n  End;\n\nBEGIN\n  colsetup;\n  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;\n  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;\n  xfinish := xstart + pixels - 1;\n  yfinish := ystart + pixels - 1;\n  canvas(xstart, ystart, pixels, pixels);\n  resolution(pixels, pixels);\n  timeset(0);\n  for a := xstart to xfinish do\n    begin\n      noupdate;\n      for b := ystart to yfinish do\n        begin\n          x := a;\n          y := b;\n          iterations := 0;\n          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do\n            begin\n              temp := divmult(x + y, scale, x - y);\n              y := divmult(2 * x, scale, y) + b;\n              x := temp + a;\n              inc(iterations)\n            end;\n          if iterations > maxcol then\n            pixset(a, b, black)\n          else\n            pixset(a, b, mixcolour(iterations))\n        end;\n      update\n    end;\n  writeln('Resolution: ' + str(scale * 3) + '; Time taken: ' + qstr(time, 1000, 1) + ' seconds.')\nEND.\n",MandelbrotMiniSpectrum:"PROGRAM MandelbrotMiniSpectrum;\nCONST maxcol = 100;\n      scale = 10000;\n      pixels = 300;\n      xcentre = -159200;\n      ycentre = -1033000;\n      spectrum = 7;\nVAR xstart, xfinish, ystart, yfinish: integer;\n    a, b, x, y: integer;\n    iterations, temp: integer;\n    spectcol: array[0..spectrum] of integer;\n    boundary: array[0..spectrum] of integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    spectcol[0] := violet;\n    spectcol[1] := blue;\n    spectcol[2] := cyan;\n    spectcol[3] := lime;\n    spectcol[4] := yellow;\n    spectcol[5] := orange;\n    spectcol[6] := red;\n    spectcol[7] := violet;\n    for n := 0 to spectrum do\n      boundary[n] := divmult(maxcol, spectrum, n)\n  End;\n\n  Function mixcolour(n: integer): integer;\n  Var col1, col2: integer;\n      mix1, mix2: integer;\n  Begin\n    col2 := 0;\n    repeat\n      inc(col2)\n    until (boundary[col2] >= n) or (col2 = spectrum);\n    col1 := col2 - 1;\n    result := mixcols(spectcol[col1], spectcol[col2], boundary[col2] - n, n - boundary[col1])\n  End;\n\nBEGIN\n  colsetup;\n  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;\n  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;\n  xfinish := xstart + pixels - 1;\n  yfinish := ystart + pixels - 1;\n  canvas(xstart, ystart, pixels, pixels);\n  resolution(pixels, pixels);\n  timeset(0);\n  for a := xstart to xfinish do\n    begin\n      noupdate;\n      for b := ystart to yfinish do\n        begin\n          x := a;\n          y := b;\n          iterations := 0;\n          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do\n            begin\n              temp := divmult(x + y, scale, x - y);\n              y := divmult(2 * x, scale, y) + b;\n              x := temp + a;\n              inc(iterations)\n            end;\n          if iterations > maxcol then\n            pixset(a, b, black)\n          else\n            pixset(a, b, mixcolour(iterations))\n        end;\n      update\n    end;\n  writeln('Resolution: ' + str(scale * 3) + '; Time taken: ' + qstr(time, 1000, 1) + ' seconds.')\nEND.\n",SierpinskiColour:"PROGRAM SierpinskiColour;\nCONST xleft = 0;\n      xright = 999;\n      ytop = 0;\n      ybottom = 999;\n      scaledown = 4;\n      mappings = 3;\n      title = 'Sierpinski triangle';\n      gridlines = 5;\n      gridthick = 64;\nVAR xl, xr, yt, yb, gt: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    count: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 100;\n    mapxx[1] := 50;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 50;\n    mapxc[1] := 250;\n    mapyc[1] := 0;\n    mapxx[2] := 50;\n    mapyx[2] := 0;\n    mapxy[2] := 0;\n    mapyy[2] := 50;\n    mapxc[2] := 0;\n    mapyc[2] := 500;\n    mapxx[3] := 50;\n    mapyx[3] := 0;\n    mapxy[3] := 0;\n    mapyy[3] := 50;\n    mapxc[3] := 500;\n    mapyc[3] := 500\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end;\n    gt := gridthick / scaledown\n  End;\n\n  Procedure background(rad: integer);\n  Var x, y, cx, cy, r, g, b: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x := 1 to gridlines - 1 do\n      begin\n        setxy(xl + divmult(xr - xl, gridlines, x), yt);\n        drawxy(0, yb - yt)\n      end;\n    for y := 1 to gridlines - 1 do\n      begin\n        setxy(xl + gt / 2, yt + divmult(yb - yt, gridlines, y));\n        drawxy(xr - xl - gt, 0)\n      end;\n    colour(black);\n    setxy(xl, yt);\n    drawxy(xr - xl, 0);\n    drawxy(0, yb - yt);\n    drawxy(xl - xr, 0);\n    drawxy(0, yt - yb);\n    for x := 0 to gridlines - 1 do\n      for y := 0 to gridlines - 1 do\n        begin\n          cx := xl + divmult(xr - xl, gridlines, x) + gt;\n          cy := yt + divmult(yb - yt, gridlines, y) + gt;\n          r := divmult(255, gridlines - 1, x);\n          g := divmult(255, gridlines - 1, y);\n          b := divmult(255, 2 * gridlines - 2, 2 * gridlines - 2 - x - y);\n          recolour(cx, cy, (r * $10000) + (g * $100) + (b * $1))\n        end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        begin\n          map(mapnum, x, y, newx, newy);\n          pixset(newx, newy, pixcol(x, y))\n        end;\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  background(6);\n  writeln(title + ' mappings in colour');\n  for count := 1 to mappings do\n    domap(count)\nEND.\n",SierpinskiIFS:"PROGRAM SierpinskiIFS;\nCONST xleft = 0;\n      xright = 999;\n      ytop = 0;\n      ybottom = 999;\n      scaledown = 4;\n      mappings = 3;\n      title = 'Sierpinski triangle';\n      live = black;\n      copied = darkgrey;\n      pauseval = 2000;\nVAR xl, xr, yt, yb: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    iteration, starttime: integer;\n    count, numborn, numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 100;\n    mapxx[1] := 50;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 50;\n    mapxc[1] := 250;\n    mapyc[1] := 0;\n    mapxx[2] := 50;\n    mapyx[2] := 0;\n    mapxy[2] := 0;\n    mapyy[2] := 50;\n    mapxc[2] := 0;\n    mapyc[2] := 500;\n    mapxx[3] := 50;\n    mapyx[3] := 0;\n    mapxy[3] := 0;\n    mapyy[3] := 50;\n    mapxc[3] := 500;\n    mapyc[3] := 500\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) <> white then\n          begin\n            map(mapnum, x, y, newx, newy);\n            if pixcol(newx, newy) = white then\n              inc(numborn);\n            pixset(newx, newy, copied)\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x, y: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) = live then\n          begin\n            pixset(x, y, white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x, y) = copied then\n          pixset(x, y, live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  blank(live);\n  iteration := 0;\n  writeln(title + ' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime := time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration ' + str(iteration) + ':');\n    numborn := 0;\n    for count := 1 to mappings do\n      domap(count);\n    numkilled := 0;\n    cleanup;\n    writeln('  ' + str(numborn) + ' pixels born; ' + str(numkilled) + ' pixels killed');\n    writeln('  (took ' + str((time - starttime) / 1000) + ' seconds - total ' + str(time / 1000) + ' seconds so far)');\n    if (numborn + numkilled > 0) and (pauseval >= 1000) then\n      begin\n        write('  (now pausing ' + qstr(pauseval, 1000, 1) + ' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn + numkilled = 0;\n  writeln('FINISH - fixed point of iterative mapping has been reached')\nEND.\n",BarnsleyColour:"PROGRAM BarnsleyColour;\nCONST xleft = -236;\n      xright = 263;\n      ytop = 1;\n      ybottom = 1000;\n      scaledown = 3;\n      mappings = 4;\n      title = 'Barnsley fern';\n      gridlines = 5;\n      gridthick = 32;\nVAR xl, xr, yt, yb, gt: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    count: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 100;\n    mapxx[1] := 0;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 16;\n    mapxc[1] := 0;\n    mapyc[1] := 0;\n    mapxx[2] := 85;\n    mapyx[2] := -4;\n    mapxy[2] := 4;\n    mapyy[2] := 85;\n    mapxc[2] := 0;\n    mapyc[2] := 160;\n    mapxx[3] := 20;\n    mapyx[3] := 23;\n    mapxy[3] := -26;\n    mapyy[3] := 22;\n    mapxc[3] := 0;\n    mapyc[3] := 160;\n    mapxx[4] := -15;\n    mapyx[4] := 26;\n    mapxy[4] := 28;\n    mapyy[4] := 24;\n    mapxc[4] := 0;\n    mapyc[4] := 44\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end;\n    gt := gridthick / scaledown\n  End;\n\n  Procedure background(rad: integer);\n  Var x, y: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x := 1 to gridlines - 1 do\n      begin\n        setxy(xl + divmult(xr - xl, gridlines, x), yt);\n        drawxy(0, yb - yt)\n      end;\n    for y := 1 to gridlines - 1 do\n      begin\n        setxy(xl + gt / 2, yt + divmult(yb - yt, gridlines, y));\n        drawxy(xr - xl - gt, 0)\n      end;\n    colour(black);\n    setxy(xl, yt);\n    drawxy(xr - xl, 0);\n    drawxy(0, yb - yt);\n    drawxy(xl - xr, 0);\n    drawxy(0, yt- yb);\n    for x := 0 to gridlines - 1 do\n      for y := 0 to gridlines - 1 do\n        recolour(xl + divmult(xr - xl, gridlines, x) + gt,\n                 yt + divmult(yb - yt, gridlines, y) + gt,\n                 divmult(255, gridlines - 1, x) * $10000\n                 + divmult(255, gridlines - 1, y) * $100\n                 + divmult(255, 2 * gridlines - 2, 2 * gridlines - 2 - x - y) * $1)\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        begin\n          map(mapnum, x, y, newx, newy);\n          pixset(newx, newy, pixcol(x, y))\n        end;\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  background(6);\n  writeln(title + ' mappings in colour');\n  for count := 1 to mappings do\n    domap(count)\nEND.\n",BarnsleyIFS:"PROGRAM BarnsleyIFS;\nCONST xleft = -236;\n      xright = 263;\n      ytop = 1;\n      ybottom = 1000;\n      scaledown = 3;\n      mappings = 4;\n      title = 'Barnsley fern';\n      live = green;\n      copied = emerald;\n      pauseval = 2000;\nVAR xl, xr, yt, yb: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    iteration, starttime: integer;\n    count, numborn, numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 100;\n    mapxx[1] := 0;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 16;\n    mapxc[1] := 0;\n    mapyc[1] := 0;\n    mapxx[2] := 85;\n    mapyx[2] := -4;\n    mapxy[2] := 4;\n    mapyy[2] := 85;\n    mapxc[2] := 0;\n    mapyc[2] := 160;\n    mapxx[3] := 20;\n    mapyx[3] := 23;\n    mapxy[3] := -26;\n    mapyy[3] := 22;\n    mapxc[3] := 0;\n    mapyc[3] := 160;\n    mapxx[4] := -15;\n    mapyx[4] := 26;\n    mapxy[4] := 28;\n    mapyy[4] := 24;\n    mapxc[4] := 0;\n    mapyc[4] := 44\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) <> white then\n          begin\n            map(mapnum, x, y, newx, newy);\n            if pixcol(newx, newy) = white then\n              inc(numborn);\n            pixset(newx, newy, copied)\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x, y: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) = live then\n          begin\n            pixset(x, y, white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x, y) = copied then\n          pixset(x, y, live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  pixset(1, 1, live);\n  iteration := 0;\n  writeln(title + ' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime := time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration ' + str(iteration) + ':');\n    numborn := 0;\n    for count := 1 to mappings do\n      domap(count);\n    numkilled := 0;\n    cleanup;\n    writeln('  ' + str(numborn) + ' pixels born; ' + str(numkilled) + ' pixels killed');\n    writeln('  (took ' + str((time - starttime) / 1000) + ' seconds - total ' + str(time / 1000) + ' seconds so far)');\n    if (numborn + numkilled > 0) and (pauseval >= 1000) then\n      begin\n        write('  (now pausing ' + qstr(pauseval, 1000, 1) + ' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn + numkilled = 0;\n  writeln('FINISH - fixed point of iterative mapping has been reached')\nEND.\n",DragonColour:"PROGRAM DragonColour;\nCONST xleft = 0;\n      xright = 999;\n      ytop = 0;\n      ybottom = 999;\n      scaledown = 4;\n      mappings = 3;\n      title = 'Dragon curve';\n      gridlines = 5;\n      gridthick = 64;\nVAR xl, xr, yt, yb, gt: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    count: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 1000;\n    mapxx[1] := 0;\n    mapyx[1] := -577;\n    mapxy[1] := 577;\n    mapyy[1] := 0;\n    mapxc[1] := 95;\n    mapyc[1] := 589;\n    mapxx[2] := 0;\n    mapyx[2] := -577;\n    mapxy[2] := 577;\n    mapyy[2] := 0;\n    mapxc[2] := 441;\n    mapyc[2] := 789;\n    mapxx[3] := 0;\n    mapyx[3] := -577;\n    mapxy[3] := 577;\n    mapyy[3] := 0;\n    mapxc[3] := 95;\n    mapyc[3] := 989;\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end;\n    gt := gridthick / scaledown\n  End;\n\n  Procedure background(rad: integer);\n  Var x, y: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x := 1 to gridlines - 1 do\n      begin\n        setxy(xl + divmult(xr - xl, gridlines, x), yt);\n        drawxy(0, yb - yt)\n      end;\n    for y := 1 to gridlines - 1 do\n      begin\n        setxy(xl + gt / 2, yt + divmult(yb - yt, gridlines, y));\n        drawxy(xr - xl - gt, 0)\n      end;\n    colour(black);\n    setxy(xl, yt);\n    drawxy(xr - xl, 0);\n    drawxy(0, yb - yt);\n    drawxy(xl - xr, 0);\n    drawxy(0, yt - yb);\n    for x := 0 to gridlines - 1 do\n      for y := 0 to gridlines - 1 do\n        recolour(xl + divmult(xr - xl, gridlines, x) + gt,\n                 yt + divmult(yb - yt, gridlines, y) + gt,\n                 divmult(255, gridlines - 1, x) * $10000\n                 + divmult(255, gridlines - 1, y) * $100\n                 + divmult(255, 2 * gridlines - 2, 2 * gridlines - 2 - x - y) * $1)\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        begin\n          map(mapnum, x, y, newx, newy);\n          pixset(newx, newy, pixcol(x, y))\n        end;\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  background(6);\n  writeln(title + ' mappings in colour');\n  for count := 1 to mappings do\n    domap(count)\nEND.\n",DragonIFS:"PROGRAM DragonIFS;\nCONST xleft = 0;\n      xright = 999;\n      ytop = 0;\n      ybottom = 999;\n      scaledown = 4;\n      mappings = 3;\n      title = 'Dragon curve';\n      live = black;\n      copied = silver;\n      pauseval = 2000;\nVAR xl, xr, yt, yb: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    iteration, starttime: integer;\n    count, numborn, numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 1000;\n    mapxx[1] := 0;\n    mapyx[1] := -577;\n    mapxy[1] := 577;\n    mapyy[1] := 0;\n    mapxc[1] := 95;\n    mapyc[1] := 589;\n    mapxx[2] := 0;\n    mapyx[2] := -577;\n    mapxy[2] := 577;\n    mapyy[2] := 0;\n    mapxc[2] := 441;\n    mapyc[2] := 789;\n    mapxx[3] := 0;\n    mapyx[3] := -577;\n    mapxy[3] := 577;\n    mapyy[3] := 0;\n    mapxc[3] := 95;\n    mapyc[3] := 989;\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) <> white then\n          begin\n            map(mapnum, x, y, newx, newy);\n            if pixcol(newx, newy) = white then\n              inc(numborn);\n            pixset(newx, newy, rgb(mapnum))\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x, y: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) = live then\n          begin\n            pixset(x, y, white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x, y) <> white then\n          pixset(x, y, live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  blank(live);\n  iteration := 0;\n  writeln(title + ' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime := time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration ' + str(iteration) + ':');\n    numborn := 0;\n    for count := 1 to mappings do\n      domap(count);\n    numkilled := 0;\n    cleanup;\n    writeln('  ' + str(numborn) + ' pixels born; ' + str(numkilled) + ' pixels killed');\n    writeln('  (took ' + str((time - starttime) / 1000) + ' seconds - total ' + str(time / 1000) + ' seconds so far)');\n    if (numborn + numkilled > 0) and (pauseval >= 1000) then\n      begin\n        write('  (now pausing ' + qstr(pauseval, 1000, 1) + ' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn + numkilled = 0;\n  writeln('FINISH - fixed point of iterative mapping has been reached');\n  for count := 1 to mappings do\n    domap(count)\nEND.\n",TreeIFS:"PROGRAM TreeIFS;\nCONST xleft = 0;\n      xright = 999;\n      ytop = 0;\n      ybottom = 999;\n      scaledown = 4;\n      mappings = 5;\n      title = 'Tree';\n      live = green;\n      copied = emerald;\n      pauseval = 2000;\nVAR xl, xr, yt, yb: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    iteration, starttime: integer;\n    count, numborn, numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 1000;\n    mapxx[1] := 195;\n    mapyx[1] := 344;\n    mapxy[1] := -488;\n    mapyy[1] := 443;\n    mapxc[1] := 443;\n    mapyc[1] := 245;\n    mapxx[2] := 462;\n    mapyx[2] := -252;\n    mapxy[2] := 414;\n    mapyy[2] := 361;\n    mapxc[2] := 251;\n    mapyc[2] := 569;\n    mapxx[3] := -58;\n    mapyx[3] := 453;\n    mapxy[3] := -70;\n    mapyy[3] := -111;\n    mapxc[3] := 598;\n    mapyc[3] := 97;\n    mapxx[4] := -35;\n    mapyx[4] := -469;\n    mapxy[4] := 70;\n    mapyy[4] := -22;\n    mapxc[4] := 488;\n    mapyc[4] := 507;\n    mapxx[5] := -637;\n    mapyx[5] := 0;\n    mapxy[5] := 0;\n    mapyy[5] := 501;\n    mapxc[5] := 856;\n    mapyc[5] := 251\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) <> white then\n          begin\n            map(mapnum, x, y, newx, newy);\n            if pixcol(newx, newy) = white then\n              inc(numborn);\n            pixset(newx, newy, copied)\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x, y: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) = live then\n          begin\n            pixset(x, y, white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x, y) = copied then\n          pixset(x, y, live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  pixset(1, 1, live);\n  iteration := 0;\n  writeln(title + ' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime := time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration ' + str(iteration) + ':');\n    numborn := 0;\n    for count := 1 to mappings do\n      domap(count);\n    numkilled := 0;\n    cleanup;\n    writeln('  ' + str(numborn) + ' pixels born; ' + str(numkilled) + ' pixels killed');\n    writeln('  (took ' + str((time - starttime) / 1000) + ' seconds - total ' + str(time / 1000) + ' seconds so far)');\n    if (numborn + numkilled > 0) and (pauseval >= 1000) then\n      begin\n        write('  (now pausing ' + qstr(pauseval, 1000, 1) + ' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn + numkilled = 0;\n  writeln('FINISH - fixed point of iterative mapping has been reached')\nEND.\n"},Python:{DrawPause:"# DrawPause\n\ncolour(green)\nblot(100)\npause(1000)\ncolour(red)\nforward(450)\npause(1000)\nright(90)\nthickness(9)\ncolour(blue)\npause(1000)\nforward(300)\n",SmileyFace:"# SmileyFace\n\ncolour(peach)\nblot(200)\ncolour(darkred)\nblot(140)\nforward(30)\ncolour(peach)\nblot(150)\nback(60)\ncolour(royal)\nblot(30)\npenup()\nforward(90)\nleft(90)\nforward(80)\ncolour(white)\nellblot(30, 20)\ncolour(emerald)\nblot(18)\ncolour(black)\nblot(8)\nback(160)\ncolour(white)\nellblot(30, 20)\ncolour(emerald)\nblot(18)\ncolour(black)\nblot(8)\n",ThePlough:"# ThePlough\n\nblank(black)\ncolour(lightblue)\nsetxy(100, 200)\nblot(10)\nsetxy(300, 250)\nblot(10)\nsetxy(420, 350)\nblot(10)\nsetxy(570, 490)\nblot(10)\nsetxy(900, 560)\nblot(10)\nsetxy(840, 720)\nblot(10)\nsetxy(590, 660)\nblot(10)\nsetxy(570, 490)\ncolour(silver)\npolyline(8)\n",OlympicRings:"# OlympicRings\n\nringsize: int = 130\nthickness(20)\npenup()\nforward(50)\ncircle(ringsize)\nleft(90)\nforward(300)\ncolour(blue)\ncircle(ringsize)\nback(600)\ncolour(red)\ncircle(ringsize)\nforward(150)\nright(90)\nback(125)\ncolour(lime)\ncircle(ringsize)\nleft(90)\nforward(300)\ncolour(yellow)\ncircle(ringsize)\n",ForLoop:"# ForLoop\n\nfor count in range(0, 200, 1):\n  forward(count // 3)\n  right(5)\n  colour(red)\n  blot(200)\n  colour(black)\n  circle(200)\n",TriangleSpin:"# TriangleSpin\n\nmovexy(30, 20)\nfor i in range(1, 300, 1):\n  forward(i * 3)\n  right(121)\n",Circles:"# Circles\n\nthickness(6)\npenup()\nblank(black)\ncolour(orange)\nfor count in range(0, 36, 1):\n  forward(200)\n  circle(200)\n  back(200)\n  right(10)\n  pause(25)\n",NestedLoops:"# NestedLoops\n\npenup()\nfor countblot in range(0, 10, 1):\n  forward(260)\n  colour(black)\n  blot(150)\n  colour(rgb(countblot + 1))\n  for countcirc in range(0, 25, 1):\n    circle((countcirc + 1) * 8)\n  back(260)\n  right(36)\n",RandomLines:"# RandomLines\n\nfor count in range(1, 30, 1):\n  x: int = randint(0, 1000)\n  y: int = randint(0, 1000)\n  setxy(x, y)\n  turtd = randint(0, 360)\n  forward(1500)\n  back(3000)\nfor count in range(1, 10000, 1):\n  x = randint(0, 1000)\n  y = randint(0, 1000)\n  if pixcol(x, y) == white:\n    recolour(x, y, rgb(randint(0, 20) + 1))\n",RandomEllipses:"# RandomEllipses\n\nfor count in range(1, 10, 1):\n  x: int = randint(0, 1500) - 250\n  y: int = randint(0, 1500) - 250\n  rx: int = randint(0, 500) + 500\n  ry: int = randint(0, 500) + 500\n  setxy(x, y)\n  ellipse(rx, ry)\nnextcol: int = 0\nfor count in range(1, 10000, 1):\n  x = randint(0, 1000)\n  y = randint(0, 1000)\n  if (pixcol(x, y) == white):\n    nextcol = nextcol % 20 + 1\n    recolour(x, y, rgb(nextcol))\n",ColourSpiral:"# ColourSpiral\n\nlen: int\n\ndef lineturn():\n  forward(len)\n  right(60)\n\nblank(black)\nforward(15)\nthickness(27)\nlen = 20\nwhile len <= 500:\n  randcol(40)\n  lineturn()\n  len = len + 10\n",SimpleProc:"# SimpleProc\n\ndef prong():\n  forward(400)\n  blot(20)\n  back(400)\n\nrandcol(10)\nprong()\nright(61)\nwhile turtd != 0:\n  randcol(10)\n  prong()\n  right(61)\n",ParameterProc:"# ParameterProc\n\ndef prong(length: int):\n  forward(length)\n  blot(length // 20)\n  back(length)\n\nfor count in range(360, 0, -1):\n  randcol(10)\n  prong(count + 100)\n  right(61)\n",ResizableFace:"# ResizableFace\n\ndef face(size: int):\n  def eye():\n    colour(white);\n    ellblot(size * 3 / 20, size / 10)\n    colour(emerald)\n    blot(size * 9 / 100)\n    colour(black)\n    blot(size / 25)\n\n  colour(peach)\n  blot(size)\n  colour(darkred)\n  blot(size * 7 / 10)\n  forward(size * 3 / 20)\n  colour(peach)\n  blot(size * 3 / 4)\n  back(size * 3 / 10)\n  colour(royal)\n  blot(size * 3 / 20)\n  penup()\n  forward(size * 9 / 20)\n  left(90)\n  forward(size * 2 / 5)\n  eye()\n  back(size * 4 / 5)\n  eye()\n\nface(400)\n",Polygons:"# Polygons\n\ndef poly(points: int, col: int):\n  direction(90)\n  for count in range(0, points, 1):\n    forward(600 // points)\n    left(360 // points)\n  colour(col)\n  polygon(points)\n  colour(black)\n  polyline(points + 1)\n\npenup()\nthickness(4)\nsetxy(100, 400)\npoly(3, blue)\nsetxy(400, 400)\npoly(4, red)\nsetxy(700, 400)\npoly(5, yellow)\nsetxy(150, 750)\npoly(6, pink)\nsetxy(440, 750)\npoly(7, green)\nsetxy(740, 750)\npoly(8, turquoise)\n",Stars:"# Stars\n\ndef star(points: int, col: int):\n  angles(points * 2)\n  for count in range(0, points, 1):\n    forward(450)\n    back(450)\n    forget(1)\n    right(1)\n    forward(200)\n    back(200)\n    forget(1)\n    right(1)\n  colour(col)\n  polygon(points * 2)\n\npenup()\nfor n in range(3, 13, 1):\n  star(n, rgb(n - 2))\n  pause(500)\n",PolygonRings:"# PolygonRings\n\ndef annulus(inner: int, width: int, angle: int):\n  for count in range(0, 360 // angle + 1, 1):\n    forward(inner + width)\n    back(width)\n    back(inner)\n    forget(1)\n    right(angle)\n    forward(inner)\n    forward(width)\n    colour(rgb(count % 20 + 1))\n    polygon(4)\n    back(inner + width)\n\npenup()\nblot(500)\nrandcol(6)\nannulus(410, 80, 2)\nannulus(310, 80, 3)\nannulus(210, 80, 5)\nannulus(110, 80, 7)\nannulus(10, 80, 1)\n",Triangle1:"# Triangle1\n\nmovexy(-100, 150)\nforward(256)\nright(120)\nforward(256)\nright(120)\nforward(256)\nright(120)\n",Triangle2:"# Triangle2\n\ndef triangle(size: int):\n  forward(size)\n  right(120)\n  forward(size)\n  right(120)\n  forward(size)\n  right(120)\n\nmovexy(-100, 150)\ntriangle(256)\n",Triangle3:"# Triangle3\n\ndef triangle(size: int):\n  if (size > 1):\n    forward(size)\n    right(120)\n    forward(size)\n    right(120)\n    forward(size)\n    right(120)\n\nmovexy(-100, 150)\ntriangle(256)\n",Triangles:"# Triangles\n\ndef triangle(size: int):\n  if (size > 1):\n    forward(size)\n    triangle(size // 2)\n    right(120)\n    forward(size)\n    triangle(size // 2)\n    right(120)\n    forward(size)\n    triangle(size // 2)\n    right(120)\n\nmovexy(-100, 150)\ntriangle(256)\n",Factorials:"# Factorials\n\ndef fact(n: int) -> int:\n  if (n == 0):\n    result: int = 1\n  else:\n    result = n * fact(n - 1)\n  return result\n\noutput(True, cream, True)\nfor count in range(1, 10, 1):\n  writeline(str(count) + '! = ' + str(fact(count)))\n",Fibonaccis:"# Fibonaccis\n\n# not yet available in Turtle Python\n",YouAreHere:"# YouAreHere\n\ncolour(red)\nblot(20)\ncolour(violet)\nprint('You are here', 2, 35)\nsetxy(790, 540)\ncolour(blue)\ndrawxy(40, 0)\ndrawxy(28, -28)\ndrawxy(0, -40)\ndrawxy(-28, -28)\ndrawxy(-40, 0)\nsetxy(500, 500)\nsetxy(530, 480)\nsetxy(535, 505)\nsetxy(500, 500)\npolyline(5)\npolygon(3)\n",CycleColours:"# CycleColours\n\ncolinc: int = randint(0, 4)\ncolcode: int = randint(1, 20)\nblank(black)\ncolour(rgb(colcode))\nthickness(16)\nlength: int = 0\nwhile not(length > 250):\n  colcode = (colcode + colinc) % 20 + 1\n  colour(rgb(colcode))\n  length = length + 1\n  forward(length)\n  right(30)\n",Clock:"# Clock\n\nhours: int = 0\nminutes: int = 0\n\ndef showhands():\n  colour(white)\n  blot(360)\n  colour(red)\n  direction(hours * 30)\n  thickness(10)\n  forward(250)\n  back(250)\n  direction(minutes * 6)\n  thickness(6)\n  forward(350)\n  back(350)\n\nthickness(10)\ncircle(400)\nwhile not(hours == 12):\n  while not(minutes == 60):\n    showhands()\n    pause(600)\n    minutes = minutes + 1\n  hours = hours + 1\n  minutes = 0\nshowhands()\n",DigitalClock:"# DigitalClock\n\nhours: int = 0\nminutes: int = 0\n\ndef showtime():\n  hstring: str\n  mstring: str\n  setxy(300, 430)\n  box(400, 130, white, False)\n  if hours < 10:\n    hstring = '0' + str(hours)\n  else:\n    hstring = str(hours)\n  if minutes < 10:\n    mstring = '0' + str(minutes)\n  else:\n    mstring = str(minutes)\n  print(hstring + ':' + mstring, 19, 100)\n\nblank(lightgreen)\nsetxy(250, 390)\ncolour(maroon)\nthickness(10)\nbox(500, 210, lightbrown, True)\ncolour(black)\nwhile hours < 12:\n  showtime()\n  pause(600)\n  minutes = minutes + 1\n  if minutes == 60:\n    hours = hours + 1\n    minutes = 0\nshowtime()\n",Flashlights:"# Flashlights\n\ndef drawit(doblot: bool):\n  if doblot:\n    randcol(10)\n    blot(25)\n  else:\n    colour(black)\n    blot(30)\n    randcol(10)\n    circle(25)\n\nblot(1000)\nthickness(8)\nwhile True:\n  setx(randint(1, 8) * 111)\n  sety(randint(1, 8) * 111)\n  drawit(randint(0, 1) == 1)\n",RefParams:"# RefParams\n\n# not available in Turtle Python\n",Balls3D:"# Balls3D\n\nsetxy(250, 250)\ncolour(0x00FFFF)\nfor count in range(240, 0, -1):\n  blot(count)\n  turtc = turtc + 0x10000\nright(60)\nsetxy(750, 250)\ncolour(0xD2691E)\nfor count in range(40, 0, -1):\n  blot(count * 6)\n  forward(3)\n  turtc=turtc + 0x10102\nsetxy(250, 750)\ncolour(0xD2691E)\nfor count in range(40, 0, -1):\n  blot(count * 6)\n  forward(3)\n  turtc = turtc + 0x10102\nsetxy(750, 750)\ncolour(0xFFA500)\nfor count in range(80, 0, -1):\n  blot(count * 3)\n  forward(2)\n  turtc = turtc + 0x101\n",StringFunctions:"# StringFunctions\n\ndelay: int = 500\noutput(-1, cream, -1)\ns1: str = 'Turtle Python'\ns2: str = copy(s1, 1, 6)\nwriteline(s2 + ' is the name of a small animal.')\npause(delay)\ns3: str = copy(s1, 8, 6)\nwriteline(s3 + ' is a large snake.')\npause(delay)\ns4: str = insert(s3, 2, 'onty M')\nwriteline('\\'' + s4 + '\\' is a silly name.')\npause(delay)\nwriteline('\"' + s1 + '\" has ' + str(len(s1)) + ' characters.')\npause(delay)\nwriteline('In lower case it is \"' + lower(s1) + '\".')\nwriteline('In upper case it is \"' + upper(s1) + '\".')\npause(delay)\nposn: int = find(s1, s3)\nif posn > 0:\n  writeline('\"' + s3 + '\" occurs within \"' + s1 + '\" at position ' + str(posn) + '.')\npause(delay)\ns5: str = '3.14159'\nwriteline(s5 + ' times 100000 = ' + str(qval(s5, 100000, -1)) + '.')\npause(delay)\nn: int = qval(s5, 100000, -1)\nwriteline(str(n) + ' divided by 100000 = ' + qstr(n, 100000, 5) + '.')\nwriteline('')\npause(delay * 5)\nwriteline('Now back to the Canvas and Console ...')\noutput(0, peach, -1)\npause(delay * 5)\noutput(0, lightred, 0)\npause(delay * 5)\nconsole(-1, lightblue)\nwriteline('You will see this on a clear light blue Console')\n",UserStringFunctions:"# UserStringFunctions\n\n# not yet available in Turtle Python\n",MathFunctions:"# MathFunctions\n\ndecimals: int = 4\ndenominator: int = 1000000\na: int\nb: int\n\ndef show(s: str, n: int):\n  writeline(s + '(' + str(a) + ' / ' + str(b) + ') = ' + qstr(n, denominator, decimals))\n\ndef selectab():\n  global a, b\n  a = randint(100, 999)\n  b = randint(100, 999)\n\noutput(-1, white, -1)\nwriteline('This program selects two random numbers a and b, in the')\nwriteline('range 100-999, and then outputs various mathematical')\nwriteline('functions of the fraction a/b. The results are expressed')\nwriteline('to ' + str(decimals) + ' decimal places, and a denominator of ' + str(denominator) + ' is')\nwriteline('used in the calculations to provide precision, even')\nwriteline('though the Turtle functions strictly operate only on')\nwriteline('integers and produce integer results.')\nwriteline('')\nselectab()\nwriteline('a = ' + str(a) + '; b = ' + str(b))\nwriteline('a / b = ' + str(a) + ' / ' + str(b) + ' = ' + qstr(a, b, decimals))\nwriteline('')\nshow('square', power(a, b, 2, denominator))\nshow('square root', root(a, b, 2, denominator))\nshow('cube', power(a, b, 3, denominator))\nshow('cube root', root(a, b, 3, denominator))\nwriteline('')\nshow('hypot', hypot(a, b, denominator))\nshow('calculated hypot', sqrt(a * a + b * b, denominator))\nwriteline('')\nshow('sin', sin(a, b, denominator))\nshow('cos', cos(a, b, denominator))\nshow('tan', tan(a, b, denominator))\nwriteline('')\nshow('ln', ln(a, b, denominator))\nif divmult(a, b, 1000) + ln(denominator, 1, 1000) > ln(maxint(), 1, 1000):\n  writeline('EXP(' + str(a) + ' / ' + str(b) + ') would give numerical overflow, because')\n  writeline('the result * ' + str(denominator) + ' would be greater than ' + str(maxint()))\nelse:\n  show('exp', exp(a, b, denominator))\nshow('log10', log10(a, b, denominator))\nif divmult(a, b, 1000) + log10(denominator, 1, 1000) > log10(maxint(), 1, 1000):\n  writeline('ANTILOG(' + str(a) + ' / ' + str(b) + ') would give numerical overflow, because')\n  writeline('the result * ' + str(denominator) + ' would be greater than ' + str(maxint()))\nelse:\n  show('antilog', antilog(a, b, denominator))\nwriteline('')\nif a > b:\n  writeline('ARCCOS and ARCSIN are not defined for ' + str(a) + ' / ' + str(b) + ' = ' + qstr(a, b, decimals))\nelse:\n  show('arccos', acos(a, b, denominator))\n  show('arcsin', asin(a, b, denominator))\nshow('arctan', atan(a, b, denominator))\n",TrigGraphs:"# TrigGraphs\n\nxorigin: int = 500\nyorigin: int = 500\nhalfwidth: int = 400\nyscale: int = 200\nradians: bool = False\n\ndef axes():\n  thickness(3)\n  setxy(xorigin - halfwidth, yorigin)\n  drawxy(halfwidth * 2, 0)\n  setxy(xorigin, 0)\n  drawxy(0, 1000)\n  setxy(xorigin, yorigin)\n  circle(15)\n  thickness(2)\n  setxy(xorigin - halfwidth, yorigin - yscale)\n  drawxy(halfwidth * 2, 0)\n  setxy(xorigin - halfwidth, yorigin + yscale)\n  drawxy(halfwidth * 2, 0)\n  setxy(xorigin + halfwidth + 10, yorigin - yscale - 18)\n  print('+1', 0, 20)\n  setxy(xorigin + halfwidth + 10, yorigin + yscale - 18)\n  print('-1', 0, 20)\n  if radians:\n    setxy(xorigin - halfwidth - 44, yorigin - 4)\n    print('-p', 29, 28)\n    setxy(xorigin - halfwidth // 2 - 2, yorigin - 4)\n    print('-p/2', 29, 28)\n    setxy(xorigin + halfwidth // 2 - 50, yorigin - 4)\n    print('p/2', 29, 28)\n    setxy(xorigin + halfwidth, yorigin - 4)\n    print('p', 29, 28)\n  else:\n    setxy(xorigin - halfwidth - 60, yorigin)\n    print('-180', 0, 20)\n    setxy(xorigin - halfwidth // 2, yorigin)\n    print('-90', 0, 20)\n    setxy(xorigin + halfwidth // 2 - 30, yorigin)\n    print('90', 0, 20)\n    setxy(xorigin + halfwidth, yorigin)\n    print('180', 0, 20)\n\ndef sinecurve():\n  for degrees in range(-180, 181, 1):\n    x: int = xorigin + divmult(degrees, 180, halfwidth)\n    y: int = yorigin - sin(degrees, 1, yscale)\n    setxy(x, y)\n  polyline(361)\n\ndef cosinecurve():\n  for degrees in range(-180, 181, 1):\n    x: int = xorigin + divmult(degrees, 180, halfwidth)\n    y: int = yorigin - cos(degrees, 1, yscale)\n    setxy(x, y)\n  polyline(361)\n\ndef tancurve():\n  for degrees in range(-180, 181, 1):\n    if degrees == -90:\n      polyline(90)\n    else:\n      if degrees == 90:\n        polyline(179)\n      else:\n        x: int = xorigin + divmult(degrees, 180, halfwidth)\n        y: int = yorigin - tan(degrees, 1, yscale)\n        setxy(x, y)\n  polyline(90)\n\naxes()\nnoupdate()\nthickness(4)\ncolour(red)\nsetxy(20, 700)\nprint('cosine', 16, 40)\ncosinecurve()\ncolour(green)\nsetxy(100, 810)\nprint('sine', 16, 40)\nsetxy(205, 820)\ndrawxy(70, -110)\ndrawxy(0, 20)\nmovexy(0, -20)\ndrawxy(-18, 11)\nsinecurve()\ncolour(blue)\nsetxy(140, 920)\nprint('tangent', 16, 40)\ntancurve()\n",MovingBall:"# MovingBall\n\nx: int = 100\ny: int = 700\nfor count in range(0, 100, 1):\n  noupdate()\n  colour(white)\n  blot(51)\n  x = x + 8\n  y = y - 4\n  setxy(x, y)\n  colour(red)\n  blot(50)\n  update()\n  pause(5)\n",BouncingBall:"# BouncingBall\n\nx: int = 100\ny: int = 700\nxvel: int = 8\nyvel: int = -4\nwhile 0 < 1:\n  noupdate()\n  colour(white)\n  blot(51)\n  x = x + xvel\n  y = y + yvel\n  setxy(x, y)\n  colour(red)\n  blot(50)\n  update()\n  pause(5)\n  if (x < 50) or (x > 949):\n    xvel = -xvel\n  if (y < 50) or (y > 949):\n    yvel = -yvel\n",TurtleMove:"# TurtleMove\n\nsetxy(100, 700)\nfor count in range(0, 100, 1):\n  noupdate()\n  colour(white)\n  blot(51)\n  movexy(8, -4)\n  colour(red)\n  blot(50)\n  update()\n  pause(5)\n",TurtleBounce:"# TurtleBounce\n\nxvel: int = 3\nyvel: int = -2\nwhile (0 < 1):\n  colour(white)\n  blot(51)\n  movexy(xvel, yvel)\n  colour(red)\n  blot(50)\n  update()\n  noupdate()\n  if (turtx < 50) or (turtx > 950):\n    xvel = -xvel\n  if (turty < 50) or (turty > 950):\n    yvel = -yvel\n",BouncingFace:"# BouncingFace\n\ndef face(size: int):\n  def eye():\n    colour(white);\n    ellblot(size * 3 / 20, size / 10)\n    colour(emerald)\n    blot(size * 9 / 100)\n    colour(black)\n    blot(size / 25)\n\n  direction(0)\n  colour(peach)\n  blot(size)\n  colour(darkred)\n  blot(size * 7 / 10)\n  forward(size * 3 / 20)\n  colour(peach)\n  blot(size * 3 / 4)\n  back(size * 3 / 10)\n  colour(royal)\n  blot(size * 3 / 20)\n  penup()\n  forward(size * 9 / 20)\n  left(90)\n  forward(size * 2 / 5)\n  eye()\n  back(size * 4 / 5)\n  eye()\n\nfacesize: int = 100\nx: int = 300\ny: int = 700\nxvel: int = 8\nyvel: int = -4\nwhile 0 < 1:\n  noupdate()\n  colour(white)\n  blot(facesize + 1)\n  x = x + xvel\n  y = y + yvel\n  setxy(x, y)\n  face(facesize)\n  setxy(x, y)\n  update()\n  pause(10)\n  if (x < facesize) or (x > 999 - facesize):\n    xvel = -xvel;\n  if (y < facesize) or (y > 999 - facesize):\n    yvel = -yvel\n",MultiBounce:"# MultiBounce\n\n# not yet available in Turtle Python\n",BouncingTriangle:"# BouncingTriangle\n\ndef triangle(col: int):\n  global bouncex, bouncey\n  bouncex = False\n  bouncey = False\n  setxy(x, y)\n  direction(d)\n  colour(col)\n  for count in range(0, 3, 1):\n    forward(size)\n    if abs(turtx - 500) > 495:\n      bouncex = True\n    if abs(turty - 500) > 495:\n      bouncey = True\n    back(size)\n    forget(1)\n    right(120)\n  polygon(3)\n\nbouncex: bool\nbouncey: bool\nsize: int = 100\nx: int = 300\ny: int = 700\nd: int = 0\nxvel: int = 8\nyvel: int = -4\ndvel: int = 5\nwhile 0 < 1:\n  noupdate()\n  blank(white)\n  x = x + xvel\n  y = y + yvel\n  d = (d + dvel) % 360\n  triangle(red)\n  update()\n  pause(10)\n  if bouncex:\n    xvel = -xvel;\n    dvel = -dvel\n  if bouncey:\n    yvel = -yvel\n    dvel = -dvel\n",BouncingShapes:"# BouncingShapes\n\n# not yet available in Turtle Python\n",GravitySteps:"# GravitySteps\n\ndef steps(s: int):\n  size: int = 1000 / s\n  setxy(0, 1000)\n  thickness(1)\n  for count in range(0, s * 2, 1):\n    if count % 2 == 1:\n      movexy(0, -size)\n    else:\n      movexy(size, 0)\n  movexy(0, s * size)\n  movexy(-s * size, 0)\n  colour(blue)\n  polygon(s * 2 + 2)\n\ndef throwball(xvel: int, yvel: int, gravity: int, floor: int):\n  global turty\n  turty = turty - 1\n  while (turty != floor):\n    colour(white)\n    blot(25)\n    movexy(xvel, yvel)\n    yvel = yvel + gravity\n    if turty > floor:\n      turty = floor\n    colour(red)\n    blot(24)\n    update()\n    pause(10)\n    noupdate()\n\nsteps(10)\nsetxy(950, 75)\nwhile not(turtx < 75):\n  throwball(-2, -22, 1, turty + 100)\nfor bounce in range(0, 10, 1):\n  throwball(0, bounce * 2 - 18, 1, turty)\n",SolarSystem:"# SolarSystem\n\n# not yet available in Turtle Python\n",AskInput:"# AskInput\n\nwrite('What is your name?  ')\ns: str = readline()\nwriteline('')\nwrite('Hello, ' + s + ', ...  ')\npause(500)\nwriteline('How are you?')\n",QuickClick:"# QuickClick\n\nblank(cream)\nsetxy(15, 200)\nprint('This reaction game will display a sequence', 4, 36)\nsetxy(20, 270)\nprint('of 10 coloured circles on the Canvas.  Try', 4, 36)\nsetxy(20, 340)\nprint('to click the mouse on each circle as quickly', 4, 36)\nsetxy(20, 410)\nprint('as you can, and see how short a total time', 4, 36)\nsetxy(20, 480)\nprint('you can achieve for all 10.', 4, 36)\nsetxy(100, 620)\nprint('Now press the \"Esc\" key to start ...', 4, 36)\nkeyecho(False)\nwhile (abs(?key) != \\escape):\n  pass\ntimeset(0)\nfor count in range(1, 10, 1):\n  x: int = randint(0, 900) + 50\n  y: int = randint(0, 900) + 50\n  blank(black)\n  setxy(x, y)\n  colour(rgb(count))\n  blot(50)\n  clickcol: int\n  while clickcol != turtc:\n    update()\n    while ?lmouse <= 0:\n      update()\n    clickcol = pixcol(?mousex, ?mousey)\nblank(lightblue)\nsetxy(60, 460)\ncolour(lightred)\nprint('Your time was ' + qstr(time(), 1000, 2) + ' seconds', 4, 50)\n",TypingTest:"# TypingTest\n\n# not yet available in Turtle Python\n",TypingTestKeys:"# TypingTestKeys\n\n# not yet available in Turtle Python\n",IterationGame:"# IterationGame\n\n# not yet available in Turtle Python\n",SpongeThrow:"# SpongeThrow\n\nfacesize: int = 100\nspongesize: int = 40\n\ndef face(size: int):\n  def eye():\n    colour(white)\n    ellblot(size * 3 / 20, size / 10)\n    colour(emerald)\n    blot(size * 9 / 100)\n    colour(black)\n    blot(size / 25)\n\n  direction(0)\n  colour(peach)\n  blot(size)\n  colour(darkred)\n  blot(size * 7 / 10)\n  forward(size * 3 / 20)\n  colour(peach)\n  blot(size * 3 / 4)\n  back(size * 3 / 10)\n  colour(royal)\n  blot(size * 3 / 20)\n  penup()\n  forward(size * 9 / 20)\n  left(90)\n  forward(size * 2 / 5)\n  eye()\n  back(size * 4 / 5)\n  eye()\n\nx: int = 300\ny: int = 700\nxvel: int = 8\nyvel: int = -4\nwhile 0 < 1:\n  noupdate()\n  colour(white)\n  setxy(x, y)\n  blot(facesize + spongesize)\n  x = x + xvel\n  y = y + yvel\n  setxy(x, y)\n  face(facesize)\n  update()\n  pause(10)\n  if (?lmouse > 0) and (hypot(?mousex - x, ?mousey - y, 1) < facesize):\n    setxy(?mousex, ?mousey)\n    randcol(4)\n    blot(spongesize)\n    pause(100)\n  if (x < facesize) or (x > 999 - facesize):\n    xvel = -xvel;\n  if (y < facesize) or (y > 999 - facesize):\n    yvel = -yvel\n",Arcade:"# Arcade\n\nfacex: int = -100\nfacey: int = 625\nfacexspeed: int = 5\nfaceyspeed: int = 0\ntargets: int = 10\nhits: int = 0\n\ndef bottle(x: int, y: int):\n  setxy(x, y)\n  colour(cyan)\n  movexy(0, -15)\n  thickness(40)\n  drawxy(0, -50)\n  thickness(10)\n  drawxy(0, -40)\n  thickness(2)\n  movexy(-20, 90)\n  movexy(40, 0)\n  movexy(0, -20)\n  movexy(-40, 0)\n  colour(purple)\n  polygon(4)\n  movexy(20, 35)\n\ndef addhat():\n  setxy(facex, facey - 80)\n  colour(darkgrey)\n  ellblot(90, 30)\n  thickness(2)\n  colour(black)\n  ellipse(90, 30)\n  movexy(-70, 0)\n  thickness(4)\n  drawxy(35, -70)\n  drawxy(70, 0)\n  drawxy(35, 70)\n  colour(darkgrey)\n  thickness(1)\n  polygon(4)\n\ndef face():\n  thickness(1)\n  colour(0xFF8899)\n  blot(100)\n  colour(white)\n  setxy(facex - 20, facey - 20)\n  blot(10)\n  colour(black)\n  blot(4)\n  thickness(4)\n  movexy(0, -22)\n  colour(0x663300)\n  drawxy(15, 15)\n  thickness(1)\n  colour(white)\n  setxy(facex + 20, facey - 20)\n  blot(10)\n  colour(black)\n  blot(4)\n  thickness(4)\n  movexy(0, -22)\n  colour(0x663300)\n  drawxy(-15, 15)\n  addhat()\n  setxy(facex, facey + 13)\n  colour(red)\n  blot(10)\n  movexy(0, 32)\n  ellblot(30, 6)\n  colour(white)\n  ellblot(20, 4)\n\ndef background():\n  blank(coffee)\n  bottle(100, 500)\n  bottle(200, 500)\n  bottle(450, 500)\n  bottle(500, 500)\n  bottle(565, 500)\n  bottle(865, 500)\n  colour(darkbrown)\n  thickness(20)\n  setxy(0, 125)\n  drawxy(1000, 0)\n  setxy(0, 325)\n  drawxy(1000, 0)\n  setxy(0, 525)\n  drawxy(1000, 0)\n  colour(brown)\n  thickness(30)\n  setxy(0, 100)\n  drawxy(1000, 0)\n  setxy(0, 300)\n  drawxy(1000, 0)\n  setxy(0, 500)\n  drawxy(1000, 0)\n\ndef gunsight():\n  colour(black)\n  thickness(6)\n  setxy(?mousex - 50, ?mousey)\n  drawxy(100, 0)\n  setxy(?mousex, ?mousey - 50)\n  drawxy(0, 100)\n\ncursor(0)\nwhile (hits < targets):\n  noupdate()\n  background()\n  setxy(facex,facey)\n  face()\n  for i in range(0, hits, 1):\n    bottle(50 * i + 15, 740)\n  colour(brown)\n  thickness(272)\n  setxy(0, 863)\n  drawxy(1000, 0)\n  gunsight()\n  thickness(2)\n  update()\n  facex = facex + facexspeed\n  facey = facey + faceyspeed\n  if facex > 1100:\n    facex = -100\n  if facex < -100:\n    facex = 1100\n  if (facey < 100) or (facey > 625):\n    faceyspeed = faceyspeed * -1\n  if ((?lmouse > 0) and (((?mousex - facex) * (?mousex - facex)) + ((?mousey - facey) * (?mousey - facey)) < 10000)):\n    facex = -100\n    facexspeed = randint(2, 6)\n    faceyspeed = randint(-4, 4)\n    facey = randint(50, 599)\n    hits = hits + 1\nblank(black)\nsetxy(200, 450)\ncolour(green)\nprint('  Well done!  ', 4, 75)\n",SnakeGame:"# SnakeGame\n\nsnakecolour: int = purple\napplecolour: int = green\nboardsize: int = 30\nsnakelength: int = 2\ncrash: bool = False\n\ndef newapple():\n  x: int = randint(0, boardsize - 1)\n  y: int = randint(0, boardsize - 1)\n  while pixcol(x, y) == snakecolour:\n    x = randint(0, boardsize - 1)\n    y = randint(0, boardsize - 1)\n  pixset(x, y, applecolour)\n\ncanvas(0,0,boardsize, boardsize)\nresolution(boardsize, boardsize)\nangles(4)\nblank(lightblue)\ncursor(0)\ncolour(snakecolour)\nthickness(1)\npenup()\nforward(1)\nnewapple()\nwhile not crash:\n  noupdate()\n  if (abs(?key) == \\up) and (turtd != 2):\n    direction(0)\n  if (abs(?key) == \\right) and (turtd != 3):\n    direction(1)\n  if (abs(?key) == \\down) and (turtd != 0):\n    direction(2)\n  if (abs(?key) == \\left) and (turtd != 1):\n    direction(3)\n  forward(1)\n  if (turtx < 0) or (turtx >= boardsize) or (turty < 0) or (turty >= boardsize):\n    crash=True\n  if pixcol(turtx, turty) == snakecolour:\n    crash=True\n  if pixcol(turtx, turty) == applecolour:\n    snakelength = snakelength + 1\n    pixset(turtx, turty, snakecolour)\n    newapple()\n  colour(lightblue)\n  polyline(snakelength + 2)\n  colour(snakecolour)\n  polyline(snakelength)\n  update()\n  pause(250 - (snakelength * 3))\nresolution(1000, 1000)\nblank(lilac)\nsetxy(boardsize // 4, 2 * boardsize // 5)\nprint('Score ' + str(snakelength - 2), 20, 100)\n",NoughtsAndCrosses:"# NoughtsAndCrosses\n\n# not yet available in Turtle Python\n",SimpleDraw:"# SimpleDraw\n\ndef palette():\n  for col in range(1, 11, 1):\n    setxy(col * 100 - 50, 950)\n    colour(rgb(col))\n    blot(50)\n\npalette()\nhome()\nthickness(10)\nblot(2)\nwhile True:\n  while not((?lmouse > 0) or (?rmouse > 0)):\n    update()\n  if ?mousey > 900:\n    colour(rgb(?mousex // 100 + 1))\n  else:\n    if ?lmouse > 0:\n      drawxy(?mousex - turtx, ?mousey - turty)\n    else:\n      setxy(?mousex, ?mousey)\n",PaintApp:"# PaintApp\n\nbrushwidth: int\nbrushcolour: int\n\ndef setbrushwidth(wdth: int):\n  global brushwidth\n  brushwidth = 0\n  colour(black)\n  for count in range(0, 5, 1):\n    setxy(625 + count * 50, 875)\n    blot(8 + count * 2)\n  colour(brushcolour)\n  brushwidth = wdth\n  recolour(((brushwidth + 16) * 25) + 25, 875, lightred)\n\ndef setbrushcolour(clr: int):\n  global brushcolour\n  brushcolour = clr\n  colour(clr)\n  setxy(975, 875)\n  blot(16)\n\ndef paintbrush(x: int, y: int):\n  setxy(x, y)\n  blot(brushwidth)\n\ndef paintcan(x: int, y: int):\n  recolour(x, y, brushcolour)\n\ndef setup():\n  def square(col: int):\n    movexy(50, 0)\n    movexy(0, 50)\n    movexy(-50, 0)\n    movexy(0, -50)\n    colour(col)\n    polygon(4)\n\n  colour(lightred)\n  setxy(0, 850)\n  drawxy(1000, 0)\n  setxy(0, 900)\n  drawxy(1000, 0)\n  setxy(450, 850)\n  drawxy(0, 50)\n  setxy(850, 850)\n  drawxy(0, 50)\n  setxy(10, 858)\n  colour(black)\n  print('Left-click to draw, right-click to fill', 0, 20)\n  setxy(450 + 10, 858)\n  print('Brush width:', 0, 20)\n  setxy(850 + 10, 858)\n  print('Colour:', 0, 20)\n  setxy(0, 900)\n  for count in range(1, 21, 1):\n    square(rgb(count))\n    movexy(0, 50)\n    square(rgb(count + 30))\n    movexy(50, -50)\n  setbrushwidth(8)\n  setbrushcolour(black)\n\nsetup()\nwhile True:\n  if (?lmouse > 0):\n    if (?mousey > 900):\n      setbrushcolour(pixcol(?mousex, ?mousey))\n    else:\n      if ((?mousey>850) and ((?mousex>600) and (?mousex<850))):\n        setbrushwidth(((?mousex // 50) * 2) - 16)\n      else:\n        if (?mousey < 850 - brushwidth):\n          paintbrush(?mousex, ?mousey)\n  if (?rmouse > 0) and (?mousey < 850):\n    paintcan(?mousex, ?mousey)\n  update()\n",MultipleTurtles:"# MultipleTurtles\n\n# not yet available in Turtle Python\n",AimCannon:"# AimCannon\n\ngunlength: int = 1000\ndistancecol: int = green\ntimecol: int = red\nsteps: int = 0\n\ndef graphaxes():\n  thickness(5)\n  setxy(9700, 600)\n  drawxy(0, 3900)\n  drawxy(-9000, 0) # x axis 700 to 9700\n  drawxy(0, -3900) # y axis 4500 to 600\n  for n in range(0, 91, 1):\n    if (n % 5 == 0):\n      setxy(650 + n * 100, 4600)\n      print(str(n), 2, 16)\n  for n in range(0, 10, 1):\n    setxy(100, 4350 - n * 400)\n    print(str(n * 1000), 2, 16)\n  for n in range(0, 10, 1):\n    setxy(9900, 4380 - n * 400)\n    print(str(n * 20), 2, 16)\n  setxy(4000, 4900)\n  print('Angle of elevation', 2, 24)\n  colour(distancecol)\n  setxy(0, 100)\n  print('Distance', 2, 24)\n  colour(timecol)\n  setxy(9600, 100)\n  print('Time', 2, 24)\n\ndef plot(x: int, y: int, col: int):\n  setxy(700 + x * 100, 4500 - y * 2 / 5)\n  colour(col)\n  blot(40)\n\ndef aim():\n  while (pixcol(?mousex, ?mousey) != red):\n    noupdate()\n    setxy(0, 10000)\n    colour(cream)\n    blot(1600)\n    colour(yellowgreen)\n    blot(1400)\n    colour(maroon)\n    setxy(250, 9750)\n    blot(250)\n    forward(gunlength)\n    setxy(250, 9750)\n    colour(red)\n    blot(100)\n    update()\n    while (?lmouse <= 0):\n      pass\n    if (pixcol(?mousex, ?mousey) == cream):\n      turnxy(?mousex - 250, ?mousey - 9750)\n\ndef fire(xvel: int, yvel: int, gravity: int, floor: int):\n  global steps, turty\n  setxy(250, 9750)\n  steps = 0\n  while (turty != floor):\n    steps = steps + 1\n    if (pixcol(turtx, turty) == black):\n      colour(white)\n      blot(90)\n    movexy(xvel, yvel)\n    yvel = yvel + gravity\n    if (turty > floor):\n      turty = floor\n    if ((pixcol(turtx, turty) == white) or (turty == floor)):\n      colour(black)\n      blot(75)\n    update()\n    pause(10)\n    noupdate()\n\ncanvas(0, 0, 10500, 10000)\ngraphaxes()\nturtd = 45\nthickness(20)\nwhile (1 == 1):\n  aim()\n  write('Elevation: ' + str(90 - turtd))\n  fire(cos(90 - turtd, 1, 96), sin(90 - turtd, 1, -96), 1, 9950)\n  write('  Distance: ' + str(turtx))\n  writeline('  Time: ' + str(steps))\n  plot(90 - turtd, turtx, distancecol)\n  plot(90 - turtd, steps * 50, timecol)\n",AutoCannon:"# AutoCannon\n\ngunlength: int = 1000\ndistancecol: int = green\ntimecol: int = red\nsteps: int = 0\n\ndef graphaxes():\n  thickness(5)\n  setxy(9700, 600)\n  drawxy(0, 3900)\n  drawxy(-9000, 0) # x axis 700 to 9700\n  drawxy(0, -3900) # y axis 4500 to 600\n  for n in range(0, 91, 1):\n    if (n % 5 == 0):\n      setxy(650 + n * 100, 4600)\n      print(str(n), 2, 16)\n  for n in range(0, 10, 1):\n    setxy(100, 4350 - n * 400)\n    print(str(n * 1000), 2, 16)\n  for n in range(0, 10, 1):\n    setxy(9900, 4380 - n * 400)\n    print(str(n * 20), 2, 16)\n  setxy(4000, 4900)\n  print('Angle of elevation', 2, 24)\n  colour(distancecol)\n  setxy(0, 100)\n  print('Distance', 2, 24)\n  colour(timecol)\n  setxy(9600, 100)\n  print('Time', 2, 24)\n\ndef plot(x: int, y: int, col: int):\n  setxy(700 + x * 100, 4500 - y * 2 / 5)\n  colour(col)\n  blot(40)\n\ndef aim(elevation: int):\n  noupdate()\n  setxy(0, 10000)\n  colour(cream)\n  blot(1600)\n  colour(yellowgreen)\n  blot(1400)\n  colour(maroon)\n  setxy(250, 9750)\n  blot(250)\n  direction(90 - elevation)\n  forward(gunlength)\n  setxy(250, 9750)\n  colour(red)\n  blot(100)\n  update()\n\ndef fire(xvel: int, yvel: int, gravity: int, floor: int):\n  global steps, turty\n  setxy(250, 9750)\n  steps = 0\n  while (turty != floor):\n    steps = steps + 1\n    if (pixcol(turtx, turty) == black):\n      colour(white)\n      blot(90)\n    movexy(xvel, yvel)\n    yvel = yvel + gravity\n    if (turty > floor):\n      turty = floor\n    if ((pixcol(turtx, turty) == white) or (turty == floor)):\n      colour(black)\n      blot(75)\n    update()\n    pause(10)\n    noupdate()\n\ncanvas(0, 0, 10500, 10000)\ngraphaxes()\nturtd = 45\nthickness(20)\nfor n in range(0, 91, 1):\n  aim(n)\n  write('Elevation: ' + str(90 - turtd))\n  fire(cos(90 - turtd, 1, 96), sin(90 - turtd, 1, -96), 1, 9950)\n  write('  Distance: ' + str(turtx))\n  writeline('  Time: ' + str(steps))\n  plot(90 - turtd, turtx, distancecol)\n  plot(90 - turtd, steps * 50, timecol)\n",Launch:"# Launch\n\n# not yet available in Turtle Python\n",Disease:"# Disease\n\n# not yet available in Turtle Python\n",GameOfLife:"# GameOfLife\n\nwidth: int = 32\nheight: int = 32\ndn: int\ncanvas(0, 0, width, height)\nresolution(width, height)\nfor x in range(0, width, 1):\n  for y in range(0, height, 1):\n    if randint(0, 6) == 0:\n      pixset(x, y, black)\nwhile ?key != \\escape:\n  noupdate()\n  for x in range(0, width, 1):\n    for y in range(0, height, 1):\n      dn = 0\n      for i in range(-1, 2, 1):\n        for j in range(-1, 2, 1):\n          dn = dn + pixcol((x + i + width) % width, (y + j + height) % height) & 1\n      if ((pixcol(x, y) & 1 == 0) and ((dn < 5) or (dn > 6))) or ((pixcol(x, y) & 1 == 1) and (dn == 6)):\n        pixset(x, y, pixcol(x, y) ^ 2)\n  for x in range(0, width + 1, 1):\n    for y in range(0, height + 1, 1):\n      if (pixcol(x, y) & 3) % 3 != 0:\n        pixset(x, y, pixcol(x, y) ^ 0xFFFFFD)\n  update()\n",LifeArrays:"# LifeArrays\n\n# not yet available in Turtle Python\n",Automata:"# Automata\n\n# not yet available in Turtle Python\n",BrownianMotion:"# BrownianMotion\n\n# not yet available in Turtle Python\n",Dendrites:"# Dendrites\n\n# not yet available in Turtle Python\n",Cheetahs:"# Cheetahs\n\n# not yet available in Turtle Python\n",SexRatio:"# SexRatio\n\n# not yet available in Turtle Python\n",Flocking:"# Flocking\n\n# not yet available in Turtle Python\n",Roads:"# Roads\n\n# not yet available in Turtle Python\n",Schelling:"# Schelling\n\n# not yet available in Turtle Python\n",IteratedPD:"# IteratedPD\n\n# not yet available in Turtle Python\n",Interference:"# Interference\n\n# not yet available in Turtle Python\n",TwoSlits:"# TwoSlits\n\n# not yet available in Turtle Python\n",WaveSuperposer:"# WaveSuperposer\n\n# not yet available in Turtle Python\n",RecursionFactory:"# RecursionFactory\n\nnumsides: int = 6\ninitsize: int = 240\nshrink: int = 40\nrangle: int = 180\npolygap: int = 0\nlevels: int = 5\nslowdraw: int = 3\nmode: int = 1\nfirstcol: int = 1\ncolinc: int = 2\nminthick: int = 2\naddthick: int = 6\ncircsize: int = 60\n\ndef recurse(flag: int, size: int, depth: int, col: int):\n  if depth > 0:\n    if depth < slowlev:\n      noupdate()\n    else:\n      update()\n    if flag = 1:\n      for flag in range(2, 4, 1):\n        storex: int = turtx\n        storey: int = turty\n        for sides in range (0, numsides, 1):\n          recurse(flag, size, depth, col)\n        turtx = storex\n        turty = storey\n    else:\n      penup()\n      if flag = 2:\n        colour(rgb(col))\n        thickness(minthick + ((depth - 1) * addthick) / 12)\n        if mode = 1:\n          pendown()\n        else:\n          if mode = 2:\n            blot(size * circsize / 120)\n          else:\n            circle(size * circsize / 120)\n      left(halfangle)\n      forward(size)\n      right(180 - halfangle + rangle)\n      if flag = 3:\n        forward(size * polygap / 120)\n        recurse(1, (size * shrink) / 120, depth - 1, ((col + colinc - 1) % 7) + 1)\n        back(size * polygap / 120)\n      left(rangle)\n\nblank(black)\nif 180 % numsides == 0:\n  halfangle: int = 90 - (180 / numsides)\n  slowlev: int = levels + 1 - slowdraw\n  if slowlev > levels - 1:\n    slowlev = levels - 1\n  movexy(0, initsize)\n  recurse(1, initsize, levels, firstcol)\n",RecursiveTree:"# RecursiveTree\n\n# not yet available in Turtle Python\n",KochSnowflake:"# KockSnowFlake\n\n# not yet available in Turtle Python\n",SquareKoch:"# SquareKoch\n\n# not yet available in Turtle Python\n",Sierpinski:"# Sierpinski\n\ndef triangle(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int):\n  setxy(x1, y1)\n  setxy(x2, y2)\n  setxy(x3, y3)\n  setxy(x1, y1)\n  colour(black)\n  polyline(4)\n  if (hypot(x2 - x1, y2 - y1, 1) > 3):\n    x12: int = (x1 + x2) / 2\n    y12: int = (y1 + y2) / 2\n    x23: int = (x2 + x3) / 2\n    y23: int = (y2 + y3) / 2\n    x31: int = (x3 + x1) / 2\n    y31: int = (y3 + y1) / 2\n    setxy(x12, y12)\n    setxy(x23, y23)\n    setxy(x31, y31)\n    colour(white)\n    polygon(3)\n    triangle(x1, y1, x12, y12, x31, y31)\n    triangle(x2, y2, x23, y23, x12, y12)\n    triangle(x3, y3, x31, y31, x23, y23)\n\nblank(cream)\nthickness(1)\ntriangle(400, 138, 843, 650, 179, 778)\n",SierpinskiDots:"# SierpinskiDots\n\n# not yet available in Turtle Python\n",IFSBackground:"# IFSBackground\n\nxleft : int = 0\nxright : int = 999\nytop : int = 0\nybottom : int = 999\ngridscale : int = 5\ngridthick : int = 64\n\ndef background(rad: int):\n  cx: int\n  cy: int\n  r: int\n  g: int\n  b: int\n  thickness(gridthick)\n  colour(darkgrey)\n  for x in range(0, gridscale, 1):\n    setxy(xleft + divmult(xright - xleft, gridscale, x), ytop)\n    drawxy(0, ybottom - ytop)\n  for y in range(0, gridscale, 1):\n    setxy(xleft + gridthick / 2, ytop + divmult(ybottom - ytop, gridscale, y))\n    drawxy(xright - xleft - gridthick, 0)\n  colour(black)\n  setxy(xleft, ytop)\n  drawxy(xright - xleft, 0)\n  drawxy(0, ybottom - ytop)\n  drawxy(xleft - xright, 0)\n  drawxy(0, ytop - ybottom)\n  for x in range(0, gridscale, 1):\n    for y in range(0, gridscale, 1):\n      cx = xleft + divmult(xright - xleft, gridscale, x) + gridthick\n      cy = ytop + divmult(ybottom - ytop, gridscale, y) + gridthick\n      r = divmult(255, gridscale - 1, x)\n      g = divmult(255, gridscale - 1 , y)\n      b = divmult(255, 2 * gridscale - 2, 2 * gridscale - 2 - x - y)\n      recolour(cx, cy, (r * 0x10000) + (g * 0x100) + (b * 0x1))\n\ncanvas(xleft, ytop, xright - xleft + 1, ybottom - ytop + 1)\nresolution(xright - xleft + 1, ybottom - ytop + 1)\nbackground(6)\n",IFSColour:"# IFSColour\n\n# not yet available in Turtle Python\n",IFSDemonstrator:"# IFSDemonstrator\n\n# not yet available in Turtle Python\n",Logistic:"# Logistic\n\nmaxpop: int = 100000\nmaxgen: int = 100\nlmargin: int = 105\nrmargin: int = 40\ntmargin: int = 150\nbmargin: int = 200\nshowoutput: bool = False\nr: int\npop: int\n\ndef axes():\n  colour(black)\n  for i in range(0, 11, 1):\n    setxy(i * 100 - 25, 1000)\n    print(str(i * maxgen / 10), 4, 20)\n  for i in range(1, 11, 1):\n    setxy(-lmargin + 5, 1000 - i * 100 - 20)\n    print(str(i * maxpop / 10), 4, 20)\n  setxy(0, 0)\n  drawxy(0, 1000)\n  drawxy(1000, 0)\n  colour(red)\n  setxy(0, 1060)\n  print('Population over ' + str(maxgen) + ' generations, where P (population/' + str(maxpop) + ')', 4, 25)\n  setxy(0, 1110)\n  print('is determined by the logistic equation P\\' = rP(1 - P), with r = ' + qstr(r, 10, 1), 4, 25)\n\ndef menu():\n  colour(black)\n  setxy(10, -tmargin + 20)\n  print('Set r:', 4, 25)\n  for i in range(21, 41, 1):\n    setxy(((i - 1) % 10) * 90 + 130,((i - 1) // 10) * 50 - 100 - tmargin)\n    if (i == r):\n      box(90, 50, red, True)\n    else:\n      box(90, 50, cream, True)\n    print('  ' + qstr(i, 10, 1), 4, 25)\n\ncanvas(-lmargin, -tmargin, 1000 + lmargin + rmargin, 1000 + tmargin + bmargin)\nresolution(1000 + lmargin + rmargin, 1000 + tmargin + bmargin)\nthickness(3)\nr = 30\nwhile True:\n  noupdate()\n  blank(white)\n  axes()\n  menu()\n  colour(blue)\n  pop = randint(0, maxpop - 8) + 10\n  if showoutput:\n    writeline('')\n    writeline('r = ' + qstr(r, 10, 1) + ' Initial population = ' + str(pop))\n  setxy(0, 1000 - divmult(pop, maxpop, 1000))\n  for gen in range(1, maxgen + 1, 1):\n    pop = divmult(pop, 10 * maxpop, r * (maxpop - pop))\n    setxy(divmult(gen, maxgen, 1000), 1000 - divmult(pop, maxpop, 1000))\n    polyline(2)\n    if showoutput:\n      write(str(pop) + ' ')\n      if (gen % 10 == 0):\n        writeline('')\n  heapreset()\n  update()\n  while not((?lmouse > 0) and (?clicky < (100 - tmargin)) and (?clickx >= 130) and (?clickx < 1030)):\n    pass\n  r = ((?clickx - 130) // 90) + ((?clicky + tmargin + 100) // 50) * 10 + 1\n",LogisticSpider:"# Logistic Spider\n\n# not yet available in Turtle Python\n",MandelbrotDemo:"# MandelbrotDemo\n\n# not yet available in Turtle Python\n",MandelbrotSpectrumDemo:"# MandelbrotSpectrumDemo\n\n# not yet available in Turtle Python\n",Quine:"# Quine\n\n# not yet available in Turtle Python\n",Syllogisms:"# Syllogisms\n\n# not yet available in Turtle Python\n",TuringMachines:"# TuringMachines\n\n# not yet available in Turtle Python\n",Sorting:"# Sorting\n\n# not yet available in Turtle Python\n",SortingStrings:"# SortingStrings\n\n# not yet available in Turtle Python\n",NimLearn:"# NimLearn\n\n# not yet available in Turtle Python\n",MultiNim:"# Nim\n\n# not yet available in Turtle Python\n",KnightsTour:"# KinghtsTour\n\n# not yet available in Turtle Python\n",LifeStart:"# LifeStart\n\nwidth: int = 32\nheight: int = 32\ncanvas(0, 0, width, height)\nresolution(width, height)\nfor x in range(0, width, 1):\n  for y in range(0, height, 1):\n    if (randint(0, 6) == 0):\n      pixset(x, y, black)\n    else:\n      pixset(x, y, white)\n",Diffusion:"# Diffusion\n\n# not yet available in Turtle Python\n",Mandelbrot:"# Mandelbrot\n\nmaxcol: int = 40\nscale: int = 250\npixels: int = 750\nxcentre: int = -500000 # millionths\nycentre: int = 0 # millionths\nxstart: int = divmult(xcentre, 1000000, scale) - pixels / 2\nystart: int = divmult(ycentre, 1000000, scale) - pixels / 2\nxfinish: int = xstart + pixels - 1\nyfinish: int = ystart + pixels - 1\nx: int\ny: int\niterations: int\ntemp: int\ncanvas(xstart, ystart, pixels, pixels)\nresolution(pixels, pixels)\ntimeset(0)\nfor a in range(xstart, xfinish + 1, 1):\n  noupdate()\n  for b in range(ystart, yfinish + 1, 1):\n    x = a\n    y = b\n    iterations = 0\n    while ((hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol)):\n      temp = divmult(x + y, scale, x - y)\n      y = divmult(2 * x, scale, y) + b\n      x = temp + a\n      iterations = iterations + 1\n    if (iterations > maxcol):\n      pixset(a, b, black)\n    else:\n      pixset(a, b, rgb(iterations + 1))\n  update()\nwriteline('Resolution: ' + str(scale * 3) + ' Time taken: ' + qstr(time(), 1000, 1) + ' seconds.')\n",MandelbrotMini:"# MandelbrotMini\n\nmaxcol: int = 40\nscale: int = 10000\npixels: int = 300\nxcentre: int = -159200\nycentre: int = -1033000\nxstart: int = divmult(xcentre, 1000000, scale) - pixels / 2\nystart: int = divmult(ycentre, 1000000, scale) - pixels / 2\nxfinish: int = xstart + pixels - 1\nyfinish: int = ystart + pixels - 1\nx: int\ny: int\niterations: int\ntemp: int\ncanvas(xstart, ystart, pixels, pixels)\nresolution(pixels, pixels)\ntimeset(0)\nfor a in range(xstart, xfinish + 1, 1):\n  noupdate()\n  for b in range(ystart, yfinish + 1, 1):\n    x = a\n    y = b\n    iterations = 0\n    while ((hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol)):\n      temp = divmult(x + y, scale, x - y)\n      y = divmult(2 * x, scale, y) + b\n      x = temp + a\n      iterations = iterations + 1\n    if (iterations > maxcol):\n      pixset(a, b, black)\n    else:\n      pixset(a, b, rgb(iterations + 1))\n  update()\nwriteline('Resolution: ' + str(scale * 3) + ' Time taken: ' + qstr(time(), 1000, 1) + ' seconds.')\n",MandelbrotSpectrum:"# MandelbrotSpectrum\n\n# not yet available in Turtle Python\n",MandelbrotMiniSpectrum:"# MandelbrotMiniSpectrum\n\n# not yet available in Turtle Python\n",SierpinskiColour:"# SierpinskiColour\n\n# not yet available in Turtle Python\n",SierpinskiIFS:"# SierpinskiIFS\n\n# not yet available in Turtle Python\n",BarnsleyColour:"# BarnsleyColour\n\n# not yet available in Turtle Python\n",BarnsleyIFS:"# BarnsleyIFS\n\n# not yet available in Turtle Python\n",DragonColour:"# DragonColour\n\n# not yet available in Turtle Python\n",DragonIFS:"# DragonIFS\n\n# not yet available in Turtle Python\n",TreeIFS:"# TreeIFS\n\n# not yet available in Turtle Python\n"}},Dn={DrawPause:"Simple drawing with pauses",SmileyFace:"Smiley face (using PENUP and ELLBLOT)",ThePlough:"The plough (using SETXY and POLYLINE)",OlympicRings:"Olympic rings (using a variable)",ForLoop:"FOR (counting) loop",TriangleSpin:"Spinning triangle pattern",Circles:"Circling circles",NestedLoops:"Nested FOR loops",RandomLines:"Random lines pattern",RandomEllipses:"Random ellipses pattern",ColourSpiral:"Spiral of colours (simple PCODE)",SimpleProc:"Simple procedure",ParameterProc:"Procedure with parameter",ResizableFace:"Resizable face (hierarchical procedures)",Polygons:"Polygons (two parameters)",Stars:"Stars (using ANGLES and FORGET)",PolygonRings:"Polygon rings (three parameters)",Triangle1:"Simple triangle",Triangle2:"Triangle procedure",Triangle3:"Triangle procedure with limit",Triangles:"Recursive triangles",Factorials:"Recursive factorials",Fibonaccis:"Fibonaccis (using ARRAY and TIME)",YouAreHere:"Text and arrow (using PRINT)",CycleColours:"Cycling colours (using MOD)",Clock:"Analogue clock (using REPEAT)",DigitalClock:"Digital clock (using IF and WHILE)",Flashlights:"Flashlights (using Booleans)",RefParams:"Reference parameters",Balls3D:"3D colour effects",StringFunctions:"Standard string functions",UserStringFunctions:"User-defined string functions",MathFunctions:"Mathematical functions",TrigGraphs:"Trigonometric graphs",MovingBall:"Moving ball (using variables)",BouncingBall:"Bouncing ball (using variables)",TurtleMove:"Moving ball (using Turtle)",TurtleBounce:"Bouncing ball (using Turtle)",BouncingFace:"Bouncing face",MultiBounce:"Multiple bouncing balls",BouncingTriangle:"Bouncing triangle",BouncingShapes:"Multiple bouncing shapes",GravitySteps:"Movement under gravity",SolarSystem:"Solar system",AskInput:"Asking for typed input",QuickClick:"Mouse reaction game",TypingTest:"Typing test (checking characters)",TypingTestKeys:"Typing test (checking keys)",IterationGame:"Iteration game (Collatz sequence)",SpongeThrow:"Throwing sponges at a moving face",Arcade:"Arcade shooting game",SnakeGame:"Snake (classic game)",NoughtsAndCrosses:"Noughts and crosses",SimpleDraw:"Drawing to the mouse",PaintApp:"Painting application",MultipleTurtles:"Multiple turtles and varying ANGLES",AimCannon:"Firing a cannon (manual)",AutoCannon:"Firing a cannon (automatic)",Launch:"Launching a rocket into orbit",Disease:"Spread of disease",GameOfLife:"Conway’s Game of Life",LifeArrays:"Game of Life, using arrays",Automata:"One-dimensional cellular automata",BrownianMotion:"Brownian motion",Dendrites:"Dendritic crystal growth",Cheetahs:"Cheetahs and gazelles",SexRatio:"The sex ratio",Flocking:"Flocking behaviour",Roads:"Town road simulation",Schelling:"Schelling’s segregation model",IteratedPD:"Iterated Prisoner’s Dilemma",Interference:"Wave interference tutor",TwoSlits:"Interference from two slits",WaveSuperposer:"Hugh Wallis’s wave superposer",RecursionFactory:"Recursion factory",RecursiveTree:"Recursive tree",KochSnowflake:"Koch snowflake",SquareKoch:"Square Koch fractal curves",Sierpinski:"Sierpinski triangle (by deletion)",SierpinskiDots:"Sierpinski triangle (by random dots)",IFSBackground:"Iterated function systems (IFS) background",IFSColour:"IFS mappings on coloured background",IFSDemonstrator:"IFS demonstrator program",Logistic:"Logistic equation",LogisticSpider:"Logistic spider",MandelbrotDemo:"Mandelbrot multi-colour",MandelbrotSpectrumDemo:"Mandelbrot spectral colours",Quine:"Quine (self-replicating) program",Syllogisms:"Syllogism testing program",TuringMachines:"Turing machine simulator",Sorting:"Comparison of sorting methods",SortingStrings:"Comparison of sorting methods (strings)",NimLearn:"Nim learning program",MultiNim:"Nim with multiple piles",KnightsTour:"Knight’s Tour program",LifeStart:"Initialising Conway’s Game of Life",Diffusion:"A model of diffusion",Mandelbrot:"Mandelbrot set",MandelbrotMini:"Mandelbrot mini",MandelbrotSpectrum:"Mandelbrot spectrum",MandelbrotMiniSpectrum:"Mandelbrot mini spectrum",SierpinskiColour:"Sierpinski colour",SierpinskiIFS:"Sierpinski IFS",BarnsleyColour:"Barnsley colour",BarnsleyIFS:"Barnsley IFS",DragonColour:"Dragon colour",DragonIFS:"Dragon IFS",TreeIFS:"Tree IFS"},kn=[{index:1,title:"drawing and counting loops",examples:["DrawPause","SmileyFace","ThePlough","OlympicRings","ForLoop","TriangleSpin","Circles","NestedLoops","RandomLines","RandomEllipses","ColourSpiral"]},{index:2,title:"procedures and simple recursion",examples:["SimpleProc","ParameterProc","ResizableFace","Polygons","Stars","PolygonRings","Triangle1","Triangle2","Triangle3","Triangles","Factorials","Fibonaccis"]},{index:3,title:"further commands and structures",examples:["YouAreHere","CycleColours","Clock","DigitalClock","Flashlights","RefParams","Balls3D","StringFunctions","UserStringFunctions","MathFunctions","TrigGraphs"]},{index:4,title:"smooth movement and bouncing",examples:["MovingBall","BouncingBall","TurtleMove","TurtleBounce","BouncingFace","MultiBounce","BouncingTriangle","BouncingShapes","GravitySteps","SolarSystem"]},{index:5,title:"user input, interaction and games",examples:["AskInput","QuickClick","TypingTest","TypingTestKeys","IterationGame","SpongeThrow","Arcade","SnakeGame","NoughtsAndCrosses","SimpleDraw","PaintApp","MultipleTurtles"]},{index:6,title:"interdisciplinary models (CSAC project)",examples:["AimCannon","AutoCannon","Launch","Disease","GameOfLife","LifeArrays","Automata","BrownianMotion","Dendrites","Cheetahs","SexRatio","Flocking","Roads","Schelling","IteratedPD","Interference","TwoSlits","WaveSuperposer"]},{index:7,title:"self-similarity and chaos",examples:["RecursionFactory","RecursiveTree","KochSnowflake","SquareKoch","Sierpinski","SierpinskiDots","IFSBackground","IFSColour","IFSDemonstrator","Logistic","LogisticSpider","MandelbrotDemo","MandelbrotSpectrumDemo","Quine"]},{index:8,title:"logic and computer science",examples:["Syllogisms","TuringMachines","Sorting","SortingStrings","NimLearn","MultiNim","KnightsTour"]}];var Fn={Fibonaccis:{BASIC:t(3),Pascal:t(4)},MultiBounce:{BASIC:t(5),Pascal:t(6)},BouncingShapes:{BASIC:t(7),Pascal:t(8)},SolarSystem:{BASIC:t(9),Pascal:t(10)},TypingTest:{BASIC:t(11),Pascal:t(12)},TypingTestKeys:{BASIC:t(13),Pascal:t(14)},NoughtsAndCrosses:{BASIC:t(15),Pascal:t(16)},MultipleTurtles:{BASIC:t(17),Pascal:t(18)},LifeArrays:{BASIC:t(19),Pascal:t(20)},Automata:{BASIC:t(21),Pascal:t(22)},BrownianMotion:{BASIC:t(23),Pascal:t(24)},Cheetahs:{BASIC:t(25),Pascal:t(26)},SexRatio:{BASIC:t(27),Pascal:t(28)},Flocking:{BASIC:t(29),Pascal:t(30)},Roads:{BASIC:t(31),Pascal:t(32)},IteratedPD:{BASIC:t(33),Pascal:t(34)},Interference:{Pascal:t(35)},TwoSlits:{Pascal:t(36)},WaveSuperposer:{Pascal:t(37)},SierpinskiDots:{BASIC:t(38),Pascal:t(39)},IFSColour:{BASIC:t(40),Pascal:t(41)},IFSDemonstrator:{BASIC:t(42),Pascal:t(43)},MandelbrotSpectrumDemo:{BASIC:t(44),Pascal:t(45)},Quine:{Pascal:t(46)},Syllogisms:{Pascal:t(47)},TuringMachines:{Pascal:t(48)},Sorting:{Pascal:t(49)},NimLearn:{Pascal:t(50)},MultiNim:{Pascal:t(51)},KnightsTour:{Pascal:t(52)},Diffusion:{Pascal:t(53)},MandelbrotSpectrum:{Pascal:t(54)},MandelbrotMiniSpectrum:{Pascal:t(55)},SierpinskiColour:{Pascal:t(56)},SierpinskiIFS:{Pascal:t(57)},BarnsleyIFS:{Pascal:t(58)},BarnsleyColour:{Pascal:t(59)},TreeIFS:{Pascal:t(60)},DragonIFS:{Pascal:t(61)},DragonColour:{Pascal:t(62)}},Mn={BASIC:"tbas",Pascal:"tpas",Python:"tpy"},Bn=["BASIC","Pascal","Python"],Un=[{index:0,title:"Turtle: relative movement",expressions:sn.filter(n=>0===n.category)},{index:1,title:"Turtle: absolute movement",expressions:sn.filter(n=>1===n.category)},{index:2,title:"Turtle: drawing shapes",expressions:sn.filter(n=>2===n.category)},{index:3,title:"Other Turtle commands",expressions:sn.filter(n=>3===n.category)},{index:4,title:"Canvas operations",expressions:sn.filter(n=>4===n.category)},{index:5,title:"General arithmetic functions",expressions:sn.filter(n=>5===n.category)},{index:6,title:"Trig / exp / log functions",expressions:sn.filter(n=>6===n.category)},{index:7,title:"String operations",expressions:sn.filter(n=>7===n.category)},{index:8,title:"Type conversion routines",expressions:sn.filter(n=>8===n.category)},{index:9,title:"Input and timing routines",expressions:sn.filter(n=>9===n.category)},{index:10,title:"Turtle Machine monitoring",expressions:sn.filter(n=>10===n.category)}].concat({title:"Command structures",expressions:[{names:{BASIC:"IF",Pascal:"if",Python:"if"},level:0},{names:{BASIC:"ELSE",Pascal:"else",Python:"else"},level:0},{names:{BASIC:null,Pascal:null,Python:"elif"},level:0},{names:{BASIC:"FOR",Pascal:"for",Python:"for"},level:0},{names:{BASIC:"REPEAT",Pascal:"repeat",Python:null},level:1},{names:{BASIC:"WHILE",Pascal:"while",Python:"while"},level:1},{names:{BASIC:"DEF",Pascal:null,Python:"def"},level:1},{names:{BASIC:null,Pascal:"procedure",Python:null},level:1},{names:{BASIC:null,Pascal:"function",Python:null},level:2}]},{title:"Variable scope modifiers",expressions:[{names:{BASIC:"LOCAL",Pascal:null,Python:null},level:1},{names:{BASIC:"PRIVATE",Pascal:null,Python:null},level:2},{names:{BASIC:null,Pascal:null,Python:"global"},level:1},{names:{BASIC:null,Pascal:null,Python:"nonlocal"},level:2}]});const Hn=(n,e,t)=>{const o=t.name||t.names[n];return e.filter(n=>n.content===o).length>0},Xn=(n,e)=>` ${e.line.toString(10)}`,Gn=(n,e,t)=>{const o=t.name||t.names[n],r=e.filter(n=>n.content===o);return{name:o,level:t.level+1,count:r.length,lines:r.reduce(Xn,"").trim()}},Yn=(n,e)=>n+e.count,Wn=(n,e,t)=>{const o=t.expressions.filter(Hn.bind(null,n,e)).map(Gn.bind(null,n,e));return{title:t.title,expressions:o,total:o.reduce(Yn,0)}};var jn=t(0),zn=(n,e)=>{const t=vn(n,e),o=[],r=["BASIC","Pascal","Python"].indexOf(e);let a=0,i=1,s=0,l=[s];for(;a<t.length;){switch(t[a].type){case"linebreak":if(i+=1,"BASIC"===e||"Python"===e)for(o[o.length-1]&&"NEWLINE"!==o[o.length-1].type&&o.push({content:"NEWLINE",type:"NEWLINE",line:i-1});t[a+1]&&"linebreak"===t[a+1].type;)a+=1,i+=1;if("Python"===e)if(s=t[a+1]&&"spaces"===t[a+1].type?t[a+1].content.length:0,s>l[l.length-1])l.push(s),o.push({content:"INDENT",type:"INDENT",line:i});else{for(;s<l[l.length-1];)l.pop(),o.push({content:"INDENT",type:"DEDENT",line:i});if(s!==l[l.length-1])throw Object(jn.a)(`Inconsistent indentation at line ${i}.`)}break;case"spaces":case"comment":break;case"unterminated-comment":throw Object(jn.a)(Vn[0],$n(t[a],i,e));case"unterminated-string":throw Object(jn.a)(Vn[1],$n(t[a],i,e));case"bad-binary":throw Object(jn.a)(Vn[2+r],$n(t[a],i,e));case"bad-octal":throw Object(jn.a)(Vn[5+r],$n(t[a],i,e));case"bad-hexadecimal":throw Object(jn.a)(Vn[8+r],$n(t[a],i,e));case"bad-decimal":throw Object(jn.a)(Vn[11],$n(t[a],i,e));case"illegal":throw Object(jn.a)(Vn[12],$n(t[a],i,e));default:o.push($n(t[a],i,e))}a+=1}return o};const Vn=["Unterminated comment.","Unterminated string.","Binary numbers in Turtle BASIC begin with '%'.","Binary numbers in Turtle Pascal begin with '%'.","Binary numbers in Turtle Python begin with '0b'.","Turtle BASIC does not support octal numbers.","Octal numbers in Turtle Pascal begin with '&'","Octal numbers in Turtle Python begin with '0o'","Hexadecimal numbers in Turtle BASIC begin with '&'","Hexadecimal numbers in Turtle Pascal begin with '$'","Hexadecimal numbers in Turtle Python begin with '0x'","The Turtle System does not support real numbers.","Illegal character in this context."],$n=(n,e,t)=>({type:Kn(n.type,n.content),content:"Pascal"===t?n.content.toLowerCase():n.content,value:qn(n.type,n.content,t),line:e}),Kn=(n,e)=>{switch(n){case"binary":case"octal":case"hexadecimal":case"decimal":return"integer";case"command":case"colour":case"custom":case"variable":return"identifier";case"keyword":return"result"===e?"identifier":n;default:return n}},qn=(n,e,t)=>{switch(n){case"operator":switch(e.toLowerCase()){case"+":return"plus";case"-":return"subt";case"*":return"mult";case"/":return"divr";case"div":case"//":return"div";case"mod":case"%":return"mod";case"=":case"==":return"eqal";case"<>":case"!=":return"noeq";case"<=":return"lseq";case">=":return"mreq";case"<":return"less";case">":return"more";case"not":return"Python"===t?"bnot":"not";case"~":return"not";case"and":return"Python"===t?"band":"and";case"&":return"and";case"or":return"Python"===t?"bor":"or";case"|":return"or";case"xor":case"eor":case"^":return"xor";default:return null}case"string":switch(t){case"BASIC":return e.slice(1,-1).replace(/""/g,'"');case"Pascal":return"'"===e[0]?e.slice(1,-1).replace(/''/g,"'"):e.slice(1,-1).replace(/""/g,'"');case"Python":return e.slice(1,-1).replace(/\\('|")/g,"$1")}break;case"boolean":return"Python"===t?"true"===e.toLowerCase()?1:0:"true"===e.toLowerCase()?-1:0;case"binary":return"Python"===t?parseInt(e.slice(2),2):parseInt(e.slice(1),2);case"octal":return"Python"===t?parseInt(e.slice(2),8):parseInt(e.slice(1),8);case"hexadecimal":return"Python"===t?parseInt(e.slice(2),16):parseInt(e.slice(1),16);case"decimal":return parseInt(e);case"turtle":return["x","y","d","t","c"].indexOf(e[4].toLowerCase())+1;default:return null}};var Qn=(n,e,t)=>{if("null"!==n&&e!==n&&!("string"===n&&"char"===e||"char"===n&&"string"===e&&1===t.value.length||"boolint"===n&&("boolean"===e||"integer"===e)||"boolint"===e&&("boolean"===n||"integer"===n)))throw Object(jn.a)(`Type error: '${n}' expected but '${e}' found.`,t)},_n=[{names:{BASIC:"?KSHIFT",Pascal:"?kshift",Python:"?kshift"},value:-10},{names:{BASIC:"?KEY",Pascal:"?key",Python:"?key"},value:-9},{names:{BASIC:"?MOUSEY",Pascal:"?mousey",Python:"?mousey"},value:-8},{names:{BASIC:"?MOUSEX",Pascal:"?mousex",Python:"?mousex"},value:-7},{names:{BASIC:"?CLICKY",Pascal:"?clicky",Python:"?clicky"},value:-6},{names:{BASIC:"?CLICKX",Pascal:"?clickx",Python:"?clickx"},value:-5},{names:{BASIC:"?CLICK",Pascal:"?click",Python:"?click"},value:-4},{names:{BASIC:"?MMOUSE",Pascal:"?mmouse",Python:"?mmouse"},value:-3},{names:{BASIC:"?RMOUSE",Pascal:"?rmouse",Python:"?rmouse"},value:-2},{names:{BASIC:"?LMOUSE",Pascal:"?lmouse",Python:"?lmouse"},value:-1},{names:{BASIC:"\\KEYBUFFER",Pascal:"\\keybuffer",Python:"\\keybuffer"},value:0},{names:{BASIC:"\\BACKSPACE",Pascal:"\\backspace",Python:"\\backspace"},value:8},{names:{BASIC:"\\TAB",Pascal:"\\tab",Python:"\\tab"},value:9},{names:{BASIC:"\\ENTER",Pascal:"\\enter",Python:"\\enter"},value:13},{names:{BASIC:"\\RETURN",Pascal:"\\return",Python:"\\return"},value:13},{names:{BASIC:"\\SHIFT",Pascal:"\\shift",Python:"\\shift"},value:16},{names:{BASIC:"\\CTRL",Pascal:"\\ctrl",Python:"\\ctrl"},value:17},{names:{BASIC:"\\ALT",Pascal:"\\alt",Python:"\\alt"},value:18},{names:{BASIC:"\\PAUSE",Pascal:"\\pause",Python:"\\pause"},value:19},{names:{BASIC:"\\CAPSLOCK",Pascal:"\\capslock",Python:"\\capslock"},value:20},{names:{BASIC:"\\ESCAPE",Pascal:"\\escape",Python:"\\escape"},value:27},{names:{BASIC:"\\SPACE",Pascal:"\\space",Python:"\\space"},value:32},{names:{BASIC:"\\PGUP",Pascal:"\\pgup",Python:"\\pgup"},value:33},{names:{BASIC:"\\PGDN",Pascal:"\\pgdn",Python:"\\pgdn"},value:34},{names:{BASIC:"\\END",Pascal:"\\end",Python:"\\end"},value:35},{names:{BASIC:"\\HOME",Pascal:"\\home",Python:"\\home"},value:36},{names:{BASIC:"\\LEFT",Pascal:"\\left",Python:"\\left"},value:37},{names:{BASIC:"\\UP",Pascal:"\\up",Python:"\\up"},value:38},{names:{BASIC:"\\RIGHT",Pascal:"\\right",Python:"\\right"},value:39},{names:{BASIC:"\\DOWN",Pascal:"\\down",Python:"\\down"},value:40},{names:{BASIC:"\\INSERT",Pascal:"\\insert",Python:"\\insert"},value:45},{names:{BASIC:"\\DELETE",Pascal:"\\delete",Python:"\\delete"},value:46},{names:{BASIC:"\\0",Pascal:"\\0",Python:"\\0"},value:48},{names:{BASIC:"\\1",Pascal:"\\1",Python:"\\1"},value:49},{names:{BASIC:"\\2",Pascal:"\\2",Python:"\\2"},value:50},{names:{BASIC:"\\3",Pascal:"\\3",Python:"\\3"},value:51},{names:{BASIC:"\\4",Pascal:"\\4",Python:"\\4"},value:52},{names:{BASIC:"\\5",Pascal:"\\5",Python:"\\5"},value:53},{names:{BASIC:"\\6",Pascal:"\\6",Python:"\\6"},value:54},{names:{BASIC:"\\7",Pascal:"\\7",Python:"\\7"},value:55},{names:{BASIC:"\\8",Pascal:"\\8",Python:"\\8"},value:56},{names:{BASIC:"\\9",Pascal:"\\9",Python:"\\9"},value:57},{names:{BASIC:"\\A",Pascal:"\\a",Python:"\\a"},value:65},{names:{BASIC:"\\B",Pascal:"\\b",Python:"\\b"},value:66},{names:{BASIC:"\\C",Pascal:"\\c",Python:"\\c"},value:67},{names:{BASIC:"\\D",Pascal:"\\d",Python:"\\d"},value:68},{names:{BASIC:"\\E",Pascal:"\\e",Python:"\\e"},value:69},{names:{BASIC:"\\F",Pascal:"\\f",Python:"\\f"},value:70},{names:{BASIC:"\\G",Pascal:"\\g",Python:"\\g"},value:71},{names:{BASIC:"\\H",Pascal:"\\h",Python:"\\h"},value:72},{names:{BASIC:"\\I",Pascal:"\\i",Python:"\\i"},value:73},{names:{BASIC:"\\J",Pascal:"\\j",Python:"\\j"},value:74},{names:{BASIC:"\\K",Pascal:"\\k",Python:"\\k"},value:75},{names:{BASIC:"\\L",Pascal:"\\l",Python:"\\l"},value:76},{names:{BASIC:"\\M",Pascal:"\\m",Python:"\\m"},value:77},{names:{BASIC:"\\N",Pascal:"\\n",Python:"\\n"},value:78},{names:{BASIC:"\\O",Pascal:"\\o",Python:"\\o"},value:79},{names:{BASIC:"\\P",Pascal:"\\p",Python:"\\p"},value:80},{names:{BASIC:"\\Q",Pascal:"\\q",Python:"\\q"},value:81},{names:{BASIC:"\\R",Pascal:"\\r",Python:"\\r"},value:82},{names:{BASIC:"\\S",Pascal:"\\s",Python:"\\s"},value:83},{names:{BASIC:"\\T",Pascal:"\\t",Python:"\\t"},value:84},{names:{BASIC:"\\U",Pascal:"\\u",Python:"\\u"},value:85},{names:{BASIC:"\\V",Pascal:"\\v",Python:"\\v"},value:86},{names:{BASIC:"\\W",Pascal:"\\w",Python:"\\w"},value:87},{names:{BASIC:"\\X",Pascal:"\\x",Python:"\\x"},value:88},{names:{BASIC:"\\Y",Pascal:"\\y",Python:"\\y"},value:89},{names:{BASIC:"\\Z",Pascal:"\\z",Python:"\\z"},value:90},{names:{BASIC:"\\LWIN",Pascal:"\\lwin",Python:"\\lwin"},value:91},{names:{BASIC:"\\RWIN",Pascal:"\\rwin",Python:"\\rwin"},value:92},{names:{BASIC:"\\#0",Pascal:"\\#0",Python:"\\#0"},value:96},{names:{BASIC:"\\#1",Pascal:"\\#1",Python:"\\#1"},value:97},{names:{BASIC:"\\#2",Pascal:"\\#2",Python:"\\#2"},value:98},{names:{BASIC:"\\#3",Pascal:"\\#3",Python:"\\#3"},value:99},{names:{BASIC:"\\#4",Pascal:"\\#4",Python:"\\#4"},value:100},{names:{BASIC:"\\#5",Pascal:"\\#5",Python:"\\#5"},value:101},{names:{BASIC:"\\#6",Pascal:"\\#6",Python:"\\#6"},value:102},{names:{BASIC:"\\#7",Pascal:"\\#7",Python:"\\#7"},value:103},{names:{BASIC:"\\#8",Pascal:"\\#8",Python:"\\#8"},value:104},{names:{BASIC:"\\#9",Pascal:"\\#9",Python:"\\#9"},value:105},{names:{BASIC:"\\MULTIPLY",Pascal:"\\multiply",Python:"\\multiply"},value:106},{names:{BASIC:"\\ADD",Pascal:"\\add",Python:"\\add"},value:107},{names:{BASIC:"\\SUBTRACT",Pascal:"\\subtract",Python:"\\subtract"},value:109},{names:{BASIC:"\\DECIMAL",Pascal:"\\decimal",Python:"\\decimal"},value:110},{names:{BASIC:"\\DIVIDE",Pascal:"\\divide",Python:"\\divide"},value:111},{names:{BASIC:"\\F1",Pascal:"\\f1",Python:"\\f1"},value:112},{names:{BASIC:"\\F2",Pascal:"\\f2",Python:"\\f2"},value:113},{names:{BASIC:"\\F3",Pascal:"\\f3",Python:"\\f3"},value:114},{names:{BASIC:"\\F4",Pascal:"\\f4",Python:"\\f4"},value:115},{names:{BASIC:"\\F5",Pascal:"\\f5",Python:"\\f5"},value:116},{names:{BASIC:"\\F6",Pascal:"\\f6",Python:"\\f6"},value:117},{names:{BASIC:"\\F7",Pascal:"\\f7",Python:"\\f7"},value:118},{names:{BASIC:"\\F8",Pascal:"\\f8",Python:"\\f8"},value:119},{names:{BASIC:"\\F9",Pascal:"\\f9",Python:"\\f9"},value:120},{names:{BASIC:"\\F10",Pascal:"\\f10",Python:"\\f10"},value:121},{names:{BASIC:"\\F11",Pascal:"\\f11",Python:"\\f11"},value:122},{names:{BASIC:"\\F12",Pascal:"\\f12",Python:"\\f12"},value:123},{names:{BASIC:"\\NUMLOCK",Pascal:"\\numlock",Python:"\\numlock"},value:144},{names:{BASIC:"\\SCROLLLOCK",Pascal:"\\scrolllock",Python:"\\scrolllock"},value:145},{names:{BASIC:"\\SEMICOLON",Pascal:"\\semicolon",Python:"\\semicolon"},value:186},{names:{BASIC:"\\EQUALS",Pascal:"\\equals",Python:"\\equals"},value:187},{names:{BASIC:"\\COMMA",Pascal:"\\comma",Python:"\\comma"},value:188},{names:{BASIC:"\\DASH",Pascal:"\\dash",Python:"\\dash"},value:189},{names:{BASIC:"\\FULLSTOP",Pascal:"\\fullstop",Python:"\\fullstop"},value:190},{names:{BASIC:"\\FORWARDSLASH",Pascal:"\\forwardslash",Python:"\\forwardslash"},value:191},{names:{BASIC:"\\SINGLEQUOTE",Pascal:"\\singlequote",Python:"\\singlequote"},value:192},{names:{BASIC:"\\OPENBRACKET",Pascal:"\\openbracket",Python:"\\openbracket"},value:219},{names:{BASIC:"\\BACKSLASH",Pascal:"\\backslash",Python:"\\backslash"},value:220},{names:{BASIC:"\\CLOSEBRACKET",Pascal:"\\closebracket",Python:"\\closebracket"},value:221},{names:{BASIC:"\\HASH",Pascal:"\\hash",Python:"\\hash"},value:222},{names:{BASIC:"\\BACKTICK",Pascal:"\\backtick",Python:"\\backtick"},value:223}];const Zn=n=>n.parent?Zn(n.parent):n,Jn=(n,e,t)=>{const o=("BASIC"===t?["turtx%","turty%","turtd%","turta%","turtt%","turtc%"]:["turtx","turty","turtd","turta","turtt","turtc"]).indexOf(e)+1,r=n.index>0&&n.globals.indexOf(e)>-1;return o>0?{turtle:o,fulltype:{type:"integer"},routine:Zn(n)}:oe(r?Zn(n):n,"variables",e,t)},ne=(n,e,t)=>oe(n,"subroutines",e,t),ee=(n,e,t)=>ne(n,e,t)||((n,e)=>sn.find(te.bind(null,re(n),e)))(e,t),te=(n,e,t)=>(t.name||t.names[e])===n,oe=(n,e,t,o)=>n.parent?n[e].find(te.bind(null,t,o))||oe(n.parent,e,t,o):n[e].find(te.bind(null,t,o)),re=n=>n.replace(/gray/,"grey").replace(/GRAY/,"GREY").replace(/^COLOR$/,"COLOUR").replace(/^color$/,"colour"),ae=(n,e)=>{if(e[0]&&e[0][0]&&e[0][0]===an.iclr){const e=n.length-1,t=n[e]?n[e].length-1:0;n[e]&&n[e][t]&&n[e][t]===an.inpt&&n[e].pop()}return n.slice(0,-1).concat([n[n.length-1].concat(e[0])]).concat(e.slice(1))},ie=(n,e,t,o=!1)=>{const r=ae(n,e.pcode),a=ae(r,o?[[an[t],an.abs]]:[[an[t]]]);return Object.assign(e,{pcode:a})},se=(n,e)=>"string"===n?[an.lstr,e.length].concat(Array.from(e).map(n=>n.charCodeAt(0))):[an.ldin,e],le=n=>n.turtle?[an.ldvg,n.routine.turtleAddress+n.turtle]:0===n.routine.index?[an.ldvg,n.routine.turtleAddress+6+n.index]:n.byref?[an.ldvr,n.routine.index+9,n.index]:[an.ldvv,n.routine.index+9,n.index],ce=n=>n.turtle?[an.ldin,0,an.lptr,an.ldin,n.turtle,an.plus]:0===n.routine.index?[an.ldag,n.routine.turtleAddress+6+n.index]:[an.ldav,n.routine.index+9,n.index],de=(n,e=!1)=>{if(n.turtle)return[an.ldin,0,an.lptr,an.ldin,n.turtle,an.plus,an.sptr];if(0===n.routine.index){const e=n.routine.turtleAddress+6+n.index;return"string"===n.fulltype.type?[an.ldvg,e,an.cstr]:[an.stvg,e]}return"string"===n.fulltype.type?[an.ldvv,n.routine.index+9,n.index,an.cstr,an.hclr]:n.byref&&!e?[an.stvr,n.routine.index+9,n.index]:[an.stvv,n.routine.index+9,n.index]},ue=n=>{switch(n){case"subt":return[an.neg];case"not":return[an.not];case"bnot":return[an.ldin,0,an.eqal]}},pe=(n,e,t)=>{const o=Zn(e);switch(n.code){case an.newt:return[an.ldin,0,an.sptr];case an.oldt:return[an.ldin,o.turtleAddress,an.ldin,0,an.sptr];case an.incr:case an.decr:return[an.dupl,an.lptr,n.code,an.swap,an.sptr];case an.rndc:return[an.rand,an.incr,an.rgb,an.colr];case an.rand:switch(t){case"BASIC":return[an.rand,an.incr];case"Pascal":return[an.rand];case"Python":return[an.swap,an.dupl,an.rota,an.incr,an.swap,an.subt,an.rand,an.plus]}break;case an.texl:return[an.text,an.newl];case an.uppc:return[an.ldin,1,an.case];case an.lowc:return[an.ldin,-1,an.case];case an.lefs:return[an.ldin,1,an.swap,an.copy];case an.rgts:return[an.swap,an.dupl,an.slen,an.incr,an.rota,an.subt,an.mxin,an.copy];case an.inss:switch(t){case"BASIC":case"Python":return[an.rota,an.rota,an.inss];case"Pascal":return[an.inss]}break;case an.poss:switch(t){case"BASIC":case"Python":return[an.swap,an.poss];case"Pascal":return[an.poss]}break;case an.svd0:return[an.ldin,0,an.sval];case an.bool:return[an.abs];case an.ilin:return[an.text,an.newl,an.rdln];case an.bufr:return[an.bufr,an.ldin,1,an.sptr,an.hfix];case void 0:return[an.subr,n.startLine||`SUBR${n.index}`];default:return[n.code]}},me=(n,e,t,o=[])=>{const r=o.length>0?2:1,a=ae(e,[[an.ifno,t.length+n+r]]),i=[[an.jump,t.length+o.length+n+r]];return o.length>0?a.concat(t).concat(i).concat(o):a.concat(t)},ge=(n,e,t,o,r,a,i)=>{const s=i.length+n+4,l=[t,de(e).concat(o),le(e).concat([an[r],an.ifno,s])],c=[le(e).concat([an[a],an.jump,n+1])];return l.concat(i).concat(c)},ye=(n,e,t)=>{const o=ae(e,[[an.ifno,n]]);return t.concat(o)},he=(n,e,t)=>{const o=ae(e,[[an.ifno,t.length+n+2]]),r=[[an.jump,n]];return o.concat(t).concat(r)},xe=(n,e)=>{const t=be(n),o=we(n);return t.concat(e).concat(o)},be=n=>{const e=[[an.pssr,n.index]],t=e.concat(Re(n));return n.variables.length>0&&n.parameters.length>0?t.concat([Oe(n)]):n.variables.length>0?t:e},Ee=n=>n.variables.filter(n=>"string"===n.fulltype.type),fe=n=>{const e=n.routine.turtleAddress+6+n.index;return[an.ldag,e+2,an.stvg,e,an.ldin,n.fulltype.length-1,an.stvg,e+1]},Te=n=>{const e=n.routine.index+9,t=n.index;return[an.ldav,e,t+2,an.stvv,e,t,an.ldin,n.fulltype.length-1,an.stvv,e,t+1]},Re=n=>{const e=[[an.memc,n.index+9,n.memoryNeeded],[an.ldav,n.index+9,1,an.ldin,n.memoryNeeded,an.zptr]];return Ee(n).length>0?e.concat(Ee(n).map(Te)):e},Oe=n=>{let e=[],t=n.parameters.length;for(;t>0;)t-=1,e=e.concat(de(n.parameters[t],!0));return e},we=n=>{const e=n.index+9,t=Zn(n).resultAddress,o=[an.ldvg,e,an.stvg,t],r=[an.memr,e],a=[an.plsr,an.retn];return n.variables.length>0&&"function"===n.type?[o,r.concat(a)]:n.variables.length>0?[r.concat(a)]:[a]},Ne=[an.home,an.ldin,2,an.thik,an.ldin,360,an.angl,an.ldin,32,an.bufr,an.ldin,1,an.sptr,an.hfix,an.ldin,0,an.dupl,an.ldin,1e3,an.dupl,an.dupl,an.dupl,an.reso,an.canv],Ie=n=>{const e=[(t=n.turtleAddress,o=n.memoryNeeded,[an.ldin,t,an.dupl,an.dupl,an.ldin,0,an.sptr,an.ldin,6,an.swap,an.sptr,an.incr,an.ldin,o+6,an.zptr,an.ldin,t+o+6,an.stmt]),Ne];var t,o;return Ee(n).length>0?e.concat(Ee(n).map(fe)):e},Se=(n,e,t,o)=>{const r=((n,e)=>_n.find(te.bind(null,n,e)))(n[e].content,o);if(r)return Qn(t,"integer",n[e]),{type:"integer",lex:e+1,pcode:[(a=r,a.value<0?se("integer",a.value).concat(an.inpt):se("integer",a.value))]};var a},ve=(n,e,t,o)=>{const{lexemes:r}=n,a=((n,e,t)=>oe(n,"constants",e,t))(n,r[e].content,o);if(a)return Qn(t,a.type,r[e]),{type:a.type,lex:e+1,pcode:[se(a.type,a.value)]}},Pe=(n,e,t,o)=>{const{lexemes:r}=n,a=((n,e)=>on.a.find(te.bind(null,re(n),e)))(r[e].content,o);if(a)return Qn(t,"integer",r[e]),{type:"integer",lex:e+1,pcode:[se("integer",a.value)]}},Ce=(n,e,t,o,r)=>{const a=["eqal","less","lseq","more","mreq","noeq"];"boolean"===o&&(o="null");let i=ke(n,e,t,o,r);for(;n.lexemes[i.lex]&&a.indexOf(n.lexemes[i.lex].value)>-1;){let e=De(n.lexemes[i.lex].value,i.type),t=ke(n,i.lex+1,i.type,o,r),a="Python"===r;i=ie(i.pcode,t,e,a)}return Object.assign(i,{type:"boolean"})},Ae=(n,e,t,o)=>{const r=Jn(n,e,o);if(!r)throw Object(jn.a)(`Variable "${e}" is not defined.`,n.lexemes[t]);if(!n.lexemes[t])throw Object(jn.a)(`Variable "${e}" must be assigned a value.`,n.lexemes[t-1]);const a=Ce(n,t,"null",r.fulltype.type,o);return{lex:a.lex,pcode:ae(a.pcode,[de(r)])}},Le=(n,e,t,o=!0)=>{const r=ee(n,n.lexemes[e].content,t);if(!r)throw Object(jn.a)('Command "{lex}" not found.',n.lexemes[e]);if(o&&r.returns)throw Object(jn.a)("{lex} is a function, not a procedure.",n.lexemes[e]);return 0===r.parameters.length?Xe(n,e,r,t):Ge(n,e,r,t)},De=(n,e)=>"string"===e||"char"===e?["seql","sles","sleq","smor","smeq","sneq","scat"][["eqal","less","lseq","more","mreq","noeq","plus"].indexOf(n)]:n,ke=(n,e,t,o,r)=>{const a=["plus","subt","or","bor","xor"];let i=Fe(n,e,t,o,r);for(;n.lexemes[i.lex]&&a.indexOf(n.lexemes[i.lex].value)>-1;){let e=De(n.lexemes[i.lex].value,i.type),t=Fe(n,i.lex+1,i.type,o,r),a="Python"===r&&"bor"===e;i=ie(i.pcode,t,e,a)}return i},Fe=(n,e,t,o,r)=>{const a=["and","band","div","divr","mod","mult"];let i=Me(n,e,t,o,r);for(;n.lexemes[i.lex]&&a.indexOf(n.lexemes[i.lex].value)>-1;){let e=De(n.lexemes[i.lex].value,i.type),t=Me(n,i.lex+1,i.type,o,r),a="Python"===r&&"band"===e;i=ie(i.pcode,t,e,a)}return i},Me=(n,e,t,o,r)=>{switch(n.lexemes[e].type){case"operator":return Be(n,e,o,r)||(()=>{throw Object(jn.a)("{lex} makes no sense here.",n.lexemes[e])})();case"boolean":case"char":case"integer":case"string":return((n,e,t)=>{const{type:o,value:r}=n[e];return Qn(t,o,n[e]),"char"===o&&"string"===t?{type:o,lex:e+1,pcode:[se(o,r),ue("ctos")]}:{type:o,lex:e+1,pcode:[se(o,r)]}})(n.lexemes,e,o);case"keycode":case"query":return Se(n.lexemes,e,o,r)||(()=>{throw Object(jn.a)("{lex} is not a valid input code.",n.lexemes[e])})();case"turtle":case"identifier":return ve(n,e,o,r)||((n,e,t,o)=>{const{lexemes:r}=n,a=Jn(n,r[e].content,o);if(a){if(r[e+1]&&"["===r[e+1].content)throw Object(jn.a)("The Turtle System E does not yet support arrays. This feature will be added soon. In the meantime, please use the Turtle System D to compile this program.",r[e]);return Qn(t,a.fulltype.type,r[e]),{type:a.fulltype.type,lex:e+1,pcode:[le(a)]}}})(n,e,o,r)||Pe(n,e,o,r)||Ue(n,e,o,r)||(()=>{throw Object(jn.a)("{lex} is not defined.",n.lexemes[e])})();default:return He(n,e,t,o,r)||(()=>{throw Object(jn.a)("{lex} makes no sense here.",n.lexemes[e])})()}},Be=(n,e,t,o)=>{if(["subt","not","bnot"].indexOf(n.lexemes[e].value)>-1){const r="subt"===n.lexemes[e].value?"integer":"boolint",a=n.lexemes[e].value;Qn(t,"integer",n.lexemes[e]);const i=Me(n,e+1,r,t,o);return Object.assign(i,{pcode:ae(i.pcode,[ue(a)])})}return null},Ue=(n,e,t,o)=>{const r=ee(n,n.lexemes[e].content,o);if(r){if(!r.returns)throw Object(jn.a)("{lex} is a procedure, not a function.",n.lexemes[e]);Qn(t,r.returns,n.lexemes[e]);const a=Le(n,e,o,!1);return void 0===r.code&&a.pcode.push((n=>"string"===n.returns?[an.ldvv,Zn(n).resultAddress,1,an.ldin,0,an.case]:[an.ldvv,Zn(n).resultAddress,1])(r)),Object.assign(a,{type:r.returns})}return null},He=(n,e,t,o,r)=>{if("("===n.lexemes[e].content){const a=Ce(n,e+1,t,o,r);if(n.lexemes[a.lex]&&")"===n.lexemes[a.lex].content)return Object.assign(a,{lex:a.lex+1});throw Object(jn.a)("Closing bracket missing.",n.lexemes[e-1])}return null},Xe=(n,e,t,o)=>{if("Python"===o){if(!n.lexemes[e+1]||"("!==n.lexemes[e+1].content)throw Object(jn.a)("Opening bracket missing after command {lex}.",n.lexemes[e]);if(!n.lexemes[e+2]||"NEWLINE"===n.lexemes[e+2].type)throw Object(jn.a)("Closing bracket missing after command call.",n.lexemes[e]);if(")"!==n.lexemes[e+2].content)throw Object(jn.a)("Command {lex} takes no arguments.",n.lexemes[e]);return{lex:e+3,pcode:[pe(t,n,o)]}}if(n.lexemes[e+1]&&"("===n.lexemes[e+1].content)throw Object(jn.a)("Command {lex} takes no arguments.",n.lexemes[e]);return{lex:e+1,pcode:[pe(t,n,o)]}},Ge=(n,e,t,o)=>{if(!n.lexemes[e+1]||"("!==n.lexemes[e+1].content)throw Object(jn.a)("Opening bracket missing after command {lex}.",n.lexemes[e]);const r=Ye(n,e+2,t,o),a=[pe(t,n,o)];return Object.assign(r,{pcode:ae(r.pcode,a)})},Ye=(n,e,t,o)=>{const r=t.name||t.names[o],a=t.parameters.length;let i=0,s=[[]];for(;i<a&&")"!==n.lexemes[e].content;){let l=We(n,e,t,i,o);if(i+=1,e=l.lex,s=ae(s,l.pcode),i<a){if(!n.lexemes[e])throw Object(jn.a)("Comma needed after parameter.",n.lexemes[e-1]);if(")"===n.lexemes[e].content)throw Object(jn.a)(`Not enough arguments given for command "${r}".`,n.lexemes[e]);if("identifier"===n.lexemes[e].type||"turtle"===n.lexemes[e].type)throw Object(jn.a)("Comma missing between parameters.",n.lexemes[e]);if(","!==n.lexemes[e].content)throw Object(jn.a)("Comma needed after parameter.",n.lexemes[e]);e+=1}}if(i<a)throw Object(jn.a)(`Not enough arguments given for command "${r}".`,n.lexemes[e]);if(","===n.lexemes[e].content)throw Object(jn.a)(`Too many arguments given for command "${r}".`,n.lexemes[e]);if(")"!==n.lexemes[e].content)throw Object(jn.a)(`Closing bracket missing after command "${r}".`,n.lexemes[e-1]);return{lex:e+1,pcode:s}},We=(n,e,t,o,r)=>{if(t.parameters[o].byref){let t=Jn(n,n.lexemes[e].content,r);if(!t)throw Object(jn.a)("{lex} is not defined.}",n.lexemes[e]);return{lex:e+1,pcode:[ce(t)]}}const a=t.parameters[o].type||t.parameters[o].fulltype.type;return Ce(n,e,"null",a,r)},je=(n,e)=>({language:e,name:n,index:0,indent:0,constants:[],variables:[],subroutines:[],lexemes:[],memoryNeeded:null,turtleAddress:null,resultAddress:null}),ze=(n,e,t)=>({name:n,type:e,returns:null,level:-1,index:null,indent:null,globals:[],nonlocals:[],constants:[],parameters:[],variables:[],parent:t,subroutines:[],lexemes:[],memoryNeeded:null,startLine:null}),Ve=(n,e,t)=>({name:n,type:e,value:t}),$e=(n,e,t=!1)=>({name:n.content,lexeme:n,routine:e,byref:t,index:null,fulltype:null,private:null}),Ke=(n,e=null,t=null,o=null)=>"string"===n?{type:n,length:(e||32)+1,start:t,fulltype:o}:{type:n,length:e,start:t,fulltype:o};var qe=t(2);const Qe=(n,e,t)=>ze(n,e,t),_e=(n,e,t)=>{const[o,r,a]=n.slice(e,e+3);if(!o)throw Object(jn.a)('"CONST" must be followed by an identifier.',n[e-1]);if("turtle"===o.type)throw Object(jn.a)("{lex} is the name of a Turtle property, and cannot be used as a constant name.",n[e]);if("identifier"!==o.type)throw Object(jn.a)("{lex} is not a valid constant name.",n[e]);if(Zn(t).constants.some(n=>n.name===o.content))throw Object(jn.a)("Duplicate constant name {lex}.",n[e]);if(!r)throw Object(jn.a)("Constant must be assigned a value.",o);if("="!==r.content||!a)throw Object(jn.a)("Constant must be assigned a value.",r);const i="$"===o.content.slice(-1)?"string":"boolint",s=[];for(e+=1;n[e+1]&&"NEWLINE"!==n[e+1].type;)s.push(n[e+1]),e+=1;let l=Object(qe.a)(o,s,t);switch(typeof l){case"number":if("string"===i)throw Object(jn.a)("String constant cannot be assigned an integer value.",o);break;case"string":if("boolint"===i)throw Object(jn.a)("Integer constant cannot be assigned a string value.",o)}return{lex:e,constant:Ve(o.content,i,l)}},Ze=(n,e,t=!1)=>$e(n,e,t);var Je=n=>{const e=[];let t=0,o={},r={},a={},i=!0,s=!1,l=!1,c=!1,d="start";for(o=je("!","BASIC"),e.push(o);t<n.length;)switch(d){case"start":if("DEF"===n[t].content)throw Object(jn.a)('Subroutines must be defined after program "END".',n[t]);"CONST"===n[t].content?(t+=1,d="const"):"DIM"===n[t].content?(t+=1,d="dim"):d="prog";break;case"const":if(o.variables.length>0)throw Object(jn.a)("Constants must be defined before any DIM statements.",n[t]);if(a=_e(n,t,o),o.constants.push(a.constant),t=nt(n,a.lex),!n[t])throw Object(jn.a)("No program text found after constant definition.",n[t-1]);d="start";break;case"dim":throw Object(jn.a)("The Turtle System E does not yet support arrays. This feature will be added soon. In the meantime, please use the Turtle System D to compile your program.",n[t]);case"prog":if("DIM"===n[t].content)throw Object(jn.a)('"DIM" commands must occur at the top of the program.',n[t]);if("PRIVATE"===n[t].content)throw Object(jn.a)("Private variables cannot be defined in the main program.",n[t]);if("LOCAL"===n[t].content)throw Object(jn.a)("Local variables cannot be defined in the main program.",n[t]);if("DEF"===n[t].content)throw Object(jn.a)('Subroutines must be defined after program "END".',n[t]);"END"===n[t].content?(i=!1,t=nt(n,t),d="end"):("identifier"===n[t].type&&n[t+1]&&"="===n[t+1].content&&(et(e[0],n[t].content)||(r=Ze(n[t],e[0],!1),r.fulltype=tt(n[t].content),e[0].variables.push(r))),e[0].lexemes.push(n[t]),t+=1);break;case"end":if(n[t]){if("DEF"!==n[t].content){if(0===o.index)throw Object(jn.a)('No program text can appear after program "END" (except subroutine definitions).',n[t]);throw Object(jn.a)('No program text can appear after subroutine "END" (except further subroutine definitions).',n[t])}t+=1,d="def"}break;case"def":if(!n[t])throw Object(jn.a)('"DEF" must be followed by a valid procedure or function name. (Procedure names must begin with "PROC", and function names must begin with "FN".)',n[t-1]);if(!ot(n[t].content))throw Object(jn.a)('"DEF" must be followed by a valid procedure or function name. (Procedure names must begin with "PROC", and function names must begin with "FN".)',n[t]);if(o=Qe(n[t].content,ot(n[t].content),e[0]),o.index=e.length,e.push(o),e[0].subroutines.push(o),"procedure"===o.type?s=!0:(l=!0,r=Ze({content:"!result"},o),r.fulltype=tt(n[t].content),o.variables.push(r),o.returns=r.fulltype.type),!n[t+1])throw Object(jn.a)("No statements found after subroutine declaration.",n[t]);"("===n[t+1].content?(t+=2,d="parameters"):(t=nt(n,t),d="crossroads");break;case"parameters":if(n[t]&&"RETURN"===n[t].content?(c=!0,t+=1):c=!1,!n[t])throw Object(jn.a)("Parameter name expected.",n[t-1]);if("turtle"===n[t].type)throw Object(jn.a)("{lex} is the name of a Turtle property, and cannot be used as a parameter name.",n[t]);if("identifier"!==n[t].type)throw Object(jn.a)("{lex} is not a valid parameter name.",n[t]);if(et(o,n[t].content))throw Object(jn.a)("{lex} is already a parameter for this subroutine.",n[t]);if(r=Ze(n[t],o,c),r.fulltype=tt(n[t].content),o.parameters.push(r),o.variables.push(r),t+=1,!n[t])throw Object(jn.a)("Closing bracket needed after parameters.",n[t-1]);if("identifier"===n[t].type)throw Object(jn.a)("Comma needed after parameter.",n[t]);if(")"===n[t].content){if(!n[t+1])throw Object(jn.a)("Subroutine definition must be followed by some commands.",n[t-1]);t=nt(n,t),d="crossroads"}else{if(","!==n[t].content)throw Object(jn.a)("Closing bracket needed after parameters.",n[t]);t+=1}break;case"crossroads":if(!n[t])throw Object(jn.a)("Subroutine definition must be followed by some commands.",n[t-1]);switch(n[t].content){case"DIM":throw Object(jn.a)('"DIM" statements can only occur within the main program.',n[t]);case"PRIVATE":t+=1,d="private";break;case"LOCAL":t+=1,d="local";break;default:d="subroutine"}break;case"private":case"local":if(!n[t])throw Object(jn.a)("Variable name expected.",n[t-1]);if("turtle"===n[t].type)throw Object(jn.a)("{lex} is the name of a Turtle property, and cannot be used as a variable name.",n[t]);if("identifier"!==n[t].type)throw Object(jn.a)("{lex} is not a valid variable name.",n[t]);if(et(o,n[t].content))throw Object(jn.a)("{lex} is already a variable in the current scope.",n[t]);if("private"===d?(r=Ze(n[t],e[0]),r.fulltype=tt(n[t].content),r.private=o,e[0].variables.push(r)):(r=Ze(n[t],o),r.fulltype=tt(n[t].content),o.variables.push(r)),n[t+1]&&","===n[t+1].content)t+=2;else{if(!n[t+1]){if("procedure"===o.type)throw Object(jn.a)('Procedure must finish with "ENDPROC".',n[t]);throw Object(jn.a)('Function must finish with "=expression".',n[t])}t=nt(n,t),d="crossroads"}break;case"subroutine":if("DIM"===n[t].content)throw Object(jn.a)('"DIM" commands can only occur within the main program. To declare a local or private array, use "LOCAL" or "PRIVATE" instead.',n[t]);if("PRIVATE"===n[t].content)throw Object(jn.a)("Private variables must be declared at the start of the subroutine.",n[t]);if("LOCAL"===n[t].content)throw Object(jn.a)("Local variables must be declared at the start of the subroutine.",n[t]);if("DEF"===n[t].content)throw Object(jn.a)('The next subroutine must be defined after subroutine "ENDPROC".',n[t]);if("identifier"===n[t].type&&n[t+1]&&"="===n[t+1].content&&(et(e[0],n[t].content)||et(o,n[t].content)||(r=Ze(n[t],e[0]),r.fulltype=tt(n[t].content),e[0].variables.push(r))),"ENDPROC"===n[t].content){if("procedure"!==o.type)throw Object(jn.a)('Function must end with "=&lt;expression&gt;", not "ENDPROC".',n[t]);t=nt(n,t),s=!1,d="end"}else if("="===n[t].content&&"NEWLINE"===n[t-1].type){if("function"!==o.type)throw Object(jn.a)('Procedure must end with "ENDPROC", not "=&lt;expression&gt;".',n[t]);o.lexemes.push(n[t]),t+=1,d="result"}else o.lexemes.push(n[t]),t+=1;break;case"result":if(!n[t])throw Object(jn.a)("Function return value must be specified.",n[t-1]);for(;n[t]&&"NEWLINE"!==n[t].type;)o.lexemes.push(n[t]),t+=1;t=nt(n,t-1),l=!1,d="end"}if(i)throw Object(jn.a)('Program must finish with "END".',n[t-1]);if(s)throw Object(jn.a)('Procedure must finish with "ENDPROC".',n[t-1]);if(l)throw Object(jn.a)('Function must finish with "=expression".',n[t-1]);return e};const nt=(n,e)=>{if(n[e+1]&&"NEWLINE"!==n[e+1].type)throw Object(jn.a)("Statement must be on a new line.",n[e+1]);return e+2},et=(n,e)=>(n.constants?n.constants.concat(n.variables):n.variables).some(n=>(n.name||n.names.basic)===e),tt=n=>{const e="$"===n.slice(-1)?"string":"boolint";return((n,e=null,t=null,o=null)=>Ke(n,e,t,o))(e,"boolint"===e?0:34)},ot=n=>"PROC"===n.slice(0,4)?"procedure":"FN"===n.slice(0,2)&&"function",rt=(n,e)=>{const[t,o]=n.slice(e,e+2);if(!t)throw Object(jn.a)('Program must start with keyword "PROGRAM".');if("program"!==t.content)throw Object(jn.a)('Program must start with keyword "PROGRAM".',t);if(!o)throw Object(jn.a)('"PROGRAM" must be followed by a legal program name.',t);if("turtle"===o.type)throw Object(jn.a)("Program cannot be given the name of a Turtle attribute.",o);if("identifier"!==o.type)throw Object(jn.a)("{lex} is not a valid program name.",o);return{lex:e+2,program:je(o.content,"Pascal")}},at=(n,e,t)=>{const[o,r,a]=n.slice(e,e+3);if(!o)throw Object(jn.a)("No constant name found.",n[e-1]);if("turtle"===o.type)throw Object(jn.a)("{lex} is the name of a predefined Turtle property, and cannot be used as a constant name.",o);if("identifier"!==o.type)throw Object(jn.a)("{lex} is not a valid constant name.",o);if(o.content===Zn(t).name)throw Object(jn.a)("Constant name {lex} is already the name of the program.",o);if(Zn(t).constants.some(n=>n.name===o.content))throw Object(jn.a)("{lex} is already the name of a constant.",o);if(!r)throw Object(jn.a)("Constant must be assigned a value.",o);if("="!==r.content||!a)throw Object(jn.a)("Constant must be assigned a value.",r);const i=[];for(e+=2;n[e]&&";"!==n[e].content;)i.push(n[e]),e+=1;let s=Object(qe.a)(o,i,t),l="number"==typeof s?"integer":"string";return{lex:e,constant:Ve(o.content,l,s)}},it=(n,e,t,o=!1,r=!1)=>{const a=[];let i=!0;for(;i;){if(!n[e])throw Object(jn.a)("No variable name found.",n[e-1]);if("turtle"===n[e].type)throw Object(jn.a)("{lex} is the name of a predefined Turtle property, and cannot be used as a variable name.",n[e]);if("identifier"!==n[e].type)throw Object(jn.a)("{lex} is not a valid variable name.",n[e]);if(n[e].content===Zn(t).name)throw Object(jn.a)("Variable name {lex} is already the name of the program.",n[e]);if(Zn(t).constants.some(t=>t.name===n[e].content))throw Object(jn.a)("Variable name {lex} is already the name of a constant.",n[e]);if(t.variables.some(t=>t.name===n[e].content))throw Object(jn.a)("Duplicate variable name {lex}.",n[e]);if(a.push($e(n[e],t,r)),!n[e+1])throw Object(jn.a)("Variable name must be followed by a colon, then the variable type (array, boolean, char, integer, or string).",n[e]);if(","===n[e+1].content)e+=2;else{if(":"!==n[e+1].content)throw"identifier"===n[e+1].type?Object(jn.a)("Comma missing between variable declarations.",n[e+1]):Object(jn.a)("Variable name must be followed by a colon, then the variable type (array, boolean, char, integer, or string).",n[e+1]);e+=2,i=!1}}let s=st(n,e,t,o,r);return a.forEach(n=>{n.fulltype=s.fulltype}),{lex:s.lex,variables:a}},st=(n,e,t,o,r)=>{const a=n[e];if(!n[e])throw Object(jn.a)("Variable name must be followed by a colon, then the variable type (array, boolean, char, integer, or string).",n[e-1]);switch(a.content){case"boolean":case"integer":case"char":return{lex:e+1,fulltype:Ke(a.content)};case"string":if(n[e+1]&&"["===n[e+1].content){const[t,o]=n.slice(e+2,e+4);if(!t)throw Object(jn.a)("Opening bracket must be followed by an integer value.",n[e+1]);if("integer"!==t.type)throw Object(jn.a)("String size must be an integer.",t);if(!o)throw Object(jn.a)('String size must be followed by a closing square bracket "]".',t);if("]"!==o.content)throw Object(jn.a)('String size must be followed by a closing square bracket "]".',o);return{lex:e+4,fulltype:Ke("string",t.value)}}return{lex:e+1,fulltype:Ke("string")};case"array":throw Object(jn.a)("The Turtle System E does not yet support arrays. This feature will be added soon. In the meantime, please use the Turtle System D to compile your program.",n[e]);default:throw Object(jn.a)('{lex} is not a valid variable type (expected "array", "boolean", "char", "integer", or "string").',a)}},lt=(n,e,t,o)=>{const r=n[e];let a,i;if(!r)throw Object(jn.a)("No subroutine name found.",n[e-1]);if("turtle"===r.type)throw Object(jn.a)("{lex} is the name of a predefined Turtle property, and cannot be used as a subroutine name.",r);if("identifier"!==r.type)throw Object(jn.a)("{lex} is not a valid subroutine name.",r);if(r.content===Zn(o).name)throw Object(jn.a)("Subroutine name {lex} is already the name of the program.",r);if(ne(o,r.content,"Pascal"))throw Object(jn.a)("{lex} is already the name of a subroutine in the current scope.",r);if(a=ze(r.content,t,o),"function"===t&&a.variables.push($e({content:"result"},a,!1)),n[e+=1]&&("("===n[e].content&&(i=ct(n,e+1,a),a.parameters=i.parameters,a.variables=a.variables.concat(i.parameters),e=i.lex),"function"===t)){if(!n[e])throw Object(jn.a)("Function must be followed by a colon, the the return type (integer, boolean, char, or string).",n[e-1]);if(":"!==n[e].content)throw Object(jn.a)("Function must be followed by a colon, the the return type (integer, boolean, char, or string).",n[e]);if(i=st(n,e+1,a),"array"===i.fulltype.type)throw Object(jn.a)("Functions cannot return arrays.",n[i.lex]);a.variables[0].fulltype=i.fulltype,a.returns=i.fulltype.type,e=i.lex}return{lex:e,subroutine:a}},ct=(n,e,t)=>{let o,r=[],a=!0;for(;a;)switch(o=n[e]&&"var"===n[e].content?it(n,e+1,t,!0,!0):it(n,e,t,!0,!1),r=r.concat(o.variables),n[e=o.lex].content){case";":for(;";"===n[e].content;)e+=1;break;case")":e+=1,a=!1;break;default:throw Object(jn.a)('Parameter declarations must be followed by a closing bracket ")".',n[e])}return{lex:e,parameters:r}};var dt=n=>{const e=[],t=[];let o,r,a,i=0,s=0,l="program";for(;i<n.length;)switch(l){case"program":o=rt(n,i),i=ut(n,o.lex,!0),r=o.program,e.push(r),t.push(r),l="crossroads";break;case"crossroads":if(!n[i])throw Object(jn.a)('Expected "BEGIN", constant/variable definitions, or subroutine definitions.',n[i-1]);switch(n[i].content){case"const":if(r.variables.length>0)throw Object(jn.a)("Constants must be defined before any variables.",n[i]);if(r.subroutines.length>0)throw Object(jn.a)("Constants must be defined before any subroutines.",n[i]);i+=1,l="constant";break;case"var":if(r.subroutines.length>0)throw Object(jn.a)("Variables must be defined before any subroutines.",n[i]);i+=1,l="variables";break;case"function":case"procedure":l=n[i].content,i+=1;break;case"begin":i=ut(n,i+1,!1),l="begin";break;default:throw Object(jn.a)('Expected "BEGIN", constant/variable definitions, or subroutine definitions.',n[i])}break;case"constant":if(o=at(n,i,r),r.constants.push(o.constant),i=ut(n,o.lex,!0),!n[i])throw Object(jn.a)("No program text found after constant definition.",n[i-1]);"identifier"!==n[i].type&&(l="crossroads");break;case"variables":if(o=it(n,i,r),r.variables=r.variables.concat(o.variables),i=ut(n,o.lex,!0),!n[i])throw Object(jn.a)("No text found after variable declarations.",n[i-1]);"identifier"!==n[i].type&&(l="crossroads");break;case"procedure":case"function":a=t[t.length-1],o=lt(n,i,l,a),i=ut(n,o.lex,!0),r=o.subroutine,a.subroutines.push(r),t.push(r),l="crossroads";break;case"begin":let c=1;for(;c>0&&n[i];)"begin"===n[i].content&&(c+=1),"end"===n[i].content&&(c-=1),r.lexemes.push(n[i]),i+=1;if(c>0)throw Object(jn.a)('Routine commands must finish with "END".',n[i]);r.lexemes.pop(),l="end";break;case"end":if(0===r.index){if(!n[i])throw Object(jn.a)('Program "END" must be followed by a full stop.',n[i-1]);if("."!==n[i].content)throw Object(jn.a)('Program "END" must be followed by a full stop.',n[i]);if(n[i+1])throw Object(jn.a)('No text can appear after program "END".',n[i+1]);i+=1}else i=ut(n,i,!0),s+=1,r.index=s,e.push(t.pop()),r=t[t.length-1],l="crossroads"}return e};const ut=(n,e,t=!1)=>{if(t){if(!n[e])throw Object(jn.a)("Semicolon needed after statement.",n[e-1]);if(";"!==n[e].content)throw Object(jn.a)("Semicolon needed after statement.",n[e-1])}for(;n[e]&&";"===n[e].content;)e+=1;return e},pt=(n,e,t)=>{if(!n[e])throw Object(jn.a)('"def" must be followed by an identifier.',n[e-1]);if("turtle"===n[e].type)throw Object(jn.a)("Subroutine cannot be given the name of a Turtle attribute.",n[e]);if("identifier"!==n[e].type)throw Object(jn.a)("{lex} is not a valid subroutine name.",n[e]);if(ne(t,n[e].content,"Python"))throw Object(jn.a)("{lex} is already the name of a subroutine in the current scope.",n[e]);const o=ze(n[e].content,"procedure",t);if(!n[e+1])throw Object(jn.a)("Subroutine name must be followed by brackets.",n[e]);if("("!==n[e+1].content)throw Object(jn.a)('Subroutine name must be followed by brackets "()".',n[e+1]);const r=yt(n,e+2,o);if(e=r.lex,o.parameters=o.parameters.concat(r.parameters),o.variables=o.variables.concat(r.parameters),!n[e])throw Object(jn.a)('Subroutine parameters must be followed by a closing bracket ")".',n[e-1]);if(")"!==n[e].content)throw Object(jn.a)('Subroutine parameters must be followed by a closing bracket ")".',n[e]);if(n[e+=1]&&"->"===n[e].content){if(o.type="function",!n[e+=1])throw Object(jn.a)('Function arrow "->" must be followed by a return type specification.',n[e-1]);const t=$e({content:"return"},o);t.fulltype=ht(n[e]),o.returns=t.fulltype.type,o.variables.unshift(t),e+=1}if(!n[e])throw Object(jn.a)('Subroutine declaration must be followed by a colon ":".',n[e-1]);if(":"!==n[e].content)throw Object(jn.a)('Subroutine declaration must be followed by a colon ":".',n[e]);return{lex:e+1,subroutine:o}},mt=(n,e)=>$e(n,e),gt=(n,e,t)=>{if("turtle"===n[e].type)throw Object(jn.a)("{lex} is the name of a Turtle variable, and cannot be used as a custom variable name.",n[e]);if("identifier"!==n[e].type)throw Object(jn.a)("{lex} is not a valid variable name.",n[e]);if(xt(t,n[e].content))throw Object(jn.a)("{lex} is already the name of a variable in the current scope.",n[e]);const o=$e(n[e],t);if(!n[e+=1])throw Object(jn.a)('Variable must be followed by a colon ":" and a type specification.',n[e-1]);if(":"!==n[e].content)throw Object(jn.a)('Variable must be followed by a colon ":" and a type specification.',n[e]);if(!n[e+=1])throw Object(jn.a)('Variable must be given a type specification ("bool", "int", or "str").',n[e-1]);return o.fulltype=ht(n[e]),{lex:e+=1,variable:o}},yt=(n,e,t)=>{const o=[];for(;n[e]&&")"!==n[e].content;){let r=gt(n,e,t);if(o.push(r.variable),!n[e=r.lex])throw Object(jn.a)('Parameter list must be followed by a closing bracket ")".',n[e-1]);if("NEWLINE"===n[e].type)throw Object(jn.a)("Parameters must all be on one line.",n[e]);if("identifier"===n[e].type||"turtle"===n[e].type)throw Object(jn.a)("Parameters must be separated by commas.",n[e]);if(","===n[e].content){if(!n[e+=1])throw Object(jn.a)("Expected parameter name after comma.",n[e-1]);if("NEWLINE"===n[e].type)throw Object(jn.a)("Parameters must all be on one line.",n[e])}}return{lex:e,parameters:o}},ht=n=>{switch(n.content){case"bool":return Ke("boolean");case"int":return Ke("integer");case"str":return Ke("string");default:throw Object(jn.a)('{lex} is not a valid type specification (expected "bool", "int", or "str")',n)}},xt=(n,e)=>n.variables.some(n=>n.name===e);var bt=n=>{const e=[],t=[];let o,r,a=0,i="crossroads";for(o=je("!","Python"),e.push(o),t.push(o);a<n.length;)switch(i){case"crossroads":if("identifier"===n[a].type||"turtle"===n[a].type)i="identifier";else if("DEDENT"===n[a].type){o.lexemes.filter(n=>"INDENT"===n.type).length===o.lexemes.filter(n=>"DEDENT"===n.type).length?i="end":o.lexemes.push(n[a]),a+=1}else"def"===n[a].content?i="def":"global"===n[a].content?i="global":"nonlocal"===n[a].content?i="nonlocal":(o.lexemes.push(n[a]),a+=1);break;case"identifier":if(Et(n[a+1],"content",":")&&Et(n[a+2],"type","identifier"))for(r=gt(n,a,o),o.variables.push(r.variable);a<r.lex;)o.lexemes.push(n[a]),a+=1;else Et(n[a+1],"content","in")?("identifier"===n[a].type&&(ft(n[a].content,o)||(r=mt(n[a],o),r.fulltype=Ke("integer"),o.variables.push(r))),o.lexemes.push(n[a]),a+=1):(o.lexemes.push(n[a]),a+=1);i="crossroads";break;case"def":if(r=pt(n,a+1,o),o.subroutines.push(r.subroutine),t.push(r.subroutine),o=r.subroutine,a=r.lex,!n[a])throw Object(jn.a)("No statements found after subroutine definition.",n[a-1]);if("NEWLINE"!==n[a].type)throw Object(jn.a)("Subroutine definition must be followed by a line break.",n[a]);if(a+=1,!n[a])throw Object(jn.a)("No statements found after subroutine definition.",n[a-1]);if("INDENT"!==n[a].type)throw Object(jn.a)("Indent needed after subroutine definition.",n[a]);a+=1,i="crossroads";break;case"global":case"nonlocal":const s="global"===i?o.globals:o.nonlocals;if(0===o.index)throw Object(jn.a)("Main program cannot include any global/nonlocal statements.",n[a]);if(a+=1,"NEWLINE"===n[a].type)throw Object(jn.a)("Global/nonlocal statements must be on one line.",n[a-1]);for(;n[a]&&"NEWLINE"!==n[a].type;){if("turtle"!==n[a].type&&"identifier"!==n[a].type)throw Object(jn.a)("{lex} is not a valid variable name.",n[a]);s.push(n[a].content),a+=1,","===n[a].content&&(a+=1)}"NEWLINE"===n[a].type&&(a+=1),i="crossroads";break;case"end":o.index=e.length,e.push(t.pop()),"NEWLINE"===o.lexemes[o.lexemes.length-1].type&&o.lexemes.pop(),o=t[t.length-1],i="crossroads"}return e};const Et=(n,e,t)=>n&&n[e]===t,ft=(n,e)=>e.globals&&e.globals.includes(n)||e.nonlocals&&e.nonlocals.includes(n)||e.variables.some(e=>e.name===n);const Tt=n=>{let e=0;n.variables.forEach(n=>{e+=1,n.index=e,n.fulltype&&null!==n.fulltype.length&&(e+=n.fulltype.length)}),n.memoryNeeded=e},Rt=10,Ot=n=>n.some(n=>"function"===n.type)?n.length+1:n.length,wt=(n,e,t,o=!1)=>{let r;switch(n.lexemes[e].type){case"turtle":case"identifier":if(n.lexemes[e+1]&&"="===n.lexemes[e+1].content){if(Zn(n).constants.some(t=>t.name===n.lexemes[e].content))throw Object(jn.a)("Constant {lex} cannot be assigned a new value.",n.lexemes[e]);r=Ae(n,n.lexemes[e].content,e+2,"BASIC");break}r=Le(n,e,"BASIC");break;default:switch(n.lexemes[e].content){case"IF":r=It(n,e+1,t);break;case"FOR":r=St(n,e+1,t);break;case"REPEAT":r=vt(n,e+1,t);break;case"WHILE":r=Pt(n,e+1,t);break;case"=":r=Ae(n,"!result",e+1,"BASIC");break;default:throw Object(jn.a)("Statement cannot begin with {lex}.",n.lexemes[e])}}if(!o&&n.lexemes[r.lex]){if(":"!==n.lexemes[r.lex].content&&"NEWLINE"!==n.lexemes[r.lex].type)throw Object(jn.a)("Statements must be separated by a colon or placed on different lines.",n.lexemes[r.lex]);r.lex+=1}return r};var Nt=wt;const It=(n,e,t)=>{let o,r,a,i,s;if(!n.lexemes[e])throw Object(jn.a)('"IF" must be followed by a boolean expression.',n.lexemes[e-1]);if(s=Ce(n,e,"null","boolean","BASIC"),e=s.lex,o=s.pcode,!n.lexemes[e])throw Object(jn.a)('"IF ..." must be followed by "THEN".',n.lexemes[e-1]);if("THEN"!==n.lexemes[e].content)throw Object(jn.a)('"IF ..." must be followed by "THEN".',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "IF ... THEN".',n.lexemes[e]);if("NEWLINE"===n.lexemes[e].type?(s=Ct(n,e+1,t+1,"IF"),i=!1):(i=!0,s=wt(n,e,t+1,i)),e=s.lex,r=s.pcode,n.lexemes[e]&&"ELSE"===n.lexemes[e].content){if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "ELSE".',n.lexemes[e]);if(i){if("NEWLINE"===n.lexemes[e].type)throw Object(jn.a)('Statement following "ELSE" cannot be on a new line.',n.lexemes[e+1]);s=wt(n,e,t+r.length+2,i)}else{if("NEWLINE"!==n.lexemes[e].type)throw Object(jn.a)('Statement following "ELSE" must be on a new line.',n.lexemes[e]);s=Ct(n,e+1,t+r.length+2,"ELSE")}e=s.lex,a=s.pcode}return{lex:e,pcode:me(t,o,r,a)}},St=(n,e,t)=>{let o,r,a,i,s,l,c;if(!n.lexemes[e])throw Object(jn.a)('"FOR" must be followed by an integer variable.',n.lexemes[e-1]);if("turtle"===n.lexemes[e].type)throw Object(jn.a)('Turtle attribute cannot be used as a "FOR" variable.',n.lexemes[e]);if("identifier"!==n.lexemes[e].type)throw Object(jn.a)('"FOR" must be followed by an integer variable.',n.lexemes[e]);if(o=Jn(n,n.lexemes[e].content),!o)throw Object(jn.a)("Variable {lex} not defined.",n.lexemes[e]);if("integer"!==o.fulltype.type&&"boolint"!==o.fulltype.type)throw Object(jn.a)("{lex} is not an integer variable.",n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"FOR" loop variable must be assigned an initial value.',n.lexemes[e-1]);if("="!==n.lexemes[e].content)throw Object(jn.a)('"FOR" loop variable must be assigned an initial value.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"FOR" loop variable must be assigned an initial value.',n.lexemes[e-1]);if(c=Ce(n,e,"null","integer","BASIC"),e=c.lex,r=c.pcode[0],!n.lexemes[e])throw Object(jn.a)("forToDownTo",n.lexemes[e-1]);if("TO"!==n.lexemes[e].content)throw Object(jn.a)('"FOR" loop initialisation must be followed by "TO".',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"TO" must be followed by an integer (or integer constant).',n.lexemes[e-1]);if(c=Ce(n,e,"null","integer","BASIC"),e=c.lex,a=c.pcode[0],n.lexemes[e]&&"STEP"===n.lexemes[e].content){if(e+=1,!n.lexemes[e])throw Object(jn.a)('"STEP" instruction must be of the form "STEP -1".',n.lexemes[e-1]);if("-"!==n.lexemes[e].content)throw Object(jn.a)('"STEP" instruction must be of the form "STEP -1".',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"STEP" instruction must be of the form "STEP -1".',n.lexemes[e-1]);if(1!==n.lexemes[e].value)throw Object(jn.a)('"STEP" instruction must be of the form "STEP -1".',n.lexemes[e]);e+=1,i="lseq",s="decr"}else i="mreq",s="incr";if(!n.lexemes[e])throw Object(jn.a)('No statements found after "FOR" loop initialisation.',n.lexemes[e]);return c="NEWLINE"===n.lexemes[e].type?Ct(n,e+1,t+3,"FOR"):wt(n,e,t+3),e=c.lex,l=c.pcode,{lex:e,pcode:ge(t,o,r,a,i,s,l)}},vt=(n,e,t)=>{let o,r,a;if(!n.lexemes[e])throw Object(jn.a)('No statements found after "REPEAT".',n.lexemes[e]);if(a="NEWLINE"===n.lexemes[e].type?Ct(n,e+1,t,"REPEAT"):wt(n,e,t),e=a.lex,r=a.pcode,!n.lexemes[e])throw Object(jn.a)('"UNTIL" must be followed by a boolean expression.',n.lexemes[e-1]);return a=Ce(n,e,"null","boolean","BASIC"),e=a.lex,o=a.pcode,{lex:e,pcode:ye(t,o,r)}},Pt=(n,e,t)=>{let o,r,a;if(!n.lexemes[e])throw Object(jn.a)('"WHILE" must be followed by a boolean expression.',n.lexemes[e-1]);if(a=Ce(n,e,"null","boolean","BASIC"),e=a.lex,o=a.pcode,!n.lexemes[e])throw Object(jn.a)('No commands found after "WHILE ... DO".',n.lexemes[e]);return a="NEWLINE"===n.lexemes[e].type?Ct(n,e+1,t+1,"WHILE"):wt(n,e,t+1),e=a.lex,r=a.pcode,{lex:e,pcode:he(t,o,r)}},Ct=(n,e,t,o)=>{let r,a=[],i=!1;if(!n.lexemes[e])throw Object(jn.a)(`No commands found after "${o}".`,n.lexemes[e-1]);for(;!i&&e<n.lexemes.length;)i=At(o,n.lexemes[e]),i?"ELSE"!==n.lexemes[e].content&&(e+=1):(r=wt(n,e,t+a.length),a=a.concat(r.pcode),e=r.lex);if(!i)throw Object(jn.a)(`Unterminated "${o}" statement.`,n.lexemes[e-1]);return{lex:e,pcode:a}},At=(n,e)=>{switch(e.content){case"ELSE":if("IF"!==n)throw Object(jn.a)('"ELSE" does not have any matching "IF".',e);return!0;case"ENDIF":if("IF"!==n&&"ELSE"!==n)throw Object(jn.a)('"ENDIF" does not have any matching "IF".',e);return!0;case"NEXT":if("FOR"!==n)throw Object(jn.a)('"NEXT" does not have any matching "FOR".',e);return!0;case"UNTIL":if("REPEAT"!==n)throw Object(jn.a)('"UNTIL" does not have any matching "REPEAT".',e);return!0;case"ENDWHILE":if("WHILE"!==n)throw Object(jn.a)('"ENDWHILE" does not have any matching "WHILE".',e);return!0;default:return!1}},Lt=(n,e,t)=>{const o=["begin","do",".","repeat",";","then"],r=["else","end",";","until"];let a;switch(n.lexemes[e].type){case"turtle":case"identifier":if(n.lexemes[e+1]&&"["===n.lexemes[e+1].content)throw Object(jn.a)("The Turtle System E does not yet support arrays. This feature will be added soon. In the meantime, please use the Turtle System D to compile this program.",n.lexemes[e]);if(n.lexemes[e+1]&&"="===n.lexemes[e+1].content)throw Object(jn.a)('Variable assignment in Pascal uses ":=", not "=".',n.lexemes[e+1]);if(n.lexemes[e+1]&&":="===n.lexemes[e+1].content){a=Ae(n,n.lexemes[e].content,e+2,"Pascal");break}a=Le(n,e,"Pascal");break;case"keyword":switch(n.lexemes[e].content){case"if":a=kt(n,e+1,t);break;case"for":a=Ft(n,e+1,t);break;case"repeat":a=Mt(n,e+1,t);break;case"while":a=Bt(n,e+1,t);break;default:throw Object(jn.a)("Command cannot begin with {lex}.",n.lexemes[e])}break;default:throw Object(jn.a)("Command cannot begin with {lex}.",n.lexemes[e])}if(n.lexemes[a.lex])if(";"!==n.lexemes[a.lex].content){if(-1===o.indexOf(n.lexemes[a.lex-1].content)&&-1===r.indexOf(n.lexemes[a.lex].content))throw Object(jn.a)("Semicolon needed after command.",n.lexemes[a.lex])}else for(;n.lexemes[a.lex]&&";"===n.lexemes[a.lex].content;)a.lex+=1;return a};var Dt=Lt;const kt=(n,e,t)=>{let o,r,a,i;if(!n.lexemes[e])throw Object(jn.a)('"IF" must be followed by a boolean expression.',n.lexemes[e-1]);if(i=Ce(n,e,"null","boolean","Pascal"),e=i.lex,o=i.pcode,!n.lexemes[e])throw Object(jn.a)('"IF ..." must be followed by "THEN".',n.lexemes[e-1]);if("then"!==n.lexemes[e].content)throw Object(jn.a)('"IF ..." must be followed by "THEN".',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No commands found after "IF".',n.lexemes[e]);if(i="begin"===n.lexemes[e].content?Ut(n,e+1,t+1,"begin"):Lt(n,e,t+1),e=i.lex,r=i.pcode,n.lexemes[e]&&"else"===n.lexemes[e].content){if(e+=1,!n.lexemes[e])throw Object(jn.a)('No commands found after "ELSE".',n.lexemes[e]);i="begin"===n.lexemes[e].content?Ut(n,e+1,t+r.length+2,"begin"):Lt(n,e,t+r.length+2),e=i.lex,a=i.pcode}return{lex:e,pcode:me(t,o,r,a)}},Ft=(n,e,t)=>{let o,r,a,i,s,l,c;if(!n.lexemes[e])throw Object(jn.a)('"FOR" must be followed by an integer variable.',n.lexemes[e-1]);if("turtle"===n.lexemes[e].type)throw Object(jn.a)('Turtle attribute cannot be used as a "FOR" variable.',n.lexemes[e]);if("identifier"!==n.lexemes[e].type)throw Object(jn.a)('"FOR" must be followed by an integer variable.',n.lexemes[e]);if(o=Jn(n,n.lexemes[e].content),!o)throw Object(jn.a)("Variable {lex} has not been declared.",n.lexemes[e]);if("integer"!==o.fulltype.type)throw Object(jn.a)("{lex} is not an integer variable.",n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"FOR" loop variable must be assigned an initial value.',n.lexemes[e-1]);if("="===n.lexemes[e].content)throw Object(jn.a)('Assignment operator is ":=", not "=".',n.lexemes[e]);if(":="!==n.lexemes[e].content)throw Object(jn.a)('"FOR" loop variable must be assigned an initial value.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"FOR" loop variable must be assigned an initial value.',n.lexemes[e-1]);if(c=Ce(n,e,"null","integer","Pascal"),e=c.lex,r=c.pcode[0],!n.lexemes[e])throw Object(jn.a)('"FOR ... := ..." must be followed by "TO" or "DOWNTO".',n.lexemes[e-1]);switch(n.lexemes[e].content){case"to":i="mreq",s="incr";break;case"downto":i="lseq",s="decr";break;default:throw Object(jn.a)('"FOR ... := ..." must be followed by "TO" or "DOWNTO".',n.lexemes[e])}if(e+=1,!n.lexemes[e])throw Object(jn.a)('"TO" or "DOWNTO" must be followed by an integer (or integer constant).',n.lexemes[e-1]);if(c=Ce(n,e,"null","integer","Pascal"),e=c.lex,a=c.pcode[0],!n.lexemes[e])throw Object(jn.a)('"FOR" loop range must be followed by "DO".',n.lexemes[e-1]);if("do"!==n.lexemes[e].content)throw Object(jn.a)('"FOR" loop range must be followed by "DO".',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No commands found after "FOR" loop initialisation.',n.lexemes[e-1]);return c="begin"===n.lexemes[e].content?Ut(n,e+1,t+3,"begin"):Lt(n,e,t+3),e=c.lex,l=c.pcode,{lex:e,pcode:ge(t,o,r,a,i,s,l)}},Mt=(n,e,t)=>{let o,r,a;if(a=Ut(n,e,t,"repeat"),e=a.lex,r=a.pcode,!n.lexemes[e])throw Object(jn.a)('"UNTIL" must be followed by a boolean expression.',n.lexemes[e-1]);return a=Ce(n,e,"null","boolean","Pascal"),e=a.lex,o=a.pcode,{lex:e,pcode:ye(t,o,r)}},Bt=(n,e,t)=>{let o,r,a;if(!n.lexemes[e])throw Object(jn.a)('"WHILE" must be followed by a boolean expression.',n.lexemes[e-1]);if(a=Ce(n,e,"null","boolean","Pascal"),e=a.lex,o=a.pcode,!n.lexemes[e])throw Object(jn.a)('"WHILE ..." must be followed by "DO".',n.lexemes[e-1]);if("do"!==n.lexemes[e].content)throw Object(jn.a)('"WHILE ..." must be followed by "DO".',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No commands found after "WHILE" loop initialisation.',n.lexemes[e]);return a="begin"===n.lexemes[e].content?Ut(n,e+1,t+1,"begin"):Lt(n,e,t+1),e=a.lex,r=a.pcode,{lex:e,pcode:he(t,o,r)}},Ut=(n,e,t,o)=>{let r,a=[],i=!1;if(!n.lexemes[e])throw Object(jn.a)('No commands found after "BEGIN".',n.lexemes[e-1]);for(;!i&&e<n.lexemes.length;)i=Ht(o,n.lexemes[e]),i?e+=1:(r=Lt(n,e,t+a.length),a=a.concat(r.pcode),e=r.lex);if(!i)throw Object(jn.a)('"BEGIN" does not have any matching "END".',n.lexemes[e-1]);return{lex:e,pcode:a}},Ht=(n,e)=>{switch(e.content){case"end":if("begin"!==n)throw Object(jn.a)('"END" does not have any matching "BEGIN".',e);return!0;case"until":if("repeat"!==n)throw Object(jn.a)('"UNTIL" does not have any matching "REPEAT".',e);return!0;default:return!1}},Xt=(n,e,t)=>{let o;switch(n.lexemes[e].type){case"turtle":case"identifier":if(n.lexemes[e+1]&&[":","=","=="].includes(n.lexemes[e+1].content)){let t=n.lexemes[e].content;if(e+=1,":"===n.lexemes[e].content&&(o={lex:e+2,pcode:[]},e=o.lex),"=="===n.lexemes[e].content)throw Object(jn.a)('Variable assignment in Python uses "=", not "==".',n.lexemes[e]);"="===n.lexemes[e].content&&(o=Ae(n,t,e+1,"Python"),e=o.lex)}else o=Le(n,e,"Python");if(n.lexemes[o.lex])if(";"===n.lexemes[o.lex].content)o.lex+=1,"NEWLINE"===n.lexemes[o.lex].type&&(o.lex+=1);else{if("NEWLINE"!==n.lexemes[o.lex].type)throw Object(jn.a)("Statement must be separated by a semicolon or placed on a new line.",n.lexemes[o.lex]);o.lex+=1}break;default:switch(n.lexemes[e].content){case"return":o=Ae(n,"return",e+1,"Python");break;case"if":o=Yt(n,e+1,t);break;case"else":throw Object(jn.a)('Statement cannot begin with "else". If you have an "if" above, this line may need to be indented more.',n.lexemes[e]);case"for":o=Wt(n,e+1,t);break;case"while":o=jt(n,e+1,t);break;case"pass":o=zt(n,e+1);break;default:throw Object(jn.a)("Statement cannot begin with {lex}.",n.lexemes[e])}}return o};var Gt=Xt;const Yt=(n,e,t)=>{let o,r,a,i;if(!n.lexemes[e])throw Object(jn.a)('"if" must be followed by a Boolean expression.',n.lexemes[e-1]);if(i=Ce(n,e,"null","boolean","Python"),e=i.lex,o=i.pcode,!n.lexemes[e])throw Object(jn.a)('"if <expression>" must be followed by a colon.',n.lexemes[e-1]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "if <expression>:".',n.lexemes[e-1]);if("NEWLINE"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "if <expression>:" must be on a new line.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "if <expression>:".',n.lexemes[e-1]);if("INDENT"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "if <expression>:" must be indented.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "if <expression>:".',n.lexemes[e-1]);if(i=Vt(n,e,t+1),e=i.lex,r=i.pcode,n.lexemes[e]&&"else"===n.lexemes[e].content){if(e+=1,!n.lexemes[e])throw Object(jn.a)('"else" must be followed by a colon.',n.lexemes[e-1]);if(":"!==n.lexemes[e].content)throw Object(jn.a)('"else" must be followed by a colon.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "else:".',n.lexemes[e-1]);if("NEWLINE"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "else:" must be on a new line.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "else:".',n.lexemes[e-1]);if("INDENT"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "else:" must be indented.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "else:".',n.lexemes[e-1]);i=Vt(n,e,t+r.length+2),e=i.lex,a=i.pcode}return{lex:e,pcode:me(t,o,r,a)}},Wt=(n,e,t)=>{let o,r,a,i,s,l,c;if(!n.lexemes[e])throw Object(jn.a)('"for" must be followed by an integer variable.',n.lexemes[e-1]);if("turtle"!==n.lexemes[e].type&&"identifier"!==n.lexemes[e].type)throw Object(jn.a)("{lex} is not a valid variable name.",n.lexemes[e]);if(o=Jn(n,n.lexemes[e].content,"Python"),!o)throw Object(jn.a)("Variable {lex} could not be found.",n.lexemes[e]);if("integer"!==o.fulltype.type)throw Object(jn.a)("Loop variable must be an integer.",n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"for <variable>" must be followed by "in".',n.lexemes[e-1]);if("in"!==n.lexemes[e].content)throw Object(jn.a)('"for <variable>" must be followed by "in".',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"for <variable> in" must be followed by a range specification.',n.lexemes[e-1]);if("range"!==n.lexemes[e].content)throw Object(jn.a)('"for <variable> in" must be followed by a range specification.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"range" must be followed by an opening bracket.',n.lexemes[e-1]);if("("!==n.lexemes[e].content)throw Object(jn.a)('"range" must be followed by an opening bracket.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('Missing first argument to the "range" function.',n.lexemes[e-1]);if(c=Ce(n,e,"null","integer","Python"),e=c.lex,r=c.pcode[0],!n.lexemes[e])throw Object(jn.a)("Argument must be followed by a comma.",n.lexemes[e-1]);if(")"===n.lexemes[e].content)throw Object(jn.a)('Too few arguments for "range" function.',n.lexemes[e]);if(","!==n.lexemes[e].content)throw Object(jn.a)("Argument must be followed by a comma.",n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('Too few arguments for "range" function.',n.lexemes[e-1]);if(c=Ce(n,e,"null","integer","Python"),e=c.lex,a=c.pcode[0],!n.lexemes[e])throw Object(jn.a)("Argument must be followed by a comma.",n.lexemes[e-1]);if(")"===n.lexemes[e].content)throw Object(jn.a)('Too few arguments for "range" function.',n.lexemes[e]);if(","!==n.lexemes[e].content)throw Object(jn.a)("Argument must be followed by a comma.",n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('Too few arguments for "range" function.',n.lexemes[e-1]);if("integer"===n.lexemes[e].type){if(1!==n.lexemes[e].value)throw Object(jn.a)('Step value for "range" function must be 1 or -1.',n.lexemes[e]);i="more",s="incr"}else{if("-"!==n.lexemes[e].content)throw Object(jn.a)('Step value for "range" function must be 1 or -1.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('Step value for "range" function must be 1 or -1.',n.lexemes[e-1]);if("integer"!==n.lexemes[e].type)throw Object(jn.a)('Step value for "range" function must be 1 or -1.',n.lexemes[e]);if(1!==n.lexemes[e].value)throw Object(jn.a)('Step value for "range" function must be 1 or -1.',n.lexemes[e]);i="less",s="decr"}if(e+=1,!n.lexemes[e])throw Object(jn.a)('Closing bracket needed after "range" function arguments.',n.lexemes[e-1]);if(","===n.lexemes[e].content)throw Object(jn.a)('Too many arguments for "range" function.',n.lexemes[e]);if(")"!==n.lexemes[e].content)throw Object(jn.a)('Closing bracket needed after "range" function arguments.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('"for <variable> in range(...)" must be followed by a colon.',n.lexemes[e-1]);if(":"!==n.lexemes[e].content)throw Object(jn.a)('"for <variable> in range(...)" must be followed by a colon.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "for <variable> in range(...):".',n.lexemes[e-1]);if("NEWLINE"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "for <variable> in range(...):" must be on a new line.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "for <variable> in range(...):".',n.lexemes[e-1]);if("INDENT"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "for <variable> in range(...):" must be indented.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "for <variable> in range(...):',n.lexemes[e-1]);return c=Vt(n,e,t+3),e=c.lex,l=c.pcode,{lex:e,pcode:ge(t,o,r,a,i,s,l)}},jt=(n,e,t)=>{let o,r,a;if(!n.lexemes[e])throw Object(jn.a)('"while" must be followed by a Boolean expression.',n.lexemes[e-1]);if(a=Ce(n,e,"null","boolean","Python"),e=a.lex,o=a.pcode,!n.lexemes[e])throw Object(jn.a)('"while <expression>" must be followed by a colon.',n.lexemes[e-1]);if(":"!==n.lexemes[e].content)throw Object(jn.a)('"while <expression>" must be followed by a colon.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "while <expression>:".',n.lexemes[e-1]);if("NEWLINE"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "while <expression>:" must be on a new line.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "while <expression>:".',n.lexemes[e-1]);if("INDENT"!==n.lexemes[e].type)throw Object(jn.a)('Statements following "while <expression>:" must be indented.',n.lexemes[e]);if(e+=1,!n.lexemes[e])throw Object(jn.a)('No statements found after "while <expression>:".',n.lexemes[e-1]);return a=Vt(n,e,t+1,n.lexemes[e].offset),e=a.lex,r=a.pcode,{lex:e,pcode:he(t,o,r)}},zt=(n,e)=>{if(n.lexemes[e]&&"NEWLINE"!==n.lexemes[e].type)throw Object(jn.a)("Statement must be on a new line.",n.lexemes[e]);return{lex:e+1,pcode:[]}},Vt=(n,e,t)=>{let o,r=[];for(;n.lexemes[e]&&"DEDENT"!==n.lexemes[e].type;)o=Xt(n,e,t+r.length),r=r.concat(o.pcode),e=o.lex;return n.lexemes[e]&&(e+=1),{lex:e,pcode:r}};var $t=(n,e)=>{const t=n[0],o=n.slice(1),r=Kt(t,o)+1,a=qt(n,r,e),i=r+a.length,s=Qt(t,i,e);return((n,e,t)=>{const o=Ie(n),r=[[an.jump,o.length+e.length+2]],a=[[an.halt]];return e.length>1?o.concat(r).concat(e).concat(t).concat(a):o.concat(t).concat(a)})(n[0],a,s).map(_t.bind(null,n))};const Kt=(n,e)=>e.length>0?Ie(n).length+1:Ie(n).length,qt=(n,e,t)=>{let o=[],r=1;for(;r<n.length;){n[r].startLine=e;const a=be(n[r]).length;let i=Qt(n[r],e+a,t),s=xe(n[r],i);o=o.concat(s),r+=1,e+=s.length}return o},Qt=(n,e,t)=>{const o={BASIC:Nt,Pascal:Dt,Python:Gt};let r=[],a=0;for(;a<n.lexemes.length;){let i=o[t].call(null,n,a,e+r.length);r=r.concat(i.pcode),a=i.lex}return r},_t=(n,e)=>e.map(e=>"string"==typeof e?Zt(n,e):e),Zt=(n,e)=>{const t=e.match(/SUBR(\d+)/);if(t){const e=parseInt(t[1]);return n.find(n=>n.index===e).startLine}};var Jt=(n,e)=>{const t=zn(n,e);console.log(t);const o=((n,e)=>{const t={BASIC:Je,Pascal:dt,Python:bt};if(0===n.length)throw Object(jn.a)("Program does not contain any lexemes.");const o=t[e](n),r=o[0],a=o.slice(1);return o.forEach(Tt),r.turtleAddress=Rt+Ot(a),r.resultAddress=Rt+a.length,o})(t,e);console.log(o);const r=$t(o,e);return console.log(r),{lexemes:t,pcode:r,usage:((n,e,t)=>Un.concat({title:"Subroutine calls",expressions:e}).map(Wn.bind(null,t,n)).filter(n=>n.expressions.length>0))(t,o.slice(1),e)}},no=[{index:0,name:"None",css:"none"},{index:1,name:"Default",css:"default"},{index:2,name:"Pointer",css:"pointer"},{index:3,name:"Crosshair",css:"crosshair"},{index:4,name:"Text",css:"text"},{index:5,name:"Move",css:"move"},{index:6,name:"Resize NESW",css:"nesw-resize"},{index:7,name:"Resize NS",css:"ns-resize"},{index:8,name:"Resize NWSE",css:"nwse-resize"},{index:9,name:"Resize EW",css:"ew-resize"},{index:10,name:"Resize N",css:"n-resize"},{index:11,name:"Wait",css:"wait"},{index:12,name:"Progress",css:"progress"},{index:13,name:"No Drop",css:"no-drop"},{index:14,name:"Forbidden",css:"not-allowed"},{index:15,name:"Help",css:"help"}],eo=[{index:0,name:"Arial",css:"Arial, sans-serif"},{index:1,name:"Arial Black",css:'"Arial Black", sans-serif'},{index:2,name:"Comic Sans MS",css:'"Comic Sans MS", cursive, sans-serif'},{index:3,name:"Courier New",css:'"Courier New", Courier, monospace'},{index:4,name:"Georgia",css:"Georgia, serif"},{index:5,name:"Impact",css:"Impact, Charcoal, sans-serif"},{index:6,name:"Lucida Console",css:'"Lucida Console", monospace'},{index:7,name:"Lucida Sans Unicode",css:'"Lucida Sans Unicode", sans-serif'},{index:8,name:"Palatino Linotype",css:'"Palatino Linotype", "Book Antiqua", Palatino, serif'},{index:9,name:"Symbol",css:"Symbol"},{index:10,name:"Tahoma",css:"Tahoma, Geneva, sans-serif"},{index:11,name:"Times New Roman",css:'"Times New Roman", Times, serif'},{index:12,name:"Trebuchet MS",css:'"Trebuchet MS", helvetica, sans-serif'},{index:13,name:"Verdana",css:"Verdana, Geneva, sans-serif"},{index:14,name:"Webdings",css:"Webdings"},{index:15,name:"Wingdings",css:"Wingdings"}];let to,oo,ro,ao,io,so;const lo=(n,e)=>{to.addEventListener(n,e)},co=(n,e)=>{to.removeEventListener(n,e)},uo=()=>to.getBoundingClientRect(),po=(n,e)=>{to.width=n,to.height=e},mo=(n,e,t,o)=>{oo[0].innerHTML=n,oo[1].innerHTML=Math.round((n+t)/4),oo[2].innerHTML=Math.round((n+t)/2),oo[3].innerHTML=Math.round((n+t)/4*3),oo[4].innerHTML=Math.round(n+t-1),ro[0].innerHTML=e,ro[1].innerHTML=Math.round((e+o)/4),ro[2].innerHTML=Math.round((e+o)/2),ro[3].innerHTML=Math.round((e+o)/4*3),ro[4].innerHTML=Math.round(e+o-1)},go=n=>{const e=n<0||n>15?1:n;to.style.cursor=no[e].css},yo=(n,e,t)=>{ao.beginPath(),ao.moveTo(n.x,n.y),ao.lineTo(e,t),ao.lineCap="round",ao.lineWidth=n.t,ao.strokeStyle=n.c,ao.stroke()},ho=(n,e,t)=>{ao.beginPath(),e.forEach((n,e)=>{0===e?ao.moveTo(n[0],n[1]):ao.lineTo(n[0],n[1])}),t?(ao.closePath(),ao.fillStyle=n.c,ao.fill()):(ao.lineCap="round",ao.lineWidth=n.t,ao.strokeStyle=n.c,ao.stroke())},xo=(n,e,t,o)=>{ao.beginPath(),e===t?ao.arc(n.x,n.y,e,0,2*Math.PI,!1):(ao.save(),ao.translate(n.x-e,n.y-t),ao.scale(e,t),ao.arc(1,1,1,0,2*Math.PI,!1),ao.restore()),o?(ao.fillStyle=n.c,ao.fill()):(ao.lineWidth=n.t,ao.strokeStyle=n.c,ao.stroke())},bo=(n,e,t,o,r)=>{ao.beginPath(),ao.moveTo(n.x,n.y),ao.lineTo(e,n.y),ao.lineTo(e,t),ao.lineTo(n.x,t),ao.closePath(),ao.fillStyle=o,ao.fill(),r&&(ao.lineCap="round",ao.lineWidth=n.t,ao.strokeStyle=n.c,ao.stroke())},Eo=(n,e)=>{const t=ao.getImageData(n,e,1,1);return 65536*t.data[0]+256*t.data[1]+t.data[2]},fo=(n,e,t,o)=>{const r=ao.createImageData(1,1);r.data[0]=t>>16&255,r.data[1]=t>>8&255,r.data[2]=255&t,r.data[3]=255,ao.putImageData(r,n,e),o&&(ao.putImageData(r,n-1,e),ao.putImageData(r,n,e-1),ao.putImageData(r,n-1,e-1))},To=n=>{ao.fillStyle=n,ao.fillRect(0,0,to.width,to.height)},Ro=(n,e,t,o,r)=>{const a=ao.getImageData(0,0,to.width,to.height),i=[],s=[0,-1,1,0],l=[-1,0,0,1];let c=0,d=4*(e*to.width+n);const u=65536*a.data[d]+256*a.data[d+1]+a.data[d+2];let p,m,g,y,h,x,b=n,E=e;for(i.push(b),i.push(E);i.length>0;)for(E=i.pop(),b=i.pop(),c=0;c<4;c+=1)p=b+s[c],m=E+l[c],y=p>0&&p<=to.width,h=m>0&&m<=to.height,y&&h&&(d=4*(m*to.width+p),g=65536*a.data[d],g+=256*a.data[d+1],g+=a.data[d+2],y=g!==t,h=g!==o||!r,x=g===u||r,y&&h&&x&&(d=4*(m*to.width+p),a.data[d]=(16711680&t)>>16,a.data[d+1]=(65280&t)>>8,a.data[d+2]=255&t,i.push(p),i.push(m)));ao.putImageData(a,0,0)},Oo=n=>{so.innerHTML+=n,io.innerHTML+=n,io.scrollTop=io.scrollHeight},wo=(n,e)=>{n&&(so.innerHTML=""),so.style.background=e},No=(n,e)=>{n&&(io.innerHTML=""),io.style.background=e},Io=(n,e)=>{Co[n]=e},So=()=>Ao.running,vo=()=>({stack:Lo.slice(0,Xo.stackTop+1),heap:Lo.slice(Xo.heapBase,Xo.heapMax),heapBase:Xo.heapBase}),Po=()=>{window.removeEventListener("keydown",Wo),window.removeEventListener("keyup",jo),window.removeEventListener("keypress",zo),window.removeEventListener("keyup",Yo.detect),window.removeEventListener("keydown",Yo.readline),co("contextmenu",qo),co("mousemove",Vo),co("touchmove",qo),co("touchmove",Vo),co("mousedown",qo),co("mousedown",$o),co("touchstart",$o),co("mouseup",Ko),co("touchend",Ko),go(1),Ao.running=!1,Ao.paused=!1,Co.halt()},Co={},Ao={running:!1,paused:!1},Lo=[],Do=[],ko=[],Fo=[],Mo=[],Bo=[],Uo=[],Ho=[],Xo={},Go={},Yo={},Wo=n=>{const e=n.keyCode||n.charCode;if(8===e){n.preventDefault();const e=Lo[1];e>0&&(Lo[e+1]!==Lo[e+2]&&(Lo[e+2]===e+3?Lo[e+2]=Lo[e]:Lo[e+2]-=1,Yo.keyecho&&(io.innerHTML=io.innerHTML.slice(0,-1))),Lo[e+2]>=Lo[e+1]?Do[0]=Lo[e+2]-Lo[e+1]:Do[0]=Lo[e+2]-Lo[e+1]+Lo[e]-e-2)}e>=37&&e<=40&&n.preventDefault(),ko[9]=e,ko[10]=128,n.shiftKey&&(ko[10]+=8),n.altKey&&(ko[10]+=16),n.ctrlKey&&(ko[10]+=32),Do[e]=ko[10]},jo=n=>{const e=n.keyCode||n.charCode;ko[9]=-Math.abs(ko[9]),ko[10]=-Math.abs(ko[10]),Do[e]=-Math.abs(Do[e])},zo=n=>{const e=n.keyCode||n.charCode,t=Lo[1];if(t>0){let n=0;n=Lo[t+2]===Lo[t]?t+3:Lo[t+2]+1,n!==Lo[t+1]&&(Lo[Lo[t+2]]=e,Lo[t+2]=n,Lo[t+2]>=Lo[t+1]?Do[0]=Lo[t+2]-Lo[t+1]:Do[0]=Lo[t+2]-Lo[t+1]+Lo[t]-t-2,Yo.keyecho&&(o=String.fromCharCode(e),io.innerHTML+=o))}var o},Vo=n=>{switch(n.type){case"mousemove":ko[7]=cr(n.clientX),ko[8]=dr(n.clientY);break;case"touchmove":case"touchstart":ko[7]=cr(n.touches[0].clientX),ko[8]=dr(n.touches[0].clientY)}},$o=n=>{const e=Date.now();switch(ko[4]=128,n.shiftKey&&(ko[4]+=8),n.altKey&&(ko[4]+=16),n.ctrlKey&&(ko[4]+=32),e-ko[11]<300&&(ko[4]+=64),ko[11]=e,n.type){case"mousedown":switch(ko[5]=cr(n.clientX),ko[6]=dr(n.clientY),n.button){case 0:ko[4]+=1,ko[1]=ko[4],ko[2]=-1,ko[3]=-1;break;case 1:ko[4]+=4,ko[1]=-1,ko[2]=-1,ko[3]=ko[4];break;case 2:ko[4]+=2,ko[1]=-1,ko[2]=ko[4],ko[3]=-1}break;case"touchstart":ko[5]=cr(n.touches[0].clientX),ko[6]=dr(n.touches[0].clientY),ko[4]+=1,ko[1]=ko[4],ko[2]=-1,ko[3]=-1,Vo(n)}},Ko=n=>{switch(ko[4]=-ko[4],n.type){case"mouseup":switch(n.button){case 0:ko[1]=-ko[1];break;case 1:ko[2]=-ko[3];break;case 2:ko[2]=-ko[2]}break;case"touchend":ko[1]=-ko[1]}},qo=n=>{n.preventDefault()},Qo=(n,e,t,o)=>{if(!Ao.running)return;if(Ao.paused)return void setTimeout(Qo,1,n,e,t,o);window.removeEventListener("keyup",Yo.detect),window.removeEventListener("keydown",Yo.readline);let r,a,i,s,l=0,c=0;try{for(;l<o.drawCountMax&&c<=o.codeCountMax;){switch(n[e][t]){case an.dupl:r=Mo.pop(),Mo.push(r,r);break;case an.swap:a=Mo.pop(),r=Mo.pop(),Mo.push(a,r);break;case an.rota:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(a,i,r);break;case an.incr:r=Mo.pop(),Mo.push(r+1);break;case an.decr:r=Mo.pop(),Mo.push(r-1);break;case an.not:r=Mo.pop(),Mo.push(~r);break;case an.and:a=Mo.pop(),r=Mo.pop(),Mo.push(r&a);break;case an.or:a=Mo.pop(),r=Mo.pop(),Mo.push(r|a);break;case an.xor:a=Mo.pop(),r=Mo.pop(),Mo.push(r^a);break;case an.band:a=Mo.pop(),r=Mo.pop(),Mo.push(r&&a);break;case an.bor:a=Mo.pop(),r=Mo.pop(),Mo.push(r||a);break;case an.neg:r=Mo.pop(),Mo.push(-r);break;case an.abs:r=Mo.pop(),Mo.push(Math.abs(r));break;case an.sign:r=Mo.pop(),Mo.push(Math.sign(r));break;case an.rand:r=Mo.pop(),Mo.push(Math.floor(Math.random()*Math.abs(r)));break;case an.seed:r=Mo.pop(),0===r?Mo.push(Yo.randseed):Yo.randseed=r;break;case an.plus:a=Mo.pop(),r=Mo.pop(),Mo.push(r+a);break;case an.subt:a=Mo.pop(),r=Mo.pop(),Mo.push(r-a);break;case an.mult:a=Mo.pop(),r=Mo.pop(),Mo.push(r*a);break;case an.divr:a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(r/a));break;case an.div:a=Mo.pop(),r=Mo.pop(),Mo.push(Math.floor(r/a));break;case an.mod:a=Mo.pop(),r=Mo.pop(),Mo.push(r%a);break;case an.divm:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(r/a*i));break;case an.sqrt:a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.sqrt(r)*a));break;case an.hyp:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.sqrt(r*r+a*a)*i));break;case an.root:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.pow(r/a,1/i)*s));break;case an.powr:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.pow(r/a,i)*s));break;case an.log:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.log(r/a)/Math.LN10*i));break;case an.alog:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.pow(10,r/a)*i));break;case an.ln:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.log(r/a)*i));break;case an.exp:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Mo.push(Math.round(Math.exp(r/a)*i));break;case an.sin:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=a/i*(2*Math.PI)/Lo[Lo[0]+4],Mo.push(Math.round(Math.sin(r)*s));break;case an.cos:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=a/i*(2*Math.PI)/Lo[Lo[0]+4],Mo.push(Math.round(Math.cos(r)*s));break;case an.tan:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=a/i*(2*Math.PI)/Lo[Lo[0]+4],Mo.push(Math.round(Math.tan(r)*s));break;case an.asin:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=Lo[Lo[0]+4]/(2*Math.PI),Mo.push(Math.round(Math.asin(a/i)*s*r));break;case an.acos:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=Lo[Lo[0]+4]/(2*Math.PI),Mo.push(Math.round(Math.acos(a/i)*s*r));break;case an.atan:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=Lo[Lo[0]+4]/(2*Math.PI),Mo.push(Math.round(Math.atan2(a,i)*s*r));break;case an.pi:r=Mo.pop(),Mo.push(Math.round(Math.PI*r));break;case an.ctos:r=Mo.pop(),Zo(String.fromCharCode(r));break;case an.itos:r=Mo.pop(),Zo(r.toString());break;case an.hexs:for(a=Mo.pop(),r=Mo.pop().toString(16).toUpperCase();r.length<a;)r="0"+r;Zo(r);break;case an.sval:i=Mo.pop(),a=Mo.pop(),r=Jo(a),s="#"===r[0]?isNaN(parseInt(r.slice(1),16))?i:parseInt(r.slice(1),16):isNaN(parseInt(r,10))?i:parseInt(r,10),Mo.push(s);break;case an.qtos:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=a/i,Zo(r.toFixed(s));break;case an.qval:i=Mo.pop(),a=Mo.pop(),r=Jo(Mo.pop()),s=isNaN(parseFloat(r))?i:parseFloat(r),Mo.push(Math.round(s*a));break;case an.scat:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Zo(r+a);break;case an.slen:r=Jo(Mo.pop()),Mo.push(r.length);break;case an.case:a=Mo.pop(),r=Jo(Mo.pop()),Zo(a>0?r.toUpperCase():a<0?r.toLowerCase():r);break;case an.copy:i=Mo.pop(),a=Mo.pop(),r=Jo(Mo.pop()),Zo(r.substr(a-1,i));break;case an.dels:s=Mo.pop(),i=Mo.pop(),a=Jo(Mo.pop()),r=a.substr(0,i-1)+a.substr(i-1+s),Zo(r);break;case an.inss:s=Mo.pop(),i=Jo(Mo.pop()),a=Jo(Mo.pop()),r=i.substr(0,s-1)+a+i.substr(s-1),Zo(r);break;case an.poss:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Mo.push(a.indexOf(r)+1);break;case an.repl:if(s=Mo.pop(),i=Jo(Mo.pop()),a=Jo(Mo.pop()),r=Jo(Mo.pop()),s>0){for(;s>0;)r=r.replace(a,i),s-=1;Zo(r)}else Zo(r.replace(new RegExp(a,"g"),i));break;case an.sasc:r=Jo(Mo.pop()),0===r.length?Mo.push(0):Mo.push(r.charCodeAt(0));break;case an.spad:for(s=Mo.pop(),i=Math.abs(s),a=Jo(Mo.pop()),r=Jo(Mo.pop());r.length+a.length<s;)s<0?r=a+r:r+=a;Zo(r);break;case an.eqal:a=Mo.pop(),r=Mo.pop(),Mo.push(r===a?-1:0);break;case an.noeq:a=Mo.pop(),r=Mo.pop(),Mo.push(r!==a?-1:0);break;case an.less:a=Mo.pop(),r=Mo.pop(),Mo.push(r<a?-1:0);break;case an.more:a=Mo.pop(),r=Mo.pop(),Mo.push(r>a?-1:0);break;case an.lseq:a=Mo.pop(),r=Mo.pop(),Mo.push(r<=a?-1:0);break;case an.mreq:a=Mo.pop(),r=Mo.pop(),Mo.push(r>=a?-1:0);break;case an.maxi:a=Mo.pop(),r=Mo.pop(),Mo.push(Math.max(r,a));break;case an.mini:a=Mo.pop(),r=Mo.pop(),Mo.push(Math.min(r,a));break;case an.seql:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Mo.push(r===a?-1:0);break;case an.sneq:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Mo.push(r!==a?-1:0);break;case an.sles:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Mo.push(r<a?-1:0);break;case an.smor:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Mo.push(r>a?-1:0);break;case an.sleq:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Mo.push(r<=a?-1:0);break;case an.smeq:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Mo.push(r>=a?-1:0);break;case an.smax:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Zo(Math.max(r,a));break;case an.smin:a=Jo(Mo.pop()),r=Jo(Mo.pop()),Zo(Math.min(r,a));break;case an.ldin:r=n[e][t+1],Mo.push(r),t+=1;break;case an.ldvg:r=n[e][t+1],Mo.push(Lo[r]),t+=1;break;case an.ldvv:r=n[e][t+1],a=n[e][t+2],Mo.push(Lo[Lo[r]+a]),t+=2;break;case an.ldvr:r=n[e][t+1],a=n[e][t+2],Mo.push(Lo[Lo[Lo[r]+a]]),t+=2;break;case an.ldag:r=n[e][t+1],Mo.push(r),t+=1;break;case an.ldav:r=n[e][t+1],a=n[e][t+2],Mo.push(Lo[r]+a),t+=2;break;case an.lstr:for(t+=1,r=n[e][t],a=t+r,i="";t<a;)t+=1,i+=String.fromCharCode(n[e][t]);Zo(i);break;case an.ldmt:Mo.push(Bo.length-1);break;case an.peek:r=Mo.pop(),Mo.push(Lo[r]);break;case an.poke:a=Mo.pop(),r=Mo.pop(),Lo[r]=a;break;case an.zero:r=n[e][t+1],a=n[e][t+2],Lo[Lo[r]+a]=0,t+=2;break;case an.stvg:r=Mo.pop(),Lo[n[e][t+1]]=r,t+=1;break;case an.stvv:r=n[e][t+1],a=n[e][t+2],i=Mo.pop(),Lo[Lo[r]+a]=i,t+=2;break;case an.stvr:r=n[e][t+1],a=n[e][t+2],i=Mo.pop(),Lo[Lo[Lo[r]+a]]=i,t+=2;break;case an.stmt:r=Mo.pop(),Bo.push(r),Xo.stackTop=Math.max(r,Xo.stackTop);break;case an.lptr:r=Mo.pop(),Mo.push(Lo[r]);break;case an.sptr:a=Mo.pop(),r=Mo.pop(),Lo[a]=r;break;case an.cptr:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),er(r,a,i);break;case an.zptr:a=Mo.pop(),r=Mo.pop(),nr(r,a);break;case an.test:break;case an.cstr:a=Mo.pop(),r=Mo.pop(),s=Lo[a-1],i=Lo[r],er(r,a,Math.min(i,s)+1);break;case an.jump:e=n[e][t+1]-1,t=-1;break;case an.ifno:0===Mo.pop()?(e=n[e][t+1]-1,t=-1):t+=1;break;case an.halt:return void Po();case an.subr:-1===Xo.heapGlobal&&(Xo.heapGlobal=Xo.heapPerm),Uo.push(e+1),e=n[e][t+1]-1,t=-1;break;case an.retn:e=Uo.pop(),t=-1;break;case an.pssr:Ho.push(n[e][t+1]),t+=1;break;case an.plsr:Ho.pop();break;case an.psrj:Mo.push(e+1);break;case an.plrj:Uo.pop(),e=Mo.pop()-1,t=-1;break;case an.memc:if(r=n[e][t+1],a=n[e][t+2],i=Bo.pop(),i+a>o.stackSize)throw Po(),_o("Memory stack has overflowed into memory heap. Probable cause is unterminated recursion.");Bo.push(Lo[r]),Xo.stackTop=Math.max(Lo[r],Xo.stackTop),Lo[r]=i,Bo.push(i+a),Xo.stackTop=Math.max(i+a,Xo.stackTop),t+=2;break;case an.memr:Bo.pop(),r=n[e][t+1],a=Bo.pop(),Bo.push(Lo[r]),Xo.stackTop=Math.max(Lo[r],Xo.stackTop),Lo[r]=a,t+=2;break;case an.hfix:Xo.heapPerm=Xo.heapTemp;break;case an.hclr:Xo.heapTemp=Xo.heapPerm;break;case an.hrst:Xo.heapGlobal>-1&&(Xo.heapTemp=Xo.heapGlobal,Xo.heapPerm=Xo.heapGlobal);break;case an.pnup:Yo.pendown=!1;break;case an.pndn:Yo.pendown=!0;break;case an.udat:Yo.update=!0,l=o.drawCountMax;break;case an.ndat:Yo.update=!1;break;case an.kech:r=0!==Mo.pop(),Yo.keyecho=r;break;case an.outp:i=0!==Mo.pop(),a=Mo.pop(),r=0!==Mo.pop(),wo(r,ur(a)),i?Co.show("output"):Co.show("canvas");break;case an.cons:a=Mo.pop(),r=0!==Mo.pop(),No(r,ur(a));break;case an.trac:case an.memw:Mo.pop();break;case an.dump:Co.dump(vo()),o.showMemory&&Co.show("memory");break;case an.time:r=Date.now(),r-=Yo.startTime,Mo.push(r);break;case an.tset:r=Date.now(),a=Mo.pop(),Yo.startTime=r-a;break;case an.wait:return r=Mo.pop(),(t+=1)===n[e].length&&(e+=1,t=0),void setTimeout(Qo,r,n,e,t,o);case an.tdet:return a=Mo.pop(),r=Mo.pop(),Mo.push(0),(t+=1)===n[e].length&&(e+=1,t=0),i=setTimeout(Qo,r,n,e,t,o),Yo.detect=tr.bind(null,a,i,n,e,t,o),void window.addEventListener("keyup",Yo.detect);case an.inpt:r=Mo.pop(),r<0?Mo.push(ko[-r]):Mo.push(Do[r]);break;case an.iclr:r=Mo.pop(),r<0?ko[-r]=-1:0===r?(Lo[Lo[1]+1]=Lo[1]+3,Lo[Lo[1]+2]=Lo[1]+3):Do[r]=-1;break;case an.bufr:r=Mo.pop(),r>0&&(a=Xo.heapTemp+4,Mo.push(Xo.heapTemp+1),Lo[Xo.heapTemp+1]=a+r,Lo[Xo.heapTemp+2]=a,Lo[Xo.heapTemp+3]=a,Lo.fill(0,a,a+r),Xo.heapTemp=a+r,Xo.heapMax=Math.max(Xo.heapTemp,Xo.heapMax));break;case an.read:r=Mo.pop(),a=Lo[1],i=Lo[Lo[1]],s="";let c=Lo[a+1],g=Lo[a+2];if(0===r)for(;c!==g;)s+=String.fromCharCode(Lo[c]),c=c<i?c+1:i+3;else{for(;c!==g&&s.length<=r;)s+=String.fromCharCode(Lo[c]),c<i?c+=1:c=i+3;Lo[a+1]=c}Zo(s);break;case an.rdln:return r=Math.pow(2,31)-1,(t+=1)===n[e].length&&(e+=1,t=0),a=setTimeout(Qo,r,n,e,t,o),Yo.readline=or.bind(null,a,n,e,t,o),void window.addEventListener("keydown",Yo.readline);case an.prnt:i=Mo.pop(),a=Mo.pop(),r=Jo(Mo.pop()),d=rr(),u=r,p=a,m=i,ao.textBaseline="top",ao.fillStyle=d.c,ao.font=`${m}pt ${eo[15&p].css}`,(16&p)>0&&(ao.font=`bold ${ao.font}`),(32&p)>0&&(ao.font=`italic ${ao.font}`),ao.fillText(u,d.x,d.y);break;case an.text:r=Jo(Mo.pop()),Oo(r),o.showOutput&&Co.show("output");break;case an.newl:Oo("\n");break;case an.fdir:case an.open:case an.clos:case an.fptr:case an.fbeg:case an.eof:case an.frds:case an.frln:case an.fwrs:case an.fwnl:break;case an.canv:Go.sizey=Mo.pop(),Go.sizex=Mo.pop(),Go.starty=Mo.pop(),Go.startx=Mo.pop(),mo(Go.startx,Go.starty,Go.sizex,Go.sizey),Lo[Lo[0]+1]=Math.round(Go.startx+Go.sizex/2),Lo[Lo[0]+2]=Math.round(Go.starty+Go.sizey/2),Lo[Lo[0]+3]=0,Co.turtx(Lo[Lo[0]+1]),Co.turty(Lo[Lo[0]+2]),Co.turtd(Lo[Lo[0]+3]),Fo.push([Lo[Lo[0]+1],Lo[Lo[0]+2]]),l=o.drawCountMax;break;case an.reso:a=Mo.pop(),r=Mo.pop(),Math.min(r,a)<=o.smallSize&&(r*=2,a*=2,Go.doubled=!0),Go.width=r,Go.height=a,po(r,a),To("#FFFFFF"),l=o.drawCountMax;break;case an.pixc:a=Mo.pop(),r=Mo.pop(),Mo.push(Eo(ar(r),ir(a)));break;case an.pixs:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),fo(ar(r),ir(a),i,Go.doubled),Yo.update&&(l+=1);break;case an.angl:r=Mo.pop(),a=Math.round(r+Lo[Lo[0]+3]*r/Lo[Lo[0]+4]),Lo[Lo[0]+3]=a%r,Lo[Lo[0]+4]=r,Co.turtd(a%r),Co.turta(r);break;case an.curs:r=Mo.pop(),go(r);break;case an.home:r=Go.startx+Go.sizex/2,a=Go.starty+Go.sizey/2,Lo[Lo[0]+1]=Math.round(r),Lo[Lo[0]+2]=Math.round(a),Lo[Lo[0]+3]=0,Co.turtx(Lo[Lo[0]+1]),Co.turty(Lo[Lo[0]+2]),Co.turtd(Lo[Lo[0]+3]),Fo.push([Lo[Lo[0]+1],Lo[Lo[0]+2]]);break;case an.setx:r=Mo.pop(),Lo[Lo[0]+1]=r,Co.turtx(r),Fo.push([Lo[Lo[0]+1],Lo[Lo[0]+2]]);break;case an.sety:r=Mo.pop(),Lo[Lo[0]+2]=r,Co.turty(r),Fo.push([Lo[Lo[0]+1],Lo[Lo[0]+2]]);break;case an.setd:r=Mo.pop()%Lo[Lo[0]+4],Lo[Lo[0]+3]=r,Co.turtd(r);break;case an.thik:r=Mo.pop(),Lo[Lo[0]+5]=r,Co.turtt(r);break;case an.colr:r=Mo.pop(),Lo[Lo[0]+6]=r,Co.turtc(ur(r));break;case an.rgb:r=Mo.pop(),r%=50,r<=0&&(r+=50),r=on.a[r-1].value,Mo.push(r);break;case an.mixc:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=Mo.pop();const y=(n,e)=>Math.round((n*i+e*s)/(i+s)),h=n=>Math.floor(n/65536),x=n=>Math.floor((65280&n)/256),b=n=>255&n,E=y(h(r),h(a)),f=y(x(r),x(a)),T=y(b(r),b(a));Mo.push(65536*E+256*f+T);break;case an.toxy:a=Mo.pop(),r=Mo.pop(),Lo[Lo[0]+1]=r,Lo[Lo[0]+2]=a,Co.turtx(r),Co.turty(a),Fo.push([r,a]);break;case an.mvxy:a=Mo.pop()+Lo[Lo[0]+2],r=Mo.pop()+Lo[Lo[0]+1],Lo[Lo[0]+1]=r,Lo[Lo[0]+2]=a,Co.turtx(r),Co.turty(a),Fo.push([r,a]);break;case an.drxy:a=Mo.pop()+Lo[Lo[0]+2],r=Mo.pop()+Lo[Lo[0]+1],Yo.pendown&&(yo(rr(),ar(r),ir(a)),Yo.update&&(l+=1)),Lo[Lo[0]+1]=r,Lo[Lo[0]+2]=a,Co.turtx(r),Co.turty(a),Fo.push([r,a]);break;case an.fwrd:i=Mo.pop(),s=Lo[Lo[0]+3],a=Math.cos(s*Math.PI/(Lo[Lo[0]+4]/2)),a=-Math.round(a*i),a+=Lo[Lo[0]+2],r=Math.sin(s*Math.PI/(Lo[Lo[0]+4]/2)),r=Math.round(r*i),r+=Lo[Lo[0]+1],Yo.pendown&&(yo(rr(),ar(r),ir(a)),Yo.update&&(l+=1)),Lo[Lo[0]+1]=r,Lo[Lo[0]+2]=a,Co.turtx(r),Co.turty(a),Fo.push([r,a]);break;case an.back:i=Mo.pop(),s=Lo[Lo[0]+3],a=Math.cos(s*Math.PI/(Lo[Lo[0]+4]/2)),a=Math.round(a*i),a+=Lo[Lo[0]+2],r=Math.sin(s*Math.PI/(Lo[Lo[0]+4]/2)),r=-Math.round(r*i),r+=Lo[Lo[0]+1],Yo.pendown&&(yo(rr(),ar(r),ir(a)),Yo.update&&(l+=1)),Lo[Lo[0]+1]=r,Lo[Lo[0]+2]=a,Co.turtx(r),Co.turty(a),Fo.push([r,a]);break;case an.left:r=(Lo[Lo[0]+3]-Mo.pop())%Lo[Lo[0]+4],Lo[Lo[0]+3]=r,Co.turtd(r);break;case an.rght:r=(Lo[Lo[0]+3]+Mo.pop())%Lo[Lo[0]+4],Lo[Lo[0]+3]=r,Co.turtd(r);break;case an.turn:a=Mo.pop(),r=Mo.pop(),Math.abs(a)>=Math.abs(r)?(i=Math.atan(-r/a),a>0?i+=Math.PI:r<0&&(i+=2,i*=Math.PI)):(i=Math.atan(a/r),r>0?i+=Math.PI:(i+=3,i*=Math.PI),i/=2),i=Math.round(i*Lo[Lo[0]+4]/Math.PI/2)%Lo[Lo[0]+4],Lo[Lo[0]+3]=i,Co.turtd(i);break;case an.rmbr:Fo.push([Lo[Lo[0]+1],Lo[Lo[0]+2]]);break;case an.frgt:Fo.length-=Mo.pop();break;case an.poly:i=Mo.pop(),a=Fo.length,r=i>a?0:a-i,ho(rr(),Fo.slice(r,a).map(lr),!1),Yo.update&&(l+=1);break;case an.pfil:i=Mo.pop(),a=Fo.length,r=i>a?0:a-i,ho(rr(),Fo.slice(r,a).map(lr),!0),Yo.update&&(l+=1);break;case an.circ:r=Mo.pop(),xo(rr(),ar(r+Go.startx),ir(r+Go.starty),!1),Yo.update&&(l+=1);break;case an.blot:r=Mo.pop(),xo(rr(),ar(r+Go.startx),ir(r+Go.starty),!0),Yo.update&&(l+=1);break;case an.elps:a=Mo.pop(),r=Mo.pop(),xo(rr(),ar(r+Go.startx),ir(a+Go.starty),!1),Yo.update&&(l+=1);break;case an.eblt:a=Mo.pop(),r=Mo.pop(),xo(rr(),ar(r+Go.startx),ir(a+Go.starty),!0),Yo.update&&(l+=1);break;case an.box:s=0!==Mo.pop(),i=Mo.pop(),a=Lo[Lo[0]+2]+Mo.pop(),r=Lo[Lo[0]+1]+Mo.pop(),bo(rr(),ar(r),ir(a),ur(i),s),Yo.update&&(l+=1);break;case an.blnk:r=Mo.pop(),To(ur(r)),Yo.update&&(l+=1);break;case an.rcol:i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Ro(r,a,i,0,!1),Yo.update&&(l+=1);break;case an.fill:s=Mo.pop(),i=Mo.pop(),a=Mo.pop(),r=Mo.pop(),Ro(r,a,i,s,!0),Yo.update&&(l+=1);break;case an.mxin:Mo.push(Math.pow(2,31)-1)}if(c+=1,t+=1,!n[e])throw Po(),_o("The program has tried to jump to a line that does not exist. This is either a bug in our compiler, or in your assembled code.");t===n[e].length&&(e+=1,t=0)}}catch(n){Co.error(n)}var d,u,p,m;setTimeout(Qo,0,n,e,t,o)},_o=n=>{const e=new Error(n);return e.type="Machine",e},Zo=n=>{const e=Array.from(n).map(n=>n.charCodeAt(0));Mo.push(Xo.heapTemp+1),Xo.heapTemp+=1,Lo[Xo.heapTemp]=n.length,e.forEach(n=>{Xo.heapTemp+=1,Lo[Xo.heapTemp]=n}),Xo.heapMax=Math.max(Xo.heapTemp,Xo.heapMax)},Jo=n=>{const e=Lo[n],t=n+1,o=Lo.slice(t,t+e).reduce((n,e)=>n+String.fromCharCode(e),"");return n+e+1>Xo.heapPerm&&(Xo.heapTemp=n+e),o},nr=(n,e)=>{e>0&&(Lo[n]=0,nr(n+1,e-1))},er=(n,e,t)=>{t>0&&(Lo[e]=Lo[n],er(n+1,e+1,t-1))},tr=(n,e,t,o,r,a,i)=>{(i.keyCode||i.charCode)===n&&(Mo.pop(),Mo.push(-1),window.clearTimeout(e),Qo(t,o,r,a))},or=(n,e,t,o,r,a)=>{if(13===(a.keyCode||a.charCode)){const a=Lo[1],i=Lo[Lo[1]];let s="",l=Lo[a+1],c=Lo[a+2];for(;l!==c&&13!==Lo[l];)s+=String.fromCharCode(Lo[l]),l=l<i?l+1:i+3;Lo[a+1]=l<i?l+1:i+3,Zo(s),window.clearTimeout(n),Qo(e,t,o,r)}},rr=()=>({x:ar(Lo[Lo[0]+1]),y:ir(Lo[Lo[0]+2]),d:Lo[Lo[0]+3],a:Lo[Lo[0]+4],t:sr(Lo[Lo[0]+5]),c:ur(Lo[Lo[0]+6])}),ar=n=>{const e=(n-Go.startx)*Go.width/Go.sizex;return Go.doubled?Math.round(e)+1:Math.round(e)},ir=n=>{const e=(n-Go.starty)*Go.height/Go.sizey;return Go.doubled?Math.round(e)+1:Math.round(e)},sr=n=>Go.doubled?2*n:n,lr=([n,e])=>[ar(n),ir(e)],cr=n=>{const{left:e,width:t}=uo(),o=(n-e)*Go.sizex/t+Go.startx;return Math.round(o)},dr=n=>{const{height:e,top:t}=uo(),o=(n-t)*Go.sizey/e+Go.starty;return Math.round(o)},ur=n=>`#${pr(n.toString(16))}`,pr=n=>n.length<6?pr(`0${n}`):n,mr=(n,e)=>{try{switch(n){case"ready":xr("language-changed",Er("language")),xr("show-canvas-changed",Er("show-canvas")),xr("show-output-changed",Er("show-output")),xr("show-memory-changed",Er("show-memory")),xr("draw-count-max-changed",Er("draw-count-max")),xr("code-count-max-changed",Er("code-count-max")),xr("small-size-changed",Er("small-size")),xr("stack-size-changed",Er("stack-size")),xr("group-changed",Er("group")),xr("simple-changed",Er("simple")),xr("intermediate-changed",Er("intermediate")),xr("advanced-changed",Er("advanced"));break;case"reset":window.localStorage.clear(),window.location.reload();break;case"new-program":br("name",""),br("compiled",!1),br("code",""),br("usage",[]),br("lexemes",[]),br("pcode",[]),xr("file-changed");break;case"new-skeleton-program":switch(br("name","Skeleton program"),br("compiled",!1),br("usage",[]),br("lexemes",[]),br("pcode",[]),Er("language")){case"BASIC":br("code","REM progname\n\nvar1%=100\nCOLOUR(GREEN)\nBLOT(var1%)\nEND");break;case"Pascal":br("code","PROGRAM progname;\nVAR var1: integer;\nBEGIN\n  var1:=100;\n  colour(green);\n  blot(var1)\nEND.");break;case"Python":br("code","# progname\n\ndef main():\n  var1=100\n  colour(green)\n  blot(var1)")}xr("file-changed");break;case"save-program":const r=new window.Blob([Er("code")],{type:"text/plain;charset=utf-8"}),a=document.createElement("a");a.setAttribute("href",URL.createObjectURL(r)),a.setAttribute("download",`${Er("name")||"filename"}.${Mn[Er("language")]}`),a.click();break;case"save-tgx-program":fr();const i=new Date,s=JSON.stringify({format:1,language:Er("language"),version:12,name:Er("name"),author:"unknown",date:`${i.getDate()}/${i.getMonth()}/${i.getFullYear()}`,time:`${i.getSeconds()}:${i.getMinutes()}:${i.getSeconds()}`,code:Er("code"),usage:Er("usage"),pcode:Er("pcode")},null,2),l=new window.Blob([s],{type:"text/plain;charset=utf-8"}),c=document.createElement("a");c.setAttribute("href",URL.createObjectURL(l)),c.setAttribute("download",`${Er("name")||"filename"}.tgx`),c.click();break;case"set-language":if(!Bn.includes(e))throw Rr(`Unknown language "${e}".`);br("language",e),xr("language-changed",Er("language"));break;case"set-example":if(!Dn[e])throw Rr(`Unknown example "${e}".`);Bn.forEach(n=>{br(`name-${n}`,Dn[e]),br(`compiled-${n}`,!1),br(`code-${n}`,Ln[n][e].trim()),br(`usage-${n}`,[]),br(`lexemes-${n}`,[]),br(`pcode-${n}`,[]),Fn[e]&&Fn[e][n]&&(br(`pcode-${n}`,Fn[e][n]),br(`compiled-${n}`,!0)),xr("file-changed")});break;case"test-all-examples":gr(0);break;case"load-remote-file":const d=e.split("/").pop();window.fetch(e).then(n=>{n.ok?n.text().then(n=>{mr("set-file",{filename:d,content:n})}):xr("error",Rr(`Couldn't retrieve file at "${e}".`))});break;case"set-file":const u=e.filename.split("."),p=u.pop(),m=u.join(".");switch(p){case"tbas":case"tgb":br("language","BASIC"),br("name-BASIC",m),br("compiled-BASIC",!1),br("code-BASIC",e.content.trim()),br("usage-BASIC",[]),br("lexemes-BASIC",[]),br("pcode-BASIC",[]);break;case"tpas":case"tgp":br("language","Pascal"),br("name-Pascal",m),br("compiled-Pascal",!1),br("code-Pascal",e.content.trim()),br("usage-Pascal",[]),br("lexemes-Pascal",[]),br("pcode-Pascal",[]);break;case"tpy":case"tgy":br("language","Python"),br("name-Python",m),br("compiled-Python",!1),br("code-Python",e.content.trim()),br("usage-Python",[]),br("lexemes-Python",[]),br("pcode-Python",[]);break;case"tgx":const n=Tr(e.content);br("language",n.language),br("name",n.name),br("compiled",!0),br("code",n.code.trim()),br("usage",n.usage),br("lexemes",zn(n.code.trim(),Er("language"))),br("pcode",n.pcode);break;default:throw Rr("Invalid file type.")}xr("language-changed",Er("language"));break;case"set-name":br("name",e),xr("name-changed",Er("name"));break;case"set-code":br("code",e),br("compiled",!1),xr("code-changed",{code:Er("code"),language:Er("language")});break;case"toggle-assembler":br("assembler",!Er("assembler")),xr("pcode-changed",{pcode:Er("pcode"),assembler:Er("assembler"),decimal:Er("decimal")});break;case"toggle-decimal":br("decimal",!Er("decimal")),xr("pcode-changed",{pcode:Er("pcode"),assembler:Er("assembler"),decimal:Er("decimal")});break;case"toggle-show-canvas":br("show-canvas",!Er("show-canvas")),xr("show-canvas-changed",Er("show-canvas"));break;case"toggle-show-output":br("show-output",!Er("show-output")),xr("show-output-changed",Er("show-output"));break;case"toggle-show-memory":br("show-memory",!Er("show-memory")),xr("show-memory-changed",Er("show-memory"));break;case"show-settings":xr("show-settings");break;case"set-draw-count-max":br("draw-count-max",e),xr("draw-count-max-changed",Er("draw-count-max"));break;case"set-code-count-max":br("code-count-max",e),xr("code-count-max-changed",Er("code-count-max"));break;case"set-small-size":br("small-size",e),xr("small-size-changed",Er("small-size"));break;case"set-stack-size":br("stack-size",e),xr("stack-size-changed",Er("stack-size"));break;case"reset-machine-options":br("show-canvas",!0),br("show-output",!1),br("show-memory",!0),br("draw-count-max",4),br("code-count-max",1e5),br("small-size",60),br("stack-size",2e4),xr("show-canvas-changed",Er("show-canvas")),xr("show-output-changed",Er("show-output")),xr("show-memory-changed",Er("show-memory")),xr("draw-count-max-changed",Er("draw-count-max")),xr("code-count-max-changed",Er("code-count-max")),xr("small-size-changed",Er("small-size")),xr("stack-size-changed",Er("stack-size"));break;case"set-group":br("group",e),xr("help-options-changed",Er("help-options"));break;case"toggle-simple":br("simple",!Er("simple")),xr("help-options-changed",Er("help-options"));break;case"toggle-intermediate":br("intermediate",!Er("intermediate")),xr("help-options-changed",Er("help-options"));break;case"toggle-advanced":br("advanced",!Er("advanced")),xr("help-options-changed",Er("help-options"));break;case"set-machine-elements":(({canvas:n,console:e,output:t})=>{oo=Array.from(n.querySelectorAll(".tse-canvas-right span")),ro=Array.from(n.querySelectorAll(".tse-canvas-left span")),to=n.querySelector("canvas"),ao=to.getContext("2d"),io=e,so=t})(e);break;case"machine-run-halt":So()?Po():(fr(),t=Er("pcode"),o=Er("machine-options"),po(1e3,1e3),No(!0,"#FFFFFF"),wo(!0,"#FFFFFF"),o.showCanvas&&Co.show("canvas"),Lo.length=2097152,Do.length=256,ko.length=16,Lo.fill(0),Do.fill(-1),ko.fill(-1),Fo.length=0,Mo.length=0,Bo.length=0,Uo.length=0,Ho.length=0,Xo.stackTop=0,Xo.heapGlobal=-1,Xo.heapBase=o.stackSize,Xo.heapTemp=Xo.heapBase,Xo.heapPerm=Xo.heapTemp,Xo.heapMax=Xo.heapTemp,Go.startx=0,Go.starty=0,Go.sizex=1e3,Go.sizey=1e3,Go.width=1e3,Go.height=1e3,Go.doubled=!1,mo(0,0,1e3,1e3),Yo.startTime=Date.now(),Yo.pendown=!0,Yo.update=!0,Yo.keyecho=!0,Yo.detect=null,Yo.readline=null,Yo.randseed=null,Ao.running=!0,Ao.paused=!1,window.addEventListener("keydown",Wo),window.addEventListener("keyup",jo),window.addEventListener("keypress",zo),lo("contextmenu",qo),lo("mousemove",Vo),lo("touchmove",qo),lo("touchmove",Vo),lo("mousedown",qo),lo("mousedown",$o),lo("touchstart",$o),lo("mouseup",Ko),lo("touchend",Ko),Co.run(),Qo(t,0,0,o));break;case"machine-play-pause":So()&&(Ao.paused?(Ao.paused=!1,Co.play()):(Ao.paused=!0,Co.pause()));break;case"dump-memory":xr("dump-memory",vo());break;default:console.log(`unknown signal '${n}'`)}}catch(n){xr("error",n)}var t,o},gr=n=>{const e=Object.keys(Dn);So()&&Po(),mr("set-example",e[n]),mr("machine-run-halt"),n<e.length-1&&window.setTimeout(gr.bind(null,n+1),3e3)},yr={},hr=(n,e)=>{yr[n]?yr[n].push(e):yr[n]=[e]},xr=(n,e)=>{yr[n]&&yr[n].forEach(n=>n(e)),"language-changed"===n&&(xr("file-changed"),xr("help-options-changed",Er("help-options"))),"file-changed"===n&&(xr("name-changed",Er("name")),xr("code-changed",{code:Er("code"),language:Er("language")}),xr("usage-changed",Er("usage")),xr("lexemes-changed",{lexemes:Er("lexemes"),language:Er("language")}),xr("pcode-changed",{pcode:Er("pcode"),assembler:Er("assembler"),decimal:Er("decimal")}))},br=(n,e)=>{switch(n){case"name":case"compiled":case"code":case"usage":case"lexemes":case"pcode":br(`${n}-${Er("language")}`,e);break;default:window.localStorage.setItem(n,JSON.stringify(e))}},Er=n=>{switch(n){case"name":case"compiled":case"code":case"usage":case"lexemes":case"pcode":return Er(`${n}-${Er("language")}`);case"file":return{name:Er("name"),compiled:Er("compiled"),code:Er("code"),usage:Er("usage"),pcode:Er("pcode")};case"machine-options":return{showCanvas:Er("show-canvas"),showOutput:Er("show-output"),showMemory:Er("show-memory"),drawCountMax:Er("draw-count-max"),codeCountMax:Er("code-count-max"),smallSize:Er("small-size"),stackSize:Er("stack-size")};case"help-options":return{language:Er("language"),group:Er("group"),simple:Er("simple"),intermediate:Er("intermediate"),advanced:Er("advanced")};default:return JSON.parse(window.localStorage.getItem(n))}},fr=()=>{if(!Er("compiled")){let n=Jt(Er("code"),Er("language"));br("usage",n.usage),br("lexemes",n.lexemes),br("pcode",n.pcode),br("compiled",!0),xr("usage-changed",n.usage),xr("lexemes-changed",{lexemes:n.lexemes,language:Er("language")}),xr("pcode-changed",{pcode:n.pcode,assembler:Er("assembler"),decimal:Er("decimal")})}},Tr=n=>{try{const e=JSON.parse(n);if(e.language&&e.name&&e.code&&e.usage&&e.pcode)return e;throw Rr("Invalid TGX file.")}catch(n){throw Rr("Invalid TGX file.")}},Rr=n=>{const e=new Error(n);return e.type="System",e};null===Er("language")&&br("language","Pascal"),Bn.forEach(n=>{null===Er(`name-${n}`)&&br(`name-${n}`,""),null===Er(`compiled-${n}`)&&br(`compiled-${n}`,!1),null===Er(`code-${n}`)&&br(`code-${n}`,""),null===Er(`usage-${n}`)&&br(`usage-${n}`,[]),null===Er(`lexemes-${n}`)&&br(`lexemes-${n}`,[]),null===Er(`pcode-${n}`)&&br(`pcode-${n}`,[])}),null===Er("assembler")&&br("assembler",!0),null===Er("decimal")&&br("decimal",!0),null===Er("show-canvas")&&br("show-canvas",!0),null===Er("show-output")&&br("show-output",!1),null===Er("show-memory")&&br("show-memory",!0),null===Er("draw-count-max")&&br("draw-count-max",4),null===Er("code-count-max")&&br("code-count-max",1e5),null===Er("small-size")&&br("small-size",60),null===Er("stack-size")&&br("stack-size",2e4),null===Er("group")&&br("group",0),null===Er("simple")&&br("simple",!0),null===Er("intermediate")&&br("intermediate",!1),null===Er("advanced")&&br("advanced",!1),Io("run",()=>xr("machine-started")),Io("halt",()=>xr("machine-stopped")),Io("play",()=>xr("machine-played")),Io("pause",()=>xr("machine-paused")),Io("turtx",n=>xr("turtx-changed",n)),Io("turty",n=>xr("turty-changed",n)),Io("turtd",n=>xr("turtd-changed",n)),Io("turta",n=>xr("turta-changed",n)),Io("turtt",n=>xr("turtt-changed",n)),Io("turtc",n=>xr("turtc-changed",n)),Io("show",n=>xr(`show-${n}`)),Io("dump",n=>xr("dump-memory",n)),Io("error",n=>xr("error",n)),window.fetch("https://www.turtle.ox.ac.uk/turtle/versions").then(n=>{n.json().then(n=>{"1.1.0"!==n.E&&xr("warning",{title:"Update Available",message:`This version of the Turtle System E is out of date. Please visit www.turtle.ox.ac.uk to download the latest version (v${n.E}).`})})});const Or=o("textarea");Or.wrap="off",Or.spellcheck=!1,Or.autocapitalize="off",Or.autocomplete="off",Or.autocorrect="off";const wr=o("ol"),Nr=o("code"),Ir=o("pre",null,[Nr]),Sr=o("div","tse-code",[Or,wr,Ir]);Or.addEventListener("keydown",n=>{if(9===n.keyCode){const e=Or.selectionStart,t=Or.value.slice(0,e),o=Or.value.slice(e);n.preventDefault(),Or.value=[t,o].join("  "),mr("set-code",Or.value),Or.selectionStart=e+2,Or.selectionEnd=e+2}}),Or.addEventListener("input",()=>{mr("set-code",Or.value)}),hr("file-changed",()=>{Sr.scrollTop=0,Sr.scrollLeft=0}),hr("code-changed",({code:n,language:e})=>{const t=n.split("\n");c(wr,t.map((n,e)=>o("li",null,e+1))),c(Nr,Pn(n,e)),window.requestAnimationFrame(()=>{Or.value=n,Or.style.height=`${wr.scrollHeight.toString(10)}px`,Or.style.width=`${Ir.scrollWidth.toString(10)}px`})});var vr=Sr;const Pr=r("radio","pcodeOptions1"),Cr=r("radio","pcodeOptions2"),Ar=r("radio","pcodeOptions1"),Lr=r("radio","pcodeOptions2"),Dr=o("div","tse-checkboxes",[o("label",null,[Pr,s("Assembler Code")]),o("label",null,[Cr,s("Decimal")]),o("label",null,[Ar,s("Machine Code")]),o("label",null,[Lr,s("Hexadecimal")])]),kr=o("ol","tse-pcode");Pr.addEventListener("change",()=>{mr("toggle-assembler")}),Ar.addEventListener("change",()=>{mr("toggle-assembler")}),Cr.addEventListener("change",()=>{mr("toggle-decimal")}),Lr.addEventListener("change",()=>{mr("toggle-decimal")}),hr("pcode-changed",({pcode:n,assembler:e,decimal:t})=>{e?Pr.setAttribute("checked","checked"):Ar.setAttribute("checked","checked"),t?Cr.setAttribute("checked","checked"):Lr.setAttribute("checked","checked"),c(kr,n.map(Fr.bind(null,e,t)))});const Fr=(n,e,t)=>{const r=n?Mr(t,0,e):t.reduce((n,t)=>n.concat(Br(t,e)),[]);for(;r.length%8>0;)r.push(o("div"));return o("li",null,r)},Mr=(n,e,t)=>{const o=rn[n[e]],r=o?[Br(o.str)]:[Br(n[e],t)];let a=0;if(o)if(o.args<0){let t=n[e+1];for(a+=1;a<=t;)a+=1,r.push(Br(String.fromCharCode(n[e+a])))}else for(;a<o.args;)a+=1,r.push(Br(n[e+a],t));return e+a<n.length-1?r.concat(Mr(n,e+a+1,t)):r},Br=(n,e)=>o("div",null,null==n?":(":void 0===e?n:e?n.toString(10):n.toString(16).toUpperCase()),Ur=i([],!1),Hr=o("button",null,"Save on My Computer"),Xr=o("button",null,"Save on turtle.ox.ac.uk"),Gr=o("button",null,"New Blank Program"),Yr=o("button",null,"New Skeleton Program"),Wr=o("button",null,"Open from My Computer"),jr=o("button",null,"Open from turtle.ox.ac.uk"),zr=o("select",null,kn.map((n,e)=>a(`Examples ${n.index} - ${n.title}`,e))),Vr=(n,e)=>a(`${e+1}. ${Dn[n]}`,n),$r=i(kn[0].examples.map(Vr),!0),Kr=r("file"),qr=o("div","tse-file-box",[o("label",null,"Current File"),Ur,o("div","tse-buttons",[Hr,Xr])]),Qr=o("div","tse-file-box",[o("label",null,"New File"),o("div","tse-buttons",[Gr,Yr])]),_r=o("div","tse-file-box",[o("label",null,"Open File"),o("div","tse-buttons",[Wr,jr])]),Zr=o("div","tse-file-box",[o("label",null,"Open Example"),zr,$r]);Ur.addEventListener("change",()=>{}),Hr.addEventListener("click",()=>{mr("save-program")}),Xr.addEventListener("click",()=>{}),Gr.addEventListener("click",()=>{mr("new-program")}),Yr.addEventListener("click",()=>{mr("new-skeleton-program")}),Wr.addEventListener("click",()=>{Kr.click()}),Kr.addEventListener("change",()=>{const n=Kr.files[0],e=new window.FileReader;e.onload=()=>{mr("set-file",{filename:n.name,content:e.result}),Kr.type="",Kr.type="file"},e.readAsText(n)}),jr.addEventListener("click",()=>{}),zr.addEventListener("change",()=>{c($r,kn[zr.value].examples.map(Vr))}),$r.addEventListener("change",()=>{mr("set-example",$r.value)});const Jr=o("thead",null,[o("tr",null,[o("th",null,"Expression"),o("th",null,"Level"),o("th",null,"Count"),o("th",null,"Program Lines")])]),na=o("tbody"),ea=o("table","tse-usage-table",[Jr,na]),ta=n=>o("tr",null,[o("td",null,n.name),o("td",null,n.level.toString(10)),o("td",null,n.count.toString(10)),o("td",null,n.lines.replace(/\s/g,", "))]),oa=n=>l([o("tr","tse-category-heading",`<th colspan="4">${n.title}</th>`),l(n.expressions.map(ta)),o("tr",null,[o("td"),o("td",null,"TOTAL:"),o("td",null,n.total.toString(10)),o("td")])]);hr("usage-changed",n=>{c(na,n.map(oa))});var ra=o("div","tse-usage",[ea]);const aa=o("thead",null,[o("tr",null,[o("th",null,"Lex"),o("th",null,"Line"),o("th","tse-wide","String"),o("th","tse-wide","Type")])]),ia=o("tbody"),sa=o("table","tse-lexemes-table",[aa,ia]),la=(n,e,t)=>o("tr",null,[o("td",null,`${t+1}`),o("td",null,e.line.toString(10)),o("td",null,[o("code",null,e.content?Pn(e.content,n):"")]),o("td",null,e.type)]);hr("lexemes-changed",({lexemes:n,language:e})=>{c(ia,n.map(la.bind(null,e)))});var ca=o("div","tse-lexemes",[sa]);const da=document.createElement("div");var ua=da;da.classList.add("tse-canvas"),da.innerHTML='\n  <div class="tse-canvas-left">\n    <div></div>\n    <div class="tse-canvas-coords">\n      <span>0</span>\n      <span>250</span>\n      <span>500</span>\n      <span>750</span>\n      <span>999</span>\n    </div>\n  </div>\n  <div class="tse-canvas-right">\n    <div class="tse-canvas-coords">\n      <span>0</span>\n      <span>250</span>\n      <span>500</span>\n      <span>750</span>\n      <span>999</span>\n    </div>\n    <div class="tse-canvas-wrapper">\n      <canvas width="1000" height="1000"></canvas>\n    </div>\n  </div>';const pa=document.createElement("pre");var ma=pa;pa.classList.add("tse-console");const ga=document.createElement("pre");var ya=ga;ga.classList.add("tse-output");const ha=o("select","tse-language-select",Bn.map(n=>a(n,n))),xa=((n,e)=>{const t=document.createElement("input");return t.type="text",t.classList.add(n),t.placeholder=e,t})("tse-filename-input","filename"),ba=o("div","tse-controls",[ha,xa]),Ea=o("button","tse-run-halt-button","RUN"),fa=o("button","tse-play-pause-button","&#10074;&#10074;"),Ta=o("dd","tse-turt-wide","500"),Ra=o("dd","tse-turt-wide","500"),Oa=o("dd","tse-turt-wide","0/360"),wa=o("dd","tse-turt","2"),Na=o("dd","tse-turt");Na.style.background="#000";const Ia=o("div","tse-controls",[o("div","tse-machine-buttons",[Ea,fa]),o("dl","tse-turtle-properties",[o("dt",null,"X"),Ta,o("dt",null,"Y"),Ra,o("dt",null,"Direction"),Oa,o("dt",null,"Thickness"),wa,o("dt",null,"Colour"),Na])]);xa.addEventListener("input",n=>{mr("set-name",xa.value)}),ha.addEventListener("change",n=>{mr("set-language",ha.value)}),Ea.addEventListener("click",n=>{Ea.blur(),mr("machine-run-halt",{canvas:ua,console:ma,output:ya})}),fa.addEventListener("click",n=>{fa.blur(),mr("machine-play-pause")}),hr("name-changed",n=>{xa.value=n}),hr("language-changed",n=>{ha.value=n}),hr("machine-started",()=>{Ea.innerHTML="HALT",fa.innerHTML="&#10074;&#10074;",Ta.innerHTML="500",Ra.innerHTML="500",Oa.innerHTML="0/360",wa.innerHTML="2",Na.style.background="#000"}),hr("machine-stopped",()=>{Ea.innerHTML="RUN",fa.innerHTML="&#10074;&#10074;"}),hr("machine-played",()=>{fa.innerHTML="&#10074;&#10074;"}),hr("machine-paused",()=>{fa.innerHTML="&#9658;"}),hr("turtx-changed",n=>{Ta.innerHTML=n.toString(10)}),hr("turty-changed",n=>{Ra.innerHTML=n.toString(10)}),hr("turtd-changed",n=>{const e=Oa.innerHTML.split("/");Oa.innerHTML=`${n.toString(10)}/${e[1]}`}),hr("turta-changed",n=>{const e=Oa.innerHTML.split("/");Oa.innerHTML=`${e[1]}/${n.toString(10)}`}),hr("turtt-changed",n=>{wa.innerHTML=n.toString(10)}),hr("turtc-changed",n=>{Na.style.background=n}),mr("set-machine-elements",{canvas:ua,console:ma,output:ya});const Sa=document.createElement("div"),va=document.createElement("div"),Pa=document.createElement("div"),Ca=document.createElement("div"),Aa=document.createElement("div"),La=document.createElement("div");Sa.classList.add("tse-buttons"),Sa.innerHTML='\n  <button data-bind="reset">Reset Defaults</button>',va.classList.add("tse-checkboxes"),va.innerHTML='\n  <label><input type="checkbox" data-bind="show-canvas">Show canvas on run</label>\n  <label><input type="checkbox" data-bind="show-output">Show output on write</label>\n  <label><input type="checkbox" data-bind="show-memory">Show memory on dump</label>',Pa.classList.add("tse-option"),Pa.innerHTML='\n  <label>Default number of simultaneous drawing commands:<input type="number" min="1" max="100" data-bind="draw-count-max"></label>\n  <p>Performing more than one drawing command at a time greatly increases drawing speed. Set to 1 to see every drawing change individually (slower). The pause and update/noupdate commands override this default.</p>',Ca.classList.add("tse-option"),Ca.innerHTML='\n  <label>Maximum number of commands before forced update:<input type="number" min="0" max="10000000" data-bind="code-count-max"></label>\n  <p>This number sets how many commands to allow before forcing the canvas to update. A higher number generally results in faster program execution, but some programs can cause the system to hang if they execute a large number of commands without ever updating the canvas.</p>',Aa.classList.add("tse-option"),Aa.innerHTML='\n  <label>Resolution at which to scale up the canvas:<input type="number" min="0" max="100" data-bind="small-size"></label>\n  <p>When a program sets the canvas resolution to this value or less (in either dimension), the machine will artificially double the resolution, and make everything twice as big. This helps very low resolution images to display more clearly and accurately. Set to 0 to disable.</p>',La.classList.add("tse-option"),La.innerHTML='\n  <label>Memory Stack size, after which Memory Heap starts:<input type="number" min="100" max="1000000" data-bind="stack-size"></label>\n  <p>The Memory Stack stores the variables of the program and subroutines, with string variables represented as pointers to the Memory Heap. The Memory Heap lies directly above the Memory Stack, and stores the actual strings. The Memory Stack should be sufficiently large to avoid the storage of program variables overflowing into the Memory Heap.</p>';const Da=Sa.querySelector('[data-bind="reset"]'),ka=va.querySelector('[data-bind="show-canvas"]'),Fa=va.querySelector('[data-bind="show-output"]'),Ma=va.querySelector('[data-bind="show-memory"]'),Ba=Pa.querySelector('[data-bind="draw-count-max"]'),Ua=Ca.querySelector('[data-bind="code-count-max"]'),Ha=Aa.querySelector('[data-bind="small-size"]'),Xa=La.querySelector('[data-bind="stack-size"]');Da.addEventListener("click",n=>{mr("reset-machine-options"),n.currentTarget.blur()}),ka.addEventListener("change",n=>{mr("toggle-show-canvas")}),Fa.addEventListener("change",n=>{mr("toggle-show-output")}),Ma.addEventListener("change",n=>{mr("toggle-show-memory")}),Ba.addEventListener("change",n=>{mr("set-draw-count-max",Ba.value)}),Ua.addEventListener("change",n=>{mr("set-code-count-max",Ua.value)}),Ha.addEventListener("change",n=>{mr("set-small-size",Ha.value)}),Xa.addEventListener("change",n=>{mr("set-stack-size",Xa.value)}),hr("show-settings",()=>{u("Settings")}),hr("show-canvas-changed",n=>{ka.checked=n}),hr("show-output-changed",n=>{Fa.checked=n}),hr("show-memory-changed",n=>{Ma.checked=n}),hr("draw-count-max-changed",n=>{Ba.value=n}),hr("code-count-max-changed",n=>{Ua.value=n}),hr("small-size-changed",n=>{Ha.value=n}),hr("stack-size-changed",n=>{Xa.value=n});const Ga=document.createElement("div"),Ya=document.createElement("div"),Wa=document.createElement("div");Ga.classList.add("tse-buttons"),Ga.innerHTML='\n  <button data-bind="dump">Show Current State</button>',Ya.classList.add("tse-memory-container"),Ya.innerHTML='\n  <table>\n    <thead>\n      <tr>\n        <td>Stack</td>\n        <th>+0</th>\n        <th>+1</th>\n        <th>+2</th>\n        <th>+3</th>\n        <th>+4</th>\n        <th>+5</th>\n        <th>+6</th>\n        <th>+7</th>\n      </tr>\n    </thead>\n    <tbody data-bind="stack"></tbody>\n  </table>',Wa.classList.add("tse-memory-container"),Wa.innerHTML='\n  <table>\n    <thead>\n      <tr>\n        <td>Heap</td>\n        <th>+0</th>\n        <th>+1</th>\n        <th>+2</th>\n        <th>+3</th>\n        <th>+4</th>\n        <th>+5</th>\n        <th>+6</th>\n        <th>+7</th>\n      </tr>\n    </thead>\n    <tbody data-bind="heap"></tbody>\n  </table>';const ja=Ga.querySelector('[data-bind="dump"]'),za=Ya.querySelector('[data-bind="stack"]'),Va=Wa.querySelector('[data-bind="heap"]');ja.addEventListener("click",n=>{mr("dump-memory"),ja.blur()}),hr("dump-memory",n=>{const e=[],t=[];for(;n.stack.length>0;)e[e.length]=n.stack.splice(0,8);for(;n.heap.length>0;)t[t.length]=n.heap.splice(0,8);c(za,e.map($a.bind(null,0))),c(Va,t.map($a.bind(null,0)))});const $a=(n,e,t)=>{const r=e.map(n=>o("td",null,n.toString(10)));return r.unshift(o("th",null,(n+8*t).toString(10))),o("tr",null,r)};t(63);const Ka=document.getElementById("tse");Ka.classList.add("tse"),Ka.classList.add("tse-browser");const qa=o("a","tse-browser-tab","Program"),Qa=o("a","tse-browser-tab","Machine"),_a=(n=>{const e=[ba,d([{label:"File",active:!1,content:[qr,Qr,_r,Zr]},{label:"Code",active:!0,content:[vr]},{label:"Usage",active:!1,content:[ra]},{label:"Lexemes",active:!1,content:[ca]},{label:"PCode",active:!1,content:[Dr,kr]}])],t=o("div","tse-browser-tab-pane",e);return t.classList.add("tse-program"),hr("file-changed",()=>{u("Code")}),t})(),Za=(()=>{const n=[Ia,d([{label:"Settings",active:!1,content:[o("div","tse-settings",[Sa,va,Pa,Ca,Aa,La])]},{label:"Canvas",active:!0,content:[ua,ma]},{label:"Output",active:!1,content:[ya]},{label:"Memory",active:!1,content:[Ga,Ya,Wa]}])],e=o("div","tse-browser-tab-pane",n);return e.classList.add("tse-machine"),hr("show-settings",()=>{u("Settings")}),hr("show-canvas",()=>{u("Canvas")}),hr("show-output",()=>{u("Output")}),hr("show-memory",()=>{u("Memory")}),e})(),Ja=o("nav","tse-browser-tab-list",[qa,Qa]),ni=o("div","tse-browser-tab-panes",[_a,Za]),ei=(()=>{const n=o("h2"),e=o("p"),t=o("button",null,"OK"),r=o("div","tse-overlay",[o("div","tse-modal",[o("div","tse-modal-head",[n]),o("div","tse-modal-body",[e,o("div","tse-modal-buttons",[t])])])]);return r.classList.add("tse"),t.addEventListener("click",()=>{r.classList.remove("tse-open")}),hr("error",t=>{window.console.log(t),t.lexeme&&window.console.log(t.lexeme),t.type?(n.innerHTML=`${t.type} Error`,e.innerHTML=t.message,t.lexeme&&(n.innerHTML+=`: "${t.lexeme.content}", line ${t.lexeme.line}`)):(n.innerHTML="System Error",e.innerHTML="An unexpected error has occured, suggesting there is a bug in the system. Please contact us with details of what you were doing when this message appeared, and we will do our best to locate and fix the bug."),r.classList.add("tse-open")}),hr("warning",n=>{r.querySelector("h2").innerHTML=n.title,r.querySelector("p").innerHTML=n.message,r.classList.add("tse-open")}),r})();qa.addEventListener("click",n=>{Qa.classList.remove("active"),qa.classList.add("active"),Za.classList.remove("active"),_a.classList.add("active")}),Qa.addEventListener("click",n=>{qa.classList.remove("active"),Qa.classList.add("active"),_a.classList.remove("active"),Za.classList.add("active")}),Qa.classList.add("active"),Za.classList.add("active"),c(Ka,[Ja,ni]),document.body.appendChild(ei),Ka.dataset.language&&mr("set-language",Ka.dataset.language),Ka.dataset.example&&mr("set-example",Ka.dataset.example),Ka.dataset.file&&mr("load-remote-file",Ka.dataset.file),mr("ready")}]);